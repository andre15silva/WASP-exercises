diff --git a/tmp/11767ebd-1617-46bd-a639-d6bb18bfa7d9_buggy.java b/tmp/2bef23c4-f45c-4af7-9d55-05ed2e668642_fixed.java
index 388771b..3c2a8d9 100644
--- a/tmp/11767ebd-1617-46bd-a639-d6bb18bfa7d9_buggy.java
+++ b/tmp/2bef23c4-f45c-4af7-9d55-05ed2e668642_fixed.java
@@ -1,37 +1,43 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
-    public TimeSeries createCopy(int start, int end)
-            throws CloneNotSupportedException {
+public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
-        if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+    if (end < start || end >= this.data.size()) {
+        throw new IllegalArgumentException("Requires start <= end, and end < data size.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
-                }
-                catch (SeriesException e) {
+            } catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
+    // Update the min and max Y values for the copied TimeSeries
+    copy.updateMinMaxY();
     return copy;
 }
+
+private void updateMinMaxY() {
+    if (this.data.isEmpty()) {
+        this.minY = Double.NaN; // or any default value
+        this.maxY = Double.NaN; // or any default value
+        return;
+    }
+    this.minY = Double.POSITIVE_INFINITY;
+    this.maxY = Double.NEGATIVE_INFINITY;
+    for (TimeSeriesDataItem item : this.data) {
+        double y = item.getValue();
+        if (y < this.minY) {
+            this.minY = y;
+        }
+        if (y > this.maxY) {
+            this.maxY = y;
+        }
+    }
+}
\ No newline at end of file
