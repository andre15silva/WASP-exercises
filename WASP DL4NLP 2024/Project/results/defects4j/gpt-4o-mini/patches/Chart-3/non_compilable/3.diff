diff --git a/tmp/091e4758-7c35-41a3-8474-bebfabc31ad1_buggy.java b/tmp/ae16c6f4-2c90-4c19-b9ad-8e58b8d32463_fixed.java
index 388771b..c6e438b 100644
--- a/tmp/091e4758-7c35-41a3-8474-bebfabc31ad1_buggy.java
+++ b/tmp/ae16c6f4-2c90-4c19-b9ad-8e58b8d32463_fixed.java
@@ -1,37 +1,42 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
-        if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+    if (end < start || end >= this.data.size()) {
+        throw new IllegalArgumentException("Requires start <= end and end < data size.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
             }
             catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
+    // Update min and max Y values for the new copy.
+    if (copy.data.size() > 0) {
+        double minY = Double.MAX_VALUE;
+        double maxY = -Double.MAX_VALUE;
+        for (Object obj : copy.data) {
+            TimeSeriesDataItem dataItem = (TimeSeriesDataItem) obj;
+            double value = dataItem.getValue();
+            if (value < minY) {
+                minY = value;
+            }
+            if (value > maxY) {
+                maxY = value;
+            }
+        }
+        copy.minY = minY; // Make sure to implement a minY field in TimeSeries.
+        copy.maxY = maxY; // Make sure to implement a maxY field in TimeSeries.
+    }
     return copy;
 }
\ No newline at end of file
