diff --git a/tmp/a32d69b1-5acb-411f-a041-23c86e359256_buggy.java b/tmp/3b7587e7-e985-4c63-8b87-c5ea4f0ecc7b_fixed.java
index 388771b..038ca84 100644
--- a/tmp/a32d69b1-5acb-411f-a041-23c86e359256_buggy.java
+++ b/tmp/3b7587e7-e985-4c63-8b87-c5ea4f0ecc7b_fixed.java
@@ -1,37 +1,45 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
-        if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+    if (end < start || end >= this.data.size()) {
+        throw new IllegalArgumentException("Requires start <= end and end < data size.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
-                }
-                catch (SeriesException e) {
+            } catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
+    // Update min and max
+    copy.updateMinMax();
     return copy;
 }
+
+// Method to correctly update min and max Y values after copying
+private void updateMinMax() {
+    if (this.data.isEmpty()) {
+        this.minY = Double.NaN; // or any designated value to show no data
+        this.maxY = Double.NaN;
+    } else {
+        this.minY = Double.MAX_VALUE;
+        this.maxY = Double.MIN_VALUE;
+        for (TimeSeriesDataItem item : this.data) {
+            double value = item.getValue();
+            if (value < this.minY) {
+                this.minY = value;
+            }
+            if (value > this.maxY) {
+                this.maxY = value;
+            }
+        }
+    }
+}
\ No newline at end of file
