diff --git a/tmp/66c69e5c-3a4b-4005-b5fd-062ed1f91263_buggy.java b/tmp/3e846884-c0d1-4d1e-8e2d-43b3fb64a9a3_fixed.java
index 1bbc082..c3a966f 100644
--- a/tmp/66c69e5c-3a4b-4005-b5fd-062ed1f91263_buggy.java
+++ b/tmp/3e846884-c0d1-4d1e-8e2d-43b3fb64a9a3_fixed.java
@@ -1,36 +1,21 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
-        if (length < 9) {
+    // Ensure that the length check accounts for overhead for binary encoding
+    if (length < Long.BYTES) {
+        throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+    }
+
     formatLongBinary(value, buf, offset, length, negative);
-        }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
     
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+    buf[offset + length - 1] = (byte) (negative ? 0xff : 0x80); // Store the sign or indication in last byte
     return offset + length;
 }
\ No newline at end of file
