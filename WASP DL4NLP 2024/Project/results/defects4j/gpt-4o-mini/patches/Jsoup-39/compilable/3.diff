diff --git a/tmp/a788af0f-41b4-489d-a243-7f4ef724f0d2_buggy.java b/tmp/181670b7-2b98-49b4-8e0b-bd1c6cc5f198_fixed.java
index c4b260c..aa320a0 100644
--- a/tmp/a788af0f-41b4-489d-a243-7f4ef724f0d2_buggy.java
+++ b/tmp/181670b7-2b98-49b4-8e0b-bd1c6cc5f198_fixed.java
@@ -1,51 +1,49 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    if (charsetName == null) {
+        // Default to UTF-8
+        charsetName = defaultCharset;
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+        
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        if (meta != null) {
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
+            }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = parser.parseInput(docData, baseUri);
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
+        doc = parser.parseInput(docData, baseUri);
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+    // UTF-8 BOM indicator. takes precedence over everything else.
+    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
         docData = docData.substring(1);
-            charsetName = defaultCharset;
     }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
+    
+    // Update document charset if created from the parsed data.
     doc.outputSettings().charset(charsetName);
-        }
+
     return doc;
 }
\ No newline at end of file
