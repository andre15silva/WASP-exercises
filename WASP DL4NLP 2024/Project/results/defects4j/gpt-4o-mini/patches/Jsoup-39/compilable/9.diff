diff --git a/tmp/5c6be400-516f-44d2-a1f7-7532431ee3a5_buggy.java b/tmp/4817efe5-d769-4a6a-8e6c-1f87468870b4_fixed.java
index c4b260c..da67654 100644
--- a/tmp/5c6be400-516f-44d2-a1f7-7532431ee3a5_buggy.java
+++ b/tmp/4817efe5-d769-4a6a-8e6c-1f87468870b4_fixed.java
@@ -1,51 +1,56 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+    // Use defaultCharset if charsetName is null
+    if (charsetName == null) {
+        charsetName = defaultCharset;
+    }
+
+    // Decode the byteData with the specified or default charset
+    docData = Charset.forName(charsetName).decode(byteData).toString();
+
+    // Check for BOM (Byte Order Mark)
+    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+        docData = docData.substring(1); // Discard BOM
+        // If charsetName was not provided, we set it to UTF-8
+        if (charsetName.equals(defaultCharset)) {
+            charsetName = "UTF-8"; // Ensuring we set it to UTF-8 explicitly
+        }
+    }
+
+    // Parse the document
     doc = parser.parseInput(docData, baseUri);
+    doc.outputSettings().charset(charsetName);
+
+    // Check for meta charset in the document if charsetName was not initially provided
+    if (charsetName.equals(defaultCharset)) {
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+        if (meta != null) {
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
+            }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
-        if (doc == null) {
                 doc = parser.parseInput(docData, baseUri);
                 doc.outputSettings().charset(charsetName);
             }
+        }
+    }
+
     return doc;
 }
\ No newline at end of file
