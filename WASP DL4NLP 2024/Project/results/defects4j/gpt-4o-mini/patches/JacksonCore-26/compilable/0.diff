diff --git a/tmp/5441175b-64d1-4e22-8bab-4bfceda773c1_buggy.java b/tmp/f068cac5-d4e3-4a67-8606-1b5fe8786925_fixed.java
index 0722547..450cae9 100644
--- a/tmp/5441175b-64d1-4e22-8bab-4bfceda773c1_buggy.java
+++ b/tmp/f068cac5-d4e3-4a67-8606-1b5fe8786925_fixed.java
@@ -1,26 +1,28 @@
 @Override
 public void feedInput(byte[] buf, int start, int end) throws IOException
 {
     // Must not have remaining input
     if (_inputPtr < _inputEnd) {
         _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
     }
     if (end < start) {
         _reportError("Input end (%d) may not be before start (%d)", end, start);
     }
     // and shouldn't have been marked as end-of-input
     if (_endOfInput) {
         _reportError("Already closed, can not feed more input");
     }
+    
     // Time to update pointers first
-        _currInputProcessed += _origBufferLen;
+    int newInputLength = end - start;
+    _currInputProcessed += newInputLength;  // Update based on new input length
 
-        // Also need to adjust row start, to work as if it extended into the past wrt new buffer
-        _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+    // Update column position accurately
+    _currInputRowStart += (_inputEnd - (_inputPtr + newInputLength)); // Adjust row start based on incoming input length
 
     // And then update buffer settings
     _inputBuffer = buf;
     _inputPtr = start;
     _inputEnd = end;
-        _origBufferLen = end - start;
+    _origBufferLen = newInputLength; // Update original buffer length to the new input length
 }
\ No newline at end of file
