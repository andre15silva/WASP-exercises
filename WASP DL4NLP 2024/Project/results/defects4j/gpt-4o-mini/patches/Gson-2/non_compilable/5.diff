diff --git a/tmp/0a10d353-9a39-4471-90e5-5fc5659f1810_buggy.java b/tmp/724d1f3a-d476-423c-b308-378fc6d0645d_fixed.java
index 6e45f80..6cb27dd 100644
--- a/tmp/0a10d353-9a39-4471-90e5-5fc5659f1810_buggy.java
+++ b/tmp/724d1f3a-d476-423c-b308-378fc6d0645d_fixed.java
@@ -1,21 +1,32 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
-        final Class<? super T2> requestedType = typeToken.getRawType();
+      final Class<?> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
+      // Ensure that the TypeAdapter is for the correct type
+      TypeAdapter<T2> adapter = (TypeAdapter<T2>) typeAdapter;
+      return new TypeAdapter<T2>() {
+        @Override
+        public void write(JsonWriter out, T2 value) throws IOException {
+          adapter.write(out, value);
+        }
 
+        @Override
+        public T2 read(JsonReader in) throws IOException {
+          try {
+            return adapter.read(in);
+          } catch (JsonSyntaxException e) {
+            throw new JsonSyntaxException("Expected a " + clazz.getName() + " but was " + requestedType.getName(), e);
+          }
+        }
+      };
     }
     @Override public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
