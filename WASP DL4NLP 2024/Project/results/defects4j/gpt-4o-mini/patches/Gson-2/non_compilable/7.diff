diff --git a/tmp/2aa3ff3e-81a1-452c-a658-8db2f98ab18e_buggy.java b/tmp/3ec17162-8e73-428c-b358-8de4a822bae7_fixed.java
index 6e45f80..8e908a7 100644
--- a/tmp/2aa3ff3e-81a1-452c-a658-8db2f98ab18e_buggy.java
+++ b/tmp/3ec17162-8e73-428c-b358-8de4a822bae7_fixed.java
@@ -1,21 +1,34 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
+      // Ensure that we are using the correct type adapter based on the actual type of the object
+      TypeAdapter<T2> adapter = (TypeAdapter<T2>) typeAdapter;
+      return new TypeAdapter<T2>() {
+        @Override
+        public void write(JsonWriter out, T2 value) throws IOException {
+          adapter.write(out, value);
+        }
 
+        @Override
+        public T2 read(JsonReader in) throws IOException {
+          // Perform a runtime check on the actual JSON element
+          JsonElement jsonElement = JsonParser.parseReader(in);
+          if (!clazz.isInstance(jsonElement)) {
+            throw new JsonSyntaxException("Expected a " + clazz.getName() + 
+                " but was " + jsonElement.getClass().getName());
+          }
+          return adapter.read(new JsonReader(new StringReader(jsonElement.toString())));
+        }
+      };
     }
     @Override public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
