diff --git a/tmp/86eb5836-9aee-4a89-84e6-b3fb280ce712_buggy.java b/tmp/4d16dfbf-f99c-4fe9-b726-b976cbb168d9_fixed.java
index 6e45f80..eec5bb5 100644
--- a/tmp/86eb5836-9aee-4a89-84e6-b3fb280ce712_buggy.java
+++ b/tmp/4d16dfbf-f99c-4fe9-b726-b976cbb168d9_fixed.java
@@ -1,21 +1,34 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
-          return null;
+        return null; // Not a match, return null
       }
-        return (TypeAdapter<T2>) typeAdapter;
       
+      // Use a custom TypeAdapter that checks the type during deserialization
+      return (TypeAdapter<T2>) new TypeAdapter<T2>() {
+        @Override
+        public void write(JsonWriter out, T2 value) throws IOException {
+          typeAdapter.write(out, (T1) value); // Cast value to T1
         }
+
+        @Override
+        public T2 read(JsonReader in) throws IOException {
+          // Add type validation here, ensuring that the expected type T2 matches T1
+          T1 value = typeAdapter.read(in);
+          if (value != null && !clazz.isInstance(value)) {
+            throw new JsonParseException("Expected a " + clazz.getName() + " but was " + value.getClass().getName());
+          }
+          return (T2) value; // Cast to T2 for final return
+        }
+      };
+    }
+    
     @Override public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
