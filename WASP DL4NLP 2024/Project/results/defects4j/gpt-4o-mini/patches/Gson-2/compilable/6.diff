diff --git a/tmp/bdb56cf2-47c1-4ce9-ad64-29b58a9fdc15_buggy.java b/tmp/1b3d1de6-7254-47fd-9b8b-750f6b078d5c_fixed.java
index 6e45f80..b17e78d 100644
--- a/tmp/bdb56cf2-47c1-4ce9-ad64-29b58a9fdc15_buggy.java
+++ b/tmp/1b3d1de6-7254-47fd-9b8b-750f6b078d5c_fixed.java
@@ -1,21 +1,28 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
+      // Instead of directly returning the typeAdapter, we need to create a new TypeAdapter
+      // that handles the type conversion correctly.
+      return new TypeAdapter<T2>() {
+        @Override
+        public void write(JsonWriter out, T2 value) throws IOException {
+          ((TypeAdapter<T1>) typeAdapter).write(out, (T1) value);
+        }
 
+        @Override
+        public T2 read(JsonReader in) throws IOException {
+          return (T2) ((TypeAdapter<T1>) typeAdapter).read(in);
+        }
+      };
     }
     @Override public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
