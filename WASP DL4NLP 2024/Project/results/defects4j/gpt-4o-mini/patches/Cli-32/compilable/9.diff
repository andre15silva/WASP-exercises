diff --git a/tmp/d0d6d0db-5aa9-4780-ac47-58f28ef09afb_buggy.java b/tmp/4de26917-d9c3-4113-89d6-1568753a12b0_fixed.java
index 14b78fb..6a3b170 100644
--- a/tmp/d0d6d0db-5aa9-4780-ac47-58f28ef09afb_buggy.java
+++ b/tmp/4de26917-d9c3-4113-89d6-1568753a12b0_fixed.java
@@ -1,56 +1,43 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
 protected int findWrapPos(String text, int width, int startPos)
 {
-        int pos;
+    if (startPos >= text.length()) {
+        return -1;
+    }
 
     // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
+    int pos;
+    if ((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width) {
         return pos + 1;
     }
-        else if (startPos + width >= text.length())
-        {
+    else if ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width) {
+        return pos + 1;
+    }
+    else if (startPos + width >= text.length()) {
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+    pos = startPos + width - 1; // Adjust to check the character right before startPos + width
 
     char c;
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
+    while (pos >= startPos && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
         --pos;
     }
 
     // if we found it - just return
-        if (pos > startPos)
-        {
+    if (pos >= startPos) { // Ensure we check >= startPos
         return pos;
     }
     
     // if we didn't find one, simply chop at startPos+width
     pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
+
+    // Since we want to return the next position after the last character we are checking,
+    // we need to ensure we do not go out of bounds.
+    while (pos < text.length() && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
         ++pos;
     }
+    
     return pos == text.length() ? -1 : pos;
 }
\ No newline at end of file
