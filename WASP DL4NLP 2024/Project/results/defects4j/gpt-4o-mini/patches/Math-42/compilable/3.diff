diff --git a/tmp/540fb457-87ab-428f-84b9-fab60341d813_buggy.java b/tmp/0e86802a-bc1b-4648-9eea-35d47e1f12b8_fixed.java
index efa499e..96dbecb 100644
--- a/tmp/540fb457-87ab-428f-84b9-fab60341d813_buggy.java
+++ b/tmp/0e86802a-bc1b-4648-9eea-35d47e1f12b8_fixed.java
@@ -1,35 +1,29 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+      Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null; // Changed > 0 to >= 0
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
+          if (basicRow != null && basicRows.contains(basicRow)) { // Added null check for basicRow here
               coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
           } else {
+              if (basicRow != null) {
                   basicRows.add(basicRow);
                   coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+                      getEntry(basicRow, getRhsOffset()) -
                       (restrictToNonNegative ? 0 : mostNegative);
+              } else {
+                  coefficients[i] = 0; // Set coefficient to 0 if basicRow is null
+              }
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
