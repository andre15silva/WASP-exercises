diff --git a/tmp/1b82d343-51a8-4225-8dfe-3463ebacadab_buggy.java b/tmp/00f94669-a458-4c30-a4d5-e776638359be_fixed.java
index 4b163f6..41c70c1 100644
--- a/tmp/1b82d343-51a8-4225-8dfe-3463ebacadab_buggy.java
+++ b/tmp/00f94669-a458-4c30-a4d5-e776638359be_fixed.java
@@ -1,28 +1,19 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long totalSkipped = 0;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
-                break;
+            byte[] buffer = new byte[1024];
+            int readBytes = input.read(buffer, 0, (int) Math.min(buffer.length, numToSkip));
+            if (readBytes == -1) {
+                break; // End of stream
             }
+            totalSkipped += readBytes;
+            numToSkip -= readBytes;
+        } else {
+            totalSkipped += skipped;
             numToSkip -= skipped;
         }
-            
-        return available - numToSkip;
+    }
+    return totalSkipped;
 }
\ No newline at end of file
