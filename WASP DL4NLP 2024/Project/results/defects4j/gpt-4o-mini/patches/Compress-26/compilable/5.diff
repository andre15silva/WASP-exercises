diff --git a/tmp/d46f3dc5-ef03-4980-9525-12b64f024d03_buggy.java b/tmp/b78e9f78-395b-49f0-9fb4-339ff789df3c_fixed.java
index 4b163f6..f91cdcf 100644
--- a/tmp/d46f3dc5-ef03-4980-9525-12b64f024d03_buggy.java
+++ b/tmp/b78e9f78-395b-49f0-9fb4-339ff789df3c_fixed.java
@@ -1,28 +1,17 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        long totalSkipped = 0;
+        while (totalSkipped < numToSkip) {
+            long skipped = input.skip(numToSkip - totalSkipped);
             if (skipped == 0) {
-                break;
+                byte[] buffer = new byte[1024]; // use a buffer to read and skip
+                int bytesRead = input.read(buffer, 0, (int) Math.min(buffer.length, numToSkip - totalSkipped));
+                if (bytesRead == -1) {
+                    break; // end of stream reached
                 }
-            numToSkip -= skipped;
+                totalSkipped += bytesRead;
+            } else {
+                totalSkipped += skipped;
             }
-            
-        return available - numToSkip;
+        }
+        return totalSkipped;
     }
\ No newline at end of file
