diff --git a/tmp/062c2406-6856-42be-83a0-d7689e4a146a_buggy.java b/tmp/c5f6517a-1d1b-4e6e-96d0-25f564590cb7_fixed.java
index 4b163f6..70548a8 100644
--- a/tmp/062c2406-6856-42be-83a0-d7689e4a146a_buggy.java
+++ b/tmp/c5f6517a-1d1b-4e6e-96d0-25f564590cb7_fixed.java
@@ -1,28 +1,17 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long totalSkipped = 0;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
-                break;
+            byte[] buffer = new byte[Math.min(2048, (int) numToSkip)]; // Read up to 2048 bytes at a time
+            int read = input.read(buffer, 0, (int) numToSkip);
+            if (read == -1) {
+                break; // End of stream reached
             }
+            skipped = read; // Count how much we actually read
+        }
+        totalSkipped += skipped;
         numToSkip -= skipped;
     }
-            
-        return available - numToSkip;
+    return totalSkipped;
 }
\ No newline at end of file
