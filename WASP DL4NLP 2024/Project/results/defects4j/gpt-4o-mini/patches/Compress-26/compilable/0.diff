diff --git a/tmp/09e8f72e-467f-4383-b259-bc8fb49ad346_buggy.java b/tmp/33bb7bc4-09b0-4836-a966-0232c9e62c31_fixed.java
index 4b163f6..508d19c 100644
--- a/tmp/09e8f72e-467f-4383-b259-bc8fb49ad346_buggy.java
+++ b/tmp/33bb7bc4-09b0-4836-a966-0232c9e62c31_fixed.java
@@ -1,28 +1,20 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long totalSkipped = 0;
+
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
-                break;
+            byte[] buffer = new byte[Math.toIntExact(numToSkip)]; // Create a buffer to read the remaining bytes
+            int bytesRead = input.read(buffer, 0, Math.toIntExact(numToSkip)); // Read from the stream
+            if (bytesRead == -1) {
+                break; // End of stream reached
             }
-            numToSkip -= skipped;
+            totalSkipped += bytesRead; // Count bytes read as skipped
+            break; // Break out of the loop since we can't skip anymore
+        }
+        totalSkipped += skipped; // Accumulate the skipped bytes
+        numToSkip -= skipped; // Decrease the number of bytes left to skip
     }
 
-        return available - numToSkip;
+    return totalSkipped; // Return total skipped bytes
 }
\ No newline at end of file
