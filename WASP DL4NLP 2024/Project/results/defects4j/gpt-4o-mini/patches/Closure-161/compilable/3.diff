diff --git a/tmp/526d6a9e-af2c-453c-be14-895b5fc220a6_buggy.java b/tmp/681ed02f-574f-412a-b0e8-ed094acba8fe_fixed.java
index 1303a19..d474e45 100644
--- a/tmp/526d6a9e-af2c-453c-be14-895b5fc220a6_buggy.java
+++ b/tmp/681ed02f-574f-412a-b0e8-ed094acba8fe_fixed.java
@@ -1,45 +1,42 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
+
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
-      return n;
+        return n; // Complex expressions are not supported for indexing
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
+    // Check for out-of-bounds before attempting to access the array
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
         elem = elem.getNext();
     }
 
-    if (elem == null) {
+    // Adjust the index check to be less than the length of the array
+    // to avoid out-of-bounds errors.
+    if (intIndex < 0 || elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
