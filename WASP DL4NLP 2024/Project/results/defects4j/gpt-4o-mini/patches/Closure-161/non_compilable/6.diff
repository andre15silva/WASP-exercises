diff --git a/tmp/d62add2e-76de-4d3b-bba8-4b807b2ef56e_buggy.java b/tmp/720642b9-770d-4e28-bfe5-2029ba3fe671_fixed.java
index 1303a19..edeb72b 100644
--- a/tmp/d62add2e-76de-4d3b-bba8-4b807b2ef56e_buggy.java
+++ b/tmp/720642b9-770d-4e28-bfe5-2029ba3fe671_fixed.java
@@ -1,45 +1,38 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
+    Node array = left.getFirstChild();
+    if (array == null || array.getType() != Token.ARRAYLIT) {
+      return n; // Ensure that left is an array literal.
     }
 
-    Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
-      elem = elem.getNext();
-    }
-
-    if (elem == null) {
+    // Check the size of the array.
+    int arraySize = array.getChildCount();
+    if (intIndex < 0 || intIndex >= arraySize) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    Node elem = array.getChildAt(intIndex);
+
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
-      left.removeChild(elem);
+      array.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
