diff --git a/tmp/6352cd90-502b-45e5-a5ac-152f1749b03b_buggy.java b/tmp/970bac81-0351-4edb-813d-7d53844536d4_fixed.java
index 7116384..415dd50 100644
--- a/tmp/6352cd90-502b-45e5-a5ac-152f1749b03b_buggy.java
+++ b/tmp/970bac81-0351-4edb-813d-7d53844536d4_fixed.java
@@ -1,39 +1,23 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+    if (count <= 0 || count > MAXIMUM_CACHE_SIZE) {
+        throw new IllegalArgumentException("count must be a positive number not greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
-                return nextByte;
+            return (bitsCachedSize == 0) ? -1 : bitsCached; // Return bits if any parts have been cached
         }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+        bitsOut = bitsCached & MASKS[count];
         bitsCached >>>= count;
     } else {
         bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
