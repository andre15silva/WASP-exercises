diff --git a/tmp/99ff3d2b-de1b-47c4-9d17-81b05fbd0594_buggy.java b/tmp/b837212b-256e-47b1-8fc9-054f31b3c690_fixed.java
index 8e40528..6776b50 100644
--- a/tmp/99ff3d2b-de1b-47c4-9d17-81b05fbd0594_buggy.java
+++ b/tmp/b837212b-256e-47b1-8fc9-054f31b3c690_fixed.java
@@ -1,78 +1,44 @@
-     /**
-     * This method attempts to find two values a and b satisfying <ul>
-     * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>
-     * <li> <code> f(a) * f(b) <= 0 </code> </li>
-     * </ul>
-     * If f is continuous on <code>[a,b],</code> this means that <code>a</code>
-     * and <code>b</code> bracket a root of f.
-     * <p>
-     * The algorithm starts by setting 
-     * <code>a := initial -1; b := initial +1,</code> examines the value of the
-     * function at <code>a</code> and <code>b</code> and keeps moving
-     * the endpoints out by one unit each time through a loop that terminates 
-     * when one of the following happens: <ul>
-     * <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>
-     * <li> <code> a = lower </code> and <code> b = upper</code> 
-     * -- ConvergenceException </li>
-     * <li> <code> maximumIterations</code> iterations elapse 
-     * -- ConvergenceException </li></ul></p>
-     * 
-     * @param function the function
-     * @param initial initial midpoint of interval being expanded to
-     * bracket a root
-     * @param lowerBound lower bound (a is never lower than this value)
-     * @param upperBound upper bound (b never is greater than this
-     * value)
-     * @param maximumIterations maximum number of iterations to perform
-     * @return a two element array holding {a, b}.
-     * @throws ConvergenceException if the algorithm fails to find a and b
-     * satisfying the desired conditions
-     * @throws FunctionEvaluationException if an error occurs evaluating the 
-     * function
-     * @throws IllegalArgumentException if function is null, maximumIterations
-     * is not positive, or initial is not between lowerBound and upperBound
-     */
 public static double[] bracket(UnivariateRealFunction function,
         double initial, double lowerBound, double upperBound, 
         int maximumIterations) throws ConvergenceException, 
         FunctionEvaluationException {
     
     if (function == null) {
         throw MathRuntimeException.createIllegalArgumentException("function is null");
     }
     if (maximumIterations <= 0)  {
         throw MathRuntimeException.createIllegalArgumentException(
               "bad value for maximum iterations number: {0}", maximumIterations);
     }
     if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
         throw MathRuntimeException.createIllegalArgumentException(
               "invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",
               lowerBound, initial, upperBound);
     }
-        double a = initial;
-        double b = initial;
+    double a = initial - 1.0; // Start with a one unit less than initial
+    double b = initial + 1.0; // Start with b one unit more than initial
     double fa;
     double fb;
     int numIterations = 0;
 
     do {
-            a = Math.max(a - 1.0, lowerBound);
-            b = Math.min(b + 1.0, upperBound);
         fa = function.value(a);
-            
         fb = function.value(b);
+        
+        if (fa * fb <= 0.0) {
+            return new double[]{a, b}; // Success: a and b bracket a root
+        }
+        
+        a = Math.max(a - 1.0, lowerBound);
+        b = Math.min(b + 1.0, upperBound);
         numIterations++;
-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
-                ((a > lowerBound) || (b < upperBound)));
+    } while (numIterations < maximumIterations && a > lowerBound && b < upperBound);
 
-        if (fa * fb >= 0.0 ) {
+    // If we exit the loop and haven't found a and b that bracket a root, throw an exception 
     throw new ConvergenceException(
               "number of iterations={0}, maximum iterations={1}, " +
               "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
               "final b value={6}, f(a)={7}, f(b)={8}",
               numIterations, maximumIterations, initial,
               lowerBound, upperBound, a, b, fa, fb);
 }
\ No newline at end of file
-        
-        return new double[]{a, b};
-    }
