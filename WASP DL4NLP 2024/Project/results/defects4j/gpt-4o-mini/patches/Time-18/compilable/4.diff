diff --git a/tmp/2c9b803e-df76-434d-9ab8-b10e5be09b9a_buggy.java b/tmp/b6387cf9-19d6-40a1-bfe2-d29a65f26aba_fixed.java
index be2af16..7bf0215 100644
--- a/tmp/2c9b803e-df76-434d-9ab8-b10e5be09b9a_buggy.java
+++ b/tmp/b6387cf9-19d6-40a1-bfe2-d29a65f26aba_fixed.java
@@ -1,29 +1,47 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
     instant = iGregorianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant < iCutoverMillis) {
         // Maybe it's Julian.
+        // Before trying Julian, check if the date is valid in the Julian calendar.
+        try {
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalFieldValueException e) {
+            // If it fails, intervene to verify the leap year for Julian calendar.
+            if (monthOfYear == 2 && dayOfMonth == 29) {
+                if ((year % 4 == 0) && (year != 1700) && (year != 1800) && (year != 1900)) {
+                    // Valid leap year in the Julian Calendar.
+                    instant = iJulianChronology.getDateTimeMillis
+                        (year, monthOfYear, dayOfMonth,
+                         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                } else {
+                    // Invalid date for Julian, throw exception.
+                    throw new IllegalArgumentException("Specified date does not exist");
+                }
+            }
+            // If other errors occur, we throw the original exception.
+            throw e;
+        }
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
