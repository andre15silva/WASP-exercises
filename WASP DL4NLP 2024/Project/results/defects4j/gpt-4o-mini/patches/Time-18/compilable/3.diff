diff --git a/tmp/63562347-c6d6-48cc-b622-b6d9315e2c1f_buggy.java b/tmp/61159de9-db5c-483b-a372-c7d9e4f242ac_fixed.java
index be2af16..23b7e19 100644
--- a/tmp/63562347-c6d6-48cc-b622-b6d9315e2c1f_buggy.java
+++ b/tmp/61159de9-db5c-483b-a372-c7d9e4f242ac_fixed.java
@@ -1,29 +1,41 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
     instant = iGregorianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant < iCutoverMillis) {
         // Maybe it's Julian.
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
+    
+    // Correctly check for leap year scenarios before returning the instant
+    if (monthOfYear == 2 && dayOfMonth == 29 && year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {
+        // This date is valid in Julian dates.
+        return instant;
+    }
+
+    // Otherwise, validate date for Gregorian rules (not returning an instant for invalid dates)
+    if (dayOfMonth > 28 && monthOfYear == 2) {
+        throw new IllegalArgumentException("Date is invalid for the calendar");
+    }
+
     return instant;
 }
\ No newline at end of file
