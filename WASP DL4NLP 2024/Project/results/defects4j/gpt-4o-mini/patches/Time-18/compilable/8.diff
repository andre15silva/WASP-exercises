diff --git a/tmp/cc7bfeab-70f3-42e0-9506-adbc892d3d74_buggy.java b/tmp/03e8a393-ffeb-4341-92bd-66d390d09df9_fixed.java
index be2af16..aebb37b 100644
--- a/tmp/cc7bfeab-70f3-42e0-9506-adbc892d3d74_buggy.java
+++ b/tmp/03e8a393-ffeb-4341-92bd-66d390d09df9_fixed.java
@@ -1,29 +1,38 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
     instant = iGregorianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant < iCutoverMillis) {
         // Maybe it's Julian.
+        // Adjust the date for Julian before calling getDateTimeMillis
+        if (monthOfYear == 2 && dayOfMonth == 29) {
+            // In Julian, 1500 is a leap year, so we allow Feb 29
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+        } else {
+            // Call Julian chronology for non-leap dates
+            instant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        }
     }
     return instant;
 }
\ No newline at end of file
