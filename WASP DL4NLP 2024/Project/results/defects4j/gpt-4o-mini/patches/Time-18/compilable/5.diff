diff --git a/tmp/491c578a-5dbc-48ed-b8d0-44b104fdb92c_buggy.java b/tmp/fbe69f20-23c0-4297-9be3-74063542bd48_fixed.java
index be2af16..56a697d 100644
--- a/tmp/491c578a-5dbc-48ed-b8d0-44b104fdb92c_buggy.java
+++ b/tmp/fbe69f20-23c0-4297-9be3-74063542bd48_fixed.java
@@ -1,29 +1,38 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
     instant = iGregorianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant < iCutoverMillis) {
         // Maybe it's Julian.
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
+    } else {
+        // Validate the date for the Gregorian calendar
+        if (monthOfYear == 2 && dayOfMonth == 29 && !isLeapYearGregorian(year)) {
+            throw new IllegalArgumentException("Specified date does not exist in the Gregorian calendar");
+        }
     }
     return instant;
 }
+
+private boolean isLeapYearGregorian(int year) {
+    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
+}
\ No newline at end of file
