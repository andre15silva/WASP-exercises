diff --git a/tmp/fb0ec3b0-b81d-472b-8f59-d106edb6a720_buggy.java b/tmp/59bdb135-c56b-4e1c-9c05-c8039c69f38d_fixed.java
index b98f0a7..00bf308 100644
--- a/tmp/fb0ec3b0-b81d-472b-8f59-d106edb6a720_buggy.java
+++ b/tmp/59bdb135-c56b-4e1c-9c05-c8039c69f38d_fixed.java
@@ -1,29 +1,34 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
+                // Create a new instance type based on the constructor's parameters
+                // Correctly infer the parameter types
+                if (ct.getParameters().size() > 0) {
+                    JSType paramType = ct.getParameters().get(0).getType();
+                    type = ct.getInstanceType().restrictByNotNullOrUndefined().meet(paramType);
+                } else {
                     type = ct.getInstanceType();
                 }
             }
         }
+    }
+    
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
