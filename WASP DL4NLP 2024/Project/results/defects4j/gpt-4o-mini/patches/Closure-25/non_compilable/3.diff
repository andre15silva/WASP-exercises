diff --git a/tmp/5f0687f5-d7f4-4cfd-8cf0-72b42eed6564_buggy.java b/tmp/21e6e137-2085-41ad-b923-79e806de54dd_fixed.java
index b98f0a7..f735bb5 100644
--- a/tmp/5f0687f5-d7f4-4cfd-8cf0-72b42eed6564_buggy.java
+++ b/tmp/21e6e137-2085-41ad-b923-79e806de54dd_fixed.java
@@ -1,29 +1,35 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
+    } else {
+        // Handle the case where constructorType is null
+        // We can infer that if a function is being called as a constructor
+        // without a proper JSType, we assume a proper type (could be more sophisticated).
+        type = getNativeType(OBJECT_TYPE); // Assuming a default object type.
     }
+
     n.setJSType(type);
+    
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
+    
     return scope;
 }
\ No newline at end of file
