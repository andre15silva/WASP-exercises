diff --git a/tmp/540bf479-3367-4d17-ac00-7a1ff7592c95_buggy.java b/tmp/74e3c9ce-b44a-40b5-9feb-2d6d682b9c5b_fixed.java
index b98f0a7..150d7f6 100644
--- a/tmp/540bf479-3367-4d17-ac00-7a1ff7592c95_buggy.java
+++ b/tmp/74e3c9ce-b44a-40b5-9feb-2d6d682b9c5b_fixed.java
@@ -1,29 +1,35 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
+                // Collects the type of the parameters of the constructor.
+                JSType[] parameterTypes = ct.getParameterTypes();
+                if (parameterTypes.length > 0) {
+                    JSType paramType = parameterTypes[0];
+                    // Check if the parameter is object-like and propagate the type back to the variable.
+                    if (paramType.isObjectType()) {
+                        type = paramType;
+                    }
+                }
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
