diff --git a/tmp/0c5877d2-98c6-475a-a62a-6c2ca8881ae5_buggy.java b/tmp/4922f47b-fb73-4c77-8e2f-81d4b511631d_fixed.java
index b98f0a7..0674e54 100644
--- a/tmp/0c5877d2-98c6-475a-a62a-6c2ca8881ae5_buggy.java
+++ b/tmp/4922f47b-fb73-4c77-8e2f-81d4b511631d_fixed.java
@@ -1,29 +1,32 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
+                // Get the instance type of the constructor and infer its properties
                 type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+                // If the constructor has parameters, we should also consider them
+                // to update the instance type for the argument
                 for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+                    JSType argType = arg.getJSType();
+                    if (argType != null) {
+                        type = type.restrictByNotNullOrUndefined().meet(argType);
                     }
+                }
+            }
+        }
+    }
+    n.setJSType(type);
     return scope;
 }
\ No newline at end of file
