diff --git a/tmp/65bc02c5-1dd9-48a1-a2e7-0114e3e376bb_buggy.java b/tmp/5f84ba77-af53-480c-b086-cf03f489d8c1_fixed.java
index b98f0a7..dc188b4 100644
--- a/tmp/65bc02c5-1dd9-48a1-a2e7-0114e3e376bb_buggy.java
+++ b/tmp/5f84ba77-af53-480c-b086-cf03f489d8c1_fixed.java
@@ -1,29 +1,32 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
+                // Capture the constructor's instance type correctly
                 type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+                // Update the instance type with the parameter type information
                 for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+                    JSType paramType = ct.getParameterType(0); // Only take the first parameter
+                    if (paramType != null) {
+                        // Merge the inferred type from the argument into the instance type
+                        type = type.getLeastSupertype(paramType);
                     }
+                }
+            }
+        }
+    }
+    n.setJSType(type);
     return scope;
 }
\ No newline at end of file
