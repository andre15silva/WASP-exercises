diff --git a/tmp/c3ca6250-fd48-47e0-8642-71452c33d921_buggy.java b/tmp/bd268b5c-999b-440a-bd55-3c0e5ae871a4_fixed.java
index b98f0a7..9985283 100644
--- a/tmp/c3ca6250-fd48-47e0-8642-71452c33d921_buggy.java
+++ b/tmp/bd268b5c-999b-440a-bd55-3c0e5ae871a4_fixed.java
@@ -1,29 +1,30 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
+            if (ct == null) {
+                ct = constructorType.toMaybeFunctionType(); // This line is redundant now
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
+    if (type == null) {
+        // If type is still null, set a fallback type, possibly for cases where the constructor does not generate a specific instance type
+        type = getNativeType(OBJECT_TYPE); // Set to a default object type or adjust as necessary
+    }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
