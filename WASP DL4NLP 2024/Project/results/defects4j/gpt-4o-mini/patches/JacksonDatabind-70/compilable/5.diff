diff --git a/tmp/17e3e1f9-a95b-4d9e-a672-8eb6a887cac9_buggy.java b/tmp/9cbc8358-3055-44af-9e40-15e2031b4233_fixed.java
index 0313249..10c1fb2 100644
--- a/tmp/17e3e1f9-a95b-4d9e-a672-8eb6a887cac9_buggy.java
+++ b/tmp/9cbc8358-3055-44af-9e40-15e2031b4233_fixed.java
@@ -1,32 +1,24 @@
-    /**
-     * Specialized method for removing specified existing entry.
-     * NOTE: entry MUST exist, otherwise an exception is thrown.
-     */
-    public void remove(SettableBeanProperty propToRm)
-    {
+public void remove(SettableBeanProperty propToRm) {
     ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
     String key = getPropertyName(propToRm);
     boolean found = false;
 
-        for (int i = 1, end = _hashArea.length; i < end; i += 2) {
+    for (int i = 0, end = _hashArea.length; i < end; i += 2) {
         SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
         if (prop == null) {
             continue;
         }
-            if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
+        // Check name slot in a case-insensitive manner
+        if (!found && key.equalsIgnoreCase(prop.getName())) {
+            found = true;
             // need to leave a hole here
             _propsInOrder[_findFromOrdered(prop)] = null;
             continue;
         }
-            }
         props.add(prop);
     }
     if (!found) {
         throw new NoSuchElementException("No entry '" + propToRm.getName() + "' found, can't remove");
     }
     init(props);
 }
\ No newline at end of file
