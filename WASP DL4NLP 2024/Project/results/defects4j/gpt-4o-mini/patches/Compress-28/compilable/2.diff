diff --git a/tmp/001be050-7da4-47f1-85b1-c4ce1f5848dc_buggy.java b/tmp/a370c3ed-152a-424f-9e63-c80ebe890b34_fixed.java
index 0f439b3..0e96ed8 100644
--- a/tmp/001be050-7da4-47f1-85b1-c4ce1f5848dc_buggy.java
+++ b/tmp/a370c3ed-152a-424f-9e63-c80ebe890b34_fixed.java
@@ -1,38 +1,27 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
     int totalRead = 0;
 
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
     numToRead = Math.min(numToRead, available());
-        
     totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
     
     if (totalRead == -1) {
-            hasHitEOF = true;
+        hasHitEOF = true; // Mark EOF only if read returns -1
+        return totalRead; // Return -1 to indicate EOF
+    } else if (totalRead + entryOffset > entrySize) {
+        throw new IOException("Read exceeds entry size"); // Throw IOException if read exceeds entry size
     } else {
-            entryOffset += totalRead;
+        entryOffset += totalRead; // Update entryOffset only if read was successful
     }
 
+    count(totalRead);
     return totalRead;
 }
\ No newline at end of file
