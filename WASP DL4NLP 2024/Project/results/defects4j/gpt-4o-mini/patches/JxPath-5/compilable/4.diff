diff --git a/tmp/422ee488-f040-46f6-b178-d1300ca9f004_buggy.java b/tmp/a298df7a-f587-4bf4-bfac-b7fd80d89abe_fixed.java
index 5f8ac1a..7a3aaaa 100644
--- a/tmp/422ee488-f040-46f6-b178-d1300ca9f004_buggy.java
+++ b/tmp/a298df7a-f587-4bf4-bfac-b7fd80d89abe_fixed.java
@@ -1,34 +1,40 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    if (p1 == null) {
+        return -1; // p1 is null, p2 is not
+    }
+    if (p2 == null) {
+        return 1; // p2 is null, p1 is not
+    }
+
     if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
-            return r == 0 ? -1 : r;
+        return -1; // p1 is shallower, comes first
     }
     if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
-            return r == 0 ? 1 : r;
-        }
-        if (p1 == null && p2 == null) {
-            return 0;
+        return 1; // p2 is shallower, comes first
     }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
+    if (p1.equals(p2)) {
+        return 0; // both are equal
     }
     
     if (depth1 == 1) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
+
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
