diff --git a/tmp/0d02dbd7-7ff4-4f44-a98c-dd6b4892015e_buggy.java b/tmp/72400559-b98c-4d60-90c6-9cab91981fbe_fixed.java
index 602226b..aeca1f6 100644
--- a/tmp/0d02dbd7-7ff4-4f44-a98c-dd6b4892015e_buggy.java
+++ b/tmp/72400559-b98c-4d60-90c6-9cab91981fbe_fixed.java
@@ -1,26 +1,23 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
                 aliases.put(name, aliasVar);
 
                 String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                    aliasVar.getInitialValue() != null ? aliasVar.getInitialValue().getQualifiedName() : null;
+                if (qualifiedName != null) {
                     transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+                }
             } else {
-          // TODO(robbyw): Support using locals for private variables.
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
         }
     }
 }
\ No newline at end of file
