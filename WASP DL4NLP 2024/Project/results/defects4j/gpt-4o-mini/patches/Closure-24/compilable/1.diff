diff --git a/tmp/b132e865-40a3-4e1a-ae61-b5c26b6ab8b2_buggy.java b/tmp/0f31e5ce-c637-4147-a785-ad69549d4135_fixed.java
index 602226b..afe3b4b 100644
--- a/tmp/b132e865-40a3-4e1a-ae61-b5c26b6ab8b2_buggy.java
+++ b/tmp/0f31e5ce-c637-4147-a785-ad69549d4135_fixed.java
@@ -1,26 +1,21 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
                 aliases.put(name, aliasVar);
 
                 String qualifiedName =
                     aliasVar.getInitialValue().getQualifiedName();
                 transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
             } else {
-          // TODO(robbyw): Support using locals for private variables.
+                // If the variable is not an alias, report the error
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
         }
     }
 }
\ No newline at end of file
