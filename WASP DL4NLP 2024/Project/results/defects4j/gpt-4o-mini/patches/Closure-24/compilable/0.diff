diff --git a/tmp/68267896-aaa2-4e4e-9af0-be982744908c_buggy.java b/tmp/4cbee28a-0ab6-4ff3-8ac2-c50521ae6f7e_fixed.java
index 602226b..a4ac170 100644
--- a/tmp/68267896-aaa2-4e4e-9af0-be982744908c_buggy.java
+++ b/tmp/4cbee28a-0ab6-4ff3-8ac2-c50521ae6f7e_fixed.java
@@ -1,26 +1,23 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
+            // Check if the variable declaration has a qualified name
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
+                if (aliasVar != null) { // Ensure aliasVar is not null before accessing
                     aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                     transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+                }
             } else {
-          // TODO(robbyw): Support using locals for private variables.
+                // Report non-alias local variables
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
         }
     }
 }
\ No newline at end of file
