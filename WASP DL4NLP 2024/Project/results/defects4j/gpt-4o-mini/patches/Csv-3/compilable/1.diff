diff --git a/tmp/667393b3-31f6-4b9e-95b7-21a2776fbb80_buggy.java b/tmp/ab78a436-1f24-4d34-b927-348205db58df_fixed.java
index 1ad070d..61ff616 100644
--- a/tmp/667393b3-31f6-4b9e-95b7-21a2776fbb80_buggy.java
+++ b/tmp/ab78a436-1f24-4d34-b927-348205db58df_fixed.java
@@ -1,38 +1,23 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
+    if (c == END_OF_STREAM) {
+        throw new IOException("EOF whilst processing escape sequence");
+    }
+
     switch (c) {
     case 'r':
         return CR;
     case 'n':
-            return LF;
+        return LF; // For MySQL null values
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
     default:
-            // Now check for meta-characters
+        // Return the character read if it's not a recognized escape character
         return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
