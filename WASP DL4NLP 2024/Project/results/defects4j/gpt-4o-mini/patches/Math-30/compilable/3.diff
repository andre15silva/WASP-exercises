diff --git a/tmp/e908dba5-b66b-4234-b357-c710b0e8dd48_buggy.java b/tmp/770b3525-198f-4539-b944-fa1c4e40f306_fixed.java
index 3c69e10..a4575ad 100644
--- a/tmp/e908dba5-b66b-4234-b357-c710b0e8dd48_buggy.java
+++ b/tmp/770b3525-198f-4539-b944-fa1c4e40f306_fixed.java
@@ -1,27 +1,22 @@
-    /**
-     * @param Umin smallest Mann-Whitney U value
-     * @param n1 number of subjects in first sample
-     * @param n2 number of subjects in second sample
-     * @return two-sided asymptotic p-value
-     * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
-     * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
-     */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    double pValue = 2 * standardNormal.cumulativeProbability(z);
+
+    // Ensure p-value is within [0, 1]
+    pValue = Math.min(Math.max(pValue, 0), 1);
+
+    return pValue;
 }
\ No newline at end of file
