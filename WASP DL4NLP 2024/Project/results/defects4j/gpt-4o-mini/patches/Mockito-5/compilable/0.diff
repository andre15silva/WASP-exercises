diff --git a/tmp/b7d952d0-cf7e-4c7c-afe4-387bfd623965_buggy.java b/tmp/915e808e-d5f5-45cd-b7aa-be0827c9ab1e_fixed.java
index 9ac2149..257e4c7 100644
--- a/tmp/b7d952d0-cf7e-4c7c-afe4-387bfd623965_buggy.java
+++ b/tmp/915e808e-d5f5-45cd-b7aa-be0827c9ab1e_fixed.java
@@ -1,40 +1,32 @@
-    /**
-     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode
-     * before the full duration has passed.
-     *
-     * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once
-     * the full duration has passed, the last error returned by the delegate verification mode will be thrown
-     * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known
-     * to never recover from this situation (e.g. {@link AtMost}).
-     *
-     * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter
-     * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If
-     * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.
-     *
-     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
-     */
 public void verify(VerificationData data) {
     AssertionError error = null;
 
     timer.start();
     while (timer.isCounting()) {
         try {
             delegate.verify(data);
-
             if (returnOnSuccess) {
                 return;
             } else {
+                // Error should be reset only if the delegate succeeds, so do not set error here
                 error = null;
             }
         } catch (MockitoAssertionError e) {
             error = handleVerifyException(e);
-            }
-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
+        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
             error = handleVerifyException(e);
         }
+
+        // Avoid blocking other threads by adding a small wait to reduce busy waiting
+        try {
+            Thread.sleep(50); // Adjust the duration as needed to avoid tight loops
+        } catch (InterruptedException ie) {
+            Thread.currentThread().interrupt(); // Restore the interrupted status
+            throw new RuntimeException("Thread interrupted while waiting", ie);
+        }
     }
 
     if (error != null) {
         throw error;
     }
 }
\ No newline at end of file
