diff --git a/tmp/cd4b00ba-1b64-45b4-863c-508c03ed3133_buggy.java b/tmp/1c624264-8ebf-45de-9266-77ef2b7a1077_fixed.java
index e087f95..10cc68e 100644
--- a/tmp/cd4b00ba-1b64-45b4-863c-508c03ed3133_buggy.java
+++ b/tmp/1c624264-8ebf-45de-9266-77ef2b7a1077_fixed.java
@@ -1,53 +1,46 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("The buffer length must be at least 2 bytes.");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                if (stillPadding) {
+                    // If we have encountered only NULs, return 0.
+                    return 0L;
+                }
                 break;
             }
 
             // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
                     continue;
                 }
                 if (currentByte == (byte) ' ') {
-                break;
+                    throw new IllegalArgumentException("Trailing space/NUL is missing or invalid.");
                 }
             }
 
             // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // Check if we have a valid trailing character
+        if (end > 0 && buffer[end - 1] != 0 && buffer[end - 1] != ' ') {
+            throw new IllegalArgumentException("Trailing space/NUL is missing.");
         }
 
         return result;
     }
\ No newline at end of file
