diff --git a/tmp/531c46fa-6e0b-4c67-bb5f-cf26c3570969_buggy.java b/tmp/1a40bdef-488a-4e12-9ec8-892d97538ad8_fixed.java
index 822447c..59eddb4 100644
--- a/tmp/531c46fa-6e0b-4c67-bb5f-cf26c3570969_buggy.java
+++ b/tmp/1a40bdef-488a-4e12-9ec8-892d97538ad8_fixed.java
@@ -1,37 +1,30 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
         char c = str.charAt(i);
         String entityName = this.entityName(c);
         if (entityName == null) {
             if (c > 0x7F) {
+                // Handle Unicode characters beyond the Basic Multilingual Plane (BMP)
+                if (Character.isHighSurrogate(c) && (i + 1 < len) && Character.isLowSurrogate(str.charAt(i + 1))) {
+                    // Combine high and low surrogate to form a complete Unicode code point
+                    int codePoint = Character.toCodePoint(c, str.charAt(i + 1));
+                    writer.write("&#");
+                    writer.write(Integer.toString(codePoint, 10));
+                    writer.write(';');
+                    i++; // Skip the next low surrogate
+                } else {
                     writer.write("&#");
                     writer.write(Integer.toString(c, 10));
                     writer.write(';');
+                }
             } else {
                 writer.write(c);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
     }
 }
\ No newline at end of file
