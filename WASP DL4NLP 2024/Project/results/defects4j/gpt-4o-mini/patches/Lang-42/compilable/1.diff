diff --git a/tmp/4da0b9b7-e06d-430e-b5f8-d06fab5022d1_buggy.java b/tmp/05453950-acef-43ff-a569-c4b78b20e108_fixed.java
index 822447c..4624b5e 100644
--- a/tmp/4da0b9b7-e06d-430e-b5f8-d06fab5022d1_buggy.java
+++ b/tmp/05453950-acef-43ff-a569-c4b78b20e108_fixed.java
@@ -1,37 +1,31 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
         char c = str.charAt(i);
-            String entityName = this.entityName(c);
-            if (entityName == null) {
-                if (c > 0x7F) {
+        if (c >= 0xD800 && c <= 0xDBFF) { // High surrogate
+            if (i + 1 < len) {
+                char next = str.charAt(i + 1);
+                if (next >= 0xDC00 && next <= 0xDFFF) { // Low surrogate
+                    // Calculate the codepoint from the surrogate pair
+                    int codepoint = ((c - 0xD800) << 10) + (next - 0xDC00) + 0x10000;
+                    writer.write("&#");
+                    writer.write(Integer.toString(codepoint, 10));
+                    writer.write(';');
+                    i++; // Skip the next character as it is part of the surrogate pair
+                } else {
+                    // Handle the high surrogate without a matching low surrogate (could be an error)
+                    writer.write(c);
+                }
+            } else {
+                // Handle the high surrogate at the end of the string without a matching low surrogate
+                writer.write(c);
+            }
+        } else if (c > 0x7F) {
             writer.write("&#");
             writer.write(Integer.toString(c, 10));
             writer.write(';');
         } else {
             writer.write(c);
         }
-            } else {
-                writer.write('&');
-                writer.write(entityName);
-                writer.write(';');
-            }
     }
 }
\ No newline at end of file
