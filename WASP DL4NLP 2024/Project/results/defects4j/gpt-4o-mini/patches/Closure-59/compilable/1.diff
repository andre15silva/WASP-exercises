diff --git a/tmp/79559555-e97d-4a62-ba0f-1529e69e0be5_buggy.java b/tmp/8468cf3a-e157-4ad0-bd05-4e3c412d1df8_fixed.java
index 29fabfa..1858bbe 100644
--- a/tmp/79559555-e97d-4a62-ba0f-1529e69e0be5_buggy.java
+++ b/tmp/8468cf3a-e157-4ad0-bd05-4e3c412d1df8_fixed.java
@@ -1,67 +1,63 @@
-  /**
-   * Initialize the compiler options. Only necessary if you're not doing
-   * a normal compile() job.
-   */
 public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
         if (outStream == null) {
             setErrorManager(
                 new LoggerErrorManager(createMessageFormatter(), logger));
         } else {
             PrintStreamErrorManager printer =
                 new PrintStreamErrorManager(createMessageFormatter(), outStream);
             printer.setSummaryDetailLevel(options.summaryDetailLevel);
             setErrorManager(printer);
         }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = false;
     } else if (!options.checkTypes) {
-      // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
         options.setWarningLevel(
             DiagnosticGroup.forType(
                 RhinoErrorReporter.TYPE_PARSE_ERROR),
             CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
         options.setWarningLevel(
             DiagnosticGroups.GLOBAL_THIS,
             options.checkGlobalThisLevel);
+    } else {
+        // If globalThis is turned off, set the warning level to OFF
+        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);
     }
 
     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
         options.setWarningLevel(
             DiagnosticGroups.ES5_STRICT,
             CheckLevel.ERROR);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
     
     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
     if (!options.checkSymbols &&
         !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
         composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
             DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = composedGuards;
 }
\ No newline at end of file
