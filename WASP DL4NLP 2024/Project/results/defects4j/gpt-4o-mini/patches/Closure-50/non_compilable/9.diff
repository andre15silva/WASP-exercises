diff --git a/tmp/c4aaa34e-fa42-4aa9-a9e2-05cad3ba485e_buggy.java b/tmp/97481247-32a5-45a7-b4e4-70baa1da3194_fixed.java
index d8b0158..60ed0d7 100644
--- a/tmp/c4aaa34e-fa42-4aa9-a9e2-05cad3ba485e_buggy.java
+++ b/tmp/97481247-32a5-45a7-b4e4-70baa1da3194_fixed.java
@@ -1,113 +1,65 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
 private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
         return n;
     }
 
     Node right = callTarget.getNext();
     if (right != null) {
         if (!NodeUtil.isImmutableValue(right)) {
             return n;
         }
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
             !functionName.getString().equals("join")) {
         return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    
     while (elem != null) {
         if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
             if (sb == null) {
                 sb = new StringBuilder();
             } else {
                 sb.append(joinString);
             }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
+            sb.append(NodeUtil.getArrayElementStringValue(elem)); // Append the string value
         } else {
             if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+                arrayFoldedChildren.add(Node.newString(sb.toString()));
+                sb = null; // Reset StringBuilder
             }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
+            arrayFoldedChildren.add(elem); // Add the non-immutable value
         }
-      prev = elem;
-      elem = elem.getNext();
+        elem = elem.getNext(); // Move to the next element
     }
 
     if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+        arrayFoldedChildren.add(Node.newString(sb.toString())); // Add any remaining string
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        n.getParent().replaceChild(n, foldedStringNode);
-        reportCodeChange();
-        return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
+    int foldedSize = InlineCostEstimator.getCost(Node.newArray(arrayFoldedChildren)); // Calculate size of folded version
     foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+
+    if (foldedSize >= originalSize) {
+        return n; // No size win, return original
     }
+
+    // Create new array node with folded children
+    Node foldedArray = Node.newArray(arrayFoldedChildren);
+    Node foldedJoinNode = Node.newCall(NodeUtil.getFunctionName("join"), foldedArray);
+    n.getParent().replaceChild(n, foldedJoinNode);
     reportCodeChange();
-        break;
-    }
     
-    return n;
+    return foldedJoinNode; // Return the new folded join node
 }
\ No newline at end of file
