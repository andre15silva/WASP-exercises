diff --git a/tmp/4430a110-a793-448d-809f-bbd87392b99a_buggy.java b/tmp/c8c4cd8e-2837-489b-ac7c-2da9ac395bf6_fixed.java
index d8b0158..639ebd5 100644
--- a/tmp/4430a110-a793-448d-809f-bbd87392b99a_buggy.java
+++ b/tmp/c8c4cd8e-2837-489b-ac7c-2da9ac395bf6_fixed.java
@@ -1,113 +1,65 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
 private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
         return n;
     }
 
     Node right = callTarget.getNext();
     if (right != null) {
         if (!NodeUtil.isImmutableValue(right)) {
             return n;
         }
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
         return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
     while (elem != null) {
         if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
             if (sb == null) {
                 sb = new StringBuilder();
             } else {
                 sb.append(joinString);
             }
             sb.append(NodeUtil.getArrayElementStringValue(elem));
         } else {
             if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
+                arrayFoldedChildren.add(Node.newString(sb.toString()));
                 sb = null;
             }
-        foldedSize += InlineCostEstimator.getCost(elem);
             arrayFoldedChildren.add(elem);
         }
-      prev = elem;
         elem = elem.getNext();
     }
 
     if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+        arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
-    int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
+    if (arrayFoldedChildren.isEmpty()) {
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
     }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
+
+    Node foldedStringNode = arrayFoldedChildren.size() == 1 ? arrayFoldedChildren.get(0) : Node.newArray();
+    for (Node node : arrayFoldedChildren) {
+        foldedStringNode.addChildToBack(node);
     }
+    
     n.getParent().replaceChild(n, foldedStringNode);
     reportCodeChange();
     return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        reportCodeChange();
-        break;
-    }
-
-    return n;
 }
\ No newline at end of file
