diff --git a/tmp/8364fbe3-8019-471b-b8c7-1b90d0499123_buggy.java b/tmp/c015f713-4daa-4b88-af6e-56224571d3c5_fixed.java
index 88bb3a1..c27ead7 100644
--- a/tmp/8364fbe3-8019-471b-b8c7-1b90d0499123_buggy.java
+++ b/tmp/c015f713-4daa-4b88-af6e-56224571d3c5_fixed.java
@@ -1,57 +1,54 @@
-    /**
-     * Helper method called when there is the explicit "is-creator", but no mode declaration.
-     *
-     * @since 2.9.2
-     */
 protected void _addExplicitAnyCreator(DeserializationContext ctxt,
         BeanDescription beanDesc, CreatorCollector creators,
         CreatorCandidate candidate)
     throws JsonMappingException
 {
-        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
     if (1 != candidate.paramCount()) {
-            // Ok: for delegates, we want one and exactly one parameter without
-            // injection AND without name
         int oneNotInjected = candidate.findOnlyParamWithoutInjection();
         if (oneNotInjected >= 0) {
-                // getting close; but most not have name
             if (candidate.paramName(oneNotInjected) == null) {
                 _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                 return;
             }
         }
         _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
         return;
     }
     AnnotatedParameter param = candidate.parameter(0);
     JacksonInject.Value injectId = candidate.injection(0);
     PropertyName paramName = candidate.explicitParamName(0);
     BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
-        // If there's injection or explicit name, should be properties-based
     boolean useProps = (paramName != null) || (injectId != null);
     if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
-
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
         paramName = candidate.findImplicitParamName(0);
         useProps = (paramName != null) && paramDef.couldSerialize();
     }
     if (useProps) {
+        // Ensure paramName is transformed to snake_case if necessary
+        String snakeCaseName = convertToSnakeCase(paramName.getSimpleName());
         SettableBeanProperty[] properties = new SettableBeanProperty[] {
-                    constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
+                constructCreatorProperty(ctxt, beanDesc, new PropertyName(snakeCaseName), 0, param, injectId)
         };
         creators.addPropertyCreator(candidate.creator(), true, properties);
         return;
     }
     _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
-        // one more thing: sever link to creator property, to avoid possible later
-        // problems with "unresolved" constructor property
     if (paramDef != null) {
         ((POJOPropertyBuilder) paramDef).removeConstructors();
     }
 }
+
+// Additional helper function to convert to snake_case
+private String convertToSnakeCase(String camelCase) {
+    if (camelCase == null || camelCase.isEmpty()) return camelCase;
+    StringBuilder result = new StringBuilder();
+    for (char c : camelCase.toCharArray()) {
+        if (Character.isUpperCase(c) && result.length() > 0) {
+            result.append('_');
+        }
+        result.append(Character.toLowerCase(c));
+    }
+    return result.toString();
+}
\ No newline at end of file
