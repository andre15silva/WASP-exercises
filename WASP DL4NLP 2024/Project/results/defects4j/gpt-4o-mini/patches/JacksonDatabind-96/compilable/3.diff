diff --git a/tmp/7c548905-b4b0-41c6-80d3-501cd9a88c64_buggy.java b/tmp/aabf2829-30e7-4bee-859b-076740eaf945_fixed.java
index 88bb3a1..9f4bd15 100644
--- a/tmp/7c548905-b4b0-41c6-80d3-501cd9a88c64_buggy.java
+++ b/tmp/aabf2829-30e7-4bee-859b-076740eaf945_fixed.java
@@ -1,57 +1,63 @@
-    /**
-     * Helper method called when there is the explicit "is-creator", but no mode declaration.
-     *
-     * @since 2.9.2
-     */
 protected void _addExplicitAnyCreator(DeserializationContext ctxt,
         BeanDescription beanDesc, CreatorCollector creators,
         CreatorCandidate candidate)
     throws JsonMappingException
 {
-        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:
     if (1 != candidate.paramCount()) {
-            // Ok: for delegates, we want one and exactly one parameter without
-            // injection AND without name
         int oneNotInjected = candidate.findOnlyParamWithoutInjection();
         if (oneNotInjected >= 0) {
-                // getting close; but most not have name
             if (candidate.paramName(oneNotInjected) == null) {
                 _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);
                 return;
             }
         }
         _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);
         return;
     }
     AnnotatedParameter param = candidate.parameter(0);
     JacksonInject.Value injectId = candidate.injection(0);
     PropertyName paramName = candidate.explicitParamName(0);
     BeanPropertyDefinition paramDef = candidate.propertyDef(0);
 
-        // If there's injection or explicit name, should be properties-based
     boolean useProps = (paramName != null) || (injectId != null);
     if (!useProps && (paramDef != null)) {
-            // One more thing: if implicit name matches property with a getter
-            // or field, we'll consider it property-based as well
-
-            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get
-            //    not implicit name, but name with possible strategy-based-rename
-//            paramName = candidate.findImplicitParamName(0);
         paramName = candidate.findImplicitParamName(0);
         useProps = (paramName != null) && paramDef.couldSerialize();
     }
+    
+    // Fix: Convert paramName from Snake Case to corrected Camel Case
+    // Remove the unnecessary prefix (It should match with the creator property)
+    if (paramName != null) {
+        String correctedName = convertSnakeToCamelCase(paramName.getSimpleName());
+        paramName = new PropertyName(correctedName);
+    }
+
     if (useProps) {
         SettableBeanProperty[] properties = new SettableBeanProperty[] {
                 constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)
         };
         creators.addPropertyCreator(candidate.creator(), true, properties);
         return;
     }
+    
     _handleSingleArgumentCreator(creators, candidate.creator(), true, true);
 
-        // one more thing: sever link to creator property, to avoid possible later
-        // problems with "unresolved" constructor property
     if (paramDef != null) {
         ((POJOPropertyBuilder) paramDef).removeConstructors();
     }
 }
+
+// Helper method to convert Snake Case to Camel Case
+private String convertSnakeToCamelCase(String paramName) {
+    StringBuilder result = new StringBuilder();
+    String[] parts = paramName.split("_");
+    for (String part : parts) {
+        if (result.length() == 0) {
+            result.append(part.toLowerCase());
+        } else {
+            result.append(part.substring(0, 1).toUpperCase());
+            result.append(part.substring(1).toLowerCase());
+        }
+    }
+    return result.toString();
+}
\ No newline at end of file
