diff --git a/tmp/5944ead9-b668-4db7-8fb1-6f086d3a27ba_buggy.java b/tmp/fac7044c-d67b-402f-9e1d-0bdbb89cb9ba_fixed.java
index c51c8b1..2c419f0 100644
--- a/tmp/5944ead9-b668-4db7-8fb1-6f086d3a27ba_buggy.java
+++ b/tmp/fac7044c-d67b-402f-9e1d-0bdbb89cb9ba_fixed.java
@@ -1,31 +1,30 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
     Node nameNode = n.getFirstChild();
     Node parent = n.getParent();
     NameInformation ns = createNameInformation(t, nameNode);
     if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
             // Patch for assignments that appear in the init,
             // condition or iteration part of a FOR loop. Without
             // this change, all 3 of those parts try to claim the for
             // loop as their dependency scope. The last assignment in
             // those three fields wins, which can result in incorrect
             // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
             if (parent.getFirstChild().getNext() != n) {
                 recordDepScope(recordNode, ns);
             } else {
                 recordDepScope(nameNode, ns);
             }
         } else {
             // The rhs of the assignment is the caller, so it's used by the
             // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+            // Update logic to correctly handle function assignments
+            if (n.isAssign() && n.getSecondChild().isFunction()) {
                 recordDepScope(recordNode, ns);
+                return; // Skip the follow-up association with lhs
+            }
+            // For other cases, register the dependency
+            recordDepScope(nameNode, ns);
         }
     }
 }
\ No newline at end of file
