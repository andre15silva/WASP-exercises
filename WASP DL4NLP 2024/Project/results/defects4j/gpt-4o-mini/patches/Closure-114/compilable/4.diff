diff --git a/tmp/e3d06f8e-523a-4e51-8d55-c03cc1fc9209_buggy.java b/tmp/08ee2718-9976-4240-8176-03082e89564c_fixed.java
index c51c8b1..45d69c1 100644
--- a/tmp/e3d06f8e-523a-4e51-8d55-c03cc1fc9209_buggy.java
+++ b/tmp/08ee2718-9976-4240-8176-03082e89564c_fixed.java
@@ -1,31 +1,23 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
     Node nameNode = n.getFirstChild();
     Node parent = n.getParent();
     NameInformation ns = createNameInformation(t, nameNode);
     if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
             if (parent.getFirstChild().getNext() != n) {
                 recordDepScope(recordNode, ns);
             } else {
                 recordDepScope(nameNode, ns);
             }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+            // Always record the dependency scope for the nameNode when
+            // the assignment is a function call to ensure the correct
+            // references are maintained.
+            if (n.isAssign() && n.getFirstChild().isName()) {
+                recordDepScope(nameNode, ns);
+            } else {
                 recordDepScope(recordNode, ns);
             }
         }
     }
+}
\ No newline at end of file
