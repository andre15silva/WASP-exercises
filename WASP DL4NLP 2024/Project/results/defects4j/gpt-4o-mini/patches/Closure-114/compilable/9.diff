diff --git a/tmp/ace797be-c8a3-416f-bb41-66e40cd3c646_buggy.java b/tmp/adab3549-e950-40f7-a095-b9bd6f5c5173_fixed.java
index c51c8b1..e5505b0 100644
--- a/tmp/ace797be-c8a3-416f-bb41-66e40cd3c646_buggy.java
+++ b/tmp/adab3549-e950-40f7-a095-b9bd6f5c5173_fixed.java
@@ -1,31 +1,27 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
     Node nameNode = n.getFirstChild();
     Node parent = n.getParent();
     NameInformation ns = createNameInformation(t, nameNode);
     if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
             if (parent.getFirstChild().getNext() != n) {
                 recordDepScope(recordNode, ns);
             } else {
                 recordDepScope(nameNode, ns);
             }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+            // Check if the assignment is being made to a function call
+            if (n.isAssign() && n.getFirstChild() != null && n.getFirstChild().isName()) {
+                Node rhs = n.getLastChild();
+                if (rhs.isCall() && rhs.getFirstChild().isName()) {
+                    // Handle the case where the assignment is to a function call
+                    recordDepScope(recordNode, createNameInformation(t, rhs.getFirstChild()));
+                } else {
                     recordDepScope(recordNode, ns);
                 }
+            } else {
+                recordDepScope(recordNode, ns);
+            }
+        }
     }
 }
\ No newline at end of file
