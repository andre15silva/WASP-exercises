diff --git a/tmp/a3b78f3a-14bd-4fb8-8e0a-6f6edf53c096_buggy.java b/tmp/e38bfad1-9bd8-4068-b263-bde00f2f6f3d_fixed.java
index 2955e62..d2bdd0b 100644
--- a/tmp/a3b78f3a-14bd-4fb8-8e0a-6f6edf53c096_buggy.java
+++ b/tmp/e38bfad1-9bd8-4068-b263-bde00f2f6f3d_fixed.java
@@ -1,66 +1,59 @@
-    /**
-     * @return true if the provided reference and declaration can be safely
-     *         inlined according to our criteria
-     */
     private boolean canInline(
         Reference declaration,
         Reference initialization,
         Reference reference) {
       if (!isValidDeclaration(declaration)
           || !isValidInitialization(initialization)
           || !isValidReference(reference)) {
         return false;
       }
 
       // If the value is read more than once, skip it.
-      // VAR declarations and EXPR_RESULT don't need the value, but other
-      // ASSIGN expressions parents do.
       if (declaration != initialization &&
           !initialization.getGrandparent().isExprResult()) {
         return false;
       }
 
       // Be very conservative and do no cross control structures or
       // scope boundaries
       if (declaration.getBasicBlock() != initialization.getBasicBlock()
           || declaration.getBasicBlock() != reference.getBasicBlock()) {
         return false;
       }
 
-      // Do not inline into a call node. This would change
-      // the context in which it was being called. For example,
-      //   var a = b.c;
-      //   a();
-      // should not be inlined, because it calls a in the context of b
-      // rather than the context of the window.
-      //   var a = b.c;
-      //   f(a)
-      // is ok.
+      // Prevent inlining if the reference is in a call node and refers to a singleton getter
       Node value = initialization.getAssignedValue();
       Preconditions.checkState(value != null);
-      if (value.isGetProp()
-          && reference.getParent().isCall()
-          && reference.getParent().getFirstChild() == reference.getNode()) {
+      if (value.isGetProp() && reference.getParent().isCall() && 
+          reference.getParent().getFirstChild() == reference.getNode()) {
+        // Check if the value being referenced is a singleton getter
+        if (value.getFirstChild().isFunction() && 
+            value.getFirstChild().getParent().isAssign()) {
+          // Add a specific check to avoid inlining singleton getters
+          return false;
+        }
         return false;
       }
 
       if (value.isFunction()) {
         Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
+        if (callNode.isCall()) {
           CodingConvention convention = compiler.getCodingConvention();
           // Bug 2388531: Don't inline subclass definitions into class defining
           // calls as this confused class removing logic.
           SubclassRelationship relationship =
               convention.getClassesDefinedByCall(callNode);
           if (relationship != null) {
             return false;
           }
-
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
+          // issue 668: Don't inline singleton getter method calls 
+          // as this confuses class removing logic.
+          if (value.isGetProp() && value.getFirstChild().isFunction()) {
+            return false;
+          }
         }
       }
 
       return canMoveAggressively(value) ||
           canMoveModerately(initialization, reference);
     }
\ No newline at end of file
