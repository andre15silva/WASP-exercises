diff --git a/tmp/31aa1785-1ea4-42f8-a42c-7d76cd315f10_buggy.java b/tmp/c0f7dabd-acb4-41f2-8cc2-fed02e160d68_fixed.java
index 2955e62..1f8abc2 100644
--- a/tmp/31aa1785-1ea4-42f8-a42c-7d76cd315f10_buggy.java
+++ b/tmp/c0f7dabd-acb4-41f2-8cc2-fed02e160d68_fixed.java
@@ -1,66 +1,56 @@
-    /**
-     * @return true if the provided reference and declaration can be safely
-     *         inlined according to our criteria
-     */
 private boolean canInline(
     Reference declaration,
     Reference initialization,
     Reference reference) {
   if (!isValidDeclaration(declaration)
       || !isValidInitialization(initialization)
       || !isValidReference(reference)) {
     return false;
   }
 
   // If the value is read more than once, skip it.
-      // VAR declarations and EXPR_RESULT don't need the value, but other
-      // ASSIGN expressions parents do.
   if (declaration != initialization &&
       !initialization.getGrandparent().isExprResult()) {
     return false;
   }
 
   // Be very conservative and do no cross control structures or
   // scope boundaries
   if (declaration.getBasicBlock() != initialization.getBasicBlock()
       || declaration.getBasicBlock() != reference.getBasicBlock()) {
     return false;
   }
 
   // Do not inline into a call node. This would change
-      // the context in which it was being called. For example,
-      //   var a = b.c;
-      //   a();
-      // should not be inlined, because it calls a in the context of b
-      // rather than the context of the window.
-      //   var a = b.c;
-      //   f(a)
-      // is ok.
+  // the context in which it was being called.
   Node value = initialization.getAssignedValue();
   Preconditions.checkState(value != null);
+  
+  // Added a check here to also ensure we're not inlining singleton getter methods
   if (value.isGetProp()
       && reference.getParent().isCall()
       && reference.getParent().getFirstChild() == reference.getNode()) {
+    
+    // Check if the method is a singleton getter
+    if (value.isFunction() && value.getFirstChild().getString().equals("getInstance")) {
+      return false;
+    }
+    
     return false;
   }
 
   if (value.isFunction()) {
     Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
+    if (callNode.isCall()) {
       CodingConvention convention = compiler.getCodingConvention();
-          // Bug 2388531: Don't inline subclass definitions into class defining
-          // calls as this confused class removing logic.
       SubclassRelationship relationship =
           convention.getClassesDefinedByCall(callNode);
       if (relationship != null) {
         return false;
       }
-
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
     }
   }
 
   return canMoveAggressively(value) ||
       canMoveModerately(initialization, reference);
 }
\ No newline at end of file
