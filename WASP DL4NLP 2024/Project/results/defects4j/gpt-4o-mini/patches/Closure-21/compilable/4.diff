diff --git a/tmp/97479c82-2b2b-4891-b6ca-b9ce27b7dce3_buggy.java b/tmp/861a88ad-5b28-4c25-9205-d6506f9479e9_fixed.java
index 49a5702..450b495 100644
--- a/tmp/97479c82-2b2b-4891-b6ca-b9ce27b7dce3_buggy.java
+++ b/tmp/861a88ad-5b28-4c25-9205-d6506f9479e9_fixed.java
@@ -1,66 +1,60 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    if (n.isEmpty() || n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+    // Do not try to remove a block or an expr result.
     if (n.isExprResult()) {
         return;
     }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+    
     if (parent.getType() == Token.COMMA) {
         if (isResultUsed) {
             return;
         }
         if (n == parent.getLastChild()) {
             for (Node an : parent.getAncestors()) {
                 int ancestorType = an.getType();
                 if (ancestorType == Token.COMMA) continue;
                 if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
                 else break;
             }
         }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
         if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
             return;
         }
     }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    
+    // Added condition to consider if the node is part of a single-expression context
+    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) && 
+        !(parent.isAssign() || parent.isReturn() || parent.isIf() || parent.isWhile() || parent.isDo() || parent.isFor() || parent.isSwitch() || parent.isTry())) {
         String msg = "This code lacks side-effects. Is there a bug?";
         if (n.isString()) {
             msg = "Is there a missing '+' on the previous line?";
         } else if (isSimpleOp) {
             msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                 "' operator is not being used.";
         }
 
         t.getCompiler().report(
             t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+        // TODO(johnlenz): determine if it is necessary to try to protect side-effect free statements as well.
         if (!NodeUtil.isStatement(n)) {
             problemNodes.add(n);
         }
     }
 }
\ No newline at end of file
