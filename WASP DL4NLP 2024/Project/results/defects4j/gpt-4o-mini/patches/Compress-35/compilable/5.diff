diff --git a/tmp/3d49c00f-0178-4fe1-9ab4-2d063437b4fd_buggy.java b/tmp/29ca1570-1bc4-4a92-9e99-587f5dc29824_fixed.java
index 9d69396..34d74d5 100644
--- a/tmp/3d49c00f-0178-4fe1-9ab4-2d063437b4fd_buggy.java
+++ b/tmp/29ca1570-1bc4-4a92-9e99-587f5dc29824_fixed.java
@@ -1,46 +1,23 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
     int digits = 0;
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
         if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
+            if (digits < 6 && '0' <= b && b <= '7') {
+                storedSum = storedSum * 8 + (b - '0');
+                digits++;
             } else if (digits > 0) {
-                    digits = 6;
+                digits = 6; // Any non-'0'-'7' byte after starting the sum will terminate the count.
             }
-                b = ' ';
+            b = ' '; // Set b to a space character to ignore the current byte in the sums.
         }
-            unsignedSum += 0xff & b;
-            signedSum += b;
+        unsignedSum += 0xff & b; // Calculate unsigned sum.
+        signedSum += b; // Calculate signed sum.
     }
+    // The sum should also check against the correct handling of ignoring the checksum bytes.
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
