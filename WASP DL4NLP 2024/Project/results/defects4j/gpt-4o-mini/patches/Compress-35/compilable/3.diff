diff --git a/tmp/d1d202a5-dd8e-4d6d-b476-efa8ecb61391_buggy.java b/tmp/aae316dc-cfa2-4637-a362-3a89a9b9fd43_fixed.java
index 9d69396..ae703c5 100644
--- a/tmp/d1d202a5-dd8e-4d6d-b476-efa8ecb61391_buggy.java
+++ b/tmp/aae316dc-cfa2-4637-a362-3a89a9b9fd43_fixed.java
@@ -1,46 +1,22 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
     int digits = 0;
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
         if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
+            if ('0' <= b && b <= '7' && digits < 6) {
+                storedSum = storedSum * 8 + (b - '0'); // Correctly handle the byte subtraction
+                digits++;
             } else if (digits > 0) {
-                    digits = 6;
+                digits = 6; // Stop counting after the first six digits
             }
-                b = ' ';
+            b = 32; // Treat the checksum bytes as ASCII space
         }
         unsignedSum += 0xff & b;
         signedSum += b;
     }
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
