diff --git a/tmp/eded1ee3-17ae-4dbe-af2b-db68f3f55c51_buggy.java b/tmp/80a438c7-0973-4f44-a68a-8c1e21b92e0d_fixed.java
index 8ff679b..924139c 100644
--- a/tmp/eded1ee3-17ae-4dbe-af2b-db68f3f55c51_buggy.java
+++ b/tmp/80a438c7-0973-4f44-a68a-8c1e21b92e0d_fixed.java
@@ -1,39 +1,35 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
     String functionName, HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
   Set<String> currentPropertyNames;
+  
   // This can be the case if interfaceType is proxy to a non-existent
   // object (which is a bad type annotation, but shouldn't crash).
+  if (implicitProto == null) {
+    // Handle case where implicitProto is null (non-existent type)
+    compiler.report(t.makeError(n, BAD_TYPE_ANNOTATION, functionName, interfaceType.toString()));
+    return; // Exit early if the prototype is non-existent.
+  }
+
   currentPropertyNames = implicitProto.getOwnPropertyNames();
   for (String name : currentPropertyNames) {
     ObjectType oType = properties.get(name);
     if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
+      if (interfaceType.getPropertyType(name) != null && 
+          !interfaceType.getPropertyType(name).isEquivalentTo(
               oType.getPropertyType(name))) {
         compiler.report(
             t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                 functionName, name, oType.toString(),
                 interfaceType.toString()));
       }
     }
     currentProperties.put(name, interfaceType);
   }
   for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
     checkInterfaceConflictProperties(t, n, functionName, properties,
         currentProperties, iType);
   }
 }
\ No newline at end of file
