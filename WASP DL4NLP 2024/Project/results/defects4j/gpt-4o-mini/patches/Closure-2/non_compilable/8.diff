diff --git a/tmp/e9dfd7a2-5ec3-47f7-ba0e-cde3c3702e7c_buggy.java b/tmp/ed46ca4f-a472-4eea-919c-32ac2bc63489_fixed.java
index 8ff679b..6c13aac 100644
--- a/tmp/e9dfd7a2-5ec3-47f7-ba0e-cde3c3702e7c_buggy.java
+++ b/tmp/ed46ca4f-a472-4eea-919c-32ac2bc63489_fixed.java
@@ -1,39 +1,28 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
     String functionName, HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+  Set<String> currentPropertyNames = implicitProto != null ? implicitProto.getOwnPropertyNames() : Collections.emptySet();
+  
   for (String name : currentPropertyNames) {
     ObjectType oType = properties.get(name);
     if (oType != null) {
       if (!interfaceType.getPropertyType(name).isEquivalentTo(
           oType.getPropertyType(name))) {
         compiler.report(
             t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                 functionName, name, oType.toString(),
                 interfaceType.toString()));
       }
     }
     currentProperties.put(name, interfaceType);
   }
+  
   for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+    if (iType != null) { // Check for null to avoid potential NullPointerException
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
+}
\ No newline at end of file
