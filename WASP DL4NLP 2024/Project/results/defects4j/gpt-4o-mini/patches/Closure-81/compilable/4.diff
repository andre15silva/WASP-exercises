diff --git a/tmp/ef7fb451-bba9-411b-977e-65b76120c2f3_buggy.java b/tmp/e21f1246-bc39-4735-9d73-0cbd12a3311b_fixed.java
index 6e05e4b..450b74d 100644
--- a/tmp/ef7fb451-bba9-411b-977e-65b76120c2f3_buggy.java
+++ b/tmp/e21f1246-bc39-4735-9d73-0cbd12a3311b_fixed.java
@@ -1,51 +1,40 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
     Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
+    boolean isUnnamedFunction = (name == null);
+    
+    if (isUnnamedFunction) {
         name = new Name();
         name.setIdentifier("");
-        isUnnamedFunction = true;
     }
+
     Node node = newNode(Token.FUNCTION);
     Node newName = transform(name);
+    
+    // Set line number and character number for unnamed function if applicable
     if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
+        // Marking the character number for the unnamed function
+        newName.setCharno(functionNode.getAbsolutePosition() + functionNode.getLp());
     }
 
     node.addChildToBack(newName);
     Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
-        lp.setLineno(functionNode.getLineno());
-      }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
     
+    // Setting line number for left parenthesis based on whether the function is named
+    lp.setLineno(isUnnamedFunction ? functionNode.getLineno() : name.getLineno());
+    
+    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
     lp.setCharno(position2charno(lparenCharno));
+
     for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
     }
     node.addChildToBack(lp);
 
     Node bodyNode = transform(functionNode.getBody());
     parseDirectives(bodyNode);
     node.addChildToBack(bodyNode);
+    
     return node;
 }
\ No newline at end of file
