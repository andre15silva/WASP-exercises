diff --git a/tmp/81675dfb-2916-40d8-b8d8-f49981da2983_buggy.java b/tmp/9c3033bc-3710-4c18-bfd1-db1b034c0fd4_fixed.java
index 6e05e4b..e42d0c1 100644
--- a/tmp/81675dfb-2916-40d8-b8d8-f49981da2983_buggy.java
+++ b/tmp/9c3033bc-3710-4c18-bfd1-db1b034c0fd4_fixed.java
@@ -1,51 +1,40 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
   Boolean isUnnamedFunction = false;
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
   if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
-        lp.setLineno(functionNode.getLineno());
-      }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+  lp.setLineno(name.getLineno());
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
+
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
+  
+  // New part: properly mark the line number of the unnamed function
+  if (isUnnamedFunction) {
+    // Correctly set the line number for the body node of unnamed functions as well
+    bodyNode.setLineno(functionNode.getLineno());
+  }
+  
   return node;
 }
\ No newline at end of file
