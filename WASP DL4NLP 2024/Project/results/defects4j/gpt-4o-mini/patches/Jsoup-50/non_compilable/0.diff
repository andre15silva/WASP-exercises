diff --git a/tmp/ea22c36c-bec6-4704-a8cf-d23af640d2c5_buggy.java b/tmp/e1681e6c-3dd5-4a90-bcba-deb79254d4bc_fixed.java
index 25ca093..3820745 100644
--- a/tmp/ea22c36c-bec6-4704-a8cf-d23af640d2c5_buggy.java
+++ b/tmp/e1681e6c-3dd5-4a90-bcba-deb79254d4bc_fixed.java
@@ -1,52 +1,65 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
-
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = parser.parseInput(docData, baseUri); // Parse again after updating charset
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+    
+    // Handle BOM for known UTF-16/UTF-32 encodings
+    if (byteData.remaining() >= 2) {
+        byte[] bom = new byte[4];
+        byteData.mark(); // Mark current position
+        byteData.get(bom);
+        byteData.reset(); // Reset back to position marked
+        if (Arrays.equals(bom, new byte[]{(byte) 0xFF, (byte) 0xFE})) { // UTF-16 LE
+            charsetName = "UTF-16LE";
+            docData = Charset.forName("UTF-16LE").decode(byteData).toString();
+        } else if (Arrays.equals(bom, new byte[]{(byte) 0xFE, (byte) 0xFF})) { // UTF-16 BE
+            charsetName = "UTF-16BE";
+            docData = Charset.forName("UTF-16BE").decode(byteData).toString();
+        } else if (Arrays.equals(bom, new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xFF})) { // UTF-32 BE
+            charsetName = "UTF-32BE";
+            docData = Charset.forName("UTF-32BE").decode(byteData).toString();
+        } else if (Arrays.equals(bom, new byte[]{(byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00})) { // UTF-32 LE
+            charsetName = "UTF-32LE";
+            docData = Charset.forName("UTF-32LE").decode(byteData).toString();
         }
-        if (doc == null) {
+    }
+
+    if (doc == null && docData.length() > 0) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
