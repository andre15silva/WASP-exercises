diff --git a/tmp/14916dec-94f0-4983-be06-8a96ddd1de40_buggy.java b/tmp/a6d99746-9d87-4191-851c-2ec89b21ab57_fixed.java
index 25ca093..a87c3d9 100644
--- a/tmp/14916dec-94f0-4983-be06-8a96ddd1de40_buggy.java
+++ b/tmp/a6d99746-9d87-4191-851c-2ec89b21ab57_fixed.java
@@ -1,52 +1,69 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
-
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        byteData.rewind(); // Rewind after initial decoding for BOM check
+        byte[] bom = new byte[4];
+
+        // Read potential BOM
+        byteData.get(bom, 0, Math.min(bom.length, byteData.remaining()));
+        String bomCharset = checkForBOM(bom);
+        if (bomCharset != null) {
+            charsetName = bomCharset;
+            byteData.rewind(); // Rewind again to decode with the detected BOM charset
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+        } else {
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
+        }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind(); // Ensure the byte buffer is rewound before decoding
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+// Helper method to check for BOM and return the corresponding charset
+private static String checkForBOM(byte[] bom) {
+    if (bom.length >= 2) {
+        if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) return "UTF-16LE"; // UTF-16LE
+        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) return "UTF-16BE"; // UTF-16BE
+    }
+    if (bom.length >= 4) {
+        if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) return "UTF-32BE"; // UTF-32BE
+        if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) return "UTF-32LE"; // UTF-32LE
+    }
+    return null; // No BOM detected
+}
\ No newline at end of file
