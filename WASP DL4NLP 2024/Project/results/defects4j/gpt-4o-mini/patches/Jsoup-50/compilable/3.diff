diff --git a/tmp/137fddb1-c67e-4e90-bf1a-8fb885736a3f_buggy.java b/tmp/1eaeb523-ec80-489a-b193-2de810aa3b70_fixed.java
index 25ca093..73234f3 100644
--- a/tmp/137fddb1-c67e-4e90-bf1a-8fb885736a3f_buggy.java
+++ b/tmp/1eaeb523-ec80-489a-b193-2de810aa3b70_fixed.java
@@ -1,52 +1,49 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
+    // Detect BOM and handle the character set appropriately
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        byteData.rewind(); // Rewind the ByteBuffer to read it again if necessary
         doc = parser.parseInput(docData, baseUri);
+        
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
         String foundCharset = null;
+        if (meta != null) { 
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
                 foundCharset = meta.attr("charset");
             }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
-                    }
-                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+            // Validate and use the found charset
+            if (foundCharset != null && Charset.isSupported(foundCharset)) {
+                charsetName = foundCharset.trim().replaceAll("[\"']", "");
+                byteData.rewind(); // Rewind the ByteBuffer for re-decoding
+                docData = Charset.forName(charsetName).decode(byteData).toString();
+                doc = parser.parseInput(docData, baseUri);
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+
+    // Handle BOM cases for UTF-16 and UTF-32
+    if (docData.length() > 0 && (docData.charAt(0) == '\uFEFF' || // BOM check for UTF-8
+                                  (charsetName.equals("UTF-16BE") && docData.startsWith("\uFEFF")) || // BOM check for UTF-16BE
+                                  (charsetName.equals("UTF-16LE") && docData.startsWith("\uFEFF")) || // BOM check for UTF-16LE
+                                  (charsetName.equals("UTF-32BE") && docData.startsWith("\u0000\uFEFF")) || // BOM check for UTF-32BE
+                                  (charsetName.equals("UTF-32LE") && docData.startsWith("\uFEFF\u0000")))) { // BOM check for UTF-32LE
+        docData = docData.substring(docData.charAt(0) == '\uFEFF' ? 1 : 4); // Remove BOM
     }
+
+    // Final parse if doc is still null
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
