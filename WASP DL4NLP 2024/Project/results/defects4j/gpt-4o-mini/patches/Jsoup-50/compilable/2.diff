diff --git a/tmp/964a986a-19e2-4231-9620-9d97cb6d38a4_buggy.java b/tmp/5c50a793-1cca-4eaf-b485-28e97e74f50f_fixed.java
index 25ca093..3f217e9 100644
--- a/tmp/964a986a-19e2-4231-9620-9d97cb6d38a4_buggy.java
+++ b/tmp/5c50a793-1cca-4eaf-b485-28e97e74f50f_fixed.java
@@ -1,52 +1,61 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
-
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = parser.parseInput(docData, baseUri);  // Updated to parse the document again
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
+        doc = parser.parseInput(docData, baseUri);  // Added parsing here as well
     }
+    
+    // Handle the BOM specifically for UTF-16 and UTF-32
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        
+        // Check if the content starts with a BOM and adjust accordingly
+        if (docData.length() > 0 && (docData.charAt(0) == '\uFEFF' || docData.charAt(0) == '\uFFFE')) {
             docData = docData.substring(1);
+        }
+        
         charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+    }
+    
+    // Set output settings once document is parsed
+    if (doc != null) {
         doc.outputSettings().charset(charsetName);
     }
+    
     return doc;
 }
\ No newline at end of file
