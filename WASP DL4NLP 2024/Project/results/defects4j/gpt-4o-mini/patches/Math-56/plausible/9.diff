diff --git a/tmp/38d694f4-ebdf-42b3-bbd4-50f5c5ce7114_buggy.java b/tmp/c442ea50-8804-4b1b-84c3-86c23a2913d4_fixed.java
index 2608424..137fbbc 100644
--- a/tmp/38d694f4-ebdf-42b3-bbd4-50f5c5ce7114_buggy.java
+++ b/tmp/c442ea50-8804-4b1b-84c3-86c23a2913d4_fixed.java
@@ -1,39 +1,30 @@
 /**
  * Convert to multidimensional counter.
  *
  * @param index Index in unidimensional counter.
  * @return the multidimensional counts.
  * @throws OutOfRangeException if {@code index} is not between
  * {@code 0} and the value returned by {@link #getSize()} (excluded).
  */
 public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
+    if (index < 0 || index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
 
     int count = 0;
     for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
+        int offset = uniCounterOffset[i];
+        int idx = index / offset; // Calculate idx directly based on the index
+        indices[i] = idx; // Store idx
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
+        // Update index to account for the counts we've "used up"
+        index -= idx * offset;
     }
-        --idx;
-        indices[last] = idx;
+
+    // The last dimension uses the remaining index
+    indices[last] = index; // Remaining index for the last dimension
 
     return indices;
 }
\ No newline at end of file
