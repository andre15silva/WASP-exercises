diff --git a/tmp/49df10e1-4d35-41ef-8468-a6f714bbc9c7_buggy.java b/tmp/60d005cf-9a64-4820-9706-66ac204b53e2_fixed.java
index 2608424..20b66e3 100644
--- a/tmp/49df10e1-4d35-41ef-8468-a6f714bbc9c7_buggy.java
+++ b/tmp/60d005cf-9a64-4820-9706-66ac204b53e2_fixed.java
@@ -1,39 +1,20 @@
-    /**
-     * Convert to multidimensional counter.
-     *
-     * @param index Index in unidimensional counter.
-     * @return the multidimensional counts.
-     * @throws OutOfRangeException if {@code index} is not between
-     * {@code 0} and the value returned by {@link #getSize()} (excluded).
-     */
 public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
+    if (index < 0 || index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
     
-        int count = 0;
+    // We need to handle the first last dimension specially
+    int count = index;
     for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+        int offset = uniCounterOffset[i];
+        indices[i] = count / offset; // Determine current index in the current dimension
+        count -= indices[i] * offset; // Reduce count for the remaining dimensions
     }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
+    // Handle the final dimension
+    indices[last] = count; // The remaining count corresponds to the last dimension
     
     return indices;
 }
\ No newline at end of file
