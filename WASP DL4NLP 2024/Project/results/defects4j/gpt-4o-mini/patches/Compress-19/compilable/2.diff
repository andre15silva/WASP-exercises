diff --git a/tmp/c5e668cc-fb87-45ae-b03a-64a2d2d44308_buggy.java b/tmp/435c8222-2122-48ec-9b5f-307f65131615_fixed.java
index 730ab7d..d39dbc1 100644
--- a/tmp/c5e668cc-fb87-45ae-b03a-64a2d2d44308_buggy.java
+++ b/tmp/435c8222-2122-48ec-9b5f-307f65131615_fixed.java
@@ -1,48 +1,43 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
+        // Calculate the expected length accounting for the possibility of excess data
+        int minExpectedLength = (hasUncompressedSize ? DWORD : 0)
             + (hasCompressedSize ? DWORD : 0)
             + (hasRelativeHeaderOffset ? DWORD : 0)
             + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+        if (rawCentralDirectoryData.length < minExpectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                                   + " data.  Expected at least length "
+                                   + minExpectedLength + " but is "
                                    + rawCentralDirectoryData.length);
         }
+
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                      offset);
             offset += DWORD;
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
             offset += WORD;
         }
+        
+        // Optional: Adjust the logic for handling excess data if necessary.
     }
 }
\ No newline at end of file
