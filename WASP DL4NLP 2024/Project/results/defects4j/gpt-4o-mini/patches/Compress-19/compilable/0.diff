diff --git a/tmp/03509797-aa57-4601-a288-9d0205a36259_buggy.java b/tmp/c0e2fc45-73c9-46e6-8cc3-4228aab14eef_fixed.java
index 730ab7d..ddb1ee0 100644
--- a/tmp/03509797-aa57-4601-a288-9d0205a36259_buggy.java
+++ b/tmp/c0e2fc45-73c9-46e6-8cc3-4228aab14eef_fixed.java
@@ -1,48 +1,50 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
+        // Calculate the expected length for the optional fields
         int expectedLength = (hasUncompressedSize ? DWORD : 0)
             + (hasCompressedSize ? DWORD : 0)
             + (hasRelativeHeaderOffset ? DWORD : 0)
             + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+        
+        // If the actual length exceeds the expected length, adjust it accordingly
+        if (rawCentralDirectoryData.length < expectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
                                    + " data. Expected length "
                                    + expectedLength + " but is "
                                    + rawCentralDirectoryData.length);
         }
+
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                      offset);
             offset += DWORD;
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
             offset += WORD;
         }
+
+        // Check for excess data after processing the expected fields
+        int excessDataLength = rawCentralDirectoryData.length - expectedLength;
+        if (excessDataLength > 0) {
+            // Optionally handle excess data if necessary (e.g., log or ignore)
+            // Can log a warning or handle as per the requirements
+        }
     }
 }
\ No newline at end of file
