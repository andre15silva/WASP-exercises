diff --git a/tmp/0e31b823-2335-42ac-92fa-13588451517b_buggy.java b/tmp/cc191f78-30e8-44d3-bb02-11e521b3d26e_fixed.java
index 730ab7d..4717b8a 100644
--- a/tmp/0e31b823-2335-42ac-92fa-13588451517b_buggy.java
+++ b/tmp/cc191f78-30e8-44d3-bb02-11e521b3d26e_fixed.java
@@ -1,48 +1,44 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
         int expectedLength = (hasUncompressedSize ? DWORD : 0)
             + (hasCompressedSize ? DWORD : 0)
             + (hasRelativeHeaderOffset ? DWORD : 0)
             + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+        // Adjust the expected length calculation to account for optional fields
+        expectedLength += (hasUncompressedSize ? 8 : 0)
+                        + (hasCompressedSize ? 8 : 0)
+                        + (hasRelativeHeaderOffset ? 8 : 0)
+                        + (hasDiskStart ? 4 : 0);
+        
+        if (rawCentralDirectoryData.length < expectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
                                    + " data.  Expected length "
                                    + expectedLength + " but is "
                                    + rawCentralDirectoryData.length);
         }
+        
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += 8; // DWORD - 8 bytes for ZipEightByteInteger
         }
         if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
-                offset += DWORD;
+            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            offset += 8; // DWORD - 8 bytes for ZipEightByteInteger
         }
         if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            offset += 8; // DWORD - 8 bytes for ZipEightByteInteger
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            offset += 4; // WORD - 4 bytes for ZipLong
         }
     }
 }
\ No newline at end of file
