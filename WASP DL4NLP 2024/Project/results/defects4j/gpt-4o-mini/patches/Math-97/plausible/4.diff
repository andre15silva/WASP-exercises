diff --git a/tmp/e5941cba-68da-4e6b-a24d-9abc9773700f_buggy.java b/tmp/ac01a1aa-b63e-438d-b23c-15c7bfe6301d_fixed.java
index 88647d1..65e7258 100644
--- a/tmp/e5941cba-68da-4e6b-a24d-9abc9773700f_buggy.java
+++ b/tmp/ac01a1aa-b63e-438d-b23c-15c7bfe6301d_fixed.java
@@ -1,44 +1,32 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
     FunctionEvaluationException {
     
     clearResult();
     verifyInterval(min, max);
     
     double ret = Double.NaN;
     
     double yMin = f.value(min);
     double yMax = f.value(max);
     
     // Verify bracketing
     double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
+    if (sign > 0) { // Updated condition to only check if both values are positive or negative
+        // check if either value is close to zero
+        if (Math.abs(yMin) < getAbsoluteAccuracy()) {
+            return min; // min is a root
+        } else if (Math.abs(yMax) < getAbsoluteAccuracy()) {
+            return max; // max is a root
+        }
         // neither value is close to zero and min and max do not bracket root.
         throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
     } else {
-            // solve using only the first endpoint as initial guess
+        // solve using the bracketing method
         ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
     }
 
     return ret;
 }
\ No newline at end of file
