diff --git a/tmp/921a065c-1f73-4b13-96b8-0a74a9b30e66_buggy.java b/tmp/763615db-7d25-4095-a58a-113aa1bba19e_fixed.java
index 21f64c6..b06e43e 100644
--- a/tmp/921a065c-1f73-4b13-96b8-0a74a9b30e66_buggy.java
+++ b/tmp/763615db-7d25-4095-a58a-113aa1bba19e_fixed.java
@@ -1,23 +1,24 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0) return -1; // Handle empty sequence case
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        // scan to first instance of startChar:
+        while (offset < length && startChar != input[offset]) {
+            offset++;
+        }
+        // Once we find startChar, we check if the full sequence matches
+        if (offset >= length) break; // break if beyond input length
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (last <= length) { // Ensure we won't go out of bounds
+            int j = 1;
+            while (i < last && j < seq.length() && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
+            }
+            if (j == seq.length()) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
