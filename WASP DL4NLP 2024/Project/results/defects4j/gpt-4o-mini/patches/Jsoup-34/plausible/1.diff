diff --git a/tmp/fc198e32-21f0-4389-b672-ddf25af5d370_buggy.java b/tmp/ccd673b2-1ff1-4262-a978-d4a622c4b265_fixed.java
index 21f64c6..6e73495 100644
--- a/tmp/fc198e32-21f0-4389-b672-ddf25af5d370_buggy.java
+++ b/tmp/ccd673b2-1ff1-4262-a978-d4a622c4b265_fixed.java
@@ -1,23 +1,24 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+        // scan to first instance of startChar:
         if (startChar != input[offset])
             while (++offset < length && startChar != input[offset]);
+        
+        if (offset >= length) break; // Check if we've gone past the length after the loop
+
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+        if (last <= length) { // Ensure last doesn't go out of bounds
+            for (int j = 1; j < seq.length(); i++, j++) {
+                if (i >= length || seq.charAt(j) != input[i]) {
+                    break; // Exit if out of bounds or characters don't match
+                }
+            }
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
