diff --git a/tmp/cfbdaf3c-00b3-424b-9484-b93ec0dce79a_buggy.java b/tmp/04d06f77-acce-416a-9e54-1ad021392606_fixed.java
index 21f64c6..48fc23f 100644
--- a/tmp/cfbdaf3c-00b3-424b-9484-b93ec0dce79a_buggy.java
+++ b/tmp/04d06f77-acce-416a-9e54-1ad021392606_fixed.java
@@ -1,23 +1,23 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+        // scan to first instance of startChar:
+        if (startChar != input[offset]) {
             while (++offset < length && startChar != input[offset]);
+        }
+        
+        if (offset >= length) {
+            break; // Exit if we've reached the end
+        }
+
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+        if (last <= length) { // Ensure we don't go out of bounds
+            for (int j = 1; j < seq.length() && i < length && seq.charAt(j) == input[i]; i++, j++);
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
