diff --git a/tmp/4e272dc2-f99a-418b-a323-14ad2b275503_buggy.java b/tmp/b43d6c9a-0405-40f2-b8f8-5804d61a85cc_fixed.java
index 21f64c6..6bcf3ea 100644
--- a/tmp/4e272dc2-f99a-418b-a323-14ad2b275503_buggy.java
+++ b/tmp/b43d6c9a-0405-40f2-b8f8-5804d61a85cc_fixed.java
@@ -1,23 +1,22 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+            // scan to first instance of startChar:
             if (startChar != input[offset])
                 while (++offset < length && startChar != input[offset]);
+            
+            // Ensure we do not exceed the bounds of the input array
+            if (offset >= length) break;
+
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+
+            if (last > length) continue; // Ensure we don't go out of bounds
+            
+            for (int j = 1; i <= last && j < seq.length() && seq.charAt(j) == input[i]; i++, j++);
+            if (i == last + 1) // found full sequence (last index should be inclusive)
                 return offset - pos;
         }
-        }
         return -1;
     }
\ No newline at end of file
