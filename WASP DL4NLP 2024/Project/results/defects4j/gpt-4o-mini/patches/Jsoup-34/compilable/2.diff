diff --git a/tmp/f0878f68-029f-4314-b07c-25171d4b8a96_buggy.java b/tmp/93c93c95-462e-4c87-b008-1cb75415c91c_fixed.java
index 21f64c6..85de752 100644
--- a/tmp/f0878f68-029f-4314-b07c-25171d4b8a96_buggy.java
+++ b/tmp/93c93c95-462e-4c87-b008-1cb75415c91c_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+        // scan to first instance of startChar
+        if (startChar != input[offset]) {
             while (++offset < length && startChar != input[offset]);
+        }
+        
+        // Check if we still have a valid position to search for the seq
+        if (offset < length) {
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+            if (last < length) { // Ensure 'last' is within bounds
+                for (int j = 1; j < seq.length() && i < length && seq.charAt(j) == input[i]; i++, j++);
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
