diff --git a/tmp/9f42aae4-d71c-46c9-a4ea-87fc2b491a41_buggy.java b/tmp/75e08a6c-9964-4674-8c63-07d4ed55606d_fixed.java
index 21f64c6..aca440a 100644
--- a/tmp/9f42aae4-d71c-46c9-a4ea-87fc2b491a41_buggy.java
+++ b/tmp/75e08a6c-9964-4674-8c63-07d4ed55606d_fixed.java
@@ -1,23 +1,25 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+        // scan to first instance of startChar:
+        if (startChar != input[offset]) {
             while (++offset < length && startChar != input[offset]);
+        }
+        
+        // Check if we are within bounds before checking further
+        if (offset >= length) {
+            break; // Exit if offset exceeds length
+        }
+        
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+
+        // Ensure we do not go out of bounds when verifying the sequence
+        if (last < length) {
+            for (int j = 1; j < seq.length() && i < length && seq.charAt(j) == input[i]; i++, j++);
+            if (i == last + 1) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
