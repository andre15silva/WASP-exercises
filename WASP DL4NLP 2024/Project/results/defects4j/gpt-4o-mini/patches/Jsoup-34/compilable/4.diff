diff --git a/tmp/01c07146-ad91-47ee-a46c-5e99724f2786_buggy.java b/tmp/9a9bb7f0-3075-4450-a25d-f43b55109b50_fixed.java
index 21f64c6..707b8da 100644
--- a/tmp/01c07146-ad91-47ee-a46c-5e99724f2786_buggy.java
+++ b/tmp/9a9bb7f0-3075-4450-a25d-f43b55109b50_fixed.java
@@ -1,23 +1,38 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    // Check for empty sequence
+    if (seq.length() == 0) {
+        return -1;
+    }
+
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+        // scan to first instance of startChar:
+        if (startChar != input[offset]) {
             while (++offset < length && startChar != input[offset]);
+        }
+        
+        // Ensure we are still within bounds
+        if (offset >= length) {
+            return -1;
+        }
+
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        
+        // Ensure we do not exceed the length of the input
+        if (last >= length) {
+            return -1;
+        }
+
+        for (int j = 1; j < seq.length(); i++, j++) {
+            // Make sure we do not exceed the bounds of input
+            if (i >= length || seq.charAt(j) != input[i]) {
+                break;
+            }
+            if (j == seq.length() - 1) { // found full sequence
                 return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
