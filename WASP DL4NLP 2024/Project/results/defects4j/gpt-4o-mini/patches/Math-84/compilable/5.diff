diff --git a/tmp/62c7d6b8-80c7-4b0d-b3bd-0180db684be9_buggy.java b/tmp/8bbca92a-4929-4c38-ab76-b28500a1d553_fixed.java
index 5f1dcf2..2102051 100644
--- a/tmp/62c7d6b8-80c7-4b0d-b3bd-0180db684be9_buggy.java
+++ b/tmp/8bbca92a-4929-4c38-ab76-b28500a1d553_fixed.java
@@ -1,41 +1,47 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = new RealPointValuePair[] { reflected };
+            } else {
+                simplex = new RealPointValuePair[] { best };
             }
 
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = new RealPointValuePair[] { contracted };
 
             // check convergence
             return;
         }
 
+        // shrink the simplex
+        for (int i = 1; i < simplex.length; i++) {
+            simplex[i] = evaluateNewSimplex(original, 0.5, comparator);
+        }
+
     }
 
 }
\ No newline at end of file
