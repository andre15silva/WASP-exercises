diff --git a/tmp/f5c75158-ac49-4226-895b-b339cc702427_buggy.java b/tmp/481c0bbe-f356-47ce-892a-cf01e6a41309_fixed.java
index 5f1dcf2..e25faf7 100644
--- a/tmp/f5c75158-ac49-4226-895b-b339cc702427_buggy.java
+++ b/tmp/481c0bbe-f356-47ce-892a-cf01e6a41309_fixed.java
@@ -1,41 +1,49 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = new RealPointValuePair[original.length]; // Initialize simplex
+                System.arraycopy(original, 0, simplex, 0, original.length);
+                simplex[original.length - 1] = reflected; // Replace the worst point with the reflected point
+            } else {
+                simplex = new RealPointValuePair[original.length]; // Initialize simplex
+                System.arraycopy(original, 0, simplex, 0, original.length);
+                simplex[original.length - 1] = expanded; // Replace the worst point with the expanded point
             }
-
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
+            simplex = new RealPointValuePair[original.length]; // Initialize simplex
+            System.arraycopy(original, 0, simplex, 0, original.length);
+            simplex[original.length - 1] = contracted; // Replace the worst point with the contracted point
             return;
         }
 
+        // Shrink the simplex towards the best point
+        for (int i = 1; i < simplex.length; i++) {
+            simplex[i] = evaluateNewSimplex(new RealPointValuePair[] { best }, 0.5, comparator);
+        }
     }
-
 }
\ No newline at end of file
