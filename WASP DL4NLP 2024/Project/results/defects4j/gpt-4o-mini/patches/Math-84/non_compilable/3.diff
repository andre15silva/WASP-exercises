diff --git a/tmp/74688f68-29ff-458d-9e75-ffe7bdec5225_buggy.java b/tmp/3ea6fdb6-b133-48d9-98b6-9c68b9e464a4_fixed.java
index 5f1dcf2..f10770b 100644
--- a/tmp/74688f68-29ff-458d-9e75-ffe7bdec5225_buggy.java
+++ b/tmp/3ea6fdb6-b133-48d9-98b6-9c68b9e464a4_fixed.java
@@ -1,41 +1,56 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = new RealPointValuePair[original.length];
+                System.arraycopy(original, 0, simplex, 0, original.length);
+                simplex[original.length - 1] = reflected;
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[original.length];
+                System.arraycopy(original, 0, simplex, 0, original.length);
+                simplex[original.length - 1] = expanded;
             }
 
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = new RealPointValuePair[original.length];
+            System.arraycopy(original, 0, simplex, 0, original.length);
+            simplex[original.length - 1] = contracted;
 
             // check convergence
             return;
         }
 
+        // shrink the simplex towards the best point
+        for (int i = 1; i < simplex.length; i++) {
+            simplex[i] = new RealPointValuePair(
+                    best.getPoint()[0] + (simplex[i].getPoint()[0] - best.getPoint()[0]) * 0.5,
+                    best.getPoint()[1] + (simplex[i].getPoint()[1] - best.getPoint()[1]) * 0.5
+            );
+        }
     }
-
 }
\ No newline at end of file
