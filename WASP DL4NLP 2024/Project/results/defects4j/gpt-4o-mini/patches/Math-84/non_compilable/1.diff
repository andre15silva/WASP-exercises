diff --git a/tmp/d328da6d-5487-4c71-acd9-a8d83d6b2fea_buggy.java b/tmp/88768d7f-9d5d-49d6-be3a-c14c440bb06b_fixed.java
index 5f1dcf2..1961179 100644
--- a/tmp/d328da6d-5487-4c71-acd9-a8d83d6b2fea_buggy.java
+++ b/tmp/88768d7f-9d5d-49d6-be3a-c14c440bb06b_fixed.java
@@ -1,41 +1,45 @@
-    /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = new RealPointValuePair(reflected.getPoint(), reflected.getValue());
+                return;
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair(expanded.getPoint(), expanded.getValue());
+                return;
             }
-
-                return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
+            simplex = new RealPointValuePair(contracted.getPoint(), contracted.getValue());
             return;
         }
 
+        // shrink the simplex towards the best vertex
+        for (int i = 1; i < original.length; i++) {
+            simplex[i] = new RealPointValuePair(
+                original[i].getPoint(),
+                original[0].getValue() + (original[i].getValue() - original[0].getValue()) * sigma);
+        }
     }
-
 }
\ No newline at end of file
