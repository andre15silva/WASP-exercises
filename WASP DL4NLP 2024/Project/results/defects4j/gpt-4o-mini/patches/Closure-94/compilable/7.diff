diff --git a/tmp/72f3a045-537c-4602-9501-12ad00948add_buggy.java b/tmp/b40d456b-f70b-41a5-b82e-fc1096a6838f_fixed.java
index 66e3d01..f161445 100644
--- a/tmp/72f3a045-537c-4602-9501-12ad00948add_buggy.java
+++ b/tmp/b40d456b-f70b-41a5-b82e-fc1096a6838f_fixed.java
@@ -1,34 +1,37 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
       // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
+        return isValidDefineValue(val.getFirstChild(), defines) &&
+               isValidDefineValue(val.getLastChild(), defines);
 
-      // Uniary operators are valid if the child is valid.
+      // Unary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
+        return defines.contains(val.getQualifiedName());
+
+      // Property access is valid if the property name is an existing define.
       case Token.GETPROP:
-        if (val.isQualifiedName()) {
         return defines.contains(val.getQualifiedName());
     }
-    }
     return false;
   }
\ No newline at end of file
