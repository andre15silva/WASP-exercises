diff --git a/tmp/1bfe1992-05b8-4972-8c63-fd2b0858052f_buggy.java b/tmp/a3a5a91b-c2e6-4ef9-b512-3b26d3d4e007_fixed.java
index 66e3d01..2f32980 100644
--- a/tmp/1bfe1992-05b8-4972-8c63-fd2b0858052f_buggy.java
+++ b/tmp/a3a5a91b-c2e6-4ef9-b512-3b26d3d4e007_fixed.java
@@ -1,34 +1,37 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
+    // Check the type of the node
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
         // Binary operators are only valid if both children are valid.
         case Token.BITAND:
         case Token.BITNOT:
         case Token.BITOR:
         case Token.BITXOR:
+        case Token.ADD: // Include addition to handle expressions like "1 + 8"
+        case Token.SUB: // Include subtraction to handle negation as well
+            if (val.getFirstChild() != null && val.getFirstChild().getNext() != null) {
+                return isValidDefineValue(val.getFirstChild(), defines) &&
+                       isValidDefineValue(val.getFirstChild().getNext(), defines);
+            }
+            return false;
 
-      // Uniary operators are valid if the child is valid.
+        // Unary operators are valid if the child is valid.
         case Token.NOT:
         case Token.NEG:
             return isValidDefineValue(val.getFirstChild(), defines);
 
         // Names are valid if and only if they are defines themselves.
         case Token.NAME:
         case Token.GETPROP:
             if (val.isQualifiedName()) {
                 return defines.contains(val.getQualifiedName());
             }
+            return false; // Handle case where it's not a qualified name
     }
     return false;
 }
\ No newline at end of file
