diff --git a/tmp/ffda8fa9-6d06-4ce0-901a-34b204dcc82b_buggy.java b/tmp/18abfce0-8042-4e57-94fe-e93134266a61_fixed.java
index d931bce..c9ddf41 100644
--- a/tmp/ffda8fa9-6d06-4ce0-901a-34b204dcc82b_buggy.java
+++ b/tmp/18abfce0-8042-4e57-94fe-e93134266a61_fixed.java
@@ -1,5 +1,42 @@
 /** {@inheritDoc} */
 public double solve(final UnivariateRealFunction f, double min, double max, double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+    // Ensure that the provided function is not null
+    if (f == null) {
+        throw new IllegalArgumentException("Function must not be null.");
+    }
+    
+    // Implement the bisection method logic
+    double lower = min;
+    double upper = max;
+    double mid;
+
+    // Ensure initial is within bounds
+    if (initial < lower || initial > upper) {
+        throw new IllegalArgumentException("Initial guess must be between min and max.");
+    }
+
+    // Main bisection loop
+    int iteration = 0;
+    final int maxIterations = 100; // Example max iterations
+    while (iteration < maxIterations) {
+        mid = (lower + upper) / 2.0;
+        double fLower = f.value(lower);
+        double fMid = f.value(mid);
+
+        if (fLower * fMid < 0) {
+            upper = mid; // Root is in the lower half
+        } else {
+            lower = mid; // Root is in the upper half
+        }
+
+        // Check for convergence (e.g., if the interval is sufficiently small)
+        if (Math.abs(upper - lower) < getAbsoluteAccuracy()) {
+            return mid; // Found root
+        }
+
+        iteration++;
+    }
+
+    throw new MaxIterationsExceededException(maxIterations);
 }
\ No newline at end of file
