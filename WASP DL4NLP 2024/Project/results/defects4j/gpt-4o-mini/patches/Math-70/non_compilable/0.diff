diff --git a/tmp/70ea557b-cb74-4969-9015-5a0ff0cef388_buggy.java b/tmp/92c38332-16a0-4f87-806b-902a18408d17_fixed.java
index d931bce..62d0388 100644
--- a/tmp/70ea557b-cb74-4969-9015-5a0ff0cef388_buggy.java
+++ b/tmp/92c38332-16a0-4f87-806b-902a18408d17_fixed.java
@@ -1,5 +1,27 @@
     /** {@inheritDoc} */
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+        // Implement the bisection method to find the root of the function f
+        if (f == null) {
+            throw new FunctionEvaluationException(new NullPointerException("Function is null"));
+        }
+
+        // Check if the initial bracket is valid
+        if (f.value(min) * f.value(max) >= 0) {
+            throw new FunctionEvaluationException(new IllegalArgumentException("Function values at the endpoints must be of opposite sign"));
+        }
+
+        double mid = initial;
+        while ((max - min) > getAbsoluteAccuracy()) {
+            mid = (min + max) / 2.0;
+            double fMid = f.value(mid);
+            if (fMid == 0) {
+                return mid; // Found exact solution
+            } else if (f.value(min) * fMid < 0) {
+                max = mid; // The root is in the left half
+            } else {
+                min = mid; // The root is in the right half
+            }
+        }
+        return mid; // Return the midpoint as the root approximation
     }
\ No newline at end of file
