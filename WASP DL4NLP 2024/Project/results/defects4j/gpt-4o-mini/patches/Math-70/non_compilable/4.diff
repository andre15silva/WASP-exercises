diff --git a/tmp/a621c150-519b-4482-8316-c22f2dc00cee_buggy.java b/tmp/1d364384-b807-4e4d-9819-be460b3183e7_fixed.java
index d931bce..8faff1f 100644
--- a/tmp/a621c150-519b-4482-8316-c22f2dc00cee_buggy.java
+++ b/tmp/1d364384-b807-4e4d-9819-be460b3183e7_fixed.java
@@ -1,5 +1,37 @@
     /** {@inheritDoc} */
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+        // Implement the bisection method to solve for the root
+        if (f == null) {
+            throw new FunctionEvaluationException("Function cannot be null.");
+        }
+        
+        if (min >= max) {
+            throw new IllegalArgumentException("Minimum must be less than maximum.");
+        }
+
+        double valueAtMin = f.value(min);
+        double valueAtMax = f.value(max);
+
+        if (valueAtMin * valueAtMax > 0) {
+            throw new FunctionEvaluationException("The function must change sign over the interval.");
+        }
+
+        double mid;
+        while ((max - min) > getAbsoluteAccuracy()) {
+            mid = (min + max) / 2;
+            double valueAtMid = f.value(mid);
+
+            if (valueAtMid == 0.0) {
+                return mid; // Found exact root
+            } else if (valueAtMin * valueAtMid < 0) {
+                max = mid;
+                valueAtMax = valueAtMid;
+            } else {
+                min = mid;
+                valueAtMin = valueAtMid;
+            }
+        }
+
+        return (min + max) / 2; // Return the midpoint as the approximation of the root
     }
\ No newline at end of file
