diff --git a/tmp/df5d2812-65f2-4efa-8bfa-5eb3e0c24547_buggy.java b/tmp/3b5d03e3-0249-426b-ab8f-b946a9b66469_fixed.java
index 229b3e7..46fa550 100644
--- a/tmp/df5d2812-65f2-4efa-8bfa-5eb3e0c24547_buggy.java
+++ b/tmp/3b5d03e3-0249-426b-ab8f-b946a9b66469_fixed.java
@@ -1,55 +1,56 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    // Check if width is less than or equal to 0
+    if (width <= 0) {
+        throw new IllegalArgumentException("Width must be greater than 0");
+    }
+
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
+    // Ensuring nextLineTabStop is within manageable limits
+    if (nextLineTabStop > width)
     {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        nextLineTabStop = width; // Adjust to not exceed the width
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        if (text.length() > width && pos == nextLineTabStop - 1) 
         {
-                pos = width;
+            pos = width; // Ensure we do not go out of bounds
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        
+        // Update position for the next iteration
+        text = text.substring(pos).trim();
+        pos = findWrapPos(text, width, 0);
+        
+        // Break if no more wrapping is required
+        if (pos == -1) {
+            sb.append(text);
+            break;
+        }
     }
 }
\ No newline at end of file
