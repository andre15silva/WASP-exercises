diff --git a/tmp/83ea2d61-1300-4b11-a498-cb0fabc4c92e_buggy.java b/tmp/135aff0b-979e-4653-85db-93fe3b3996ff_fixed.java
index 229b3e7..dc68b45 100644
--- a/tmp/83ea2d61-1300-4b11-a498-cb0fabc4c92e_buggy.java
+++ b/tmp/135aff0b-979e-4653-85db-93fe3b3996ff_fixed.java
@@ -1,55 +1,47 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    // Ensure width is greater than nextLineTabStop to prevent IllegalStateException
+    if (width <= nextLineTabStop) {
+        throw new IllegalStateException("Total width must be greater than the indent width");
+    }
+
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
+    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
         
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        if ( (text.length() > width) && (pos >= width) ) 
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        
+        // Prevent an infinite loop if the wrap position hasn't changed
+        if (pos == padding.length() || pos == 0) {
+            break;
+        }
     }
 }
\ No newline at end of file
