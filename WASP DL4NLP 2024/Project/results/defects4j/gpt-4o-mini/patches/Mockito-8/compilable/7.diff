diff --git a/tmp/93cbc79e-f685-4f7a-a3b6-b39cb1596857_buggy.java b/tmp/df55a6a3-2efb-4e4c-8757-fc9dba904b54_fixed.java
index 42b58d0..6f12db3 100644
--- a/tmp/93cbc79e-f685-4f7a-a3b6-b39cb1596857_buggy.java
+++ b/tmp/df55a6a3-2efb-4e4c-8757-fc9dba904b54_fixed.java
@@ -1,19 +1,25 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
+    // Ensure we only register if we don't have a self-referencing type.
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Check for self-referencing type
+        if (actualTypeArgument instanceof Class<?> && ((Class<?>) actualTypeArgument).isAssignableFrom((Class<?>) parameterizedType.getRawType())) {
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
