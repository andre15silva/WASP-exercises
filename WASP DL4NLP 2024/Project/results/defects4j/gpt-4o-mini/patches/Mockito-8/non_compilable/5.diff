diff --git a/tmp/28538eea-f147-46af-9bf6-b80e9e2f56e9_buggy.java b/tmp/7eb60931-60d2-40ad-8973-f4cb6f5ab9f1_fixed.java
index 42b58d0..0d72296 100644
--- a/tmp/28538eea-f147-46af-9bf6-b80e9e2f56e9_buggy.java
+++ b/tmp/7eb60931-60d2-40ad-8973-f4cb6f5ab9f1_fixed.java
@@ -1,19 +1,33 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
+    
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
+    // Avoiding circular references by tracking processed types
+    Set<Type> processedTypes = new HashSet<>();
+    registerTypeVariables(parameterizedType, typeParameters, actualTypeArguments, processedTypes);
+}
+
+private void registerTypeVariables(ParameterizedType parameterizedType, TypeVariable<?>[] typeParameters, Type[] actualTypeArguments, Set<Type> processedTypes) {
+    if (!processedTypes.add(parameterizedType)) return; // Prevent cycles
+
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+        
+        // Continue registering type variables for nested parameterized types
+        if (actualTypeArgument instanceof ParameterizedType) {
+            registerTypeVariables((ParameterizedType) actualTypeArgument, ((Class<?>) ((ParameterizedType) actualTypeArgument).getRawType()).getTypeParameters(), ((ParameterizedType) actualTypeArgument).getActualTypeArguments(), processedTypes);
+        }
     }
 }
\ No newline at end of file
