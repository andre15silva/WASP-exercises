diff --git a/tmp/7dcc1d93-dc62-4c9b-9f38-d6636c24d76a_buggy.java b/tmp/add39ad2-8a04-418c-943a-41e6629e5d73_fixed.java
index fb2b020..129dbcd 100644
--- a/tmp/7dcc1d93-dc62-4c9b-9f38-d6636c24d76a_buggy.java
+++ b/tmp/add39ad2-8a04-418c-943a-41e6629e5d73_fixed.java
@@ -1,27 +1,23 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+                // Ensure that we have a valid type to infer.
+                JSType typeToInfer;
+                if (hasProperty(prop)) {
+                    typeToInfer = propType; // Use the existing property type.
+                } else {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                         .getLeastSupertype(propType);
                 }
+                // Define the inferred property with the appropriate type.
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
