diff --git a/tmp/d744fbc6-1c72-4a6a-9904-2322f32b2e73_buggy.java b/tmp/e6e96d58-6ca9-4862-ab7e-c9a4e68af6aa_fixed.java
index fb2b020..ada5e84 100644
--- a/tmp/d744fbc6-1c72-4a6a-9904-2322f32b2e73_buggy.java
+++ b/tmp/e6e96d58-6ca9-4862-ab7e-c9a4e68af6aa_fixed.java
@@ -1,27 +1,20 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+        if (hasProperty(prop)) {
+          defineInferredProperty(prop, propType, null);
+        } else {
+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
-          }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
+}
\ No newline at end of file
