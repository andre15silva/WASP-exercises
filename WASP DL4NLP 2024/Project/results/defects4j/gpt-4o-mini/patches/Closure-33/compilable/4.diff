diff --git a/tmp/1db2df26-1871-4069-9240-aa3329406e8f_buggy.java b/tmp/c1802aed-d6ec-486e-84e6-594dc7c4b59b_fixed.java
index fb2b020..b016ee1 100644
--- a/tmp/1db2df26-1871-4069-9240-aa3329406e8f_buggy.java
+++ b/tmp/c1802aed-d6ec-486e-84e6-594dc7c4b59b_fixed.java
@@ -1,27 +1,24 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
+            // Ensure we're checking the correct conditions for property type declaration
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
+                // Check if the property exists before inferring its type
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                         .getLeastSupertype(propType);
+                } else {
+                    // Infer the type if the property exists
+                    typeToInfer = propType;  // Ensure we use the property type
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
