diff --git a/tmp/fe18ff6f-ea6c-4d92-a1d9-a01d51fec0fd_buggy.java b/tmp/46931c9b-f903-4d4b-aa3d-5a2e6e3247c2_fixed.java
index fb2b020..9701566 100644
--- a/tmp/fe18ff6f-ea6c-4d92-a1d9-a01d51fec0fd_buggy.java
+++ b/tmp/46931c9b-f903-4d4b-aa3d-5a2e6e3247c2_fixed.java
@@ -1,27 +1,20 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+            // Ensure we properly check if the property type is declared using `isPropertyTypeDeclared`.
+            if (!isPropertyTypeDeclared(prop) || !hasProperty(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                         .getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
