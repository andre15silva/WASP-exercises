diff --git a/tmp/3b647f9c-a6a4-4bb7-b4fa-ca5d1f1f3088_buggy.java b/tmp/f88ea1e1-9222-49da-83c6-cab1e96c4472_fixed.java
index 58a1651..45d515b 100644
--- a/tmp/3b647f9c-a6a4-4bb7-b4fa-ca5d1f1f3088_buggy.java
+++ b/tmp/f88ea1e1-9222-49da-83c6-cab1e96c4472_fixed.java
@@ -1,32 +1,39 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
     
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    
+    // Check if the resolved typeOfThis is an ObjectType
+    if (!(resolvedTypeOfThis instanceof ObjectType)) {
+        // Handle the case when it's a UnionType or any other type
+        // You may want to log a warning or throw an appropriate exception
+        throw new TypeCastException("Expected typeOfThis to be an ObjectType, but found: " + resolvedTypeOfThis);
+    }
+    typeOfThis = (ObjectType) resolvedTypeOfThis;
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
