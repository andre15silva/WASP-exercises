diff --git a/tmp/f56377bb-ea5f-4c83-a716-40a8223b6c81_buggy.java b/tmp/5b24ddb8-a7cc-41cd-a05b-be4144071f1d_fixed.java
index 58a1651..5726e61 100644
--- a/tmp/f56377bb-ea5f-4c83-a716-40a8223b6c81_buggy.java
+++ b/tmp/5b24ddb8-a7cc-41cd-a05b-be4144071f1d_fixed.java
@@ -1,32 +1,39 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle case for UnionType to ensure it resolves to an ObjectType.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        // Handle error or set a default type if necessary
+        // (or you could throw an exception depending on the desired behavior)
+        throw new IllegalStateException("Type of 'this' must resolve to an ObjectType, but was: " + resolvedTypeOfThis);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
