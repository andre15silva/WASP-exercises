diff --git a/tmp/52f87f40-ebc9-4000-884e-f7e0e43884f6_buggy.java b/tmp/04ed15db-dfc9-4b10-877b-caee8b7e8689_fixed.java
index 4c1ed27..3ffece0 100644
--- a/tmp/52f87f40-ebc9-4000-884e-f7e0e43884f6_buggy.java
+++ b/tmp/04ed15db-dfc9-4b10-877b-caee8b7e8689_fixed.java
@@ -1,32 +1,36 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
+            // Handle cases where the character is part of a surrogate pair
+            if (Character.isHighSurrogate(input.charAt(pos))) {
+                if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {
+                    // If high surrogate is followed by a low surrogate, they form a valid code point
+                    char[] c = Character.toChars(Character.codePointAt(input, pos));
+                    out.write(c);
+                    pos += 2; // move past the surrogate pair
+                    continue;
+                }
+            } else {
+                // if it is a single code point
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
                 pos+= c.length;
                 continue;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+        }
+        // contract with translators is that they have to understand codepoints 
+        // and they just took care of a surrogate pair
         for (int pt = 0; pt < consumed; pt++) {
             pos += Character.charCount(Character.codePointAt(input, pos));
         }
     }
 }
\ No newline at end of file
