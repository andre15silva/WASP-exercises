diff --git a/tmp/14aee157-6852-48f4-ae10-2a941d8d2985_buggy.java b/tmp/b04f4aa9-e38f-462c-a296-e596d33e4d5a_fixed.java
index 4c1ed27..c4391db 100644
--- a/tmp/14aee157-6852-48f4-ae10-2a941d8d2985_buggy.java
+++ b/tmp/b04f4aa9-e38f-462c-a296-e596d33e4d5a_fixed.java
@@ -1,32 +1,23 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+        int codePoint = Character.codePointAt(input, pos);
+        int consumed = Character.charCount(codePoint);
+        if (consumed < 1) {
+            throw new IllegalArgumentException("Invalid character at position " + pos);
+        }
+        if (translate(input, pos, out) == 0) {
+            out.write(Character.toChars(codePoint));
+            pos += consumed; // move to the next code point
+        } else {
+            pos += consumed; // move to the next code point regardless of translation
         }
     }
 }
\ No newline at end of file
