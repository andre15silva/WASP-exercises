diff --git a/tmp/b4abe291-6e46-48bb-a047-9e79e7c344f0_buggy.java b/tmp/164b5ab6-fe80-4525-8f91-5b697a0e0582_fixed.java
index 4c1ed27..befd594 100644
--- a/tmp/b4abe291-6e46-48bb-a047-9e79e7c344f0_buggy.java
+++ b/tmp/164b5ab6-fe80-4525-8f91-5b697a0e0582_fixed.java
@@ -1,32 +1,32 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+            // Write the next character
+            char currentChar = input.charAt(pos);
+            if (Character.isHighSurrogate(currentChar) && pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {
+                // Handle surrogate pair
+                char[] c = Character.toChars(Character.toCodePoint(currentChar, input.charAt(pos + 1)));
                 out.write(c);
-                pos+= c.length;
+                pos += 2; // consume both high and low surrogate
+            } else {
+                out.write(currentChar);
+                pos++; // consume single character
+            }
             continue;
         }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+        // contract with translators is that they have to understand codepoints 
+        // and they just took care of a surrogate pair
         for (int pt = 0; pt < consumed; pt++) {
             pos += Character.charCount(Character.codePointAt(input, pos));
         }
     }
 }
\ No newline at end of file
