diff --git a/tmp/52ea398c-a80c-4225-9288-d9ed76bcaf8f_buggy.java b/tmp/2fffed27-da3a-4643-b51e-1be322271421_fixed.java
index 4c1ed27..ca45e00 100644
--- a/tmp/52ea398c-a80c-4225-9288-d9ed76bcaf8f_buggy.java
+++ b/tmp/2fffed27-da3a-4643-b51e-1be322271421_fixed.java
@@ -1,32 +1,26 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
             char[] c = Character.toChars(Character.codePointAt(input, pos));
             out.write(c);
             pos += c.length;
+            // Ensure we skip the correct number of code points
+            if (pos < len) {
                 continue;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+        } else {
+            // Contract with translators is that they have to understand codepoints 
+            // and they just took care of a surrogate pair
+            pos += consumed; // This change here
         }
     }
 }
\ No newline at end of file
