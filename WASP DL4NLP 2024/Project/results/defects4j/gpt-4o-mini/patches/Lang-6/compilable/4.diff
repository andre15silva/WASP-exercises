diff --git a/tmp/948352b0-c596-403a-ac60-e221bff6984d_buggy.java b/tmp/c6a7747d-4332-457b-a917-ee29898ec58c_fixed.java
index 4c1ed27..e1986c8 100644
--- a/tmp/948352b0-c596-403a-ac60-e221bff6984d_buggy.java
+++ b/tmp/c6a7747d-4332-457b-a917-ee29898ec58c_fixed.java
@@ -1,32 +1,30 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
-            int consumed = translate(input, pos, out);
+        int codePoint = Character.codePointAt(input, pos);
+        int consumed = Character.charCount(codePoint);
+        if (codePoint >= 0xD800 && codePoint <= 0xDFFF) { // Check for surrogate pairs
+            // This means we are at a high or low surrogate. We need to consume the next character as well.
+            consumed = 1; // By default, consume only one to handle the surrogate pair later
+            if (pos + 1 < len) {
+                int nextCodePoint = Character.codePointAt(input, pos + 1);
+                if (nextCodePoint >= 0xDC00 && nextCodePoint <= 0xDFFF) { // is lower surrogate
+                    consumed = 2; // consume both
+                }
+            }
+        }
+        consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+            char[] c = Character.toChars(codePoint);
             out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
         }
+        pos += consumed; // Move position based on the consumed value
     }
 }
\ No newline at end of file
