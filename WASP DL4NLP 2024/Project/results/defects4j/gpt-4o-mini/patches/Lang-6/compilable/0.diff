diff --git a/tmp/934f8ed0-9a4f-42b9-85fb-d936c37f0858_buggy.java b/tmp/f674df87-4be4-43a0-9a0b-da62e222ce18_fixed.java
index 4c1ed27..4232dad 100644
--- a/tmp/934f8ed0-9a4f-42b9-85fb-d936c37f0858_buggy.java
+++ b/tmp/f674df87-4be4-43a0-9a0b-da62e222ce18_fixed.java
@@ -1,32 +1,35 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+        int codePoint = Character.codePointAt(input, pos);
+        int consumed = Character.charCount(codePoint);
+        
+        // Check if the codePoint is within the surrogate pair range
+        if (Character.isHighSurrogate(input.charAt(pos))) {
+            if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {
+                consumed = 2; // It's a valid surrogate pair
+            } else {
+                // If there's a high surrogate without a low surrogate, handle it.
+                consumed = 1; // Only consume the high surrogate
+            }
+        }
+
+        // Process using the translation logic
+        int translated = translate(input, pos, out);
+        if (translated == 0) {
+            // If not translated, write the original code point
+            char[] c = Character.toChars(codePoint);
             out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+        } else {
+            pos += translated; // Adjust `pos` if translated
         }
+        pos += consumed; // Move position by the number of characters consumed
     }
 }
\ No newline at end of file
