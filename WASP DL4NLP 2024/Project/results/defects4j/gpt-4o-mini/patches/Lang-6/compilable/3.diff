diff --git a/tmp/b6a7323f-cf20-4868-8e4e-08db25d3e135_buggy.java b/tmp/2daf1d2e-424b-40a1-bb57-ede93d90380f_fixed.java
index 4c1ed27..2bba5a3 100644
--- a/tmp/b6a7323f-cf20-4868-8e4e-08db25d3e135_buggy.java
+++ b/tmp/2daf1d2e-424b-40a1-bb57-ede93d90380f_fixed.java
@@ -1,32 +1,28 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+        int codePoint = Character.codePointAt(input, pos);
+        int consumed = Character.charCount(codePoint);
+        
+        // Check if it's a valid code point and if it is a surrogate pair
+        if (Character.isSupplementaryCodePoint(codePoint)) {
+            char[] c = Character.toChars(codePoint);
             out.write(c);
-                pos+= c.length;
-                continue;
+            pos += consumed; // Move position by the number of chars consumed (2 for surrogate pairs)
+        } else {
+            consumed = translate(input, pos, out);
+            if (consumed == 0) {
+                out.write(Character.toChars(codePoint));
+            } else {
+                pos += consumed;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
         }
     }
 }
\ No newline at end of file
