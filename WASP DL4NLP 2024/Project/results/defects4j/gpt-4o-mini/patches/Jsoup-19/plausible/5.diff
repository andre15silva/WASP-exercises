diff --git a/tmp/59de78c2-2669-4b5b-b15b-0fc65f6fbc0a_buggy.java b/tmp/a95ac1fc-ea26-45f6-aa71-6e9c1303b1d0_fixed.java
index 4aff4e4..b5b07ee 100644
--- a/tmp/59de78c2-2669-4b5b-b15b-0fc65f6fbc0a_buggy.java
+++ b/tmp/a95ac1fc-ea26-45f6-aa71-6e9c1303b1d0_fixed.java
@@ -1,15 +1,30 @@
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
+    // Try to resolve relative URLs to absolute, and optionally update the attribute so output HTML has abs.
+    // Rels without a base URI get removed
     String value = el.absUrl(attr.getKey());
-        if (!preserveRelativeLinks)
+    if (!preserveRelativeLinks) {
+        // Only update the attribute if the value is not empty
+        if (!value.isEmpty()) {
             attr.setValue(value);
+        }
+    }
 
+    // Check if the protocol is valid
     for (Protocol protocol : protocols) {
         String prot = protocol.toString() + ":";
         if (value.toLowerCase().startsWith(prot)) {
             return true;
         }
     }
+
+    // If the original attribute value was not resolved to an absolute URL,
+    // we should also check the raw value to allow custom protocols
+    for (Protocol protocol : protocols) {
+        String prot = protocol.toString() + ":";
+        if (attr.getValue().toLowerCase().startsWith(prot)) {
+            return true;
+        }
+    }
+
     return false;
 }
\ No newline at end of file
