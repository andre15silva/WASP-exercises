diff --git a/tmp/0965668d-a165-4671-a62b-efb487b9d239_buggy.java b/tmp/51768412-531a-4f99-a75d-4ce8244b7a35_fixed.java
index 9976e43..7ab873b 100644
--- a/tmp/0965668d-a165-4671-a62b-efb487b9d239_buggy.java
+++ b/tmp/51768412-531a-4f99-a75d-4ce8244b7a35_fixed.java
@@ -1,76 +1,58 @@
 @Override
 public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
         return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
         return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
-          return false;
-        }
-      }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
+    // Count the number of parameters in both functions
+    int thisParamCount = 0;
+    int thatParamCount = 0;
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+    // Create an array to hold the parameter type checks
+    List<JSType> thisParamTypes = new ArrayList<>();
+    List<JSType> thatParamTypes = new ArrayList<>();
 
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
+    while (thisParam != null) {
+        thisParamTypes.add(thisParam.getJSType());
         thisParam = thisParam.getNext();
+        thisParamCount++;
     }
-      if (!thatIsVarArgs) {
+
+    while (thatParam != null) {
+        thatParamTypes.add(thatParam.getJSType());
         thatParam = thatParam.getNext();
+        thatParamCount++;
     }
 
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
-      }
+    // Ensure that the number of parameters is appropriately considered
+    for (int i = 0; i < thisParamCount; i++) {
+        if (i >= thatParamCount) {
+            // If "that" has fewer parameters, it cannot be a supertype
+            return false;
         }
+        JSType thisParamType = thisParamTypes.get(i);
+        JSType thatParamType = thatParamTypes.get(i);
         
-    // "that" can't be a supertype, because it's missing a required arguement.
+        if (thisParamType != null) {
+            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
+                return false;
+            }
+        }
+    }
 
     return true;
 }
\ No newline at end of file
