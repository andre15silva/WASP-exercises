diff --git a/tmp/31e6ffd9-6a6e-46b5-9d6f-b5a9b888a506_buggy.java b/tmp/5996ef24-69c3-4291-a3e9-4b0054665806_fixed.java
index 939f49b..a4324b2 100644
--- a/tmp/31e6ffd9-6a6e-46b5-9d6f-b5a9b888a506_buggy.java
+++ b/tmp/5996ef24-69c3-4291-a3e9-4b0054665806_fixed.java
@@ -1,21 +1,22 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
     if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+        && n.getType() == Token.GETPROP) {
+        
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        Node firstChild = n.getFirstChild();
+        boolean isChainedProperty = firstChild != null && firstChild.getType() == Token.GETPROP;
 
         if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+            Node child = firstChild.getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
+            // Check if the parent property is "prototype"
+            if (child != null && child.getType() == Token.STRING &&
                 child.getString().equals("prototype")) {
                 return true;
             }
         }
     }
 
     return false;
 }
\ No newline at end of file
