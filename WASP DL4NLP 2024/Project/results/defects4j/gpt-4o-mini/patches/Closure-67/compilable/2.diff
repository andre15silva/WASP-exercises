diff --git a/tmp/56a3366f-9a1f-41c5-960e-abaac2136702_buggy.java b/tmp/2173ce65-eb6d-41ba-aade-afa710e8ef6b_fixed.java
index 939f49b..af1f6a6 100644
--- a/tmp/56a3366f-9a1f-41c5-960e-abaac2136702_buggy.java
+++ b/tmp/2173ce65-eb6d-41ba-aade-afa710e8ef6b_fixed.java
@@ -1,21 +1,28 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
     if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+        && n.getType() == Token.GETPROP) {
+        
         // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
+        // Check if the immediate property is 'prototype' 
+        Node property = n.getLastChild(); // Get the property node
+        if (property.getType() == Token.STRING &&
+            property.getString().equals("prototype")) {
+            return true;
+        }
+
+        // Additionally check chained property
         if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+            Node chainedChild = n.getFirstChild().getFirstChild().getNext();
+            if (chainedChild.getType() == Token.STRING &&
+                chainedChild.getString().equals("prototype")) {
                 return true;
             }
         }
     }
 
     return false;
 }
\ No newline at end of file
