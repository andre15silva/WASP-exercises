diff --git a/tmp/48b7d210-306a-431d-8412-35e676e406fe_buggy.java b/tmp/b23a3ebd-242d-4f4c-be0e-4cdd6851685b_fixed.java
index 939f49b..3e88ec6 100644
--- a/tmp/48b7d210-306a-431d-8412-35e676e406fe_buggy.java
+++ b/tmp/b23a3ebd-242d-4f4c-be0e-4cdd6851685b_fixed.java
@@ -1,21 +1,30 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
     if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+        && n.getType() == Token.GETPROP) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
             Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+            // Check if child is a GETPROP to handle cases where the property is chained
+            if (child.getType() == Token.GETPROP && 
+                child.getFirstChild().getType() == Token.NAME &&
+                child.getFirstChild().getString().equals("prototype") &&
+                child.getNext().getType() == Token.STRING) {
                 return true;
             }
         }
+        
+        // Also check the direct property assignment to prototype
+        if (n.getType() == Token.GETPROP &&
+            n.getFirstChild().getType() == Token.NAME &&
+            n.getFirstChild().getString().equals("prototype") &&
+            n.getNext().getType() == Token.STRING) {
+            return true;
+        }
     }
 
     return false;
 }
\ No newline at end of file
