diff --git a/tmp/f016e4b3-f48b-4ed0-a7c5-2f42d16c83f5_buggy.java b/tmp/bb71751a-a118-4296-aa65-26abe6fa32ad_fixed.java
index 939f49b..1a375ed 100644
--- a/tmp/f016e4b3-f48b-4ed0-a7c5-2f42d16c83f5_buggy.java
+++ b/tmp/bb71751a-a118-4296-aa65-26abe6fa32ad_fixed.java
@@ -1,21 +1,26 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+            Node child = n.getFirstChild().getFirstChild().getNext(); // get the property node
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+            // Check if the property is "prototype"
+            if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
+                return true;
+            }
+        } else {
+            // Also check if the direct property is "prototype"
+            Node directChild = n.getFirstChild();
+            if (directChild.getType() == Token.GETPROP && 
+                directChild.getNext().getType() == Token.STRING && 
+                directChild.getNext().getString().equals("prototype")) {
                 return true;
             }
         }
     }
 
     return false;
 }
\ No newline at end of file
