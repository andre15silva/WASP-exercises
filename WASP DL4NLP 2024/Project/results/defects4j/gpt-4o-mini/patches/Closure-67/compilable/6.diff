diff --git a/tmp/52cae60b-664d-4ba2-a8a9-cb947289e7b0_buggy.java b/tmp/ade7aa1f-9105-49b4-b0c5-9c75d8cff154_fixed.java
index 939f49b..d12d67d 100644
--- a/tmp/52cae60b-664d-4ba2-a8a9-cb947289e7b0_buggy.java
+++ b/tmp/ade7aa1f-9105-49b4-b0c5-9c75d8cff154_fixed.java
@@ -1,21 +1,30 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
     if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+        && n.getType() == Token.GETPROP) {
+        
         // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
+        // Check if the last part of the GETPROP is 'prototype'
+        Node target = n.getLastChild(); // Get the last child of GETPROP
+        if (target.getType() == Token.STRING && target.getString().equals("prototype")) {
+            return true;
+        }
+        
+        // Additionally, we should also check for chained properties 
+        // like foo.prototype.method if it is part of the expression
         if (isChainedProperty) {
             Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+            if (child.getType() == Token.GETPROP) {
+                Node chainedTarget = child.getLastChild();
+                if (chainedTarget.getType() == Token.STRING &&
+                    chainedTarget.getString().equals("prototype")) {
                     return true;
                 }
             }
         }
-
+    }
     return false;
 }
\ No newline at end of file
