diff --git a/tmp/df38fdc0-c467-47b2-bdc8-43d2a07d1bd5_buggy.java b/tmp/f4d402ea-037b-43d6-b4c5-9f8cab26e8e3_fixed.java
index 9353941..f0a00ac 100644
--- a/tmp/df38fdc0-c467-47b2-bdc8-43d2a07d1bd5_buggy.java
+++ b/tmp/f4d402ea-037b-43d6-b4c5-9f8cab26e8e3_fixed.java
@@ -1,30 +1,28 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
          child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
+    
+    // Ensuring we consider the case when the variable might be brought into a new scope
+    if (n.isBlock() || n.isFunction()) {
+      return VariableLiveness.MAYBE_LIVE;
+    }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
