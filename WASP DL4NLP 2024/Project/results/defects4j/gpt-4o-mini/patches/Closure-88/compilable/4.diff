diff --git a/tmp/4b8fb842-072b-451d-ac8a-2f89b563ee73_buggy.java b/tmp/29f2480c-7bb9-4037-8363-aba1bd3fa820_fixed.java
index 9353941..ebccd25 100644
--- a/tmp/4b8fb842-072b-451d-ac8a-2f89b563ee73_buggy.java
+++ b/tmp/29f2480c-7bb9-4037-8363-aba1bd3fa820_fixed.java
@@ -1,30 +1,27 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    // Traverse all children of the current node.
     VariableLiveness state = isVariableReadBeforeKill(child, variable);
+    // Check if we found a definitive state.
     if (state != VariableLiveness.MAYBE_LIVE) {
       return state;
     }
   }
+  
+  // Check parent node to see if the variable is being assigned in current context.
+  if (NodeUtil.isLhs(n, n.getParent())) {
+    return VariableLiveness.KILL;
   }
+
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
