diff --git a/tmp/0edebf15-9dac-4508-9089-c4c27c6dbecf_buggy.java b/tmp/f53fad38-e08d-4483-9009-d3740a76e15a_fixed.java
index 9353941..a311706 100644
--- a/tmp/0edebf15-9dac-4508-9089-c4c27c6dbecf_buggy.java
+++ b/tmp/f53fad38-e08d-4483-9009-d3740a76e15a_fixed.java
@@ -1,30 +1,28 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
   
   // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+      
+      // Check for KILL state first as it overrides READ
+      if (state == VariableLiveness.KILL) {
         return state;
       }
+      
+      if (state == VariableLiveness.READ) {
+        // If we found a READ, we can return it unless we later find a KILL
+        return VariableLiveness.READ;
+      }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
