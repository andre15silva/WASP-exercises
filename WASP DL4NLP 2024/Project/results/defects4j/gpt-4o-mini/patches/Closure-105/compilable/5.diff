diff --git a/tmp/d38ea05c-4253-4ee6-914d-86f9692e5353_buggy.java b/tmp/fb74b171-e5cc-464b-b580-b039dbe00a07_fixed.java
index ef65dd9..eb1f26d 100644
--- a/tmp/d38ea05c-4253-4ee6-914d-86f9692e5353_buggy.java
+++ b/tmp/fb74b171-e5cc-464b-b580-b039dbe00a07_fixed.java
@@ -1,92 +1,94 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
         return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
         return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
         if (NodeUtil.isImmutableValue(elem)) {
             if (sb.length() > 0) {
                 sb.append(joinString);
             }
             sb.append(NodeUtil.getStringValue(elem));
         } else {
             if (sb.length() > 0) {
                 // + 2 for the quotes.
                 foldedSize += sb.length() + 2;
                 arrayFoldedChildren.add(Node.newString(sb.toString()));
                 sb = new StringBuilder();
             }
             foldedSize += InlineCostEstimator.getCost(elem);
             arrayFoldedChildren.add(elem);
         }
         elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
+
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
         case 0:
             Node emptyStringNode = Node.newString("");
             parent.replaceChild(n, emptyStringNode);
             break;
 
         case 1:
             Node foldedStringNode = arrayFoldedChildren.remove(0);
             if (foldedSize > originalSize) {
                 return;
             }
             arrayNode.detachChildren();
             if (foldedStringNode.getType() != Token.STRING) {
                 // If the Node is not a string literal, ensure that
                 // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
+                foldedStringNode = new Node(Token.ADD,
                     Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
             }
             parent.replaceChild(n, foldedStringNode);
             break;
 
         default:
             // No folding could actually be performed.
             if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
                 return;
             }
             int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
+            foldedSize += kJoinOverhead; // Correct the size estimate
             foldedSize += InlineCostEstimator.getCost(right);
             if (foldedSize > originalSize) {
                 return;
             }
             arrayNode.detachChildren();
             for (Node node : arrayFoldedChildren) {
+                if (node.getType() == Token.STRING) {
+                    // If Node is a string literal, keep it simple.
+                    arrayNode.addChildToBack(node.cloneNode());
+                } else {
                     arrayNode.addChildToBack(node);
                 }
+            }
             break;
     }
     t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
