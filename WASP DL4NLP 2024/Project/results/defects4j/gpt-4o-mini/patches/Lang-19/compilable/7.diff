diff --git a/tmp/71d8b30d-e8f8-49ab-9211-a1f352719f30_buggy.java b/tmp/f208f2a0-c122-4125-b03d-5de79f0db760_fixed.java
index 72a422c..b376783 100644
--- a/tmp/71d8b30d-e8f8-49ab-9211-a1f352719f30_buggy.java
+++ b/tmp/f208f2a0-c122-4125-b03d-5de79f0db760_fixed.java
@@ -1,51 +1,43 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        // Check for 'x' or 'X' for hexadecimal
+        if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
         }
 
+        // Ensure that we do not access out of bounds
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
