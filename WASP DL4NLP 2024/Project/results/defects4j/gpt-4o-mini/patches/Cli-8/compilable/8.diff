diff --git a/tmp/1c628b19-ce63-47ab-b766-a887d10a8d45_buggy.java b/tmp/537cbd73-c39a-4e7b-bf0e-890b20d4adfe_fixed.java
index 8e93a5e..cef01b4 100644
--- a/tmp/1c628b19-ce63-47ab-b766-a887d10a8d45_buggy.java
+++ b/tmp/537cbd73-c39a-4e7b-bf0e-890b20d4adfe_fixed.java
@@ -1,43 +1,35 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    // Trim the text initially
+    text = text.trim();
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
+    
+    // Append the first wrapped line
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // Create the padding for subsequent lines
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
+        // Update the text by trimming and adding padding
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
+        // Append the next wrapped line
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
