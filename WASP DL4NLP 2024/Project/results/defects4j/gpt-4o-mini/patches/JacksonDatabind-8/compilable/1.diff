diff --git a/tmp/9e120cc2-8bf8-42e9-8445-13e925495fa2_buggy.java b/tmp/80a0b6db-184a-4c67-99dd-956b2764033d_fixed.java
index c9da1b7..2fb8e6b 100644
--- a/tmp/9e120cc2-8bf8-42e9-8445-13e925495fa2_buggy.java
+++ b/tmp/80a0b6db-184a-4c67-99dd-956b2764033d_fixed.java
@@ -1,33 +1,36 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
+    
     // already had an explicitly marked one?
     if (oldOne != null) {
-
+        // Check if both are explicitly marked
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+            // both explicit: they must be the same
             if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+                // If they are the same, no conflict
+                return;
+            }
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
+
+        // one more thing: ok to override in sub-class
+        if (oldOne.getClass() == newOne.getClass()) {
+            // If they are the same, no conflict
+            return;
         }
+    }
+    
     if (explicit) {
         _explicitCreators |= mask;
     }
+    
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
