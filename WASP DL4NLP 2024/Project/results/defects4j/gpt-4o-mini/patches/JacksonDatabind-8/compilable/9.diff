diff --git a/tmp/cb0d4c8b-2789-49a4-8f97-4e1e32bd8243_buggy.java b/tmp/6f9d7d52-b7c4-4dd1-a24b-f48bac17a557_fixed.java
index c9da1b7..f944911 100644
--- a/tmp/cb0d4c8b-2789-49a4-8f97-4e1e32bd8243_buggy.java
+++ b/tmp/6f9d7d52-b7c4-4dd1-a24b-f48bac17a557_fixed.java
@@ -1,33 +1,31 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
+    
     // already had an explicitly marked one?
     if (oldOne != null) {
-
+        // Ensure we are not replacing conflicting creators if both are explicitly marked
         if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // we will not replace the existing one, they are both explicit
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+        }
+
+        // one more thing: ok to override in subclass
+        // Avoid only if an old one with the same class is explicitly marked
+        if (oldOne.getClass() == newOne.getClass()) {
+            throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                    +" creators: already had "+oldOne+", encountered "+newOne);
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
