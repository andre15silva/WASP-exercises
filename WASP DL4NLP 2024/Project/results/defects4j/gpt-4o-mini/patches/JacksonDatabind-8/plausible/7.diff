diff --git a/tmp/ef161cb0-b024-4978-8afe-e640f9aa460e_buggy.java b/tmp/2ecaa3df-4236-49e2-b79d-7b64e9daefcd_fixed.java
index c9da1b7..299a248 100644
--- a/tmp/ef161cb0-b024-4978-8afe-e640f9aa460e_buggy.java
+++ b/tmp/2ecaa3df-4236-49e2-b79d-7b64e9daefcd_fixed.java
@@ -1,33 +1,35 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        // Check if both are explicitly annotated
+        if ((_explicitCreators & mask) != 0) {
+            // already had explicitly annotated
             if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+                return; // skip if new one not annotated
+            } else {
+                // both explicit and same class; throw exception
                 if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
                     throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                             + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
                 }
             }
+        }
+
+        // one more thing: ok to override in sub-class
+        if (oldOne.getClass() == newOne.getClass()) {
+            // [databind#667]: avoid one particular class of bogus problems
+            // In this case, skip throwing an exception for the same class
+            return; // no need to throw, allow overriding
+        }
+    }
+    
+    // Update explicit creators and set the new creator
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
