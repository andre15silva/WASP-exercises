diff --git a/tmp/84ac2e17-5f6b-48dc-8cc2-eb095069e7f2_buggy.java b/tmp/0c6972e5-7b24-4ddc-90d3-22adce5329ac_fixed.java
index b56897c..e76cd92 100644
--- a/tmp/84ac2e17-5f6b-48dc-8cc2-eb095069e7f2_buggy.java
+++ b/tmp/0c6972e5-7b24-4ddc-90d3-22adce5329ac_fixed.java
@@ -1,27 +1,26 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+    // When the node is null it means we reached the implicit return
+    // where the function returns (possibly without a return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+    // Check for non-side-effect free function calls
+    if (n.isCall() && !NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+    // Check for non-side-effect free constructor calls
+    if (n.isNew() && !NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
-
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+        // Ensure we are not entering a new CFG node and check children
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
