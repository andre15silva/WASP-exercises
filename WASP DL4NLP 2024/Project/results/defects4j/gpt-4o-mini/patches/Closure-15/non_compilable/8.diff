diff --git a/tmp/60995de2-0676-4dd0-8c24-04c8059ed296_buggy.java b/tmp/7f49c2f8-6655-41dc-85ea-f6672f598183_fixed.java
index b56897c..ee1226d 100644
--- a/tmp/60995de2-0676-4dd0-8c24-04c8059ed296_buggy.java
+++ b/tmp/7f49c2f8-6655-41dc-85ea-f6672f598183_fixed.java
@@ -1,27 +1,36 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+    // When the node is null it means we reached the implicit return
+    // where the function returns (possibly without a return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+    // Check for function calls or constructors that have side effects
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
-
+    // Iterate over the child nodes
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+        // If we encounter a control flow graph node, we skip that branch
+        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+            // Apply the function recursively 
+            // and return true immediately if any child requires side effects
+            if (apply(c)) {
                 return true;
             }
         }
+    }
+
+    // Finally, also check for specific patterns like 'for-in' that may need handling
+    if (n.isForIn()) {
+        return true;
+    }
+
     return false;
 }
\ No newline at end of file
