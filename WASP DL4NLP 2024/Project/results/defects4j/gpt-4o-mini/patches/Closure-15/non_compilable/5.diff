diff --git a/tmp/f189415c-feb3-4976-a386-08a038970f1d_buggy.java b/tmp/2c0c765d-1234-4a48-9391-f4fad64e303e_fixed.java
index b56897c..0b1d188 100644
--- a/tmp/f189415c-feb3-4976-a386-08a038970f1d_buggy.java
+++ b/tmp/2c0c765d-1234-4a48-9391-f4fad64e303e_fixed.java
@@ -1,27 +1,33 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // When the node is null it means we reached the implicit return
+  // where the function returns (possibly without a return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // Check if the node is a call that has side effects.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
+  // Check if the node is a constructor call that has side effects.
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
-
+  // Traverse the children of the node.
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+    // Check if we are entering a new CFG node; if not, apply to this child.
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
+
+  // Additional check for 'in' expressions to ensure they are treated correctly.
+  if (n.isInOperation()) {
+    return true; // If it's an 'in' operation, it can have side effects.
+  }
+
   return false;
 }
\ No newline at end of file
