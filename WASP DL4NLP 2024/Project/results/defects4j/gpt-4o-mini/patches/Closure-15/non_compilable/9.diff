diff --git a/tmp/231f448a-d9f1-4724-8bb6-e9d50606d151_buggy.java b/tmp/69ddcd8c-fca9-4491-9b21-c82642beee3f_fixed.java
index b56897c..0c98838 100644
--- a/tmp/231f448a-d9f1-4724-8bb6-e9d50606d151_buggy.java
+++ b/tmp/69ddcd8c-fca9-4491-9b21-c82642beee3f_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+    // When the node is null it means we reached the implicit return
+    // where the function returns (possibly without a return statement)
     if (n == null) {
         return false;
     }
 
     // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
+    // pass one of the dependent variable to a non-side-effect free
     // function.
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
+    // Check for `for...in` loops as they do not introduce new control flow.
+    if (n.isForIn()) {
+        return true;
+    }
 
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+        // Include new check for `for...in` to prevent unwanted inlining.
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
