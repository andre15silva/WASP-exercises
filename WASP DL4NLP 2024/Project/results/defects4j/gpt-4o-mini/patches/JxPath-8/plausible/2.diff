diff --git a/tmp/a49d6e4f-65a7-4beb-ac71-ecf18321cc36_buggy.java b/tmp/1f0b4d8f-f229-4f02-a9cc-93b5eaa1ea57_fixed.java
index 98d89dc..ca35afe 100644
--- a/tmp/a49d6e4f-65a7-4beb-ac71-ecf18321cc36_buggy.java
+++ b/tmp/1f0b4d8f-f229-4f02-a9cc-93b5eaa1ea57_fixed.java
@@ -1,23 +1,37 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
+    // Handling NaN values specifically
+    if (left instanceof Double && right instanceof Double) {
+        double ld = (Double) left;
+        double rd = (Double) right;
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            return ld == rd; // Only true if both are NaN
+        }
+        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    }
+    
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        return ld == rd; // Only true if both are NaN
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
