diff --git a/tmp/852021ea-86f0-4b33-b978-4811e1ec7470_buggy.java b/tmp/4a2e8407-b47a-4e25-adc7-fcad9bfbf6e9_fixed.java
index 98d89dc..773ac20 100644
--- a/tmp/852021ea-86f0-4b33-b978-4811e1ec7470_buggy.java
+++ b/tmp/4a2e8407-b47a-4e25-adc7-fcad9bfbf6e9_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
+    // Handle NaN cases
+    if (left instanceof Number && right instanceof Number) {
+        double ld = ((Number) left).doubleValue();
+        double rd = ((Number) right).doubleValue();
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            return (ld == rd); // NaN is only equal to itself
+        }
+        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
