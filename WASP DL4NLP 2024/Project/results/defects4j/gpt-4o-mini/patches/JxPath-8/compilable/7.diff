diff --git a/tmp/3a220986-90bd-4f74-be72-a245472e31fb_buggy.java b/tmp/16e45f1f-0e18-4e99-aa3f-bce128031eac_fixed.java
index 98d89dc..91e3a4e 100644
--- a/tmp/3a220986-90bd-4f74-be72-a245472e31fb_buggy.java
+++ b/tmp/16e45f1f-0e18-4e99-aa3f-bce128031eac_fixed.java
@@ -1,23 +1,39 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
+    // Handle NaN cases explicitly
+    if (left instanceof Number && right instanceof Number) {
+        double ld = InfoSetUtil.doubleValue(left);
+        double rd = InfoSetUtil.doubleValue(right);
+        
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return true; // NaN is considered equal to NaN
+        }
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            return false; // NaN is not comparable to any number
+        }
+        
+        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
