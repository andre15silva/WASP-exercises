diff --git a/tmp/962c8c04-2c66-45db-b06e-0a80e0d4479e_buggy.java b/tmp/4f796dd1-00fe-4b68-bc43-648fe3db864c_fixed.java
index 98d89dc..6fd233d 100644
--- a/tmp/962c8c04-2c66-45db-b06e-0a80e0d4479e_buggy.java
+++ b/tmp/4f796dd1-00fe-4b68-bc43-648fe3db864c_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
+    // Handle NaN case
+    if (left instanceof Double && right instanceof Double) {
+        if (Double.isNaN((Double) left) && Double.isNaN((Double) right)) {
+            return true; // NaN equals NaN
+        }
+        if (Double.isNaN((Double) left) || Double.isNaN((Double) right)) {
+            return false; // NaN is not comparable to any number
+        }
+    }
+    
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
