diff --git a/tmp/4040704e-f677-47c2-b78a-98984eaf3aa6_buggy.java b/tmp/48f79bc6-e9e0-4fa2-854b-0b5c7b42e7b7_fixed.java
index 98d89dc..29e7c10 100644
--- a/tmp/4040704e-f677-47c2-b78a-98984eaf3aa6_buggy.java
+++ b/tmp/48f79bc6-e9e0-4fa2-854b-0b5c7b42e7b7_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
+    // Handle NaN cases explicitly
+    if (left instanceof Double && right instanceof Double) {
+        double ld = (Double) left;
+        double rd = (Double) right;
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            return ld == rd; // NaN is only equal to itself
+        }
+        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
