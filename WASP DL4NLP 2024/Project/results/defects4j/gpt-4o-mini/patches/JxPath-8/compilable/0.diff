diff --git a/tmp/5c765c1d-4e09-433e-bf84-50dd9e9e5ce2_buggy.java b/tmp/0a7cf837-0a70-4f39-9708-1a3ff9fe829f_fixed.java
index 98d89dc..6b01c5e 100644
--- a/tmp/5c765c1d-4e09-433e-bf84-50dd9e9e5ce2_buggy.java
+++ b/tmp/0a7cf837-0a70-4f39-9708-1a3ff9fe829f_fixed.java
@@ -1,23 +1,39 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+
+    // Check for NaN values explicitly
+    if (left instanceof Number && right instanceof Number) {
+        double ld = ((Number) left).doubleValue();
+        double rd = ((Number) right).doubleValue();
+        
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return true; // NaN is equal to NaN
+        }
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            return false; // NaN is not equal to any number, including itself
+        }
+        
+        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    }
+    
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
