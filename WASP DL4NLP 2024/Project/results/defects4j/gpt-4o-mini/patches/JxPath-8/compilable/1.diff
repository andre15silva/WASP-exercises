diff --git a/tmp/076658a8-7b20-4fb5-b0a6-dca38fe84ab0_buggy.java b/tmp/93940108-7720-4c96-b170-a8773f6ebe36_fixed.java
index 98d89dc..b639c2e 100644
--- a/tmp/076658a8-7b20-4fb5-b0a6-dca38fe84ab0_buggy.java
+++ b/tmp/93940108-7720-4c96-b170-a8773f6ebe36_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
+    // Handle NaN cases specifically
+    if (left instanceof Number && right instanceof Number) {
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
+        if (Double.isNaN(ld) || Double.isNaN(rd)) {
+            // Define behavior when either value is NaN
+            return false;
+        }
         return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
     }
+
+    // Handle non-number cases
+    return false; // Or appropriate handling for other object types
+}
\ No newline at end of file
