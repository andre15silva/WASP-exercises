diff --git a/tmp/e375640c-f9c1-4d64-9382-f963e996170e_buggy.java b/tmp/13d9c45f-cd6f-4e83-9f25-bed2f5daa550_fixed.java
index d4e6d48..325ce13 100644
--- a/tmp/e375640c-f9c1-4d64-9382-f963e996170e_buggy.java
+++ b/tmp/13d9c45f-cd6f-4e83-9f25-bed2f5daa550_fixed.java
@@ -1,23 +1,20 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
+        Node value = callTarget.getNext();
+        // Only proceed if we have exactly one argument (the function calls for String likely have only one argument)
+        if (value != null && value.getNext() == null) {
             // Fold String(a) to '' + (a) on immutable literals,
             // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
             Node addition = IR.add(
                 IR.string("").srcref(callTarget),
                 value.detachFromParent());
             n.getParent().replaceChild(n, addition);
             reportCodeChange();
             return addition;
         }
     }
     return n;
 }
\ No newline at end of file
