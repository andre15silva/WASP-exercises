diff --git a/tmp/9abc1032-2934-4b13-87dd-908daad93c8b_buggy.java b/tmp/768ea535-b1e6-48d0-b635-40a42b231a92_fixed.java
index d4e6d48..c192194 100644
--- a/tmp/9abc1032-2934-4b13-87dd-908daad93c8b_buggy.java
+++ b/tmp/768ea535-b1e6-48d0-b635-40a42b231a92_fixed.java
@@ -1,23 +1,23 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
         // Fold String(a) to '' + (a) on immutable literals,
         // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+
         Node value = callTarget.getNext();
         if (value != null) {
+            // Check if the value is an immutable literal (string or number)
+            if (value.isString() || value.isNumber()) {
                 Node addition = IR.add(
                     IR.string("").srcref(callTarget),
                     value.detachFromParent());
                 n.getParent().replaceChild(n, addition);
                 reportCodeChange();
                 return addition;
             }
         }
+    }
     return n;
 }
\ No newline at end of file
