diff --git a/tmp/87075c62-b268-4803-8ebc-100e1d6dfc03_buggy.java b/tmp/5979bf4d-cd13-4887-b72b-d1ae4b99d227_fixed.java
index d4e6d48..f72b133 100644
--- a/tmp/87075c62-b268-4803-8ebc-100e1d6dfc03_buggy.java
+++ b/tmp/5979bf4d-cd13-4887-b72b-d1ae4b99d227_fixed.java
@@ -1,23 +1,20 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
             callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
         Node value = callTarget.getNext();
         if (value != null) {
+            // Check if the value is an immutable literal (string or number)
+            if (value.isString() || value.isNumber()) {
                 Node addition = IR.add(
                     IR.string("").srcref(callTarget),
                     value.detachFromParent());
                 n.getParent().replaceChild(n, addition);
                 reportCodeChange();
                 return addition;
             }
         }
+    }
     return n;
 }
\ No newline at end of file
