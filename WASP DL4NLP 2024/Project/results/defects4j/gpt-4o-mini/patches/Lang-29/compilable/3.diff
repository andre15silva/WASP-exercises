diff --git a/tmp/7904e3ca-0e67-4d88-8e76-96076bc0b78f_buggy.java b/tmp/20ee8e07-2adc-41f5-bd1d-9607c2c7cd7c_fixed.java
index 3ec995f..e39e2df 100644
--- a/tmp/7904e3ca-0e67-4d88-8e76-96076bc0b78f_buggy.java
+++ b/tmp/20ee8e07-2adc-41f5-bd1d-9607c2c7cd7c_fixed.java
@@ -1,26 +1,16 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    version = version.split("[\\s-]")[0]; // Handles cases like "JavaVM-1.3.1"
+    String[] parts = version.split("\\.");
+    if (parts.length == 0 || parts[0].equals("0")) {
+        return 0;
+    }
+
+    int major = Integer.parseInt(parts[0].substring(2)); // Extract major version
+    int minor = (parts.length > 1) ? Integer.parseInt(parts[1]) : 0; // Extract minor version
+    int update = (parts.length > 2) ? Integer.parseInt(parts[2]) : 0; // Extract update version
+    
+    return major * 100 + minor * 10 + update;
 }
\ No newline at end of file
