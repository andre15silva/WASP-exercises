diff --git a/tmp/c4bc7b9e-2edf-4bc2-a25b-31ef6676fff9_buggy.java b/tmp/f2d20071-cf70-49ca-af8e-5d11bfc832ad_fixed.java
index 5abdeb5..61fbd7b 100644
--- a/tmp/c4bc7b9e-2edf-4bc2-a25b-31ef6676fff9_buggy.java
+++ b/tmp/f2d20071-cf70-49ca-af8e-5d11bfc832ad_fixed.java
@@ -1,29 +1,26 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
         numUsesWithinCfgNode = 0;
         AbstractCfgNodeTraversalCallback gatherCb =
             new AbstractCfgNodeTraversalCallback() {
 
             @Override
             public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+                if (n.isName() && n.getString().equals(varName)) {
+                    // Don't count lhs of top-level assignment chain or count additional
+                    // usages of the variable when it's part of the assignment within a conditional.
+                    if (!(parent.isAssign() && parent.getFirstChild() == n) &&
+                        !(parent.isConditional() && (parent.getFirstChild() == n || parent.getSecondChild() == n))) {
                         numUsesWithinCfgNode++;
                     }
                 }
+            }
 
         };
 
         NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
