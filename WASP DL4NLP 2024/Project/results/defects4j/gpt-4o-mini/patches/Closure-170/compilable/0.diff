diff --git a/tmp/53ec1ed1-51ab-45ea-965b-c463495b5b64_buggy.java b/tmp/0e13ec11-6e4a-46cf-9e49-ee70f6f42fa6_fixed.java
index 5abdeb5..7eb0544 100644
--- a/tmp/53ec1ed1-51ab-45ea-965b-c463495b5b64_buggy.java
+++ b/tmp/0e13ec11-6e4a-46cf-9e49-ee70f6f42fa6_fixed.java
@@ -1,29 +1,21 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+              // Count all uses of the variable, including those in the right-hand side of assignments,
+              // but not the LHS of assignment expressions.
+              if (!(parent.isAssign() && parent.getFirstChild() == n)) {
                   numUsesWithinCfgNode++;
               }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
