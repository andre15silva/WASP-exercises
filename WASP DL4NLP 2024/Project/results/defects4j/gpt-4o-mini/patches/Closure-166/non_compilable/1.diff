diff --git a/tmp/35d30319-ba81-4d8f-80e9-3caa169e4bf9_buggy.java b/tmp/3c239cbc-6f2b-4b05-94b6-be7b86b9e8a4_fixed.java
index 5f96616..2ff92bf 100644
--- a/tmp/35d30319-ba81-4d8f-80e9-3caa169e4bf9_buggy.java
+++ b/tmp/3c239cbc-6f2b-4b05-94b6-be7b86b9e8a4_fixed.java
@@ -1,20 +1,18 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+        // Extract the properties from the record type and iterate through them
+        ObjectType recordType = constraint.toObjectType();
+        for (String property : recordType.getOwnPropertyNames()) {
+            JSType propertyType = recordType.getOwnPropertyType(property);
+            // Attempt to match each property type
+            matchPropertyType(property, propertyType);
+        }
     }
 }
\ No newline at end of file
