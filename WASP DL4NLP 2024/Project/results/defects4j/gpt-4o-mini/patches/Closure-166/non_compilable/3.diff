diff --git a/tmp/3777f4e8-2f6a-4a10-9a22-6b8c84fc5d79_buggy.java b/tmp/447e4fbc-aeac-4847-b98c-885b16e5aa22_fixed.java
index 5f96616..9a9a321 100644
--- a/tmp/3777f4e8-2f6a-4a10-9a22-6b8c84fc5d79_buggy.java
+++ b/tmp/447e4fbc-aeac-4847-b98c-885b16e5aa22_fixed.java
@@ -1,20 +1,18 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+        ObjectType recordType = constraint.toObjectType();
+        // Update the properties on this object to match the record type.
+        matchRecordTypeConstraint(recordType);
+    } else {
+        // If it is not a record type and still needs to match some properties,
+        // we can initialize the object type to match the structure of the constraint.
+        matchObjectTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
