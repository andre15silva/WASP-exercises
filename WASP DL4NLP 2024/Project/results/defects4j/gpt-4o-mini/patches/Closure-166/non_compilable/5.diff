diff --git a/tmp/c8855c3b-541f-462a-92d3-d51639a41fdc_buggy.java b/tmp/b6decae2-57e0-487b-99ea-7127a351c03a_fixed.java
index 5f96616..311ccd1 100644
--- a/tmp/c8855c3b-541f-462a-92d3-d51639a41fdc_buggy.java
+++ b/tmp/b6decae2-57e0-487b-99ea-7127a351c03a_fixed.java
@@ -1,20 +1,18 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+        ObjectType constraintObjectType = constraint.toObjectType();
+        // Assuming `getProperties` is a method that retrieves all properties 
+        // from the record type and that `matchPropertyType` modifies the current object.
+        for (String property : constraintObjectType.getPropertyNames()) {
+            JSType propertyType = constraintObjectType.getPropertyType(property);
+            matchPropertyType(property, propertyType);
+        }
     }
 }
\ No newline at end of file
