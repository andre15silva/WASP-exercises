diff --git a/tmp/b6b758e7-b1d3-4ffa-99d7-43b0ee41689f_buggy.java b/tmp/52de38b3-3727-47da-91fb-f70c8f39b31c_fixed.java
index 5f96616..49a38c8 100644
--- a/tmp/b6b758e7-b1d3-4ffa-99d7-43b0ee41689f_buggy.java
+++ b/tmp/52de38b3-3727-47da-91fb-f70c8f39b31c_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+        JSType objectType = constraint.toObjectType();
+        matchRecordTypeConstraint(objectType);
+
+        // Also ensure that we properly handle any properties defined on the record type
+        // by updating the current object's properties with those from the constraint.
+        for (String property : objectType.getPropertyNames()) {
+            JSType propertyType = objectType.getPropertyType(property);
+            this.addProperty(property, propertyType);
+        }
     }
 }
\ No newline at end of file
