diff --git a/tmp/fd6a0bcb-c476-48fd-93e2-f23e799870ec_buggy.java b/tmp/af73d7ff-b990-4253-83d9-7bd49616a0d4_fixed.java
index 875b31b..29b18f5 100644
--- a/tmp/fd6a0bcb-c476-48fd-93e2-f23e799870ec_buggy.java
+++ b/tmp/af73d7ff-b990-4253-83d9-7bd49616a0d4_fixed.java
@@ -1,54 +1,42 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
+    text = text.trim(); // Ensure we start with trimmed text
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
-
+            sb.append(text.trim()); // Ensure to append trimmed text
             return sb;
         }
         
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        if ((text.length() > width) && (pos >= nextLineTabStop)) 
         {
-                pos = width;
+            pos = width; // Correctly set the wrap position if at or beyond nextLineTabStop
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
