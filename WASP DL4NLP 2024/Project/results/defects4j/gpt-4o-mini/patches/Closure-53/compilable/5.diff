diff --git a/tmp/cc761988-7a33-4ab4-82cf-32b4449a95b5_buggy.java b/tmp/a7ee26e4-58b4-40d9-9693-ff4baede9687_fixed.java
index 41ea16c..f9f849e 100644
--- a/tmp/cc761988-7a33-4ab4-82cf-32b4449a95b5_buggy.java
+++ b/tmp/a7ee26e4-58b4-40d9-9693-ff4baede9687_fixed.java
@@ -1,63 +1,57 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
     // Compute all of the assignments necessary
     List<Node> nodes = Lists.newArrayList();
     Node val = ref.getAssignedValue();
     blacklistVarReferencesInTree(val, v.scope);
     Preconditions.checkState(val.getType() == Token.OBJECTLIT);
     Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
     for (Node key = val.getFirstChild(); key != null;
          key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
-        // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
     }
 
-      // TODO(user): Better source information.
+    // Add assignments for remaining variables mapped in varmap
     for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
     }
 
     Node replacement;
     // All assignments evaluate to true, so make sure that the
     // expr statement evaluates to true in case it matters.
     nodes.add(new Node(Token.TRUE));
 
     // Join these using COMMA.  A COMMA node must have 2 children, so we
     // create a tree. In the tree the first child be the COMMA to match
     // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
+
+    // Add nodes to the COMMA node
+    for (int i = 0; i < nodes.size(); i++) {
+        if (i > 0) {
             Node t = new Node(Token.COMMA);
             cur.addChildToFront(t);
             cur = t;
         }
         cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
+    }
 
     Node replace = ref.getParent();
     replacement.copyInformationFromForTree(replace);
 
     if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
     } else {
         replace.getParent().replaceChild(replace, replacement);
     }
 }
\ No newline at end of file
