diff --git a/tmp/7d2ebcda-0885-4412-b00d-84654a84b5a0_buggy.java b/tmp/205ff71d-6b62-44ba-97af-263f8d297133_fixed.java
index 41ea16c..180ec6f 100644
--- a/tmp/7d2ebcda-0885-4412-b00d-84654a84b5a0_buggy.java
+++ b/tmp/205ff71d-6b62-44ba-97af-263f8d297133_fixed.java
@@ -1,63 +1,63 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
     // Compute all of the assignments necessary
     List<Node> nodes = Lists.newArrayList();
     Node val = ref.getAssignedValue();
     blacklistVarReferencesInTree(val, v.scope);
     Preconditions.checkState(val.getType() == Token.OBJECTLIT);
     Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
     for (Node key = val.getFirstChild(); key != null;
          key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
     }
 
     // TODO(user): Better source information.
     for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
     }
 
     Node replacement;
     // All assignments evaluate to true, so make sure that the
     // expr statement evaluates to true in case it matters.
     nodes.add(new Node(Token.TRUE));
 
+    // If we have generated any nodes, we should build the comma node.
+    if (!nodes.isEmpty()) {
         // Join these using COMMA. A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
+        // create a tree. In the tree the first child will be the COMMA to match
         // the parser, otherwise tree equality tests fail.
         nodes = Lists.reverse(nodes);
         replacement = new Node(Token.COMMA);
         Node cur = replacement;
         int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
+        for (i = 0; i < nodes.size() - 1; i++) {
             cur.addChildToFront(nodes.get(i));
             Node t = new Node(Token.COMMA);
             cur.addChildToFront(t);
             cur = t;
         }
         cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
+    } else {
+        // If no nodes have been added, we should just create a TRUE node.
+        replacement = new Node(Token.TRUE);
+    }
 
     Node replace = ref.getParent();
     replacement.copyInformationFromForTree(replace);
 
     if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
     } else {
         replace.getParent().replaceChild(replace, replacement);
     }
 }
\ No newline at end of file
