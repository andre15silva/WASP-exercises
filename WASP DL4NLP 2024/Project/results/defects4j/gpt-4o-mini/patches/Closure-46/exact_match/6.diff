diff --git a/tmp/19e921c5-fca1-4a0d-a973-402899c3e66a_buggy.java b/tmp/27140454-1a69-427b-9bcf-fa84a15a87d6_fixed.java
index 46817a7..1fb5ec6 100644
--- a/tmp/19e921c5-fca1-4a0d-a973-402899c3e66a_buggy.java
+++ b/tmp/27140454-1a69-427b-9bcf-fa84a15a87d6_fixed.java
@@ -1,16 +1,21 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecord = that.toMaybeRecordType();
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        if (thatRecord.hasProperty(property)) {
+            JSType thisPropType = getPropertyType(property);
+            JSType thatPropType = thatRecord.getPropertyType(property);
+            if (thatPropType.isEquivalentTo(thisPropType)) {
+                builder.addProperty(property, thisPropType, getPropertyNode(property));
+            } else {
+                // Add union type for differing property types
+                builder.addProperty(property, registry.createUnionType(thisPropType, thatPropType), getPropertyNode(property));
+            }
         }
     }
     return builder.build();
 }
\ No newline at end of file
