diff --git a/tmp/0a396555-4b5a-40de-ab37-6b810b1ae0d2_buggy.java b/tmp/ee698714-bcef-447c-9016-8fda2c751f06_fixed.java
index 46817a7..1ac6af5 100644
--- a/tmp/0a396555-4b5a-40de-ab37-6b810b1ae0d2_buggy.java
+++ b/tmp/ee698714-bcef-447c-9016-8fda2c751f06_fixed.java
@@ -1,16 +1,27 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecordType = that.toMaybeRecordType();
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        // Check if the 'that' record type has the property and if their types are equivalent
+        if (thatRecordType.hasProperty(property)) {
+            JSType thatPropertyType = thatRecordType.getPropertyType(property);
+            JSType thisPropertyType = getPropertyType(property);
+            if (thatPropertyType.isEquivalentTo(thisPropertyType) || 
+                thatPropertyType.isSubtypeOf(thisPropertyType) ||
+                thisPropertyType.isSubtypeOf(thatPropertyType)) {
+                builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+            }
+        }
+    }
+    // Include properties from the other record type that are not in 'this'
+    for (String property : thatRecordType.getPropertyNames()) {
+        if (!properties.containsKey(property)) {
+            builder.addProperty(property, thatRecordType.getPropertyType(property), null);
         }
     }
     return builder.build();
 }
\ No newline at end of file
