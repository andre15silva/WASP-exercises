diff --git a/tmp/49ea8c21-25ac-4e4a-ac00-a30184e4d808_buggy.java b/tmp/e39f21c9-c628-48fc-92be-02e40c287ebe_fixed.java
index 3127f85..6b68b24 100644
--- a/tmp/49ea8c21-25ac-4e4a-ac00-a30184e4d808_buggy.java
+++ b/tmp/e39f21c9-c628-48fc-92be-02e40c287ebe_fixed.java
@@ -1,24 +1,22 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    } else if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    } else if (Math.abs((x - mean) / standardDeviation) > 40) {
+        return (x < mean) ? 0.0 : 1.0;
+    }
+
     final double dev = x - mean;
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
+        if (x < (mean - 20 * standardDeviation)) { 
+            return 0.0;
         } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+            return 1.0;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
