diff --git a/tmp/af98973e-6a09-4f35-be4e-d41ae93b3c0e_buggy.java b/tmp/8fcabb6e-262c-4771-81d1-76e81a2436d7_fixed.java
index 10616db..25a77ae 100644
--- a/tmp/af98973e-6a09-4f35-be4e-d41ae93b3c0e_buggy.java
+++ b/tmp/8fcabb6e-262c-4771-81d1-76e81a2436d7_fixed.java
@@ -1,19 +1,31 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        
+        // Handle the case where day becomes invalid due to month change
+        int[] newValues = iChronology.get(partial, instant);
+        if (partial.size() > 1 && newValues[1] != values[1]) { // Assuming index 1 is day
+            // Check and adjust the day if necessary
+            int newDay = newValues[1];
+            if (newDay > 28) {
+                if (newValues[0] == 2 && !iChronology.isLeapYear(newValues[0])) { // February logic
+                    newDay = iChronology.getDaysInMonth(newValues[0]);
+                }
+            }
+            newValues[1] = newDay;
+        }
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
