diff --git a/tmp/acc95584-6a1b-4b7e-b3ce-7608e38074b4_buggy.java b/tmp/a8fe0aac-d2bf-45af-9a24-43863fcf6b0a_fixed.java
index 10616db..fba85a2 100644
--- a/tmp/acc95584-6a1b-4b7e-b3ce-7608e38074b4_buggy.java
+++ b/tmp/a8fe0aac-d2bf-45af-9a24-43863fcf6b0a_fixed.java
@@ -1,19 +1,27 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        int[] adjustedValues = iChronology.get(partial, instant);
+        
+        // Adjust day until it is valid
+        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.dayOfMonth())) {
+            int day = adjustedValues[partial.indexOf(DateTimeFieldType.dayOfMonth())];
+            if (day > 28 && !iChronology.getMonthOfYear(instant).isLeapYear() && day > 28) {
+                adjustedValues[partial.indexOf(DateTimeFieldType.dayOfMonth())] = 28; // improve boundary check
+            } else if (day > 29 && !iChronology.getMonthOfYear(instant).isLeapYear()) {
+                adjustedValues[partial.indexOf(DateTimeFieldType.dayOfMonth())] = 28; // set to last valid day of the month
+            }
+        }
+        
+        return adjustedValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
