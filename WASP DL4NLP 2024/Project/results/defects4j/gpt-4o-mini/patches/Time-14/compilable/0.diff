diff --git a/tmp/b2802f6e-65cf-491e-9f19-b34e98e0b80d_buggy.java b/tmp/5d38412e-a6ea-425f-8fad-bbff10a94da4_fixed.java
index 10616db..15ce4c1 100644
--- a/tmp/b2802f6e-65cf-491e-9f19-b34e98e0b80d_buggy.java
+++ b/tmp/5d38412e-a6ea-425f-8fad-bbff10a94da4_fixed.java
@@ -1,19 +1,28 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        
+        // Handle the case where we need to adjust for leap days
+        int[] resultValues = iChronology.get(partial, instant);
+        if (resultValues[1] == 29 && !isLeapYear(resultValues[0])) {
+            resultValues[1] = 28; // Adjust from 29 to 28 if not a leap year
+        }
+        return resultValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
+
+private boolean isLeapYear(int year) {
+    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
+}
\ No newline at end of file
