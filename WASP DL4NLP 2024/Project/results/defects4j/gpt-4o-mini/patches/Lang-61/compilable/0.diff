diff --git a/tmp/63bbbca4-6a57-444e-8f5e-9df8ac16c9ba_buggy.java b/tmp/0ca4c57a-c7a3-47d7-9c04-20976a7b00e6_fixed.java
index addeb8d..a1fd378 100644
--- a/tmp/63bbbca4-6a57-444e-8f5e-9df8ac16c9ba_buggy.java
+++ b/tmp/0ca4c57a-c7a3-47d7-9c04-20976a7b00e6_fixed.java
@@ -1,38 +1,30 @@
-    /**
-     * Searches the string builder to find the first reference to the specified
-     * string starting searching from the given index.
-     * <p>
-     * Note that a null input string will return -1, whereas the JDK throws an exception.
-     * 
-     * @param str  the string to find, null returns -1
-     * @param startIndex  the index to start at, invalid index rounded to edge
-     * @return the first index of the string, or -1 if not found
-     */
 public int indexOf(String str, int startIndex) {
     startIndex = (startIndex < 0 ? 0 : startIndex);
     if (str == null || startIndex >= size) {
         return -1;
     }
     int strLen = str.length();
-        if (strLen == 1) {
-            return indexOf(str.charAt(0), startIndex);
-        }
     if (strLen == 0) {
-            return startIndex;
+        return startIndex; // Return the current start index if str is empty
     }
     if (strLen > size) {
-            return -1;
+        return -1; // If the string length is greater than the size of the buffer, return -1
     }
+    
     char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+    int len = thisBuf.length - strLen; // Calculate the maximum index to check
+    
+    // Edge case: Adjust len if it goes out of bounds considering startIndex
+    len = Math.max(len, startIndex);
+    
     outer:
-        for (int i = startIndex; i < len; i++) {
+    for (int i = startIndex; i <= len; i++) { // Change < len to <= len to include the last valid index
         for (int j = 0; j < strLen; j++) {
             if (str.charAt(j) != thisBuf[i + j]) {
-                    continue outer;
+                continue outer; // If characters do not match, break out of inner loop
             }
         }
-            return i;
+        return i; // Found the string, return the index
     }
-        return -1;
+    return -1; // String not found
 }
\ No newline at end of file
