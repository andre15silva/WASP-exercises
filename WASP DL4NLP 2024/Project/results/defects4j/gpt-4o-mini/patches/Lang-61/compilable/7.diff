diff --git a/tmp/30e243c9-43c3-43a0-b2e8-b4e355beb8ee_buggy.java b/tmp/a9c0ca22-19bb-4c3b-a793-db4854f2d601_fixed.java
index addeb8d..5643524 100644
--- a/tmp/30e243c9-43c3-43a0-b2e8-b4e355beb8ee_buggy.java
+++ b/tmp/a9c0ca22-19bb-4c3b-a793-db4854f2d601_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Searches the string builder to find the first reference to the specified
-     * string starting searching from the given index.
-     * <p>
-     * Note that a null input string will return -1, whereas the JDK throws an exception.
-     * 
-     * @param str  the string to find, null returns -1
-     * @param startIndex  the index to start at, invalid index rounded to edge
-     * @return the first index of the string, or -1 if not found
-     */
 public int indexOf(String str, int startIndex) {
     startIndex = (startIndex < 0 ? 0 : startIndex);
     if (str == null || startIndex >= size) {
         return -1;
     }
     int strLen = str.length();
     if (strLen == 1) {
         return indexOf(str.charAt(0), startIndex);
     }
     if (strLen == 0) {
         return startIndex;
     }
-        if (strLen > size) {
+    if (strLen > size - startIndex) { // Adjusting condition to avoid out of bounds
         return -1;
     }
     char[] thisBuf = buffer;
     int len = thisBuf.length - strLen;
     outer:
-        for (int i = startIndex; i < len; i++) {
+    for (int i = startIndex; i <= len; i++) { // Update loop condition to include = operator
         for (int j = 0; j < strLen; j++) {
             if (str.charAt(j) != thisBuf[i + j]) {
                 continue outer;
             }
         }
         return i;
     }
     return -1;
 }
\ No newline at end of file
