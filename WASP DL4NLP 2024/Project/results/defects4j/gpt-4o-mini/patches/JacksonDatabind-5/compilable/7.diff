diff --git a/tmp/b6b22242-3e76-4a91-ae28-ca8dff5827d2_buggy.java b/tmp/719ee060-7510-4396-8817-295120202425_fixed.java
index b2db1d6..b72599e 100644
--- a/tmp/b6b22242-3e76-4a91-ae28-ca8dff5827d2_buggy.java
+++ b/tmp/719ee060-7510-4396-8817-295120202425_fixed.java
@@ -1,29 +1,35 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Updated: Check if the method is not already masked by a method in the targetClass
+                Method targetMethod = null;
+                try {
+                    targetMethod = targetClass.getDeclaredMethod(m.getName(), m.getParameterTypes());
+                } catch (NoSuchMethodException e) {
+                    // Method does not exist in targetClass, so we can add the mixin
+                }
+
+                if (targetMethod == null || !_isMaskedBy(targetMethod, m)) {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
+
+// Helper method to check if a method in targetClass masks the mixin method
+private boolean _isMaskedBy(Method targetMethod, Method mixinMethod) {
+    return targetMethod.getDeclaringClass().equals(mixinMethod.getDeclaringClass());
+}
\ No newline at end of file
