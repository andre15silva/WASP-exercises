diff --git a/tmp/cba9d2f2-a79e-42aa-97a6-1820345a7962_buggy.java b/tmp/a064458c-f758-4493-b125-cc8e3e03f938_fixed.java
index b2db1d6..14bb112 100644
--- a/tmp/cba9d2f2-a79e-42aa-97a6-1820345a7962_buggy.java
+++ b/tmp/a064458c-f758-4493-b125-cc8e3e03f938_fixed.java
@@ -1,29 +1,25 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
+            // Adjusted the condition to check for visibility. 
+            // If there's no existing annotated method (am) but the method is visible, then add it.
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Check if the method is public or protected before adding to mixIns
+                if (Modifier.isPublic(m.getModifiers()) || Modifier.isProtected(m.getModifiers())) {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
\ No newline at end of file
