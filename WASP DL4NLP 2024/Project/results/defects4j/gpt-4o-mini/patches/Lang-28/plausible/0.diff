diff --git a/tmp/747ae810-8550-49ce-ae11-1e202a4d13f5_buggy.java b/tmp/2ecbd846-99c6-490b-b7b9-5bde79d4c654_fixed.java
index 4bbd561..d8fff2c 100644
--- a/tmp/747ae810-8550-49ce-ae11-1e202a4d13f5_buggy.java
+++ b/tmp/2ecbd846-99c6-490b-b7b9-5bde79d4c654_fixed.java
@@ -1,37 +1,52 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBounds
+    if(index < 0 || index >= input.length() || input.charAt(index) != '&' || index + 1 >= input.length() || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    
     int start = index + 2;
     boolean isHex = false;
 
+    if(start < input.length()) {
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
+    }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while(end < input.length() && input.charAt(end) != ';') {
         end++;
     }
 
+    if(end >= input.length()) {
+        return 0; // No semicolon found
+    }
+
     int entityValue;
     try {
         if(isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch(NumberFormatException nfe) {
         return 0;
     }
 
+    // Write the character or surrogate pair if necessary
+    if (entityValue >= Character.MIN_VALUE && entityValue <= Character.MAX_VALUE) {
         out.write(entityValue);
+    } else if (entityValue > 0x10FFFF) {
+        return 0; // Out of valid Unicode range
+    } else {
+        // Handle supplementary characters (surrogate pairs)
+        entityValue -= 0x10000;
+        out.write(0xD800 | (entityValue >> 10)); // High surrogate
+        out.write(0xDC00 | (entityValue & 0x3FF)); // Low surrogate
+    }
+
     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
 }
\ No newline at end of file
-        return 0;
-    }
