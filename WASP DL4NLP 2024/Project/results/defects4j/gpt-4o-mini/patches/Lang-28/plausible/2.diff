diff --git a/tmp/c034e477-2ece-45e4-b5f3-5c31d1f05d2b_buggy.java b/tmp/0fe1eec0-63ba-43cf-baf7-afa06071ec43_fixed.java
index 4bbd561..d5de3a3 100644
--- a/tmp/c034e477-2ece-45e4-b5f3-5c31d1f05d2b_buggy.java
+++ b/tmp/0fe1eec0-63ba-43cf-baf7-afa06071ec43_fixed.java
@@ -1,37 +1,46 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBounds
+    if (index < 0 || index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    
     int start = index + 2;
     boolean isHex = false;
 
     char firstChar = input.charAt(start);
     if (firstChar == 'x' || firstChar == 'X') {
         start++;
         isHex = true;
     }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
 
+    // Check if we reached the end without finding a semicolon
+    if (end >= input.length()) {
+        return 0; // Invalid entity
+    }
+
     int entityValue;
     try {
         if (isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch (NumberFormatException nfe) {
         return 0;
     }
 
+    // Check if the entityValue is a supplementary character
+    if (entityValue >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+        out.write(Character.toChars(entityValue)); // Use toChars for supplementary characters
+    } else {
         out.write(entityValue);
+    }
+
     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
 }
\ No newline at end of file
-        return 0;
-    }
