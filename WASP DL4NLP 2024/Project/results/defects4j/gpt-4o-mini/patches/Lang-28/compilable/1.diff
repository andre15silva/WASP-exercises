diff --git a/tmp/56f10132-70db-4b43-8712-64c7b8af558a_buggy.java b/tmp/dc509fa3-97e5-4ee6-9728-6ce3340e5505_fixed.java
index 4bbd561..7e8b96e 100644
--- a/tmp/56f10132-70db-4b43-8712-64c7b8af558a_buggy.java
+++ b/tmp/dc509fa3-97e5-4ee6-9728-6ce3340e5505_fixed.java
@@ -1,37 +1,54 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBounds
+    if(index < 0 || index >= input.length() || input.charAt(index) != '&' || index + 1 >= input.length() || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+
     int start = index + 2;
     boolean isHex = false;
 
+    if(start < input.length()) {
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
+    }
 
+    // Ensure we can find the semicolon and to avoid ArrayIndexOutOfBounds
     int end = start;
-            while(input.charAt(end) != ';') {
+    while(end < input.length() && input.charAt(end) != ';') {
         end++;
     }
 
+    // If semicolon is not found, return 0
+    if(end >= input.length()) {
+        return 0;
+    }
+
     int entityValue;
     try {
         if(isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch(NumberFormatException nfe) {
         return 0;
     }
 
-                out.write(entityValue);
+    // Handle supplementary characters properly
+    if (entityValue >= 0x10000) {
+        // Calculate surrogate pairs
+        entityValue -= 0x10000;
+        char utf16High = (char) (0xD800 + (entityValue >> 10));
+        char utf16Low = (char) (0xDC00 + (entityValue & 0x3FF));
+        out.write(utf16High);
+        out.write(utf16Low);
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+    } else {
+        out.write(entityValue);
+        return 1 + (end - start) + (isHex ? 1 : 0) + 1;
     }
-        return 0;
 }
\ No newline at end of file
