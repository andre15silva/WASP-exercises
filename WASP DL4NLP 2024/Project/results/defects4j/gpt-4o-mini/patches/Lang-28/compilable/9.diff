diff --git a/tmp/170ec74b-af9d-44e4-9704-f72bd5029d9a_buggy.java b/tmp/2656570c-7a85-4315-89f4-20867e789ebf_fixed.java
index 4bbd561..699fbdb 100644
--- a/tmp/170ec74b-af9d-44e4-9704-f72bd5029d9a_buggy.java
+++ b/tmp/2656570c-7a85-4315-89f4-20867e789ebf_fixed.java
@@ -1,37 +1,40 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBounds
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+
     int start = index + 2;
     boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+    if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
         start++;
         isHex = true;
     }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
 
+    // Check if we found the closing semicolon
+    if (end >= input.length()) {
+        return 0; // No semicolon found, return 0
+    }
+
     int entityValue;
     try {
         if (isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch (NumberFormatException nfe) {
         return 0;
     }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+    // Write the character to the output
+    out.write(Character.toChars(entityValue)); // Use Character.toChars() for supplementary characters
+    return 2 + (end - index) + (isHex ? 1 : 0);
 }
\ No newline at end of file
