diff --git a/tmp/89143601-d5db-4770-9c66-3dbb117c866b_buggy.java b/tmp/6b8b07ef-0cf1-48e2-8c6a-dc28c4b1e5e0_fixed.java
index cd412d2..3e91b8c 100644
--- a/tmp/89143601-d5db-4770-9c66-3dbb117c866b_buggy.java
+++ b/tmp/6b8b07ef-0cf1-48e2-8c6a-dc28c4b1e5e0_fixed.java
@@ -1,76 +1,71 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            if (c == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (c == '+' || c == '-') {
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
             c = dateStr.charAt(len - 9);
             if (Character.isDigit(c)) {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len - 5, ".000");
                 dateStr = sb.toString();
             }
             df = _formatISO8601;
-                if (_formatISO8601 == null) {
+            if (df == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
         }
     }
+
+    // Fix for fractional seconds parsing
+    int indexOfDot = dateStr.indexOf('.');
+    if (indexOfDot != -1) {
+        int indexOfPlusMinus = Math.max(dateStr.indexOf('+'), dateStr.indexOf('-'));
+        if (indexOfPlusMinus == -1 || indexOfDot < indexOfPlusMinus) {
+            String fractionalSeconds = dateStr.substring(indexOfDot + 1);
+            if (fractionalSeconds.length() < 3) {
+                dateStr += "0".repeat(3 - fractionalSeconds.length());
+            }
+        }
+    }
+
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
