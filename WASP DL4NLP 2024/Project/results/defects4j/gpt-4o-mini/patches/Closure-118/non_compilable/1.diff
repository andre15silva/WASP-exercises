diff --git a/tmp/8b0b3ecb-f25e-48ea-9ce9-0789bc68f61e_buggy.java b/tmp/f79a1c09-6bd6-4c9c-bcf9-cb532ee402d1_fixed.java
index 0b7c52e..4f05127 100644
--- a/tmp/8b0b3ecb-f25e-48ea-9ce9-0789bc68f61e_buggy.java
+++ b/tmp/f79a1c09-6bd6-4c9c-bcf9-cb532ee402d1_fixed.java
@@ -1,27 +1,35 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+        
+        // Check for both STRING and NUMBER types in object literals.
+        if (type != null && (type.isString() || type.isNumber())) {
+          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
             // TODO(user): It doesn't look like the user can do much in this
             // case right now.
             if (propertiesToErrorFor.containsKey(name)) {
               compiler.report(JSError.make(
                   t.getSourceName(), child, propertiesToErrorFor.get(name),
                   Warnings.INVALIDATION, name,
                   (type == null ? "null" : type.toString()), n.toString(), ""));
             }
           }
+        } else {
+          // Handle case where the type is null or not a valid primitive.
+          compiler.report(JSError.make(
+              t.getSourceName(), child, "Expected a string or number type for property '" + name + "'", 
+              Warnings.INVALIDATION, name, "null", n.toString(), ""));
+        }
       }
     }
\ No newline at end of file
