diff --git a/tmp/bb03a84e-4813-4475-8648-254a5e2b3272_buggy.java b/tmp/041227df-fd73-4046-9e87-9bca5242e0ce_fixed.java
index 0b7c52e..a8732fe 100644
--- a/tmp/bb03a84e-4813-4475-8648-254a5e2b3272_buggy.java
+++ b/tmp/041227df-fd73-4046-9e87-9bca5242e0ce_fixed.java
@@ -1,27 +1,30 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
+        // Ensure that properties are declared consistently
         Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
+        if (prop != null && !prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+          // Handle cases where properties are mixed types
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
+        } else if (prop == null) {
+          // Add handling for new properties
+          addNewProperty(name, type, child);
         }
       }
     }
\ No newline at end of file
