diff --git a/tmp/8dfe54ba-5371-44ca-8e24-c2dd4c9d7d1c_buggy.java b/tmp/cfa40074-16ce-4dbb-bf1e-6a93c3154471_fixed.java
index 0b7c52e..57bbbb4 100644
--- a/tmp/8dfe54ba-5371-44ca-8e24-c2dd4c9d7d1c_buggy.java
+++ b/tmp/cfa40074-16ce-4dbb-bf1e-6a93c3154471_fixed.java
@@ -1,27 +1,35 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
+      boolean hasNumber = false;
+      boolean hasString = false;
 
-        // We should never see a mix of numbers and strings.
+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+        if (type != null) {
+          if (type.isNumber()) {
+            hasNumber = true;
+          } else if (type.isString()) {
+            hasString = true;
+          }
+        }
+
+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
+
+      // Additional check for mixed types
+      if (hasNumber && hasString) {
+        compiler.report(JSError.make(t.getSourceName(), n, "Mixing number and string properties is not allowed."));
+      }
     }
\ No newline at end of file
