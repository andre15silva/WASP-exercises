diff --git a/tmp/dc84b495-4201-4eb2-9316-01e6b3e32c10_buggy.java b/tmp/51151439-a702-4162-9651-eed410f03bce_fixed.java
index 7d8d756..c796b6a 100644
--- a/tmp/dc84b495-4201-4eb2-9316-01e6b3e32c10_buggy.java
+++ b/tmp/51151439-a702-4162-9651-eed410f03bce_fixed.java
@@ -1,48 +1,45 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
     // first, sanity checks
     if (p.getCurrentToken() != JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
     }
-            // should always get field name, but just in case...
+    // Advance to the first field name (which should be the type id)
     if (p.nextToken() != JsonToken.FIELD_NAME) {
         throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                 "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
     }
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+    p.nextToken(); // Move to the next token (the value)
 
     // Minor complication: we may need to merge type id in?
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
         // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
         tb.writeStartObject(); // recreate START_OBJECT
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
+        // Flatten the new token buffer with the existing parser
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+        p.nextToken(); // Move to the next token (the value)
     }
 
+    // Deserialize the value
     Object value = deser.deserialize(p, ctxt);
     // And then need the closing END_OBJECT
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
