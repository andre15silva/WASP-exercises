diff --git a/tmp/ce0556d0-51d0-439c-b788-f70c4648ce03_buggy.java b/tmp/6cb43eda-dce7-4d0b-8015-01c9b35ba12b_fixed.java
index 7d8d756..6dd40fc 100644
--- a/tmp/ce0556d0-51d0-439c-b788-f70c4648ce03_buggy.java
+++ b/tmp/6cb43eda-dce7-4d0b-8015-01c9b35ba12b_fixed.java
@@ -1,48 +1,45 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
     // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+    if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
     }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-            }
+
+    // Check if the current token is FIELD_NAME, if not, move to the next token
+    if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
 
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     } 
+    // Handle the case where we directly start with the type identifier as a FIELD_NAME
+    throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+            "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
+}
\ No newline at end of file
