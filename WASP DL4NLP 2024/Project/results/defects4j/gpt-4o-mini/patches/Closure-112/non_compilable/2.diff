diff --git a/tmp/1bf4a782-6080-4cce-8de6-732f3a45c254_buggy.java b/tmp/da5b13c8-fc78-4e32-84b5-b0ea7315af83_fixed.java
index 63641d0..db27ea9 100644
--- a/tmp/1bf4a782-6080-4cce-8de6-732f3a45c254_buggy.java
+++ b/tmp/da5b13c8-fc78-4e32-84b5-b0ea7315af83_fixed.java
@@ -1,33 +1,34 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Ensure that we do not have any unbound template types
+  for (TemplateType key : keys) {
+    if (!inferred.containsKey(key)) {
+      inferred.put(key, JSType.getUnknownType());
+    }
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
