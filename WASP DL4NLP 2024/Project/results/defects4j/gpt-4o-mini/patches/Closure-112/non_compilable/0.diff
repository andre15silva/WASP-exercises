diff --git a/tmp/5ede3604-c457-4812-ab72-3d6df95e3449_buggy.java b/tmp/c0f4521e-2e2d-4d5b-ae7d-9c1c7a915f1f_fixed.java
index 63641d0..df5fb64 100644
--- a/tmp/5ede3604-c457-4812-ab72-3d6df95e3449_buggy.java
+++ b/tmp/c0f4521e-2e2d-4d5b-ae7d-9c1c7a915f1f_fixed.java
@@ -1,33 +1,33 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Verify that we have inferred types for all template keys
+  for (TemplateType key : keys) {
+    if (!inferred.containsKey(key)) {
+      inferred.put(key, JSType.UNKNOWN); // Set any missing inferred type as UNKNOWN
+    }
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+  // Replace all template types. 
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
