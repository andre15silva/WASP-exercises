diff --git a/tmp/731c2465-746b-438c-8a38-557ffd99e137_buggy.java b/tmp/e67c5e93-6df2-42ac-86c8-c02c6c902d21_fixed.java
index 670114d..5d1d66a 100644
--- a/tmp/731c2465-746b-438c-8a38-557ffd99e137_buggy.java
+++ b/tmp/e67c5e93-6df2-42ac-86c8-c02c6c902d21_fixed.java
@@ -1,48 +1,45 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
 
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
+  if (n.isAssign() || n.isCall()) {
+    Node nameNode = n.getFirstChild();
+    NameInformation ns = createNameInformation(t, nameNode, n);
+
+    if (ns != null) {
       if (n.isAssign()) {
-        Node nameNode = n.getFirstChild();
-
-        NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null) {
         if (ns.isPrototype) {
           recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
         } else {
           recordSet(ns.name, nameNode);
         }
-        }
-      } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
+      } else if (n.isCall() && ns.onlyAffectsClassDef) {
         JsName name = getName(ns.name, false);
         if (name != null) {
-          refNodes.add(new ClassDefiningFunctionNode(
-              name, n, parent, parent.getParent()));
+          refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));
+        }
       }
     }
   }
 }
\ No newline at end of file
