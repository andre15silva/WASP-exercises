diff --git a/tmp/3a240fe0-908e-43e7-b0e2-4333eef72128_buggy.java b/tmp/d0d11fdc-1dab-4163-8d0a-e93c49014f6a_fixed.java
index d57736b..2f68f23 100644
--- a/tmp/3a240fe0-908e-43e7-b0e2-4333eef72128_buggy.java
+++ b/tmp/d0d11fdc-1dab-4163-8d0a-e93c49014f6a_fixed.java
@@ -1,39 +1,27 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
+          // Define inferred property type only if it won't cause a type conflict
+          if (!objType.getPropertyType(prop).isSubtypeOf(typeToInfer)) {
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
+}
\ No newline at end of file
