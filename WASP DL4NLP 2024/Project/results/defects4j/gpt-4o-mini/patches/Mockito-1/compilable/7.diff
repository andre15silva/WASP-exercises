diff --git a/tmp/81a70f85-e7a8-4eef-8386-c1720f45cdf1_buggy.java b/tmp/1c06a9c5-af02-41c6-aeed-c36a1f513196_fixed.java
index 1c875ad..092c7f1 100644
--- a/tmp/81a70f85-e7a8-4eef-8386-c1720f45cdf1_buggy.java
+++ b/tmp/1c06a9c5-af02-41c6-aeed-c36a1f513196_fixed.java
@@ -1,31 +1,27 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
+        // Capture the vararg arguments if the method accepts them
         int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object varargArray = invocation.getRawArguments()[indexOfVararg];
         
+        if (varargArray instanceof Object[]) {
+            Object[] args = (Object[]) varargArray;
+            for (Matcher m : matchers) {
+                if (m instanceof CapturesArguments) {
+                    for (Object arg : args) {
+                        ((CapturesArguments) m).captureFrom(arg);
+                    }
+                }
+            }
+        } else {
+            throw new UnsupportedOperationException("Vararg argument must be an array");
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
+            if (m instanceof CapturesArguments && position < invocation.getRawArguments().length) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
