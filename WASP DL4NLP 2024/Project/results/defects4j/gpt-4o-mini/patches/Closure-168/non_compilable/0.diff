diff --git a/tmp/4b6bd3d1-69c7-4615-81e0-fa4e65fabb8c_buggy.java b/tmp/df0d3ed9-c97a-4135-bfaa-86b26e1431d1_fixed.java
index b12de99..f89725d 100644
--- a/tmp/4b6bd3d1-69c7-4615-81e0-fa4e65fabb8c_buggy.java
+++ b/tmp/df0d3ed9-c97a-4135-bfaa-86b26e1431d1_fixed.java
@@ -1,52 +1,70 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
     if (t.inGlobalScope()) {
         return;
     }
 
     if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
     }
 
     if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
         return;
     }
 
     if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
         !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
 
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
             }
         }
     } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
         NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode())
                     .recordEscapedQualifiedName(n.getQualifiedName());
             }
         }
     }
+
+    // New check for function parameters
+    if (n.isCall() && n.getFirstChild().isName()) {
+        Node callee = n.getFirstChild();
+        String calleeName = callee.getString();
+        Scope scope = t.getScope();
+        Var calleeVar = scope.getVar(calleeName);
+        if (calleeVar != null) {
+            Scope ownerScope = calleeVar.getScope();
+            if (ownerScope.isLocal()) {
+                FunctionType functionType = calleeVar.getType().toMaybeFunctionType();
+                if (functionType != null) {
+                    Node argumentList = n.getSecondChild();
+                    for (Node arg : argumentList.children()) {
+                        // Check argument types against function parameter types
+                        JSType argType = getTypeForNode(arg);
+                        JSType paramType = functionType.getParameterType(arg.getIndex());
+                        if (!isTypeMatch(argType, paramType)) {
+                            reportWarning(arg, "actual parameter " + (arg.getIndex() + 1) + 
+                                           " of " + calleeName + " does not match formal parameter\n" +
+                                           "found   : " + argType + "\n" +
+                                           "required: " + paramType);
+                        }
+                    }
+                }
+            }
+        }
+    }
 }
\ No newline at end of file
