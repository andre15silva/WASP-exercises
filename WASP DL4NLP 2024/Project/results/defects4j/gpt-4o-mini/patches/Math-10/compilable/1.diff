diff --git a/tmp/1093d5cf-aa36-4c5a-b9f9-2f6d33f1f2c8_buggy.java b/tmp/2b407ce1-db45-4674-bd3c-a754caf5bd8a_fixed.java
index d27c40c..474c48e 100644
--- a/tmp/1093d5cf-aa36-4c5a-b9f9-2f6d33f1f2c8_buggy.java
+++ b/tmp/2b407ce1-db45-4674-bd3c-a754caf5bd8a_fixed.java
@@ -1,49 +1,51 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
     // compute r = sqrt(x^2+y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
+    // Handle special cases for y = 0 and x = 0
+    if (y[yOffset] == 0 && x[xOffset] == 0) {
+        // Both inputs are zero
+        result[resultOffset] = Double.NaN; // or throw exception depending on requirements
+        return;
+    }
+
+    if (y[yOffset] == 0) {
+        // Special case when y = 0
+        result[resultOffset] = (x[xOffset] > 0) ? 0 : FastMath.PI;
+        return;
+    }
+
+    if (x[xOffset] == 0) {
+        // Special case when x = 0
+        result[resultOffset] = (y[yOffset] > 0) ? FastMath.PI / 2 : -FastMath.PI / 2;
+        return;
+    }
+
     if (x[xOffset] >= 0) {
-
         // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
-
     } else {
-
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
         result[resultOffset] =
                 ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
             result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
         }
-
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
