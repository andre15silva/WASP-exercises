diff --git a/tmp/e850f445-003b-4b58-a098-526ff03beeb0_buggy.java b/tmp/9908fe4f-ea5e-4c50-93ea-5609fdb0b0e2_fixed.java
index e0ecec8..dcfb98c 100644
--- a/tmp/e850f445-003b-4b58-a098-526ff03beeb0_buggy.java
+++ b/tmp/9908fe4f-ea5e-4c50-93ea-5609fdb0b0e2_fixed.java
@@ -1,35 +1,48 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+  
+  // Track if we are processing var_args parameter
+  boolean isVarArgs = parameters.hasNext() && parameters.next().isVarArgs();
+  
+  while (arguments.hasNext()) {
     argument = arguments.next();
     ordinal++;
 
+    if (isVarArgs) {
+      // If we have a var_args parameter, we don't need to check against all parameters
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(parameters.next()), call, ordinal);
+    } else if (parameters.hasNext()) {
+      parameter = parameters.next();
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+    } else {
+      // Report extra arguments if we don't have more parameters to match
+      report(t, call, WRONG_ARGUMENT_COUNT,
+          validator.getReadableJSTypeName(call.getFirstChild(), false),
+          String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),
+          functionType.getMaxArguments() != Integer.MAX_VALUE ?
+          " and no more than " + functionType.getMaxArguments() + " argument(s)" : "");
+      break; // Exit the loop once we handle an excess argument
+    }
   }
 
-    int numArgs = call.getChildCount() - 1;
+  int numArgs = ordinal; // Update numArgs to reflect the actual processed arguments
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
+  
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
