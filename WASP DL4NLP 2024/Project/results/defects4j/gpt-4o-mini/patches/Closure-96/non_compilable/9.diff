diff --git a/tmp/31dfd3e6-4d13-4002-8c38-11726a0072c5_buggy.java b/tmp/fa8caef6-2a29-4b63-9dd1-c64df827f3cd_fixed.java
index e0ecec8..a664e4e 100644
--- a/tmp/31dfd3e6-4d13-4002-8c38-11726a0072c5_buggy.java
+++ b/tmp/fa8caef6-2a29-4b63-9dd1-c64df827f3cd_fixed.java
@@ -1,35 +1,42 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+    
+    // Track if we are in var args mode
+    boolean isVarArgs = functionType.isVarArgs();
+    
+    while (arguments.hasNext()) {
       ordinal++;
+      argument = arguments.next();
       
+      if (parameters.hasNext()) {
+        parameter = parameters.next();
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
+      } else if (!isVarArgs) {
+        // Report an error if we're out of parameters and not in var-args mode
+        report(t, call, WRONG_ARGUMENT_COUNT,
+            validator.getReadableJSTypeName(call.getFirstChild(), false),
+            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),
+            functionType.getMaxArguments() != Integer.MAX_VALUE ?
+            " and no more than " + functionType.getMaxArguments() + " argument(s)" : "");
+      }
     }
 
-    int numArgs = call.getChildCount() - 1;
+    int numArgs = ordinal; // Count actual arguments processed
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
 }
\ No newline at end of file
