diff --git a/tmp/4d26f327-8b85-4b9d-a6f6-3c56a3aa8d99_buggy.java b/tmp/0101fa2e-425f-4cff-9ab1-c5e706638586_fixed.java
index e0ecec8..5be9a66 100644
--- a/tmp/4d26f327-8b85-4b9d-a6f6-3c56a3aa8d99_buggy.java
+++ b/tmp/0101fa2e-425f-4cff-9ab1-c5e706638586_fixed.java
@@ -1,35 +1,48 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+
+    // Check if the function has var_args and handle them separately
+    boolean isVarArgs = functionType.isVarArgs();
+
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
+      // Only validate the parameter if there are parameters left
+      if (parameters.hasNext()) {
+        parameter = parameters.next();
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
+      } else if (isVarArgs) {
+        // If it's a var_args function, we allow additional arguments
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), getJSType(parameter), call, ordinal);
+      } else {
+        // If there are parameters left but no more args, we need to report
+        report(t, call, WRONG_ARGUMENT_COUNT,
+            validator.getReadableJSTypeName(call.getFirstChild(), false),
+            String.valueOf(ordinal),
+            String.valueOf(functionType.getMinArguments()),
+            functionType.getMaxArguments() != Integer.MAX_VALUE ?
+            " and no more than " + functionType.getMaxArguments() + " argument(s)" : "");
+      }
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
 }
\ No newline at end of file
