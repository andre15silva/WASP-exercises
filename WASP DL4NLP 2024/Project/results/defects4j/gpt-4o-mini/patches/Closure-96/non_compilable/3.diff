diff --git a/tmp/396b37ed-2ec3-455a-9991-8fbad396ba32_buggy.java b/tmp/67a6ee0d-5323-4078-9c3d-2293d7c1ee09_fixed.java
index e0ecec8..d14c530 100644
--- a/tmp/396b37ed-2ec3-455a-9991-8fbad396ba32_buggy.java
+++ b/tmp/67a6ee0d-5323-4078-9c3d-2293d7c1ee09_fixed.java
@@ -1,35 +1,48 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+
+  // Track whether we've encountered a var_args parameter
+  boolean hasVarArgs = functionType.isVarArgs();
+
+  while (arguments.hasNext()) {
     argument = arguments.next();
     ordinal++;
 
+    // Only validate against parameters if there are still parameters left
+    if (parameters.hasNext()) {
+      parameter = parameters.next();
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+    } else if (hasVarArgs) {
+      // If we're out of parameters but the function is var_args, we skip validation
+      // Since var_args can accept any type of additional arguments
+      continue;
+    } else {
+      // If there are no parameters left and it's not var_args, report an error
+      report(t, call, WRONG_ARGUMENT_COUNT,
+          validator.getReadableJSTypeName(call.getFirstChild(), false),
+          String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),
+          functionType.getMaxArguments() != Integer.MAX_VALUE ?
+          " and no more than " + functionType.getMaxArguments() + " argument(s)" : "");
+      return;
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
