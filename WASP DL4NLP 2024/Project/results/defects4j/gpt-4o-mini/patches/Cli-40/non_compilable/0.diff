diff --git a/tmp/fdc7b3eb-915e-4bf2-820f-a929abf32e1c_buggy.java b/tmp/10dd0715-005d-4310-9c75-40f9e3b6a86c_fixed.java
index a7d0787..2c1c29d 100644
--- a/tmp/fdc7b3eb-915e-4bf2-820f-a929abf32e1c_buggy.java
+++ b/tmp/10dd0715-005d-4310-9c75-40f9e3b6a86c_fixed.java
@@ -1,54 +1,44 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
+    if (clazz == String.class)
     {
         return (T) str;
     }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
+    else if (clazz == Object.class)
     {
         return (T) createObject(str);
     }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+    else if (clazz == Number.class || clazz == Integer.class || clazz == Long.class || clazz == Double.class)
     {
         return (T) createNumber(str);
     }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
+    else if (clazz == Date.class)
     {
         return (T) createDate(str);
     }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
+    else if (clazz == Class.class)
     {
         return (T) createClass(str);
     }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
+    else if (clazz == File.class)
     {
         return (T) createFile(str);
     }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
+    else if (clazz == ExistingFile.class) // Assuming ExistingFile is a class that handles existing files
     {
         return (T) openFile(str);
     }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
+    else if (clazz == List.class) // Assuming FILES_VALUE refers to a List of files
     {
         return (T) createFiles(str);
     }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
+    else if (clazz == URL.class)
     {
         return (T) createURL(str);
     }
     else
     {
-            return null;
+        throw new ParseException("Unsupported type: " + clazz.getName());
     }
 }
\ No newline at end of file
