diff --git a/tmp/c284940f-896d-498a-b0ec-efdf28d22b9a_buggy.java b/tmp/c1d3bca3-71b6-4091-9da9-230b88494062_fixed.java
index a7d0787..3fa0c97 100644
--- a/tmp/c284940f-896d-498a-b0ec-efdf28d22b9a_buggy.java
+++ b/tmp/c1d3bca3-71b6-4091-9da9-230b88494062_fixed.java
@@ -1,54 +1,52 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
+    else if (clazz == Integer.class) // Check for Integer.class explicitly
+    {
+        try {
+            return (T) Integer.valueOf(str); // Convert string to Integer
+        } catch (NumberFormatException e) {
+            throw new ParseException("Failed to parse integer value: " + str);
+        }
+    }
     else
     {
-            return null;
+        throw new ParseException("Unsupported type: " + clazz.getName()); // Throw exception for unsupported types
     }
 }
\ No newline at end of file
