diff --git a/tmp/d0125268-567a-46da-a58d-461d560c36e7_buggy.java b/tmp/da772c5a-49a7-4f97-9163-6ea55ec0c01c_fixed.java
index 4b7e1e4..00ffcc7 100644
--- a/tmp/d0125268-567a-46da-a58d-461d560c36e7_buggy.java
+++ b/tmp/da772c5a-49a7-4f97-9163-6ea55ec0c01c_fixed.java
@@ -1,52 +1,58 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+
         while ((ch = i.read()) != -1) {
-                read++;
             if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen >= 0) { // Check for negative length
+                            if (restLen == 0) { // only NL
                                 headers.remove(keyword);
                             } else {
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                             + "Paxheader. Expected "
                                             + restLen
                                             + " bytes, read "
                                             + got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
                                         restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
+                        } else {
+                            throw new IOException("Negative length calculated for keyword: " + keyword);
+                        }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid character found in length: " + (char) ch);
+            }
             len *= 10;
             len += ch - '0';
+            read++;
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
