diff --git a/tmp/9110d584-df2c-4ca1-a7b0-5911885c514b_buggy.java b/tmp/bebbf730-ab23-4408-adfa-679e004de916_fixed.java
index 4b7e1e4..ed1b0fa 100644
--- a/tmp/9110d584-df2c-4ca1-a7b0-5911885c514b_buggy.java
+++ b/tmp/bebbf730-ab23-4408-adfa-679e004de916_fixed.java
@@ -1,52 +1,49 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+                        final int restLen = len - read + 1; // Fix calculation
+                        if (restLen <= 0) { // Ensure no negative size
+                            break; // Handle empty or malformed header gracefully
+                        }
                         final byte[] rest = new byte[restLen];
                         final int got = IOUtils.readFully(i, rest);
                         if (got != restLen) {
                             throw new IOException("Failed to read "
                                                   + "Paxheader. Expected "
                                                   + restLen
                                                   + " bytes, read "
                                                   + got);
                         }
                         // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                         headers.put(keyword, value);
-                            }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
