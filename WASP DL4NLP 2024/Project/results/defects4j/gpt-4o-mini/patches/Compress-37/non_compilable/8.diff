diff --git a/tmp/2e73e9f2-bad9-45d2-9065-83d5dea7b1dd_buggy.java b/tmp/1d818bee-3bd2-4612-83eb-49e5ea2aef80_fixed.java
index 4b7e1e4..1647b80 100644
--- a/tmp/2e73e9f2-bad9-45d2-9065-83d5dea7b1dd_buggy.java
+++ b/tmp/1d818bee-3bd2-4612-83eb-49e5ea2aef80_fixed.java
@@ -1,52 +1,53 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
+                        } else if (restLen > 1) { // Only process valid lengths
+                            final byte[] rest = new byte[restLen - 1]; // -1 to drop trailing NL
                             final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                            if (got != restLen - 1) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
-                                                          + restLen
+                                                      + (restLen - 1)
                                                       + " bytes, read "
                                                       + got);
                             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                            // Add the value without the trailing NL
+                            final String value = new String(rest, 0, rest.length, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
+            if (ch < '0' || ch > '9') { // Ensure only digits are processed for length
+                throw new IOException("Invalid character in length: " + (char) ch);
+            }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
