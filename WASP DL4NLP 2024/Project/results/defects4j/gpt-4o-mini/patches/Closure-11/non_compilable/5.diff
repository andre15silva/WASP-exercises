diff --git a/tmp/a132d28d-9d23-4f5c-943e-3ad808515a6b_buggy.java b/tmp/2a03fe35-c7f7-4cf9-8f2b-097e10b14941_fixed.java
index 57c40b2..f3f3104 100644
--- a/tmp/a132d28d-9d23-4f5c-943e-3ad808515a6b_buggy.java
+++ b/tmp/2a03fe35-c7f7-4cf9-8f2b-097e10b14941_fixed.java
@@ -1,27 +1,18 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
-    if (childType.isDict()) {
+    // Check if the object is null or undefined, and report if we try to access a property
+    if (childType.isNullType() || childType.isUndefinedType()) {
+        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "No properties on this expression", "null or undefined");
+    } else if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
         return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
         checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
 }
\ No newline at end of file
