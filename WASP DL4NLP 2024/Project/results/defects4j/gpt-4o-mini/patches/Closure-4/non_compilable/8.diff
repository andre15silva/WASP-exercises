diff --git a/tmp/d23e8657-7026-4d2c-9177-352b43805ba6_buggy.java b/tmp/f544a75b-40c0-4dc0-a4f5-417e4d1e9a0b_fixed.java
index d6a560a..23ef807 100644
--- a/tmp/d23e8657-7026-4d2c-9177-352b43805ba6_buggy.java
+++ b/tmp/f544a75b-40c0-4dc0-a4f5-417e4d1e9a0b_fixed.java
@@ -1,33 +1,30 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
+        // Report the proper error message for a cycle in the inheritance chain
+        t.reportError("Cycle detected in inheritance chain of type " + this.toString());
         handleTypeCycle(t);
+        return this; // Return this to indicate unresolved state
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    resolved = resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
+        // Report the proper error message for a cycle in the inheritance chain
+        t.reportError("Cycle detected in inheritance chain of type " + this.toString());
         handleTypeCycle(t);
+        return this; // Return this to indicate unresolved state
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
