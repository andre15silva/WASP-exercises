diff --git a/tmp/582eda1a-25ee-4f94-9cd6-c7fd5d8462ea_buggy.java b/tmp/58d884d8-18c7-45c7-92ba-527bf189500a_fixed.java
index bb3193c..0b0f5e5 100644
--- a/tmp/582eda1a-25ee-4f94-9cd6-c7fd5d8462ea_buggy.java
+++ b/tmp/58d884d8-18c7-45c7-92ba-527bf189500a_fixed.java
@@ -1,52 +1,39 @@
-  /**
-   * For each qualified name N in the global scope, we check if:
-   * (a) No ancestor of N is ever aliased or assigned an unknown value type.
-   *     (If N = "a.b.c", "a" and "a.b" are never aliased).
-   * (b) N has exactly one write, and it lives in the global scope.
-   * (c) N is aliased in a local scope.
-   *
-   * If (a) is true, then GlobalNamespace must know all the writes to N.
-   * If (a) and (b) are true, then N cannot change during the execution of
-   *    a local scope.
-   * If (a) and (b) and (c) are true, then the alias can be inlined if the
-   *    alias obeys the usual rules for how we decide whether a variable is
-   *    inlineable.
-   * @see InlineVariables
-   */
 private void inlineAliases(GlobalNamespace namespace) {
-    // Invariant: All the names in the worklist meet condition (a).
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
     while (!workList.isEmpty()) {
         Name name = workList.pop();
 
-      // Don't attempt to inline a getter or setter property as a variable.
         if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
             continue;
         }
 
-      if (name.globalSets == 1 && name.localSets == 0 &&
-          name.aliasingGets > 0) {
-        // {@code name} meets condition (b). Find all of its local aliases
-        // and try to inline them.
+        if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {
             List<Ref> refs = Lists.newArrayList(name.getRefs());
             for (Ref ref : refs) {
                 if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
                     if (inlineAliasIfPossible(ref, namespace)) {
                         name.removeRef(ref);
                     }
                 }
             }
         }
 
-      // Check if {@code name} has any aliases left after the
-      // local-alias-inlining above.
-      if ((name.type == Name.Type.OBJECTLIT ||
-           name.type == Name.Type.FUNCTION) &&
-          name.aliasingGets == 0 && name.props != null) {
-        // All of {@code name}'s children meet condition (a), so they can be
-        // added to the worklist.
+        if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) {
             workList.addAll(name.props);
         }
     }
+
+    // Added check to ensure inlineAliasIfPossible is called for aliases in closures
+    for (Name closureName : namespace.getNameForest()) {
+        if (closureName.type == Name.Type.FUNCTION) {
+            List<Ref> closureRefs = Lists.newArrayList(closureName.getRefs());
+            for (Ref closureRef : closureRefs) {
+                if (closureRef.type == Type.ALIASING_GET && closureRef.scope.isLocal()) {
+                    if (inlineAliasIfPossible(closureRef, namespace)) {
+                        closureName.removeRef(closureRef);
+                    }
+                }
+            }
+        }
+    }
 }
\ No newline at end of file
