diff --git a/tmp/2e4ed7a0-d106-4849-9928-478e9b7346c0_buggy.java b/tmp/c051588e-8dbd-42eb-b9d6-a979918871cf_fixed.java
index d666a67..2baf070 100644
--- a/tmp/2e4ed7a0-d106-4849-9928-478e9b7346c0_buggy.java
+++ b/tmp/c051588e-8dbd-42eb-b9d6-a979918871cf_fixed.java
@@ -1,36 +1,42 @@
     /**
      * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
      * <p />
      * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
      * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
      * some more duplicates.
      */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
         // limit (no cache):
         if (count > maxStringCacheLen)
             return new String(charBuf, start, count);
 
         // calculate hash:
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
 
         // get from cache
         final int index = hash & stringCache.length - 1;
         String cached = stringCache[index];
 
         if (cached == null) { // miss, add
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
         } else { // hashcode hit, check equality
             if (rangeEquals(charBuf, start, count, cached)) { // hit
                 return cached;
             } else { // hashcode conflict
-                cached = new String(charBuf, start, count);
+                //consume until char at end is not matched or exhausted
+                while (charBuf[offset] == cached.charAt(start + count)) {
+                    offset++;
+                    count++;
+                }
+                final int end = offset < charBuf.length ? offset : -1;
+                cached = new String(charBuf, start, end);
                 stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
             }
         }
         return cached;
     }
