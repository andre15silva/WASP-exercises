diff --git a/tmp/2f2bb6dc-123e-4e10-85a6-37faa4e7640b_buggy.java b/tmp/e19a4acc-9edf-4559-90d2-999542563f6d_fixed.java
index 602226b..9f768ae 100644
--- a/tmp/2f2bb6dc-123e-4e10-85a6-37faa4e7640b_buggy.java
+++ b/tmp/e19a4acc-9edf-4559-90d2-999542563f6d_fixed.java
@@ -1,26 +1,39 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
 
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
             // Parameters of the scope function also get a BAD_PARAMETERS
             // error.
+          } else if (parent.isName()) {
+            Node pparent = n.getParent();
+            // If we are a parameter of a scope function
+            if (pparent != null && pparent.isParamList()) {
+              Node value = pparent.getParent();
+              if (value != null && value.isFunction() ) {
+                // Just do nothing.
+              } else {
+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+              }
+            } else {
+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+            }
+          }
         } else {
           // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
-    }
