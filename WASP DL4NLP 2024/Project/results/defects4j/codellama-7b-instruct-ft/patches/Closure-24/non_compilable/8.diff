diff --git a/tmp/3f4e03b2-309a-4c45-b013-9cb40b6fbbe7_buggy.java b/tmp/f279c0a4-3323-4dc8-ace2-f6746f88d354_fixed.java
index 602226b..e63678d 100644
--- a/tmp/3f4e03b2-309a-4c45-b013-9cb40b6fbbe7_buggy.java
+++ b/tmp/f279c0a4-3323-4dc8-ace2-f6746f88d354_fixed.java
@@ -1,26 +1,33 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+          // Finding alias for properties of goog.Dom, goog.style, etc.
+          reportIfNot(
+              t,
+              n,
+              GOOG_SCOPE_NON_ALIAS_LOCAL,
+              n.isQualifiedName() &&
+                  n.getLastChild().isQualifiedName() &&
+                  !BleedingEdgeApiHelper.isScopedAlias(n.getLastChild()),
+              n.getString());
         }
         }
       }
     }
