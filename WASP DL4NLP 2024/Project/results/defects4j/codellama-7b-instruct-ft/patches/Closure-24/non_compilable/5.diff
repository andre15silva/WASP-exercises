diff --git a/tmp/63c76969-2728-468c-abca-f187422a384f_buggy.java b/tmp/5a185fb8-d0ee-4ab5-a5ad-4e1910848975_fixed.java
index 602226b..b9fba95 100644
--- a/tmp/63c76969-2728-468c-abca-f187422a384f_buggy.java
+++ b/tmp/5a185fb8-d0ee-4ab5-a5ad-4e1910848975_fixed.java
@@ -1,26 +1,35 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+          // If the local has a qualified name, do nothing.
+          if (!aliasVar.getInitialValue().isQualifiedName()) {
+            // If the local is an additive expression, do nothing.
+            if (v.getInitialValue() != null
+                && v.getInitialValue().isAdditiveExpression()) {
+              continue;
+            }
+            if (!aliasVar.isLocal()) {
+              report(t, v.getNode(), ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL,
+                  v.getName());
+            }
           }
         }
       }
     }
