diff --git a/tmp/bda3a4ca-12eb-44d7-995e-8e679dff57ec_buggy.java b/tmp/8600cb04-18f4-469d-8fc9-b23ed7a4de9b_fixed.java
index 2ce28b5..658287e 100644
--- a/tmp/bda3a4ca-12eb-44d7-995e-8e679dff57ec_buggy.java
+++ b/tmp/8600cb04-18f4-469d-8fc9-b23ed7a4de9b_fixed.java
@@ -1,72 +1,99 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      * 
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
+	    } else if (TarArchiveInputStream.matches(signature, signatureLength)) {
+                return new TarArchiveInputStream(in);
+	    // 21 May 2002 Aaron M. McLean <amclean@us.ibm.com>
+	    // Fix to allow for AIFF files (which start with FFA).  It turns out
+	    // that the aiff class was also handling aiff-c files.  It was
+	    // better to fix the original code than to break support for those files.
+	    //
+	    // Note that TARs also check for the first two bytes being 0x1f
+	    // and 0x08 in their matcher.  Since the first four are already 0,
+	    // we don't need to do anything else for that class.
+	    //
+	    // This code can be used once the bug in the TarArchiveInputStream is
+	    // fixed (see https://issues.apache.org/jira/browse/COMPRESS-175)
+	    // The bug is that the reset() does not discard enough bytes to
+	    // prevent other methods from incorrectly using the bytes.
+            } else if (signatureLength >= 512) {
+                try {
+                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature));
+                    // COMPRESS-191 - verify the header checksum
+                    tais.getNextEntry();
+                        return new TarArchiveInputStream(in);
+                } catch (Exception e) { // NOPMD
+                    // can generate IllegalArgumentException as well
+                    // as IOException
+                    // autodetection, simply not a TAR
+                    // ignored
+                }
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
             signatureLength = in.read(tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
             // COMPRESS-117 - improve auto-recognition
             if (signatureLength >= 512) {
                 try {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                     // COMPRESS-191 - verify the header checksum
                     tais.getNextEntry();
                         return new TarArchiveInputStream(in);
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
                     // as IOException
                     // autodetection, simply not a TAR
                     // ignored
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
