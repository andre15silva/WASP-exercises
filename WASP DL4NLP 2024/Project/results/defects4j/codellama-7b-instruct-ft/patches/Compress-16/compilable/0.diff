diff --git a/tmp/a61ffe6a-5a51-4f36-ae10-49e156178334_buggy.java b/tmp/f9545950-7cdb-4dd5-b17f-31a2d7f7f902_fixed.java
index 2ce28b5..f921b4b 100644
--- a/tmp/a61ffe6a-5a51-4f36-ae10-49e156178334_buggy.java
+++ b/tmp/f9545950-7cdb-4dd5-b17f-31a2d7f7f902_fixed.java
@@ -1,72 +1,84 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      * 
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
+        // buffer size may be too big for some formats, but that's not the case here, except
+        // MP3/AIF
+        // - https://issues.apache.org/jira/browse/COMPRESS-191
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
+            // MP3/AIFF files are not supported, their signature is MP3
+            // signature contains "ID3"
+            if (ZipArchiveInputStream.matches(signature, signatureLength) || 
+                // MP3/AIFF file signature contains "AIFF"
+                signature[0] == 'A' && signature[1] == 'I' && signature[2] == 'F' && signature[3] == 'F' ||
+                // MP3/AIFF file signature contains "ID3"
+                signature[0] == 'I' && signature[1] == 'D' && signature[2] == '3') {
                 in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+                in.reset();
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+                in.reset();
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+                in.reset();
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
             signatureLength = in.read(tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
             // COMPRESS-117 - improve auto-recognition
             if (signatureLength >= 512) {
                 try {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                     // COMPRESS-191 - verify the header checksum
                     tais.getNextEntry();
                         return new TarArchiveInputStream(in);
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
                     // as IOException
                     // autodetection, simply not a TAR
                     // ignored
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
