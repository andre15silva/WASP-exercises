diff --git a/tmp/bbd26e91-296e-4d97-a9ef-515d58c9bc7e_buggy.java b/tmp/d66f597e-9576-4adf-80ff-65b3874de1e0_fixed.java
index 5481b94..c80b3f0 100644
--- a/tmp/bbd26e91-296e-4d97-a9ef-515d58c9bc7e_buggy.java
+++ b/tmp/d66f597e-9576-4adf-80ff-65b3874de1e0_fixed.java
@@ -1,49 +1,61 @@
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                             .getArgumentMatcherStorage(), invocation);
             invocationContainerImpl.setMethodForStubbing(invocationMatcher);
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
 
         mockingProgress.validateState();
 
         //if verificationMode is not null then someone is doing verify()        
+        try {
             if (verificationMode != null) {
                 //We need to check if verification was started on the correct mock 
                 // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
                 if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
                     VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
                     verificationMode.verify(data);
                     return null;
                     // this means there is an invocation on a different mock. Re-adding verification mode 
                     // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
                 }
             }
+        } finally {
+            // in this case it means that no-one invoked verify(). 
+            // It probably happened that there is another line of code invocating a method so that we're actually in:
+            // mock.simpleMethod()
+            // when().otherMethod()
+            // so that last 'when()' is being invoked
+            // we need to mark invocation on 'otherMethod()' as verified.
+            if (invocationMatcher != null) {
+                new VerificationDataImpl(invocationContainerImpl, invocationMatcher).verify();
+            }
+        }
         
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }
