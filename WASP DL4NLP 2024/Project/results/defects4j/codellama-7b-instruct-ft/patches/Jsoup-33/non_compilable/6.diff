diff --git a/tmp/c06a9d72-18cc-4495-8b19-7b2e75c2e586_buggy.java b/tmp/25c4f4c2-51f9-4272-a514-f206d6ace47b_fixed.java
index dc93be3..a0974db 100644
--- a/tmp/c06a9d72-18cc-4495-8b19-7b2e75c2e586_buggy.java
+++ b/tmp/25c4f4c2-51f9-4272-a514-f206d6ace47b_fixed.java
@@ -1,14 +1,21 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        // else, allow only self closing tags parsed out of spec, but still force an end tag out. Unknown tags should not be self closing.
         if (startTag.isSelfClosing()) {
             Element el = insertEmpty(startTag);
+            Token.EndTag endTag = new Token.EndTag(el.tagName());
+            if (!el.parsesAsBlock() && !el.tagName().equals("hr") && !startTag.isKnownTag()) {
+                // special case: if you'd have to guess, stay in the unknown state (so <plaintext> is not closed)
+                tokeniser.transfer(endTag); // so that tokens go into the body
+            } else {
+                tokeniser.emit(endTag);
+            }
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
         
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
