diff --git a/tmp/ada9c2d6-480c-429d-a234-56330e058b17_buggy.java b/tmp/3597caaf-3d18-4bf5-8da6-37b25abbe7c5_fixed.java
index 70ac98c..e2dd03a 100644
--- a/tmp/ada9c2d6-480c-429d-a234-56330e058b17_buggy.java
+++ b/tmp/3597caaf-3d18-4bf5-8da6-37b25abbe7c5_fixed.java
@@ -1,95 +1,128 @@
     /**
      * Create a fraction given the double value and either the maximum error
      * allowed or the maximum number of denominator digits.
      * <p>
      *
      * NOTE: This constructor is called with EITHER
      *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
      *     (that way the maxDenominator has no effect).
      * OR
      *   - a valid maxDenominator value and the epsilon value set to zero
      *     (that way epsilon only has effect if there is an exact match before
      *     the maxDenominator value is reached).
      * </p><p>
      *
      * It has been done this way so that the same code can be (re)used for both
      * scenarios. However this could be confusing to users if it were part of
      * the public API and this constructor should therefore remain PRIVATE.
      * </p>
      *
      * See JIRA issue ticket MATH-181 for more details:
      *
      *     https://issues.apache.org/jira/browse/MATH-181
      *
      * @param value the double value to convert to a fraction.
      * @param epsilon maximum error allowed.  The resulting fraction is within
      *        {@code epsilon} of {@code value}, in absolute terms.
      * @param maxDenominator maximum denominator value allowed.
      * @param maxIterations maximum number of convergents
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
         long overflow = Integer.MAX_VALUE;
+        double s;
+        long a0;
+        int k;
+        int n = 0;
+        boolean stop = false;
         double r0 = value;
-        long a0 = (long)FastMath.floor(r0);
+        if (r0 >= 0) {
+            s = r0 + 1.0;
+            a0 = (long)FastMath.floor(s);
+            k = (int)(s - a0);
+        } else {
+            r0 = -r0 - 1.0;
+            s = r0 + 1.0;
+            a0 = (long)FastMath.ceil(s);
+            k = (int)(s - a0);
+        }
         if (a0 > overflow) {
             throw new FractionConversionException(value, a0, 1l);
         }
 
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
             this.numerator = (int) a0;
             this.denominator = 1;
             return;
         }
 
-        long p0 = 1;
-        long q0 = 0;
+        long p0 = FastMath.pow(10, -k);
+        long q0 = 1;
         long p1 = a0;
         long q1 = 1;
 
         long p2 = 0;
         long q2 = 1;
 
-        int n = 0;
-        boolean stop = false;
-        do {
-            ++n;
         double r1 = 1.0 / (r0 - a0);
         long a1 = (long)FastMath.floor(r1);
         p2 = (a1 * p1) + p0;
         q2 = (a1 * q1) + q0;
         if ((p2 > overflow) || (q2 > overflow)) {
             throw new FractionConversionException(value, p2, q2);
         }
 
         double convergent = (double)p2 / (double)q2;
         if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
             p0 = p1;
             p1 = p2;
             q0 = q1;
             q1 = q2;
             a0 = a1;
             r0 = r1;
         } else {
             stop = true;
         }
+
+        do {
+            ++n;
+            r1 = 1.0 / (r0 - a0);
+            a1 = (long)FastMath.floor(r1);
+            p2 = (a1 * p1) + p0;
+            q2 = (a1 * q1) + q0;
+            if ((p2 > overflow) || (q2 > overflow)) {
+                throw new FractionConversionException(value, p2, q2);
+            }
+
+            double beta = (double)p2 / (double)q2;
+            if (n < maxIterations && FastMath.abs(beta - convergent) > epsilon && q2 < maxDenominator) {
+                p0 = p1;
+                p1 = p2;
+                q0 = q1;
+                q1 = q2;
+                a0 = a1;
+                r0 = r1;
+                convergent = beta;
+            } else {
+                stop = true;
+            }
         } while (!stop);
 
         if (n >= maxIterations) {
             throw new FractionConversionException(value, maxIterations);
         }
 
         if (q2 < maxDenominator) {
             this.numerator = (int) p2;
             this.denominator = (int) q2;
         } else {
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
 
     }
