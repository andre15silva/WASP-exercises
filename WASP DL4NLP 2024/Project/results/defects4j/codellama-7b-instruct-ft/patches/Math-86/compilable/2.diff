diff --git a/tmp/b4e7fd80-98f6-4cb1-ba63-7a7e78aedacc_buggy.java b/tmp/4c44ec3f-2c64-4fb7-b1e4-7e784a7aeb1a_fixed.java
index 0eef537..e23b34e 100644
--- a/tmp/b4e7fd80-98f6-4cb1-ba63-7a7e78aedacc_buggy.java
+++ b/tmp/4c44ec3f-2c64-4fb7-b1e4-7e784a7aeb1a_fixed.java
@@ -1,74 +1,71 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                               matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
         // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
 
             final double[] lI = lTData[i];
 
             if (lTData[i][i] < absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
             // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
                 lJ[i] = 0;
            }
+            do {
+                double sum = lTData[i][i];
+                for (int q = i+1; q < order; q++) {
+                    sum += lTData[q][q] * lTData[q][i];
                 }
-
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
-
-            final double[] ltI = lTData[i];
-
-            // check diagonal element
-
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
-
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                if (sum <= 0.0) {
+                    throw new NotPositiveDefiniteMatrixException();
                 }
+                lTData[i][i] = Math.sqrt(sum);
+                final double inverse = 1.0 / lTData[i][i];
+                for (int q = i+1; q < order; q++) {
+                    lTData[q][i] = lTData[q][i] * inverse;
+                    for (int p = q; p < order; p++) {
+                        lTData[q][p] -= lTData[q][i] * lTData[i][p];
                     }
-
+                }
+            } while(--i >= 0);
         }
 
     }
