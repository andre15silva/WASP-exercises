diff --git a/tmp/c50571ad-6d9d-4de2-b1a7-2a3ccc5593ce_buggy.java b/tmp/b69f3d7f-dd6f-4e9d-9307-afe307e01224_fixed.java
index 88647d1..9c24175 100644
--- a/tmp/c50571ad-6d9d-4de2-b1a7-2a3ccc5593ce_buggy.java
+++ b/tmp/b69f3d7f-dd6f-4e9d-9307-afe307e01224_fixed.java
@@ -1,44 +1,47 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
+     * @param min the lower bound for the interval, inclusive (the first point to be checked)
+     * @param max the upper bound for the interval (the last point to be checked)
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
         double yMax = f.value(max);
         
         // Verify bracketing
         double sign = yMin * yMax;
         if (sign >= 0) {
             // check if either value is close to a zero
                 // neither value is close to zero and min and max do not bracket root.
                 throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
+        } else if (min == max) {
+            // endpoint is root 
+            ret = min;
         } else {
             // solve using only the first endpoint as initial guess
             ret = solve(min, yMin, max, yMax, min, yMin);
             // either min or max is a root
         }
 
         return ret;
     }
