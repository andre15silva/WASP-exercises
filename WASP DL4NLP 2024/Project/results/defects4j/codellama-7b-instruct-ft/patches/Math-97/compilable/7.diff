diff --git a/tmp/130fb57b-db1d-463c-9b1b-4b27c293387b_buggy.java b/tmp/2df89e8c-23f3-4fe6-8b11-e84e571492e4_fixed.java
index 88647d1..4f8a7d6 100644
--- a/tmp/130fb57b-db1d-463c-9b1b-4b27c293387b_buggy.java
+++ b/tmp/2df89e8c-23f3-4fe6-8b11-e84e571492e4_fixed.java
@@ -1,44 +1,67 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
         verifyInterval(min, max);
         
         double ret = Double.NaN;
         
         double yMin = f.value(min);
         double yMax = f.value(max);
         
         // Verify bracketing
         double sign = yMin * yMax;
         if (sign >= 0) {
             // check if either value is close to a zero
                 // neither value is close to zero and min and max do not bracket root.
                 throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs.  " +
                         "Endpoints: [" + min + "," + max + "]" + 
                         "Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            // solve
+            double root;
+            if (yMin * yMax > 0) {
+                // both are positive or negative
+                // one of min/max must be a root
+                root = min;
+                if (0 == yMin) {
+                    if (0 != f.value(root)) {
+                        // max is a root
+                        root = max;
+                    }
+                } else if (0 != yMax) {
+                    // min is a root
+                    root = min;
+                }
+            } else { // 0 == yMin * yMax
+                if (0 != f.value(min)) {
+                    // only min is a root
+                    root = min;
+                } else {
+                    // only max is a root
+                    root = max;
+                }
+            }
+            // now solve
+            ret = solve(root, yMin, max, yMax, min, yMin);
         }
 
         return ret;
     }
