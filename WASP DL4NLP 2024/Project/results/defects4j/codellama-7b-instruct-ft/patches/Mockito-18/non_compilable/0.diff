diff --git a/tmp/6b52cd34-1c6e-42ee-b550-bde42ff2fcdf_buggy.java b/tmp/86348f0c-8cdd-4678-9683-f09e13d72d95_fixed.java
index 710fcc0..0992f62 100644
--- a/tmp/6b52cd34-1c6e-42ee-b550-bde42ff2fcdf_buggy.java
+++ b/tmp/86348f0c-8cdd-4678-9683-f09e13d72d95_fixed.java
@@ -1,37 +1,43 @@
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
             //new instances are used instead of Collections.emptyList(), etc.
             //to avoid UnsupportedOperationException if code under test modifies returned collection
+        } else if (type == Iterable.class) {
+            return values.returnValueFor(List.class);
         } else if (type == Collection.class) {
-            return new LinkedList<Object>();
+            return values.returnValueFor(List.class);
         } else if (type == Set.class) {
-            return new HashSet<Object>();
+            return values.returnValueFor(List.class);
         } else if (type == HashSet.class) {
-            return new HashSet<Object>();
+            return values.returnValueFor(List.class);
         } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
+            return values.returnValueFor(List.class);
         } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
+            return values.returnValueFor(List.class);
         } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
+            return values.returnValueFor(List.class);
         } else if (type == List.class) {
-            return new LinkedList<Object>();
+            return values.returnValueFor(List.class);
         } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
+            return values.returnValueFor(List.class);
         } else if (type == ArrayList.class) {
-            return new ArrayList<Object>();
+            return values.returnValueFor(List.class);
         } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
+            return values.returnValueFor(HashMap.class);
         } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
+            return values.returnValueFor(HashMap.class);
         } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
+            return values.returnValueFor(HashMap.class);
         } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
+            return values.returnValueFor(HashMap.class);
         } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
+            return values.returnValueFor(HashMap.class);
+        } else if (type == Queue.class) {
+            return values.returnValueFor(Queue.class);
+        } else if (type == LinkedList.class) {
+            return values.returnValueFor(Queue.class);
         }
         //Let's not care about the rest of collections.
         return null;
     }
