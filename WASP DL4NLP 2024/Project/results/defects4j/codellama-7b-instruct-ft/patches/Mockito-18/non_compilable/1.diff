diff --git a/tmp/d3873905-0ca2-4b3e-b0d8-5e2a03dd6cbe_buggy.java b/tmp/0f570a0d-9764-49f7-a570-636a63503240_fixed.java
index 710fcc0..80c2c60 100644
--- a/tmp/d3873905-0ca2-4b3e-b0d8-5e2a03dd6cbe_buggy.java
+++ b/tmp/0f570a0d-9764-49f7-a570-636a63503240_fixed.java
@@ -1,37 +1,54 @@
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
             //new instances are used instead of Collections.emptyList(), etc.
             //to avoid UnsupportedOperationException if code under test modifies returned collection
         } else if (type == Collection.class) {
             return new LinkedList<Object>();
         } else if (type == Set.class) {
             return new HashSet<Object>();
         } else if (type == HashSet.class) {
             return new HashSet<Object>();
         } else if (type == SortedSet.class) {
             return new TreeSet<Object>();
         } else if (type == TreeSet.class) {
             return new TreeSet<Object>();
         } else if (type == LinkedHashSet.class) {
             return new LinkedHashSet<Object>();
         } else if (type == List.class) {
             return new LinkedList<Object>();
         } else if (type == LinkedList.class) {
             return new LinkedList<Object>();
         } else if (type == ArrayList.class) {
             return new ArrayList<Object>();
         } else if (type == Map.class) {
             return new HashMap<Object, Object>();
         } else if (type == HashMap.class) {
             return new HashMap<Object, Object>();
         } else if (type == SortedMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == TreeMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == LinkedHashMap.class) {
             return new LinkedHashMap<Object, Object>();
+        } else if (type == Iterable.class) {
+            return new Iterable<Object>(){
+                        @Override
+                        public Iterator<Object> iterator() {
+                            return new Iterator<Object>() {
+                                @Override
+                                public boolean hasNext() {
+                                    return false;
+                                }
+
+                                @Override
+                                public Object next() {
+                                    throw new NoSuchElementException();
+                                }
+                            };
+                        }
+                };
         }
         //Let's not care about the rest of collections.
         return null;
     }
