diff --git a/tmp/eea0f092-6fb0-4f17-84ea-5b8501580350_buggy.java b/tmp/86e1283e-e2e8-487a-84ee-93bb122fa2ca_fixed.java
index e0ecec8..dc59186 100644
--- a/tmp/eea0f092-6fb0-4f17-84ea-5b8501580350_buggy.java
+++ b/tmp/86e1283e-e2e8-487a-84ee-93bb122fa2ca_fixed.java
@@ -1,35 +1,45 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
       // If there are no parameters left in the list, then the while loop
       // above implies that this must be a var_args function.
         parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
-    int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+    if (functionType.isVarArgs()) {
+      if (arguments.hasNext() && parameters.hasNext()) {
+        parameter = parameters.next();
+        argument = arguments.next();
+        ordinallastal += " (last one repeated)";
+
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), getJSType(parameter),
+            call, ordinallastal);
+      }
+    } else if (functionType.getParameterCount() != call.getChildCount()
+        - 1) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+              String.valueOf(call.getChildCount() - 1),
+              String.valueOf(functionType.getMinArguments()),
+              functionType.getMaxArguments() != Integer.MAX_VALUE ?
+              " and no more than " +
+              functionType.getMaxArguments() + " argument(s)" : "");
     }
   }
