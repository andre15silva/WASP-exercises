diff --git a/tmp/187122ab-1181-4a38-b0d6-e7465c34dfb0_buggy.java b/tmp/76501d9a-7322-46ff-8adc-6cb0a11ebb48_fixed.java
index 81a6e8b..1ee378e 100644
--- a/tmp/187122ab-1181-4a38-b0d6-e7465c34dfb0_buggy.java
+++ b/tmp/76501d9a-7322-46ff-8adc-6cb0a11ebb48_fixed.java
@@ -1,19 +1,56 @@
     /**
      * Tells if the token looks like a short option.
      * 
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
         if (!token.startsWith("-") || token.length() == 1)
         {
             return false;
         }
 
         // remove leading "-" and "=value"
         int pos = token.indexOf("=");
         String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+        if (options.hasShortOption(optName))
+        {
+            return true;
+        }
+        // check for several concatenated short options (TODO: a more sophisticated way would be to look for a character
+        // that cannot be a part of Java identifier (or any other option name)
+        else
+        {
+            String newArg = token.substring(1);
+            // check "-t1"
+            if (newArg.length() == 2 && Character.isJavaIdentifierPart(newArg.charAt(1)))
+            {
+                options.registerShortOption(new String[] { "-" + newArg.substring(0, 1), newArg.substring(1, 2) });
+                return true;
+            }
+            // check "-ab" or "-a..."
+            else if (newArg.length() > 2 && Character.isJavaIdentifierPart(newArg.charAt(1)))
+            {
+                options.registerShortOption(new String[] { "-" + newArg.substring(0, 2) });
+                if (Character.isJavaIdentifierPart(newArg.charAt(2)) && !"=".equals(newArg.substring(1, 3)))
+                {
+                    options.registerShortOption(new String[] { "-" + newArg.substring(2), newArg.substring(2, newArg.length()) });
+                }
+                else
+                {
+                    // last option
+                    options.registerShortOption(new String[] { "-" + newArg.substring(1, newArg.length()) });
+                }
+                return true;
+            }
+            // -t last option
+            else if (!Character.isJavaIdentifierPart(newArg.charAt(0)))
+            {
+                options.registerShortOption(new String[] { "-" + newArg, newArg });
+                return true;
+            }
+        }
+        }
+        return false;
     }
