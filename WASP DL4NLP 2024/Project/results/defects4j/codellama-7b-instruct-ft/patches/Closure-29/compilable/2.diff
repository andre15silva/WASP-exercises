diff --git a/tmp/faabbda0-ce19-4262-bbbe-3b261eba0aa3_buggy.java b/tmp/d181eb37-3aa3-40d6-9b81-c4e7d82128b8_fixed.java
index be9c8a3..515ebe8 100644
--- a/tmp/faabbda0-ce19-4262-bbbe-3b261eba0aa3_buggy.java
+++ b/tmp/d181eb37-3aa3-40d6-9b81-c4e7d82128b8_fixed.java
@@ -1,94 +1,129 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
 
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
           // Object.prototype can have arbitrary properties on it.
           //
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
         //
         // TODO: Only exclude unorderable self-referential
         // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
 
           Node childVal = child.getFirstChild();
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
             while (!NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
 
 
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
         ret = true;
       }
+
+      if (refs.size() > 1) {
+        // This is a general issue with this simplification of object literal
+        // assignments. We don't do the following when only one reference to
+        // object literal is present.
+        //
+        // The value of the RHS of object literal is rewritten as function
+        // whose variable is 'this'. So when we have several references
+        // defined such as:
+        //   {@code var a, b, c = x.a.b;
+        //    a.foo(); b.foo(); c.foo(); }
+        // It will get changed to:
+        //   var JSCompiler_object_inline_a = new Object();
+        //   var JSCompiler_object_inline_b = new Object();
+        //   JSCompiler_object_inline_a.foo = function() { ... }
+        //   JSCompiler_object_inline_b.foo = function() { ... }
+        //   JSCompiler_object_inline_c = JSCompiler_object_inline_a.b;
+        //   JSCompiler_object_inline_a = void 0; JSCompiler_object_inline_b = void 0;
+        //   JSCompiler_object_inline_c.foo();
+        //   JSCompiler_object_inline_a = void 0; JSCompiler_object_inline_b = void 0;
+        //   a.foo();
+        //   JSCompiler_object_inline_a.foo();
+        //   JSCompiler_object_inline_b.foo();
+        //
+        //   OR we'll optimize it so that:
+        //   var JSCompiler_object_inline_a = new Object();
+        //   var JSCompiler_object_inline_c = x.a.b;
+        //   JSCompiler_object_inline_b = x.a.b;
+        //   JSCompiler_object_inline_a = x.a.b;
+        //   JSCompiler_object_inline_a.foo = x.a.b.foo;
+        //   JSCompiler_object_inline_b.foo = x.a.b.foo;
+        //   c.foo(); b.foo(); a.foo();
+        //
+        return false;
+      }
       return ret;
     }
