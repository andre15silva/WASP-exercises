diff --git a/tmp/50a4b1a2-82c9-427b-be0d-4829933c8c84_buggy.java b/tmp/36f0df68-12eb-4c62-bf42-f9119b57c85a_fixed.java
index d27c40c..c359533 100644
--- a/tmp/50a4b1a2-82c9-427b-be0d-4829933c8c84_buggy.java
+++ b/tmp/36f0df68-12eb-4c62-bf42-f9119b57c85a_fixed.java
@@ -1,49 +1,52 @@
     /** Compute two arguments arc tangent of a derivative structure.
      * @param y array holding the first operand
      * @param yOffset offset of the first operand in its array
      * @param x array holding the second operand
      * @param xOffset offset of the second operand in its array
      * @param result array where result must be stored (for
      * two arguments arc tangent the result array <em>cannot</em>
      * be the input array)
      * @param resultOffset offset of the result in its array
      */
     public void atan2(final double[] y, final int yOffset,
                       final double[] x, final int xOffset,
                       final double[] result, final int resultOffset) {
 
         // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
         double[] tmp2 = new double[getSize()];
         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
+        // atan2(p, q) = +/-pi if q=+/-0 and p=+/-0, 0 if q=0 and p=0, 1 if p/q>0
+
+        final double eps = FastMath.ulp(tmp2[0]);
         if (x[xOffset] >= 0) {
 
             // compute atan2(y, x) = 2 atan(y / (r + x))
             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+            final double m = tmp1[0] >= 0 ? 2 * (1 + tmp1[0]) : 2 * (1 - tmp1[0]);
+            result[resultOffset] = m * tmp2[0];          // 2 atan(y / (r + x))
+            for (int i = 1; i < tmp2.length; ++i) {
+                result[resultOffset + i] = m * tmp2[i];  // 2 * atan(y / (r + x))
             }
 
         } else {
 
             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+            final double c = tmp1[0] <= -1 ? tmp2[0] <= -ep ? FastMath.PI : -FastMath.PI : 0;
+            result[resultOffset] = c + 2 * tmp2[0];       // +/- pi - 2 atan(y / (r - x))
             for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+                result[resultOffset + i] = c + 2 * tmp2[i]; // +/- pi - 2 * atan(y / (r - x))
             }
 
         }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
     }
