diff --git a/tmp/3f0f3f63-7b92-4064-baae-1c319d4adcfb_buggy.java b/tmp/3c9a2bf8-10c6-449e-a690-e5ae1094b1a0_fixed.java
index b6b11b6..2106b63 100644
--- a/tmp/3f0f3f63-7b92-4064-baae-1c319d4adcfb_buggy.java
+++ b/tmp/3c9a2bf8-10c6-449e-a690-e5ae1094b1a0_fixed.java
@@ -1,38 +1,51 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
         if (escapingOn && c[start] == QUOTE) {
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
+        if (escapingOn) {
             int lastHold = start;
             for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
+                if (pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold)
+                            .append(QUOTE);
                     pos.setIndex(i + ESCAPED_QUOTE.length());
                     lastHold = pos.getIndex();
                     continue;
                 }
                 switch (c[pos.getIndex()]) {
                 case QUOTE:
                     next(pos);
                     return appendTo == null ? null : appendTo.append(c, lastHold,
                             pos.getIndex() - lastHold);
                 default:
                     next(pos);
                 }
             }
+        } else {
+            for (int i = pos.getIndex(); i < pattern.length(); i++) {
+                switch (c[pos.getIndex()]) {
+                case QUOTE:
+                    next(pos);
+                    return appendTo == null ? null : appendTo.append(c, start,
+                            pos.getIndex() - start);
+                default:
+                    next(pos);
+                }
+            }
+        }
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
