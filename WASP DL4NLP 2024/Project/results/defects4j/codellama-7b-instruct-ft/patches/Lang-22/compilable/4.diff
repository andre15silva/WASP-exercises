diff --git a/tmp/423c7a2b-c99e-4dfb-8d29-55c000afaf3a_buggy.java b/tmp/38244aa9-e65f-4da1-9f1b-1b1ddd7d5583_fixed.java
index e0a0552..e6e9507 100644
--- a/tmp/423c7a2b-c99e-4dfb-8d29-55c000afaf3a_buggy.java
+++ b/tmp/38244aa9-e65f-4da1-9f1b-1b1ddd7d5583_fixed.java
@@ -1,54 +1,66 @@
     /**
      * <p>Gets the greatest common divisor of the absolute value of
      * two numbers, using the "binary gcd" method which avoids
      * division and modulo operations.  See Knuth 4.5.2 algorithm B.
      * This algorithm is due to Josef Stein (1961).</p>
      *
      * @param u  a non-zero number
      * @param v  a non-zero number
      * @return the greatest common divisor, never zero
      */
     private static int greatestCommonDivisor(int u, int v) {
         // From Commons Math:
         //if either operand is abs 1, return 1:
         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
             return 1;
         }
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
         // (i.e. we can't necessarily negate a negative number without
         // overflow)
         if (u>0) { u=-u; } // make u negative
         if (v>0) { v=-v; } // make v negative
+        while (u==Integer.MAX_VALUE || v==Integer.MAX_VALUE) {
+            // Handle extreme arguments before trying to divide them by power of 2 to reduce them.
+            // As a result if the operands are Integer.MAX_VALUE they will be reduced to Integer.MIN_VALUE and cause overflow
+            // if this does not happen, reduce them by dividing by 2
+            BigInteger n = BigInteger.valueOf(u>>1);
+            BigInteger vv = BigInteger.valueOf(v>>1);
+            Fraction f = Fraction.getReducedFraction(n.intValue(), vv.intValue());
+            u = f.getNumerator();
+            v = f.getDenominator();
+        }
+        if (u>=0) { u=-u; } // make u negative
+        if (v>=0) { v=-v; } // make v negative
         // B1. [Find power of 2]
         int k=0;
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
         if (k==31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
         // t negative: u was odd, v may be even (t replaces v)
         // t positive: u was even, v is odd (t replaces u)
         do {
             /* assert u<0 && v<0; */
             // B4/B3: cast out twos from t.
             while ((t&1)==0) { // while t is even..
                 t/=2; // cast out twos
             }
             // B5 [reset max(u,v)]
             if (t>0) {
                 u = -t;
             } else {
                 v = t;
             }
             // B6/B3. at this point both u and v should be odd.
             t = (v - u)/2;
             // |u| larger: t positive (replace u)
             // |v| larger: t negative (replace v)
         } while (t!=0);
         return -u*(1<<k); // gcd is u*2^k
     }
