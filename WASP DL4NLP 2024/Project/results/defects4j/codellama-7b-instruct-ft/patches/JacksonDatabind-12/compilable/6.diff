diff --git a/tmp/7a8f78b6-ed95-4302-b1eb-bc96a5804a94_buggy.java b/tmp/d08845c1-4b51-48f5-82e3-1b5739dbae97_fixed.java
index 845704e..0ecda36 100644
--- a/tmp/7a8f78b6-ed95-4302-b1eb-bc96a5804a94_buggy.java
+++ b/tmp/d08845c1-4b51-48f5-82e3-1b5739dbae97_fixed.java
@@ -1,21 +1,27 @@
     /**
      * Turns out that these are expensive enough to create so that caching
      * does make sense.
      *<p>
      * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
      * a value type deserializer; this caused an issue with 2.4.4 of
      * JAXB Annotations (failing a test).
      * It is also possible that some other settings could make deserializers
      * un-cacheable; but on the other hand, caching can make a big positive
      * difference with performance... so it's a hard choice.
      * 
      * @since 2.4.4
      */
     @Override
     public boolean isCachable() {
         /* As per [databind#735], existence of value or key deserializer (only passed
          * if annotated to use non-standard one) should also prevent caching.
+         *
+         * AND: if there is non-standard value deserializer defined, we don't
+         * optimize for caching, because that would require overriding
+         * `hasDeserializer` in sub-classes that use custom type info and
+         * hence "value type" deserializer to actually return the overriding
+         * deserializer.
          */
         return (_valueTypeDeserializer == null)
                 && (_ignorableProperties == null);
     }
