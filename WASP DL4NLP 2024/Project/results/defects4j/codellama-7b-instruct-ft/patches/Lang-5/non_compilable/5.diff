diff --git a/tmp/7e4f0a51-87d8-41bd-8a7d-448565f88647_buggy.java b/tmp/adeeb0d0-6983-4489-b688-0127693046bc_fixed.java
index f843d29..2c0f6fa 100644
--- a/tmp/7e4f0a51-87d8-41bd-8a7d-448565f88647_buggy.java
+++ b/tmp/adeeb0d0-6983-4489-b688-0127693046bc_fixed.java
@@ -1,68 +1,136 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
+        if (str.charAt(0) == '_') {
+            if (len < 3) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            final char ch0 = str.charAt(0);
+            final char ch1 = str.charAt(1);
+            final char ch2 = str.charAt(2);
+            if (Character.isLetter(ch1) && Character.isLetter(ch2)) {
+                // len has been validated above
+                final String language = Character.toLowerCase(ch0) + str.substring(1);
+                if (len == 3) {
+                    // only letters and underscore
+                    return new Locale(language);
+                }
+                if (len < 6) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                if (len == 6) {
+                    final char ch3 = str.charAt(3);
+                    if (ch3 == '_') {
+                        // "_xx_xx"
+                        final char ch4 = str.charAt(4);
+                        if (Character.isLetter(ch4)) {
+                            return new Locale(language, Character.toUpperCase(ch3), Character.toLowerCase(ch4) + str.substring(5));
+                        }
+                        return new Locale(language, Character.toUpperCase(ch3), "");
+                    }
+                }
+                if (len == 7) {
+                    // only if starts with underscore and is at least 5 chars
+                    final char ch3 = str.charAt(3);
+                    final char ch4 = str.charAt(4);
+                    final char ch5 = str.charAt(5);
+                    if (Character.isLetter(ch3) && Character.isLetter(ch4) && Character.isLetter(ch5)) {
+                        return new Locale(language, Character.toUpperCase(ch3) + Character.toUpperCase(ch4) + Character.toLowerCase(ch5) + str.substring(6));
+                    }
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // len has been validated above
+            if (Character.isDigit(ch1)) {
+                final String language = Character.toLowerCase(ch0) + str.substring(0, 5);
+                final char ch3 = str.charAt(3);
+                // should have underscore after the country and be at least 5 chars
+                final char ch4 = str.charAt(4);
+                if (ch3 == '_') {
+                    // "_xxx"
+                    if (Character.isLetter(ch4)) {
+                        return new Locale(language, Character.toUpperCase(ch3), Character.toLowerCase(ch4) + str.substring(5));
+                    }
+                    return new Locale(language, Character.toUpperCase(ch3), "");
+                }
+                // len has been validated above
+                if (len == 7) {
+                    final char ch3 = str.charAt(3);
+                    final char ch4 = str.charAt(4);
+                    final char ch5 = str.charAt(5);
+                    if (Character.isLetter(ch3) && Character.isLetter(ch4) && Character.isLetter(ch5)) {
+                        return new Locale(language, Character.toUpperCase(ch3) + Character.toUpperCase(ch4) + Character.toLowerCase(ch5) + str.substring(6));
+                    }
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        final int len = str.length();
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 2) {
             return new Locale(str);
         }
         if (len < 5) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(2) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch3 = str.charAt(3);
         if (ch3 == '_') {
             return new Locale(str.substring(0, 2), "", str.substring(4));
         }
         final char ch4 = str.charAt(4);
         if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 5) {
             return new Locale(str.substring(0, 2), str.substring(3, 5));
         }
         if (len < 7) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
