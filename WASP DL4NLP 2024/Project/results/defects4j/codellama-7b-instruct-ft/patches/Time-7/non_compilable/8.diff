diff --git a/tmp/718bfc37-9b6e-4018-9d4a-814ac4159140_buggy.java b/tmp/a964ecbb-9b67-413c-ad70-ebc3715cfd10_fixed.java
index 0bbaab0..a805048 100644
--- a/tmp/718bfc37-9b6e-4018-9d4a-814ac4159140_buggy.java
+++ b/tmp/a964ecbb-9b67-413c-ad70-ebc3715cfd10_fixed.java
@@ -1,62 +1,175 @@
     /**
      * Parses a datetime from the given text, at the given position, saving the
      * result into the fields of the given ReadWritableInstant. If the parse
      * succeeds, the return value is the new text position. Note that the parse
      * may succeed without fully reading the text and in this case those fields
      * that were read will be set.
      * <p>
      * Only those fields present in the string will be changed in the specified
      * instant. All other fields will remain unaltered. Thus if the string only
      * contains a year and a month, then the day and time will be retained from
      * the input instant. If this is not the behaviour you want, then reset the
      * fields before calling this method, or use {@link #parseDateTime(String)}
      * or {@link #parseMutableDateTime(String)}.
      * <p>
      * If it fails, the return value is negative, but the instant may still be
      * modified. To determine the position where the parse failed, apply the
      * one's complement operator (~) on the return value.
      * <p>
      * This parse method ignores the {@link #getDefaultYear() default year} and
      * parses using the year from the supplied instant based on the chronology
      * and time-zone of the supplied instant.
      * <p>
      * The parse will use the chronology of the instant.
      *
      * @param instant  an instant that will be modified, not null
      * @param text  the text to parse
      * @param position  position to start parsing from
      * @return new position, negative value means parse failed -
      *  apply complement operator (~) to get position of failure
      * @throws UnsupportedOperationException if parsing is not supported
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
         
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
+        if (iLenient) {
             chrono = selectChronology(chrono);
             int defaultYear = chrono.year().get(instantLocal);
-        
             DateTimeParserBucket bucket = new DateTimeParserBucket(
                 instantLocal, chrono, iLocale, iPivotYear, defaultYear);
             int newPos = parser.parseInto(bucket, text, position);
             instant.setMillis(bucket.computeMillis(false, text));
             if (iOffsetParsed && bucket.getOffsetInteger() != null) {
                 int parsedOffset = bucket.getOffsetInteger();
                 DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
                 chrono = chrono.withZone(parsedZone);
             } else if (bucket.getZone() != null) {
                 chrono = chrono.withZone(bucket.getZone());
             }
             instant.setChronology(chrono);
             if (iZone != null) {
                 instant.setZone(iZone);
             }
             return newPos;
+        } else {
+            // stricter mode. try for months first
+            DateTimeFormatter monthDayFormatter =
+                iLenient ? new DateTimeFormatterBuilder().appendMonthOfYear(iLocale)
+                    .appendDayOfMonth()
+                    .toFormatter(iLocale) : null;
+            try {
+                MutableDateTime md = new MutableDateTime(instant);
+                int pos = monthDayFormatter == null ? position :
+                    monthDayFormatter.parseInto(md, text, position);
+                if (pos >= 0) {
+                    instant.setMillis(md.getMillis());
+                    if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+                        int parsedOffset = bucket.getOffsetInteger();
+                        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
+                        chrono = chrono.withZone(parsedZone);
+                    } else if (bucket.getZone() != null) {
+                        chrono = chrono.withZone(bucket.getZone());
+                    }
+                    instant.setChronology(chrono);
+                    if (iZone != null) {
+                        instant.setZone(iZone);
+                    }
+                    return pos;
+                }
+            } catch (IllegalFieldValueException ex) {
+                // try for long month names
+                DateTimeFormatter formatter =
+                    new DateTimeFormatterBuilder().appendMonthOfYear(iLenient, iLocale)
+                        .appendDayOfMonth()
+                        .toFormatter(iLocale);
+                MutableDateTime md = new MutableDateTime(instant);
+                int pos = formatter.parseInto(md, text, position);
+                if (pos >= 0) {
+                    instant.setMillis(md.getMillis());
+                    if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+                        int parsedOffset = bucket.getOffsetInteger();
+                        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
+                        chrono = chrono.withZone(parsedZone);
+                    } else if (bucket.getZone() != null) {
+                        chrono = chrono.withZone(bucket.getZone());
+                    }
+                    instant.setChronology(chrono);
+                    if (iZone != null) {
+                        instant.setZone(iZone);
+                    }
+                    return pos;
+                }
+            } catch (IllegalFieldValueException ex) {
+                // try for short month names
+                DateTimeFormatter formatter =
+                    new DateTimeFormatterBuilder().appendMonthOfYear(true, iLocale)
+                        .appendDayOfMonth()
+                        .toFormatter(iLocale);
+                MutableDateTime md = new MutableDateTime(instant);
+                int pos = formatter.parseInto(md, text, position);
+                if (pos >= 0) {
+                    instant.setMillis(md.getMillis());
+                    if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+                        int parsedOffset = bucket.getOffsetInteger();
+                        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
+                        chrono = chrono.withZone(parsedZone);
+                    } else if (bucket.getZone() != null) {
+                        chrono = chrono.withZone(bucket.getZone());
+                    }
+                    instant.setChronology(chrono);
+                    if (iZone != null) {
+                        instant.setZone(iZone);
+                    }
+                    return pos;
+                }
+            } catch (IllegalFieldValueException ex) {
+                // no month day match. fallback to general case of long and short forms
+                DateTimeFormatter formatter =
+                    new DateTimeFormatterBuilder().appendMonthOfYear(true, iLocale)
+                        .appendDayOfMonth()
+                        .toFormatter(iLocale);
+                MutableDateTime md = new MutableDateTime(instant);
+                int pos = formatter.parseInto(md, text, position);
+                if (pos >= 0) {
+                    instant.setMillis(md.getMillis());
+                    if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+                        int parsedOffset = bucket.getOffsetInteger();
+                        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
+                        chrono = chrono.withZone(parsedZone);
+                    } else if (bucket.getZone() != null) {
+                        chrono = chrono.withZone(bucket.getZone());
+                    }
+                    instant.setChronology(chrono);
+                    if (iZone != null) {
+                        instant.setZone(iZone);
+                    }
+                    return pos;
+                }
+            }
+        }
+        // fallthrough to normal parser
+        DateTimeParserBucket bucket = new DateTimeParserBucket(
+            instantLocal, chrono, iLocale, iPivotYear);
+        int newPos = parser.parseInto(bucket, text, position);
+        instant.setMillis(bucket.computeMillis(false, text));
+        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
+            int parsedOffset = bucket.getOffsetInteger();
+            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
+            chrono = chrono.withZone(parsedZone);
+        } else if (bucket.getZone() != null) {
+            chrono = chrono.withZone(bucket.getZone());
+        }
+        instant.setChronology(chrono);
+        if (iZone != null) {
+            instant.setZone(iZone);
+        }
+        return newPos;
     }
