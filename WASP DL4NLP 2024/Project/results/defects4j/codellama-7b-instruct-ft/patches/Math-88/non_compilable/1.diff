diff --git a/tmp/162c871f-0806-4cbe-b3e0-8113ac17c7c5_buggy.java b/tmp/cb1b1e40-7ed1-44a6-8d25-a3fb1415e4b6_fixed.java
index 544303b..30a78f7 100644
--- a/tmp/162c871f-0806-4cbe-b3e0-8113ac17c7c5_buggy.java
+++ b/tmp/cb1b1e40-7ed1-44a6-8d25-a3fb1415e4b6_fixed.java
@@ -1,29 +1,53 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
                 // if multiple variables can take a given value 
                 // then we choose the first and set the rest equal to 0
                 coefficients[i] =
                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                     (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                          coefficients[i] = 0;
                     }
                 }
             }
         }
-        return new RealPointValuePair(coefficients, f.getValue(coefficients));
+        double[] objVals = f.getObjectiveFunctionValues(coefficients);
+        Arrays.fill(objVals, -Double.MAX_VALUE);
+        double[] infeasibilityCost = new double[constraints.length];
+        int[] costRowNums = new int[constraints.length]; // row number where cost var occurs
+        for (int i = 0; i < coefficients.length; i++) {
+            for (int j = 0; j < infeasibilityCost.length; j++) {
+                if (constraints.get(j).getRelationship().evaluate(coefficients[i], 0)) {
+                    double vv = getEntry(i, j + getNumConstraints() + constraints.get(0).getNumDecisionVariables());
+                    infeasibilityCost[j] += vv;
+                    costRowNums[j] = i;
+                }
+            }
+        }
+        Arrays.fill(coefficients, Double.POSITIVE_INFINITY);
+        for (int i = 0; i < infeasibilityCost.length; i++) {
+            int costRowNum = costRowNums[i];
+            if (costRowNum < coefficients.length) {
+                double vv = -Math2.divideMax(infeasibilityCost[i], getValue(costRowNum, getNumConstraints() + constraints.get(i).getNumDecisionVariables()), 0);
+                if (coefficients[costRowNum] > vv) {
+                    coefficients[costRowNum] = vv;
+                }
+            }
+        }
+        double cost = f.getObjectiveFunctionValues(coefficients)[0];
+        return new RealPointValuePair(coefficients, cost);
     }
