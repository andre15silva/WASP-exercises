diff --git a/tmp/c053cc9c-2b2b-4f97-ada6-f7881c1029f3_buggy.java b/tmp/667dde98-20be-4fe7-8c5b-54295a5e8eab_fixed.java
index 544303b..29d7ab7 100644
--- a/tmp/c053cc9c-2b2b-4f97-ada6-f7881c1029f3_buggy.java
+++ b/tmp/667dde98-20be-4fe7-8c5b-54295a5e8eab_fixed.java
@@ -1,29 +1,35 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
                 // if multiple variables can take a given value 
                 // then we choose the first and set the rest equal to 0
                 coefficients[i] =
                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                     (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                          coefficients[i] = 0;
                     }
                 }
             }
         }
+        // ensure all positive real values unless restricting to non negative
+        for (int i = 0; i < coefficients.length; i++) {
+            if (coefficients[i] < 0 && !this.restrictToNonNegative) {
+                coefficients[i] = 0;
+            }
+        }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
