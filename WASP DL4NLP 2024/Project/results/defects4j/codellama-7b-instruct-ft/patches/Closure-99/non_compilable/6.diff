diff --git a/tmp/4f23af54-40bd-4ecd-a059-0ee14c9868fb_buggy.java b/tmp/ae77253a-1107-4b79-b856-1df7edc7521f_fixed.java
index 86553f4..651cc2d 100644
--- a/tmp/4f23af54-40bd-4ecd-a059-0ee14c9868fb_buggy.java
+++ b/tmp/ae77253a-1107-4b79-b856-1df7edc7521f_fixed.java
@@ -1,57 +1,72 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
       
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
+            // If the left side is a property of a method (such as foo.prototype.bar)
+            // then the prototype property is assigned a namespace object,
+            // so we should traverse it to look for nested @this.type annotations.
+            Node rhsObj = rhs.getFirstChild();
+            if (rhsObj != null &&
+                rhsObj.isObjectLit()) {
+              // We should traverse this object, but only if it's a method.
+              Node r = lhs.getParent().getParent();
+              if (r != null && r.getJSDocInfo()) {
+                JSDocInfo jsDoc = r.getJSDocInfo();
+                if (jsDoc.isConstructor()) {
+                  report(JSC_USED_GLOBAL_THIS, lhs, rhsObj.getLineno(), rhsObj.getCharno(), rhsObj.getLength());
+                }
+              }
+            }
             return false;
           }
           if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
             return false;
           }
       }
     }
 
     return true;
   }
