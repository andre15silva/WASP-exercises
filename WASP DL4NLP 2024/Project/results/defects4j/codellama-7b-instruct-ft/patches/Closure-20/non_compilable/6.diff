diff --git a/tmp/54c3f9e8-10a5-415b-b705-d1333cc4a951_buggy.java b/tmp/445973c9-264b-4227-b5ae-6992f1a8e0d5_fixed.java
index d4e6d48..3dc1d6f 100644
--- a/tmp/54c3f9e8-10a5-415b-b705-d1333cc4a951_buggy.java
+++ b/tmp/445973c9-264b-4227-b5ae-6992f1a8e0d5_fixed.java
@@ -1,23 +1,25 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
+    if (n.getChildCount() == 2) {
       Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
+      Node value = n.getChildAtIndex(1);
+      if (callTarget != null &&
+          value != null && callTarget.isName() &&
+          value.isImmutableValue() &&
           callTarget.getString().equals("String")) {
         // Fold String(a) to '' + (a) on immutable literals,
         // which allows further optimizations
         //
         // We can't do this in the general case, because String(a) has
         // slightly different semantics than '' + (a). See
         // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
