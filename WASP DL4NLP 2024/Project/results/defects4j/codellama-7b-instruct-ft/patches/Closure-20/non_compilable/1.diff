diff --git a/tmp/f0532cc4-c5b2-4eb8-9e93-28494baa9796_buggy.java b/tmp/077f86bb-aa72-4cb8-b439-5771892bf7b2_fixed.java
index d4e6d48..347be45 100644
--- a/tmp/f0532cc4-c5b2-4eb8-9e93-28494baa9796_buggy.java
+++ b/tmp/077f86bb-aa72-4cb8-b439-5771892bf7b2_fixed.java
@@ -1,23 +1,22 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
+          callTarget.getString().equals("String") &&
+          n.getChildCount() == 2 && n.getChildAtIndex(1).isString()) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+      Node value = n.removeChild(1);
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
-    }
     return n;
   }
