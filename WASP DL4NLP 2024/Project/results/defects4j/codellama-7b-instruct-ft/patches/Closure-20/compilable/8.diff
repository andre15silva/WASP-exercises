diff --git a/tmp/365ff494-5a9a-4dd5-bc57-7b615807e25f_buggy.java b/tmp/dde9f5c3-319f-444d-83b2-1240c85df412_fixed.java
index d4e6d48..d0cb00f 100644
--- a/tmp/365ff494-5a9a-4dd5-bc57-7b615807e25f_buggy.java
+++ b/tmp/dde9f5c3-319f-444d-83b2-1240c85df412_fixed.java
@@ -1,23 +1,26 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
+    if (callTarget != null &&
+        callTarget.isName() &&
+        callTarget.getString().equals("String") &&
+        n.getChildCount() == 2 &&
+        n.getChildAtIndex(1).isFunction()) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
+      Node value = n.getChildAtIndex(0);
       if (value != null) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
+        n.replaceChild(callTarget, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
