diff --git a/tmp/be2c4233-909a-482f-a3e2-e1702871445d_buggy.java b/tmp/90232bb6-6a9d-4a62-92df-252d7932edf5_fixed.java
index 03b03d7..fe09e39 100644
--- a/tmp/be2c4233-909a-482f-a3e2-e1702871445d_buggy.java
+++ b/tmp/90232bb6-6a9d-4a62-92df-252d7932edf5_fixed.java
@@ -1,25 +1,25 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        // evaluate 2 hours before and after to work out if anything is happening
+        long instantBefore = convertUTCToLocal(instant - 2 * DateTimeConstants.MILLIS_PER_HOUR);
+        long instantAfter = convertUTCToLocal(instant + 2 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
         return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
         
         // calculate result
           // currently in later offset
           // currently in earlier offset
     }
