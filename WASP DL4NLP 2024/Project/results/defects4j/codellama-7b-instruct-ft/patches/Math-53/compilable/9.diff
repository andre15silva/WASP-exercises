diff --git a/tmp/8d202c90-525d-4be2-b645-cf03b4b66bd0_buggy.java b/tmp/7537241e-cfac-4db3-ab15-935523f14941_fixed.java
index 181b1ac..a3e847c 100644
--- a/tmp/8d202c90-525d-4be2-b645-cf03b4b66bd0_buggy.java
+++ b/tmp/7537241e-cfac-4db3-ab15-935523f14941_fixed.java
@@ -1,23 +1,22 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
-     * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
-     * returned in the parts of the result according to the rules for
-     * {@link java.lang.Double} arithmetic.</p>
+     * If NaN is returned by either this or <code>rhs</code> any of the real
+     * or imaginary parts of the result may be set to NaN, depending on
+     * whether any of the input numbers had a NaN value.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
