diff --git a/tmp/581e177e-1ca0-47fe-93fe-cc2235c47908_buggy.java b/tmp/2c078760-aa8f-40e9-a20d-73d6b97516ef_fixed.java
index 2608424..187b28b 100644
--- a/tmp/581e177e-1ca0-47fe-93fe-cc2235c47908_buggy.java
+++ b/tmp/2c078760-aa8f-40e9-a20d-73d6b97516ef_fixed.java
@@ -1,39 +1,52 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
         int count = 0;
         for (int i = 0; i < last; i++) {
-            int idx = 0;
+            int idx = -1;
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
+            if (count <= index) {
+                idx = 0;
+                while (count < index && count + offset < index) {
+                    ++idx;
+                    count += offset;
+                }
                 count += offset;
+            } else {
+                idx = -1;
+                while (count >= index && count + offset > index) {
+                    if (count == index - offset) {
+                        break;
+                    }
                     ++idx;
+                    count += offset;
+                }
             }
             --idx;
             count -= offset;
             indices[i] = idx;
         }
 
         int idx = 1;
         while (count < index) {
             count += idx;
             ++idx;
         }
         --idx;
         indices[last] = idx;
 
         return indices;
     }
