diff --git a/tmp/1047bec2-41c6-412a-a65a-9e8962835cc5_buggy.java b/tmp/533072b1-ac39-4b35-83e4-25a2cb4c7859_fixed.java
index 2608424..3da9eb9 100644
--- a/tmp/1047bec2-41c6-412a-a65a-9e8962835cc5_buggy.java
+++ b/tmp/533072b1-ac39-4b35-83e4-25a2cb4c7859_fixed.java
@@ -1,39 +1,40 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
         int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
+        int i = 0;
+        int lastDimIdx;
+        while (i < dimension) {
+            lastDimIdx = indices[last == i ? 0 : last - (i - 1)];
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
+            while (lastDimIdx < index) {
                 count += offset;
-                ++idx;
+                ++lastDimIdx;
             }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+            indices[i++] = lastDimIdx - 1;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
+        count = 1;
+        int[] lastIdxs = new int[] {1};
+        while (i < dimension) {
+            indices[i++] = lastIdxs[0];
+            while (count++ < index) {
+                lastIdxs[0]++;
+            }
         }
-        --idx;
-        indices[last] = idx;
 
         return indices;
     }
