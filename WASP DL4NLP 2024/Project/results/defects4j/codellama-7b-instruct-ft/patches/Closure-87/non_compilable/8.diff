diff --git a/tmp/3e1dfc75-c874-4a20-90ed-88a6c88a8a8d_buggy.java b/tmp/00a79f71-6d7d-4aec-aa33-d38d5048411a_fixed.java
index 19fd63e..735374c 100644
--- a/tmp/3e1dfc75-c874-4a20-90ed-88a6c88a8a8d_buggy.java
+++ b/tmp/00a79f71-6d7d-4aec-aa33-d38d5048411a_fixed.java
@@ -1,24 +1,36 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
 
           return NodeUtil.isExpressionNode(maybeExpr);
+      } else if (isIeEventHandler(n)) {
+          // We detected http://code.google.com/p/closure-compiler/issues/detail?id=291
+          // If the code that triggered this is an event handler, then
+          // remove the EXPR_RESULT
+          //
+          // Example input:
+          // if (true) { f.onchange(); }
+          //    becomes:
+          // if (true) f.onchange();
+
+          NodeUtil.removeChild(n.getParent(), n);
+          return true;
       }
     }
 
     return false;
   }
