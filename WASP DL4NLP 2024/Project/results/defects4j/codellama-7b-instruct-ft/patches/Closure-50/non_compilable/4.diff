diff --git a/tmp/192f1c18-2338-4a67-9890-f89a1f9e0991_buggy.java b/tmp/bb87a36b-7b71-4968-882f-b18d70b5c9e5_fixed.java
index d8b0158..2285b26 100644
--- a/tmp/192f1c18-2338-4a67-9890-f89a1f9e0991_buggy.java
+++ b/tmp/bb87a36b-7b71-4968-882f-b18d70b5c9e5_fixed.java
@@ -1,113 +1,125 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
     Node right = callTarget.getNext();
     if (right != null) {
       if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
       // "," is the default, it doesn't need to be explicit
 
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
-        } else {
+        } else if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
         if (sb != null) {
           Preconditions.checkNotNull(prev);
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
 
     if (sb != null) {
       Preconditions.checkNotNull(prev);
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+    // + 2 for the quotes.
+    foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+    int kJoinOverhead = "[].join()".length();
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
-      case 0:
+      case 0: // '[]' join; replace with two empty string nodes.
         Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
+        Node emptyStringForJoin = Node.newString("");
+        emptyStringForJoin.setNext(emptyStringNode);
+        arrayNode.replaceChild(functionName, emptyStringForJoin);
+        n.getParent().replaceChild(n, emptyStringForJoin);
         reportCodeChange();
         return emptyStringNode;
-      case 1:
+      case 1: // Only one element. No join needed, simply join the value.
+        if (foldedSize < originalSize + kJoinOverhead) {
+          return n;
+        }
         Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
+          Node replacement =
+              new Node(Token.ADD,
+                  Node.newString("").setLength(0).copyInformationFrom(n),
                   foldedStringNode);
           foldedStringNode = replacement;
         }
+        arrayNode.replaceChild(functionName, foldedStringNode);
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return n;
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
+        if (foldedSize < originalSize + kJoinOverhead) {
           return n;
         }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
+        int kSpaceOverhead = " [ ] " + "," + " [  ] " + "," +
+            " [ ][ ] [ ][ ] [ ][ ] [ ][ ] [ ][ ] "
+            .replace(" ", "").length();
+        int estimatedFoldedSize = foldedSize
+            + kJoinOverhead
+            // +2 for the quotes of the call to join().
+            + (right != null
+                ? InlineCostEstimator.getCostFunctionCall(null,
+                        right.toString(), null)
+                : 0)
+            + kSpaceOverhead;
+        n.getParent().replaceChild(n,
+            getFoldedArrayStringFunctionNode(
+                    callTarget, arrayFoldedChildren));
         reportCodeChange();
-        break;
+        return n;
     }
 
     return n;
   }
