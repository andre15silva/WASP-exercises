diff --git a/tmp/07a373bd-66bb-4d21-912a-d23f50de4b4e_buggy.java b/tmp/d7fa5dcb-1edc-4d8a-9cae-975bfb359cec_fixed.java
index d8b0158..dfda619 100644
--- a/tmp/07a373bd-66bb-4d21-912a-d23f50de4b4e_buggy.java
+++ b/tmp/d7fa5dcb-1edc-4d8a-9cae-975bfb359cec_fixed.java
@@ -1,113 +1,96 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
     Node right = callTarget.getNext();
     if (right != null) {
       if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
       // "," is the default, it doesn't need to be explicit
 
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
+    int originalSize = InlineCostEstimator.getCost(n);
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    // Merge adjacent string nodes.
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
+      if (elem.getType() == Token.EMPTY) {
+        // Empty node.
+      } else if (NodeUtil.isImmutableValue(elem)) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
+      } else if (elem.getType() == Token.STRING) {
+        if (sb == null) {
+          sb = new StringBuilder();
+        }
+        // Avoid converting string literals to strings if the join string is empty.
+        if (!joinString.isEmpty()) {
+          sb.append(joinString);
+        }
+        sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
         if (sb != null) {
           Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          foldedSize += sb.length();
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
+        NodeUtil.tryFoldNodesIntoLiteral(n, originalSize);
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
 
     if (sb != null) {
       Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+      foldedSize += sb.length();
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
-    int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        n.getParent().replaceChild(n, foldedStringNode);
-        reportCodeChange();
-        return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
+    // TODO(user): For now, optimize only when we remove some strings or when
+    // there's a size win.
+    // This should be configurable.
     int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
+    if (arrayFoldedChildren.size() != arrayNode.getChildCount()
+        && foldedSize < originalSize || joinString.isEmpty()) {
       return n;
     }
+    foldedSize += kJoinOverhead + InlineCostEstimator.getCost(right);
+
     arrayNode.detachChildren();
     for (Node node : arrayFoldedChildren) {
       arrayNode.addChildToBack(node);
     }
     reportCodeChange();
-        break;
-    }
-
     return n;
   }
