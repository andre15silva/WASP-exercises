diff --git a/tmp/9ffa499f-e6da-4710-9bc7-80909d9f2021_buggy.java b/tmp/54e453eb-3a23-4b88-8287-520a7103a0e7_fixed.java
index fe73b81..99db712 100644
--- a/tmp/9ffa499f-e6da-4710-9bc7-80909d9f2021_buggy.java
+++ b/tmp/54e453eb-3a23-4b88-8287-520a7103a0e7_fixed.java
@@ -1,42 +1,52 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
             // And to prevent infinite loops, now need this:
             return _unknownType();
         } else {
             // Ok: here's where context might come in handy!
-            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
-             *   unresolved type variables to handle some cases where bounds
-             *   are enough. Let's hope it does not hide real fail cases.
+            /* 7-Feb-2012, tatu: [databind#728] Problem with local types;
+             *    we need to replace those with generic versions to bind types.
+             *    And since TypeBindings are global (per-classloader), we need
+             *    to do that per-classloader... thus create separate instances instead:
              */
-            JavaType actualType = context.findType(name);
+            TypeFactory tf = _factory();
+            TypeBindings b = context.withStaticClass(tf.constructType(getDeclaringClass()));
+            JavaType actualType = tf.findType(b, name);
             if (actualType != null) {
                 return actualType;
             }
+            // And then see if we can use generic version as well
+            if (context.isGenericContext()) {
+                actualType = tf.findType(b.withGenericSignature(this), name);
+                if (actualType != null) {
+                    return actualType;
+                }
+            }
         }
 
         /* 29-Jan-2010, tatu: We used to throw exception here, if type was
          *   bound: but the problem is that this can occur for generic "base"
          *   method, overridden by sub-class. If so, we will want to ignore
          *   current type (for method) since it will be masked.
          */
         Type[] bounds = type.getBounds();
 
         // With type variables we must use bound information.
         // Theoretically this gets tricky, as there may be multiple
         // bounds ("... extends A & B"); and optimally we might
         // want to choose the best match. Also, bounds are optional;
         // but here we are lucky in that implicit "Object" is
         // added as bounds if so.
         // Either way let's just use the first bound, for now, and
         // worry about better match later on if there is need.
 
         /* 29-Jan-2010, tatu: One more problem are recursive types
          *   (T extends Comparable<T>). Need to add "placeholder"
          *   for resolution to catch those.
          */
         context._addPlaceholder(name);
         return _constructType(bounds[0], context);
     }
