diff --git a/tmp/8c286928-5584-4ea5-ae93-1c86044c134d_buggy.java b/tmp/d10a7d9c-481c-48dc-a257-345ad21ce163_fixed.java
index 0b7c52e..d7ec976 100644
--- a/tmp/8c286928-5584-4ea5-ae93-1c86044c134d_buggy.java
+++ b/tmp/d10a7d9c-481c-48dc-a257-345ad21ce163_fixed.java
@@ -1,27 +1,32 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
+        // We can't just do as in the comment - we can't refer to the "this"
+        // property of an object literal, so if it's there we have to look it up
+        // here.
+        boolean isThisProp = (isTyped(n) &&
+            n.getFirstChild() != null &&
+            n.getFirstChild().getJSType().getReferenceToThis() != null);
+        Node owner = isThisProp ? null : n;
         if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+                                   processProperty(t, prop, owner, type, null))) {
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
