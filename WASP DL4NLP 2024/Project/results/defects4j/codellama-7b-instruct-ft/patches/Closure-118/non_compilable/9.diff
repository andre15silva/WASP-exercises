diff --git a/tmp/4ca4656d-8971-4fe0-a5ae-89a92456cd2d_buggy.java b/tmp/d68cfdb2-65f2-4b48-ab37-460b8bfcb416_fixed.java
index 0b7c52e..e5044a0 100644
--- a/tmp/4ca4656d-8971-4fe0-a5ae-89a92456cd2d_buggy.java
+++ b/tmp/d68cfdb2-65f2-4b48-ab37-460b8bfcb416_fixed.java
@@ -1,27 +1,32 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
+        if ((child.getType() == Token.GET ||
+             child.getType() == Token.SET ||
+             type != null) &&
+            !prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
-          if (propertiesToErrorFor.containsKey(name)) {
+          // Only report the error once.  This is mostly paranoia - at first
+          // glance it seems unimportant whether we report errors for only
+          // sets or gets.
+          if (propertiesToErrorFor.containsKey(name) &&
+              !n.getFirstChild().isFromExterns()) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
