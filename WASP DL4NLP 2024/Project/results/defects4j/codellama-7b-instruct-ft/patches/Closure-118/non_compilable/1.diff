diff --git a/tmp/63ae4924-8c39-4bec-ba68-09e601332325_buggy.java b/tmp/080e64c7-acb4-4130-bf32-28e080e2aa30_fixed.java
index 0b7c52e..e3a5cab 100644
--- a/tmp/63ae4924-8c39-4bec-ba68-09e601332325_buggy.java
+++ b/tmp/080e64c7-acb4-4130-bf32-28e080e2aa30_fixed.java
@@ -1,27 +1,28 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
-          if (propertiesToErrorFor.containsKey(name)) {
+          // case right now. There's no nice way to report this error to the
+          // user, the "only bad one" we get is the "Cannot read property X
+          // of undefined" error.
+          if (type != null && typeSystem.isObject()) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                Warnings.INVALIDATION, name, (type == null ? "null" : type.toString())));
           }
         }
       }
     }
