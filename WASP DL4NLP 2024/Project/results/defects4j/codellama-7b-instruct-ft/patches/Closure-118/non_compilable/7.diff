diff --git a/tmp/eb58f6a9-ad91-40a9-b770-300269e376e9_buggy.java b/tmp/1db04532-499d-407e-a912-1a7a1fef9abd_fixed.java
index 0b7c52e..7221ac5 100644
--- a/tmp/eb58f6a9-ad91-40a9-b770-300269e376e9_buggy.java
+++ b/tmp/1db04532-499d-407e-a912-1a7a1fef9abd_fixed.java
@@ -1,27 +1,41 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
+      T type4 = typeSystem.getType(getScope(), n, "prototype");
+      if (type4 != null) {
+        // Fix up prototype on constructors so that the result of the OBJLIT
+        // for the prototype object is the resulting constructor prototype.
+        // Use the type of the next (only) prototype and make it that.
+        T type = typeSystem.getType(getScope(), n, getScope());
+        if (type == typeSystem.getUnknown()) {
+          type = type4;
+          setObjectLiteralType(n, type, null);
+        } else {
+          type = type.union(type4);
+        }
+        setObjectLiteralType(n, type, null);
+      }
     }
