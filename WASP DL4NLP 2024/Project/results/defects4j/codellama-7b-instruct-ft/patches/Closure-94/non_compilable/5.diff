diff --git a/tmp/35cb287a-197d-4c42-a5b4-5f4a0ef5a9b0_buggy.java b/tmp/cf8fee87-dc5a-44a3-b7f7-fbf746a45509_fixed.java
index 66e3d01..e5771e5 100644
--- a/tmp/35cb287a-197d-4c42-a5b4-5f4a0ef5a9b0_buggy.java
+++ b/tmp/cf8fee87-dc5a-44a3-b7f7-fbf746a45509_fixed.java
@@ -1,34 +1,67 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
+      case Token.REGEXP:
         return true;
 
       // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
+      case Token.SUB:
+      case Token.DIV:
+      case Token.MUL:
+      case Token.MOD:
+      case Token.ADD:
+      case Token.SHL:
+      case Token.SHR:
+      case Token.SHR_INT:
+      case Token.SHL_INT:
+      case Token.LITERAL:
 
       // Uniary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
 
+        // "a + b" or "a & b" is only a define if a == "true" && b == "true"
+      // The same as in JSCompiler
+      case Token.OR:
+      case Token.AND:
+      case Token.IF:
+        Node child0 = val.getFirstChild();
+        Node child1 = child0.getNext();
+        return isValidDefineValue(child0, defines)
+            && isValidDefineValue(child1, defines)
+            // We only support true / true and true / false combinations so it's not
+            // possible to override "false"
+            && (val.getType() != Token.AND || NodeUtil.mayBeString(child0) && "true".equals(
+                child0.getString()))
+            // The same for true / true, this expression is always true
+            && (val.getType() != Token.IF || NodeUtil.mayBeString(child0)
+                && (NodeUtil.mayBeString(child1) ? "true".equals(child1.getString()) : "true".equals(
+                    NodeUtil.constValueToString(child1))))
+            && (val.getType() != Token.OR
+                ||
+                // For string concatenation, only 2 strings can be concatenated
+                (NodeUtil.mayBeString(child0) && NodeUtil.mayBeString(child1)));
+
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
