diff --git a/tmp/25386ec7-cc9e-4a74-bd08-cff16ce734e0_buggy.java b/tmp/da2bd92d-6f5e-4b22-af30-9a67203fbbca_fixed.java
index 66e3d01..1fa62ef 100644
--- a/tmp/25386ec7-cc9e-4a74-bd08-cff16ce734e0_buggy.java
+++ b/tmp/da2bd92d-6f5e-4b22-af30-9a67203fbbca_fixed.java
@@ -1,34 +1,46 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
+    String strVal = null;
+    double doubleVal = 0;
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
+        if (val.getType() == Token.STRING && val.getBooleanValue()) { // handle "true" etc.
+          return validDefineName(val.getString());
+        } else {
           return true;
+        }
 
       // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
 
       // Uniary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
+    if (NodeUtil.isNumericValue(val, false)
+        || val.isStringValue()
+        || val.matchesStringValue("true")
+        || val.matchesStringValue("false")) {
+      return true;
+    }
     return false;
   }
