diff --git a/tmp/a2d78c83-90b0-46e8-ac58-3d68c3f65569_buggy.java b/tmp/f18be55b-ad10-48b3-8ced-2f156df2e35b_fixed.java
index 3127f85..5cb06b7 100644
--- a/tmp/a2d78c83-90b0-46e8-ac58-3d68c3f65569_buggy.java
+++ b/tmp/f18be55b-ad10-48b3-8ced-2f156df2e35b_fixed.java
@@ -1,24 +1,25 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            double norm = dev / (standardDeviation * FastMath.sqrt(2));
+        	return P * FastMath.exp(-0.5*norm*norm)
+        			+ M * exp(norm) * P * Q;
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < (mean - 30 * standardDeviation)) { // JDK 1.5 blows at 38
                 return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+            } else if (x > (mean + 30 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
