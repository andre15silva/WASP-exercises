diff --git a/tmp/b48e42b1-6856-4853-9d4c-1f8ddf1af86f_buggy.java b/tmp/634eb344-2658-49fc-bebe-6f6e38fd2281_fixed.java
index 3127f85..0beabe6 100644
--- a/tmp/b48e42b1-6856-4853-9d4c-1f8ddf1af86f_buggy.java
+++ b/tmp/634eb344-2658-49fc-bebe-6f6e38fd2281_fixed.java
@@ -1,24 +1,29 @@
     /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
+     * This is a utility function for getting the upper cumulative probability of
+     * a normally distributed random variable.  The distribution is parameterized by
+     * a mean and standard deviation.  For this distribution, {@code X}, this is the
+     * cumulative probability of {@code X < x}.  If {@code x} is more than 30
+     * standard deviations from the mean, 0 or 1 is returned, as in these cases
+     * the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
+     * @since 1.2
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
         try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < (mean - 30 * standardDeviation)) { // JDK 1.5 and Windows XP
+                // blow at 40 if the distribution is bimodal
                 return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+            } else if (x > (mean + 30 * standardDeviation)) {
                 return 1;
             }  else {
                 throw ex;
             }
         }
     }
