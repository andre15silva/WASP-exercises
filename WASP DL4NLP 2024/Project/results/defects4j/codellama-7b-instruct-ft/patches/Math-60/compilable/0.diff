diff --git a/tmp/88a8d163-fbec-4544-8725-d434e0354037_buggy.java b/tmp/cf878e2f-3ddd-4e97-92c3-8154b4654675_fixed.java
index 3127f85..0ea9562 100644
--- a/tmp/88a8d163-fbec-4544-8725-d434e0354037_buggy.java
+++ b/tmp/cf878e2f-3ddd-4e97-92c3-8154b4654675_fixed.java
@@ -1,24 +1,36 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        double tailProbability;
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
+            tailProbability = 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (FastMath.abs(x - mean) > 30 * standardDeviation) {
+                if (x < (mean - 100 * standardDeviation)) {
                     return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+                } else if (x > (mean + 100 * standardDeviation)) {
                     return 1;
                 } else {
                     throw ex;
                 }
+            } else {
+                throw ex;
+            }
+        }
+        if (x < (mean - 9 * standardDeviation)) {
+            return -1;
+        } else if (x > (mean + 9 * standardDeviation)) {
+            return 1;
+        } else {
+          return tailProbability;
         }
     }
