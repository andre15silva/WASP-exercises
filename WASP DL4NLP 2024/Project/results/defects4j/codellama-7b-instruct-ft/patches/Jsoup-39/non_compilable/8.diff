diff --git a/tmp/6654c9a0-bb32-4f29-9c12-8069406bf19e_buggy.java b/tmp/00e832c1-1389-44cd-895b-0d79ac2db376_fixed.java
index c4b260c..4e489b7 100644
--- a/tmp/6654c9a0-bb32-4f29-9c12-8069406bf19e_buggy.java
+++ b/tmp/00e832c1-1389-44cd-895b-0d79ac2db376_fixed.java
@@ -1,51 +1,60 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+        String docData = Charset.forName(defaultCharset).decode(byteData).toString();
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        // UTF-8BOM indicates utf-8 has been used. if there are characters < 128 it is likely to be a false BOM, however.
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            try {
+                Document maybeUtf8 = parser.parseInput(docData, baseUri);
+                if (maybeUtf8.body() != null) { // if the body is missing, it is probably a UTF-8BOM but invalid, so re-parse as default (no BOM)
                     byteData.rewind();
                     docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
+                    maybeUtf8.outputSettings().charset(defaultCharset);
+                    maybeUtf8.outputSettings().alsoDeclareEncodingAsUsed();
+                    if (!maybeUtf8.charset().equals(defaultCharset)) {
+                        docData = docData.substring(1); // to account for BOM signifier
                         charsetName = defaultCharset;
                     }
+                    doc = maybeUtf8;
+                }
+            } catch (Exception ignored) {} // if can't read as utf-8, we still fall back to default
+        }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
+        } else {
+            doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
