diff --git a/tmp/ac97b866-093d-477b-aeb9-f88e519fe15f_buggy.java b/tmp/c4e35c5e-b8da-419f-b2ce-242328c5fbba_fixed.java
index 05aaf2d..633a5ee 100644
--- a/tmp/ac97b866-093d-477b-aeb9-f88e519fe15f_buggy.java
+++ b/tmp/c4e35c5e-b8da-419f-b2ce-242328c5fbba_fixed.java
@@ -1,56 +1,66 @@
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
      *
      * <pre>
      * millisLocal == millisUTC   + getOffset(millisUTC)
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
      * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
      * <p>
      * This method will return an offset suitable for calculating an instant
      * after any DST gap. For example, consider a zone with a cutover
      * from 01:00 to 01:59:<br />
      * Input: 00:00  Output: 00:00<br />
      * Input: 00:30  Output: 00:30<br />
      * Input: 01:00  Output: 02:00<br />
      * Input: 01:30  Output: 02:30<br />
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
      * During a DST overlap (where the local time is ambiguous) this method will return
      * the earlier instant. The combination of these two rules is to always favour
      * daylight (summer) time over standard (winter) time.
      * <p>
      * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
      * Prior to v1.5, the DST gap behaviour was also not defined.
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
         final int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
             // we need to ensure that time is always after the DST gap
             // this happens naturally for positive offsets, but not for negative
             if ((offsetLocal - offsetAdjusted) < 0) {
                 // if we just return offsetAdjusted then the time is pushed
                 // back before the transition, whereas it should be
                 // on or after the transition
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
                     return offsetLocal;
                 }
             }
+            // special exception in Moscow (and other places with October DST)
+            else if (this == ZONE_MOSCOW) {
+                final DateTime.Property prop = new DateTime(instantLocal).property(DateTime.HOUR_OF_DAY);
+                if (prop.get() == 2 && prop.getDurationToAdd().getMillis() == 1530000) {
+                    // 2007-10-28T02:30:00.000+04:00
+                    // do not return an offset, thus ensuring the date is parsed
+                    // correctly as it has "started" at the DST transition
+                    // 2007-10-28T03:30:00.000+03:30 -> 2007-10-28T04:30:00.000+02:30
+                }
+            }
         }
         return offsetAdjusted;
     }
