diff --git a/tmp/0784a4d6-96a3-4343-a102-0d0f21ed39a3_buggy.java b/tmp/8d29160d-053f-40ff-a003-abb08f774793_fixed.java
index 1ad070d..2f74c9b 100644
--- a/tmp/0784a4d6-96a3-4343-a102-0d0f21ed39a3_buggy.java
+++ b/tmp/8d29160d-053f-40ff-a003-abb08f774793_fixed.java
@@ -1,38 +1,49 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
         case FF: // TODO is this correct?
         case TAB: // TODO is this correct? Do tabs need to be escaped?
         case BACKSPACE: // TODO is this correct?
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // Check for escaped MySQL null value (see http://dev.mysql.com/doc/refman/5.1/en/null-values.html)
+            if (c == 'N') {
+                final int c2 = in.read();
+                if (c2 == 'U' || c2 == 'u') {
+                    final int c3 = in.read();
+                    if (c3 == 'L' || c3 == 'l') {
+                        final int c4 = in.read();
+                        if (c4 == 'L' || c4 == 'l') {
+                            return c;
+                        }
+                    }
+                }
+            }
             return c;
-            // indicate unexpected char - available from in.getLastChar()
         }
     }
