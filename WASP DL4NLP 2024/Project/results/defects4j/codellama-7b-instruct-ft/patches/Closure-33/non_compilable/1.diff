diff --git a/tmp/827c8312-2944-4d10-beca-91e38e9f2f14_buggy.java b/tmp/6bc46ac8-c0be-40fd-a985-a4c178bdfe11_fixed.java
index fb2b020..597c1de 100644
--- a/tmp/827c8312-2944-4d10-beca-91e38e9f2f14_buggy.java
+++ b/tmp/6bc46ac8-c0be-40fd-a985-a4c178bdfe11_fixed.java
@@ -1,27 +1,71 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
+        // For example:
+        // @param {{text: string}} opt_data
+        // function temp1(opt_data) {}
+        // @param {{activity: (boolean|number|string|null|Object)}} opt_data
+        // function temp2(opt_data) {
+        //   /** @notypecheck */
+        //   function __inner(opt_data) {
+        //     return temp1(opt_data.activity);
+        //   }
+        //   return __inner();
+        // }
+        // @param {{n: number, text: string, b: boolean}} opt_data
+        // <pre>
+        // function temp3(opt_data) {
+        //   return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';
+        // }
+        // </pre>
+        //   function callee() {
+        //     var output = temp3({
+        //       n: 0,
+        //       text: 'a string',
+        //       b: true
+        //     });
+        //     alert(output);
+        //   }
+        // @param {{text: (I|null|string)}} opt_data
+        // function temp4(opt_data) {...}
+        // ...
+        //   var output = temp4({
+        //     text: 'a string<a href="..." x="y">z</a>'
+        //   });
+        //   alert(output);
+        //
+        // This method has been copied wholesale from {@code TypeCheckableJSType}.
+        //
+        // Match the property to a type.
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
+          // Add properties to opt_data.n and opt_data.b.
+          JSType typeToInfer;
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+            if (propType.isNullType() ||
+                propType.isStringType() ||
+                propType.isInterfaceType()) {
+              typeToInfer = getNativeType(JSTypeNative.NO_OBJECT_TYPE);
+            } else {
+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);
+            }
+          } else {
+            typeToInfer = getPropertyType(prop);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
