diff --git a/tmp/27e4569b-328b-4175-8be1-dd8aa57746b8_buggy.java b/tmp/23c71149-2ee6-4642-bb4d-c197cd9dc757_fixed.java
index fb2b020..286ec92 100644
--- a/tmp/27e4569b-328b-4175-8be1-dd8aa57746b8_buggy.java
+++ b/tmp/23c71149-2ee6-4642-bb4d-c197cd9dc757_fixed.java
@@ -1,27 +1,49 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
+      boolean alreadyAddedThis = false;
+      JSType propType;
       for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
+        propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
+          if (hasOwnProperty(prop)) {
+            alreadyAddedThis = true;
+          }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
+      if (!alreadyAddedThis) {
+        // Special case: The parameter is a record type, and all the
+        // properties can be declared explicitly by the user, so the
+        // parameter can be ignored. This is so the programmer can pass a
+        // record literal to a function.
+        //
+        // For example,
+        //
+        // function f(data: {text: string, activity: (boolean|number|string|undefined|null|Object)}) {}
+        //
+        // You can't just pass it an object literal like this:
+        //
+        // var temp = goog.object.clone(goog.object.create(
+        //     'a1', {}, 'a2', 12, 'a3', 'hello', 'a4', false);
+        // f(temp);
+        removeProperty(this, "$parameterMap");
+      }
     }
   }
