diff --git a/tmp/991ff401-9356-447f-ba5d-a79ec6976511_buggy.java b/tmp/c990e3ba-3bc4-406b-8855-478214b7c5bc_fixed.java
index d926eea..db1e67d 100644
--- a/tmp/991ff401-9356-447f-ba5d-a79ec6976511_buggy.java
+++ b/tmp/c990e3ba-3bc4-406b-8855-478214b7c5bc_fixed.java
@@ -1,48 +1,59 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+                if ((shape == JsonFormat.Shape.STRING) ||
+                        // And if no pattern, we must not just use contextual!
+                        (!format.hasPattern()) ||
+                 // ... but that's what we do if Locale/TimeZone is specified by contextual
+                        // format (either directly or indirectly via serialization feature)
+                        (((format.getLocale() != null)
+                        || (format.hasTimeZone() && !format.hasPattern())) &&
+                         (format.hasLocale()
+                            ? !format.getLocale().equals(serializers.getLocale())
+                            : (!format.hasTimeZone() && !format.hasPattern()))
+                                ) ) {
                     TimeZone tz = format.getTimeZone();
                     final String pattern = format.hasPattern()
                                     ? format.getPattern()
                                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
                     SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
-                    }
+                    // Important: avoid clobbering timezone if we do have one,
+                    // or if we have `DATE_TIME` as custom pattern, no matter what
+                    // serializer is
+                    if ((tz != null) || StdDateFormat.instance.hasPattern(format)) {
                         df.setTimeZone(tz);
+                    }
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
 
 
         // Jackson's own `StdDateFormat` is quite easy to deal with...
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
 //            serializers.reportBadDefinition(handledType(), String.format(
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
         return this;
     }
