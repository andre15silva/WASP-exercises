diff --git a/tmp/359e216a-c5dd-45d5-a269-f50370ffb86a_buggy.java b/tmp/0edda14b-8bfb-4887-b9f7-ab2bdc5f32cd_fixed.java
index 1650d36..73ceda2 100644
--- a/tmp/359e216a-c5dd-45d5-a269-f50370ffb86a_buggy.java
+++ b/tmp/0edda14b-8bfb-4887-b9f7-ab2bdc5f32cd_fixed.java
@@ -1,25 +1,31 @@
     /**
      * <p>Checks if two calendar objects represent the same local time.</p>
      *
      * <p>This method compares the values of the fields of the two objects.
-     * In addition, both calendars must be the same of the same type.</p>
+     * In addition, time zones and DST settings of the two
+     * calendars are taken into account.</p>
      * 
      * @param cal1  the first calendar, not altered, not null
      * @param cal2  the second calendar, not altered, not null
      * @return true if they represent the same millisecond instant
      * @throws IllegalArgumentException if either date is <code>null</code>
      * @since 2.1
      */
     public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {
         if (cal1 == null || cal2 == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
+        // use calendar's timezone rather than GMT for consistency with isSameInstant
         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
+                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&
                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
+                cal1.getFirstDayOfWeek() == cal2.getFirstDayOfWeek() &&
+                cal1.getMinimalDaysInFirstWeek() == cal2.getMinimalDaysInFirstWeek() &&
+                cal1.getTimeZone().equals(cal2.getTimeZone()) &&
+                cal1.getLenient() == cal2.getLenient() &&
+                cal1.getTimeZone().hasSameRules(cal2.getTimeZone()) &&
                 cal1.getClass() == cal2.getClass());
     }
