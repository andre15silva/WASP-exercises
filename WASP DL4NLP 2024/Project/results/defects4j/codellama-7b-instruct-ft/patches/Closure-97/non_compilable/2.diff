diff --git a/tmp/6451e514-50b4-47c2-b52c-c2a3e8d3c943_buggy.java b/tmp/908a078a-bbc1-46bb-8106-a271873edb7c_fixed.java
index 1126687..4311d07 100644
--- a/tmp/6451e514-50b4-47c2-b52c-c2a3e8d3c943_buggy.java
+++ b/tmp/908a078a-bbc1-46bb-8106-a271873edb7c_fixed.java
@@ -1,65 +1,82 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
-      double lval = left.getDouble();
-      double rval = right.getDouble();
+      double lval = left.getNumber();
+      double rval = right.getNumber();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
+      Node newLeft = tryFoldConstants(left);
+      if (newLeft != left) {
+        // Try to handle left first because newLeft is always an IntegerNode
+        // and we may have already made the left constant number.
+        n.getParent().replaceChild(left, newLeft);
+        reportCodeChange();
+      }
+      Node newRight = tryFoldConstants(right);
+      if (newRight != right) {
+        // Only change the right child if it changes.
+        n.getParent().replaceChild(right, newRight);
+        reportCodeChange();
+      }
+      if (newLeft != left || newRight != right) {
+        return n;
+      }
+
+      double lvalInt = newLeft.getDouble();
+      if (Math.floor(lvalInt) != Math.floor(lval)) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
-      int rvalInt = (int) rval;
-      if (rvalInt != rval) {
+      double rvalInt = newRight.getDouble();
+      if (Math.floor(rvalInt) != Math.floor(rval)) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
           result = lvalInt >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
