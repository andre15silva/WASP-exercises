diff --git a/tmp/9653798f-8019-40bf-924e-dfa5d2d8ded1_buggy.java b/tmp/31e6c52c-3901-42a0-a345-e02161814460_fixed.java
index 1126687..72cfd50 100644
--- a/tmp/9653798f-8019-40bf-924e-dfa5d2d8ded1_buggy.java
+++ b/tmp/31e6c52c-3901-42a0-a345-e02161814460_fixed.java
@@ -1,65 +1,70 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // only the lower 5 bits are used, so don't do anything if the shift
+      // amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
+      // Convert the numbers to ints. Java does strange things to the
+      // semantics of >>> with NaN or infinite values on signed types. We
+      // don't really care about this because it's stupid and
+      // unnecessary.  The best we can do is round these up to int.
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript handles zero shifts on signed numbers the same way as
+          // Java where signed is treated as unsigned, but not where
+          // signed is treated as signed.  So if the result is greater than
+          // 0 and less than the smallest signed it's unsigned, otherwise
+          // signed.  To make this more efficient, use a long here.
+          result = (long)lvalInt >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
