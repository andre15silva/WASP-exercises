diff --git a/tmp/8d750195-947b-4755-975f-9376cacc535e_buggy.java b/tmp/213fa580-3df1-4d41-9568-39d7b1012b8d_fixed.java
index cd412d2..2fb1895 100644
--- a/tmp/8d750195-947b-4755-975f-9376cacc535e_buggy.java
+++ b/tmp/213fa580-3df1-4d41-9568-39d7b1012b8d_fixed.java
@@ -1,76 +1,81 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
             // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+            int timeLen = len - dateStr.lastIndexOf('T') - 1;
+            if (timeLen <= 8) {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-1, ".000");
                 dateStr = sb.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
+                int timeLen = len - dateStr.lastIndexOf('T') - 1;
                 c = dateStr.charAt(len-3);
                 if (c == ':') { // remove optional colon
                     // remove colon
                     StringBuilder sb = new StringBuilder(dateStr);
                     sb.delete(len-3, len-2);
                     dateStr = sb.toString();
                 } else if (c == '+' || c == '-') { // missing minutes
                     // let's just append '00'
                     dateStr += "00";
                 }
                 // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
                 // remove 'T', '+'/'-' and 4-digit timezone-offset
+                if (len > timeLen) {
                     c = dateStr.charAt(len-9);
                     if (Character.isDigit(c)) {
                         StringBuilder sb = new StringBuilder(dateStr);
                         sb.insert(len-5, ".000");
                         dateStr = sb.toString();
                     }
+                }
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
                 StringBuilder sb = new StringBuilder(dateStr);
                 // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+                timeLen = len - dateStr.lastIndexOf('T') - 1;
+                if (timeLen <= 10) {
+                    // need time
                     sb.append(".000");
                 }
                 sb.append('Z');
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
