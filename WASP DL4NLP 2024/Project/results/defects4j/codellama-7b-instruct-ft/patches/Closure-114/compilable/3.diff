diff --git a/tmp/cc99b42f-5e0f-4e15-b1a2-e6cd866bb62e_buggy.java b/tmp/da9fa10e-51a0-4fcc-a323-c31c68c4cc44_fixed.java
index c51c8b1..0454705 100644
--- a/tmp/cc99b42f-5e0f-4e15-b1a2-e6cd866bb62e_buggy.java
+++ b/tmp/da9fa10e-51a0-4fcc-a323-c31c68c4cc44_fixed.java
@@ -1,31 +1,38 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
+          // TODO(user) revisit this.  The rhs has nothing to do
+          // with the for loop.  The for loop does not get any
+          // additional referenced.  Perhaps I should be recording
+          // this.
+          //
+          // The rhs of the
+          // assignment is the caller, so it's used by the context.
+          // Don't associate it w/ the lhs.
+          // FYI: this fixes only the specific case where the
+          //       assignment is the caller expression, but it
+          //       could be nested deeper in the caller and we
+          //       would still get a bug.
           // See testAssignWithCall2 for an example of this.
           recordDepScope(recordNode, ns);
         }
       }
     }
