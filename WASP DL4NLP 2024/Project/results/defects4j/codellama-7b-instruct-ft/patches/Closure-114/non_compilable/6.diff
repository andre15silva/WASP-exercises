diff --git a/tmp/5ee3071e-0113-4329-980b-e1e0f1cc5bad_buggy.java b/tmp/7a919665-a49e-428e-8ed8-60d9511f4af6_fixed.java
index c51c8b1..68c6ab8 100644
--- a/tmp/5ee3071e-0113-4329-980b-e1e0f1cc5bad_buggy.java
+++ b/tmp/7a919665-a49e-428e-8ed8-60d9511f4af6_fixed.java
@@ -1,31 +1,37 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
+          // context. Don't associate it w/ the lhs. This also prevents "var x"
+          // from being associated with x (in cases where x is used indirectly).
+          // See testAssignWithCall2 for an example of this. Note that x might be
+          // defined outside the call tree entirely, and even if it wasn't
+          // defined in the tree, we cannot do more accurate analysis anyway, so
+          // if the test is a bug, it will appear in other tests too.
           // See testAssignWithCall2 for an example of this.
+          if (!NodeUtil.isFunctionDecl(parent)
+              && !NodeUtil.isFunctionExpr(parent)
+              && !parent.isCatch()) {
             recordDepScope(recordNode, ns);
           }
         }
       }
+    }
