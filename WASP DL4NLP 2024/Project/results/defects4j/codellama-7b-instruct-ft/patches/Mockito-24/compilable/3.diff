diff --git a/tmp/f44e2db7-4258-4bcc-a93f-6aa0af8e305d_buggy.java b/tmp/7f915af9-59c9-43b0-ab4a-ed044f1ea92e_fixed.java
index 47915ed..3edc61a 100644
--- a/tmp/f44e2db7-4258-4bcc-a93f-6aa0af8e305d_buggy.java
+++ b/tmp/7f915af9-59c9-43b0-ab4a-ed044f1ea92e_fixed.java
@@ -1,22 +1,29 @@
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
         if (methodsGuru.isToString(invocation.getMethod())) {
             Object mock = invocation.getMock();
             MockName name = mockUtil.getMockName(mock);
             if (name.isDefault()) {
                 return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
             } else {
                 return name.toString();
             }
         } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
             //see issue 184.
             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
             //Only for compareTo() method by the Comparable interface
             return 1;
+        } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {
+            //This mock is a bit complicated because it sometimes compares with another mock
+            //If they're not the same mock then I'll just return false because they are not the same. It doesn't look like a real mock.
+            //But if they are the same then I'll need to find a way to get back to the first mock. Without the mock
+            //There is no way to know which mock is which. For instance: I. I have no idea if this is a real "foo" or a
+            //mock "foo". And it's bad from a Junit perspective. To fix that I've got to be able to get to the first mock
+            //without giving up the ability to mock.
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();
         return returnValueFor(returnType);
     }
