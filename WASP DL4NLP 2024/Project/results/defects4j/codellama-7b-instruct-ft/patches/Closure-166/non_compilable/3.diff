diff --git a/tmp/b8a922a7-de5e-4e7b-bde5-39e10e9b73f7_buggy.java b/tmp/343dd1d1-f376-407a-934f-2cb0d39c5940_fixed.java
index 5f96616..3c06e5d 100644
--- a/tmp/b8a922a7-de5e-4e7b-bde5-39e10e9b73f7_buggy.java
+++ b/tmp/343dd1d1-f376-407a-934f-2cb0d39c5940_fixed.java
@@ -1,20 +1,26 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
+    // Handle the cases where the constraint object is a record type. Because
+    // of {@link #fromObjectLiteral}, this can also be an object literal with an
+    // inference marker on it.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    //
+    // Note that if the constraint is a record type, we don't want to convert
+    // a record type that corresponds to a generic instantiated record type.
+    if (constraint.isRecordType() ||
+        fromObjectLiteral.isUnresolvedInference()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
