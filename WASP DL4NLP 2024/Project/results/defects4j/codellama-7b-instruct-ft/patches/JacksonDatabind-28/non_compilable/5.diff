diff --git a/tmp/8341ee56-d25e-4fc2-9ac6-e3a609390c5e_buggy.java b/tmp/59750a28-f9fa-47aa-86e0-2091cb31a6b8_fixed.java
index 66bb99f..3465432 100644
--- a/tmp/8341ee56-d25e-4fc2-9ac6-e3a609390c5e_buggy.java
+++ b/tmp/59750a28-f9fa-47aa-86e0-2091cb31a6b8_fixed.java
@@ -1,14 +1,27 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
                 p.nextToken();
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+            // 23-Sep-2015, tatu: Uggh. Can also get `JsonToken.FIELD_NAME` before
+            //    starting object, and then we do weird recovery; can also end-up
+            //    having `JsonToken.END_OBJECT`
+            if (p.getCurrentToken() == JsonToken.END_OBJECT || p.getCurrentToken() == JsonToken.FIELD_NAME) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            // 23-Sep-2015, tatu: Also, for backwards-compatible (older JDK and older Jackson modules)
+            //    it may be possible to encounter `JsonToken.START_ARRAY` in addition to those before.
+            if (p.getCurrentToken() == JsonToken.START_ARRAY) {
+                return deserializeArray(p, ctxt, ctxt.getNodeFactory());
+            }
+            // 08-May-2017, tatu: And if for backwards compatibility we support
+            //    `JsonToken.START_OBJECT`, may end up with `JsonToken.END_OBJECT`,
+            //    in which case we need to advance just as if we had an empty object...
+            if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                p.nextToken();
+                return ctxt.getNodeFactory().objectNode();
+            }
             throw ctxt.mappingException(ObjectNode.class);
          }
