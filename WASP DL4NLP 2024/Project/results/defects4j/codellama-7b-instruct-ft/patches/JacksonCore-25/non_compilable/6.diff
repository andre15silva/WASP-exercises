diff --git a/tmp/55faf5b1-a7af-44dd-bcd0-bb5829e94fca_buggy.java b/tmp/cb6ecd7f-50e5-45d6-b5c9-3b2fb6aa29d3_fixed.java
index 8dfbd84..948dcf8 100644
--- a/tmp/55faf5b1-a7af-44dd-bcd0-bb5829e94fca_buggy.java
+++ b/tmp/cb6ecd7f-50e5-45d6-b5c9-3b2fb6aa29d3_fixed.java
@@ -1,43 +1,44 @@
     private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
     {
         _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
         char[] outBuf = _textBuffer.getCurrentSegment();
         int outPtr = _textBuffer.getCurrentSegmentSize();
         final int maxCode = codes.length;
 
         while (true) {
             if (_inputPtr >= _inputEnd) {
                 if (!_loadMore()) { // acceptable for now (will error out later)
                     break;
                 }
             }
             char c = _inputBuffer[_inputPtr];
             int i = (int) c;
-            if (i <= maxCode) {
             if (codes[i] != 0) {
                 break;
             }
-            } else if (!Character.isJavaIdentifierPart(c)) {
+            if (!Character.isJavaIdentifierPart(c)) {
                 break;
             }
             ++_inputPtr;
             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
-            // Ok, let's add char to output:
-            outBuf[outPtr++] = c;
+            // Ok, let's continue adding char to output:
+            final int outPtr2 = outPtr;
+            _textBuffer.append unquotedCharsChecking(c);
+            outPtr = outPtr2;
 
             // Need more room?
             if (outPtr >= outBuf.length) {
                 outBuf = _textBuffer.finishCurrentSegment();
                 outPtr = 0;
             }
         }
         _textBuffer.setCurrentLength(outPtr);
         {
             TextBuffer tb = _textBuffer;
             char[] buf = tb.getTextBuffer();
             int start = tb.getTextOffset();
             int len = tb.size();
 
             return _symbols.findSymbol(buf, start, len, hash);
         }
     }
