diff --git a/tmp/def82124-6b66-45b1-bf7f-91d1bb826228_buggy.java b/tmp/adc4492b-a43b-4af9-8631-8714d7e15b6a_fixed.java
index 8dfbd84..5bbbfa5 100644
--- a/tmp/def82124-6b66-45b1-bf7f-91d1bb826228_buggy.java
+++ b/tmp/adc4492b-a43b-4af9-8631-8714d7e15b6a_fixed.java
@@ -1,43 +1,67 @@
     private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
     {
         _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
         char[] outBuf = _textBuffer.getCurrentSegment();
         int outPtr = _textBuffer.getCurrentSegmentSize();
         final int maxCode = codes.length;
 
         while (true) {
             if (_inputPtr >= _inputEnd) {
                 if (!_loadMore()) { // acceptable for now (will error out later)
                     break;
                 }
             }
             char c = _inputBuffer[_inputPtr];
             int i = (int) c;
             if (i <= maxCode) {
                 if (codes[i] != 0) {
                     break;
                 }
             } else if (!Character.isJavaIdentifierPart(c)) {
                 break;
             }
             ++_inputPtr;
             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
             // Ok, let's add char to output:
             outBuf[outPtr++] = c;
 
             // Need more room?
             if (outPtr >= outBuf.length) {
                 outBuf = _textBuffer.finishCurrentSegment();
                 outPtr = 0;
             }
         }
+        /* 23-Sep-2012, tatu: Avoid doing boundary checks (array oob access)
+         *  first in case we're off-by-one on input buffer length; also, do
+         *  NOT expand input buffer until (possibly) possible (could be in case of '\uXXXX'
+         *  escape sequences, which must be expanded).
+         */
+        int i = _inputPtr;
+        while (i < _inputEnd) {
+            char c = _inputBuffer[i];
+            if (!Character.isJavaIdentifierPart(c)) {
+                break;
+            }
+            ++i;
+            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + (int)c;
+            // Ok, let's add char to output:
+            outBuf[outPtr++] = c;
+
+            // Need more room?
+            if (outPtr >= outBuf.length) {
+                outBuf = _textBuffer.finishCurrentSegment();
+                outPtr = 0;
+            }
+        }
+        // Ok, let's wrap up:
+        _inputPtr = i;
         _textBuffer.setCurrentLength(outPtr);
         {
             TextBuffer tb = _textBuffer;
             char[] buf = tb.getTextBuffer();
             int start = tb.getTextOffset();
             int len = tb.size();
 
             return _symbols.findSymbol(buf, start, len, hash);
         }
     }
