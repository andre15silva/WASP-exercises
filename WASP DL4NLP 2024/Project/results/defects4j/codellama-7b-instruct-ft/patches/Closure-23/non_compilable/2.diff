diff --git a/tmp/bd4ff38f-cac2-42bf-aeb7-c4cb0649d9f6_buggy.java b/tmp/0154398d-07a4-4199-b19e-5b565e78cac6_fixed.java
index cfdcd9c..f05776c 100644
--- a/tmp/bd4ff38f-cac2-42bf-aeb7-c4cb0649d9f6_buggy.java
+++ b/tmp/0154398d-07a4-4199-b19e-5b565e78cac6_fixed.java
@@ -1,51 +1,55 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
+    } else if (isIncrementOrDecrementTarget(n)) {
+      return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
+      // arrays to assign, e.g. "[].foo = 1".
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node current = left.getFirstChild();
-    Node elem = null;
+    Double elem = null;
     for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
+        Node node = current;
 
       current = current.getNext();
+      elem = getDoubleLiteralDisplayValue(node);
+      if (elem == null) {
+        return n;
+      }
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
-    } else {
-      left.removeChild(elem);
+    if (elem.equals(0.0)) {
+      elem = null;
     }
 
     // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    n.getParent().replaceChild(n, elem == null ? new UndefinedNode() : elem);
     reportCodeChange();
-    return elem;
+    return elem == null ? null : elem.getValueNode();
   }
