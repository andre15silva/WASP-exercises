diff --git a/tmp/84639e9b-8f51-4d98-b8d5-784f2e35b539_buggy.java b/tmp/5b486a39-8e52-4a39-bc83-afc9f3528717_fixed.java
index cfdcd9c..a672103 100644
--- a/tmp/84639e9b-8f51-4d98-b8d5-784f2e35b539_buggy.java
+++ b/tmp/5b486a39-8e52-4a39-bc83-afc9f3528717_fixed.java
@@ -1,51 +1,60 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
+    if (isAssignmentTarget(n)) {
       // If GETPROP/GETELEM is used as assignment target the array literal is
       // acting as a temporary we can't fold it here:
       //    "[][0] += 1"
-    if (isAssignmentTarget(n)) {
+      return n;
+    }
+
+    if (right.isComplexFunction()) {
+      // This is a complex expression that is used with an array. See
+      // testcase.java.
+      reportCodeChange();
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
+      // Don't throw here for floating point errors, just let an
+      // execution-time error happen.
       return n;
     }
 
     if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+      // Don't throw here for floating point errors, just let an
+      // execution-time error happen.
       return n;
     }
 
     Node current = left.getFirstChild();
     Node elem = null;
     for (int i = 0; current != null && i < intIndex; i++) {
         elem = current;
 
       current = current.getNext();
     }
 
     if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+      reportCodeChange();
       return n;
     }
 
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
