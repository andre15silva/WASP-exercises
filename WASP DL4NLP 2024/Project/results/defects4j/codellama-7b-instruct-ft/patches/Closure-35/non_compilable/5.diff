diff --git a/tmp/a6125059-605e-4eba-930c-8f4dcd6d9a5a_buggy.java b/tmp/034aaac4-7041-4741-a65b-d2a2ea7a8899_fixed.java
index d57736b..672d453 100644
--- a/tmp/a6125059-605e-4eba-930c-8f4dcd6d9a5a_buggy.java
+++ b/tmp/034aaac4-7041-4741-a65b-d2a2ea7a8899_fixed.java
@@ -1,39 +1,53 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
+   * For example, given:
+   *   /** @constructor */
+   *   function Foo() { this.prop1 = {a:3}; }
+   *   f().call(new Foo());
+   *   if (condition) f2().call({});
    *
-   * If we give the anonymous object an inferred property of (number|undefined),
+   * If we give the anonymous object an inferred property of {a: (number|undefined)},
    * then this code will type-check appropriately.
+   * We're also smart enough to infer that x.prop2 exists, although x is an object literal.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
+        // Make a copy of the constraint, then loop over the declared prop names
+        // to see if any of them are undefined.
+        // If so, we'll use that rather than the possibly undeclared type.
+        // This ensures that {b: 2} behaves like ({b: 2}) for example.
+        ObjectType declaredConstraintObj =
+            ObjectType.cast(constraintObj.toMaybeObjectType());
         for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
+          JSType constraintType = declaredConstraintObj.getPropertyType(prop);
+          JSType propType = constraintType == null ?
+              VOID_TYPE : constraintType;
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            } else if (declaredConstraintObj.hasProperty(prop) &&
+                declaredConstraintObj.isPropertyTypeInferred(prop)) {
+              typeToInfer = getNativeType(OBJECT_TYPE);
             }
-            objType.defineInferredProperty(prop, typeToInfer, null);
+            objType.defineInferredProperty(prop,
+                typeToInfer, null);
           }
         }
       }
     }
   }
