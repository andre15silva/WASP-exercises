diff --git a/tmp/bbee597f-34b9-4b62-9b96-4396f4c0fa08_buggy.java b/tmp/f779b9ef-0664-4321-8f16-8c332821816e_fixed.java
index d57736b..fb6c5cf 100644
--- a/tmp/bbee597f-34b9-4b62-9b96-4396f4c0fa08_buggy.java
+++ b/tmp/f779b9ef-0664-4321-8f16-8c332821816e_fixed.java
@@ -1,39 +1,36 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
+   * For a concrete example, consider this function in
+   * https://code.google.com/p/crusher/issues/detail?id=669
+   * where the object that f returns (y in the comment) is inferred to have
+   * 'prop' with a declared type of (Object|undefined).
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+            if (propType.isTop() || objType.hasProperty(prop)) {
+              JSType typeToInfer =
+                  getNativeType(OBJECT_TYPE).getLeastSupertype(propType);
               objType.defineInferredProperty(prop, typeToInfer, null);
             }
           }
         }
       }
     }
+  }
