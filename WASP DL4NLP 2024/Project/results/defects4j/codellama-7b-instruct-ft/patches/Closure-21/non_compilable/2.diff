diff --git a/tmp/50d0c555-e5ac-453e-9ec1-13afe6782971_buggy.java b/tmp/d9fea087-d052-4368-8b09-bfef917eb75a_fixed.java
index 49a5702..a0fe155 100644
--- a/tmp/50d0c555-e5ac-453e-9ec1-13afe6782971_buggy.java
+++ b/tmp/d9fea087-d052-4368-8b09-bfef917eb75a_fixed.java
@@ -1,66 +1,102 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (parent.getType() == Token.COMMA) {
       if (isResultUsed) {
         return;
       }
       if (n == parent.getLastChild()) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA) continue;
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
           else break;
         }
       }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
         return;
       }
     }
     if (
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
+    } else if (NodeUtil.isAssignmentOp(n.getType()) || NodeUtil.isCompoundAssignmentOp(n.getType())) {
+      // If there are side-effects anywhere on either side that may cause
+      // an unexpected value to be assigned, don't remove the expressions.
+      for (int i = 0; i < n.getChildCount();) {
+        Node node = n.getChildAtIndex(i);
+        if (NodeUtil.mayHaveSideEffects(node, t.getCompiler())) {
+          return;
+        }
+        i += node.getType() == Token.COMMA ? 2 : 1;
+      }
+
+      // Check that each piece of the tree doesn't cause a global value.
+      for (Node node : n.children()) {
+        if (NodeUtil.mayBeStringOrNumberLiteral(node)) {
+          return;
+        }
+      }
+      if (n.getBooleanProp(Node.COMPOUND)) {
+        // The assignment is actually a compound assignment of the form x = x op y.
+        // Since x may have side effects this can cause y to be evaluated and assign to x.
+        return;
+      }
+
+      // Because expressions on the right of a assignment are never evaluated, replace them.
+      // Don't do this for compound assignments, so that it will fail later if the lhs
+      // doesn't support the type of op being used.
+      Node value = n.removeFirstChild();
+      NodeUtil.deleteChildren(n);
+      Node replace = Node.newString(Token.JS_PRESERVE, "JSCOMPILER_PRESERVE(" + value.toString(true /*hideFunctions*/) + ")");
+      n.replaceWith(replace);
+      problemNodes.add(replace);
+    } else if (n.isFunction() && n.getChildCount() == 0) {
+      // This function definition is empty. It doesn't initialize any variables
+      // so just completely remove it.
+      NodeUtil.deleteNode(n);
+      problemNodes.add(n);
     }
   }
