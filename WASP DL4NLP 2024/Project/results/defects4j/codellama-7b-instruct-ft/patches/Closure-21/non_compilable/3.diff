diff --git a/tmp/719b6b4d-63bf-4a94-a387-4efb21a459a6_buggy.java b/tmp/dc93d204-ddf5-4cb9-851a-87864bc88306_fixed.java
index 49a5702..18dbdfc 100644
--- a/tmp/719b6b4d-63bf-4a94-a387-4efb21a459a6_buggy.java
+++ b/tmp/dc93d204-ddf5-4cb9-851a-87864bc88306_fixed.java
@@ -1,66 +1,106 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
       return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (parent.getType() == Token.COMMA) {
       if (isResultUsed) {
         return;
       }
       if (n == parent.getLastChild()) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA) continue;
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
           else break;
         }
       }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
         return;
       }
     }
     if (
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
+      return;
     }
+
+    if (n.isFunction()) {
+      Node body = n.getLastChild(); // The block containing the function body
+      // Replace expressions with JSCOMPILER_PRESERVE in a block and
+      // the function param list with JSCOMPILER_PRESERVE_BLOCK.
+      if (body.isBlock()) {
+        JSDocInfo info = NodeUtil.extractFunctionDocInfo(n);
+        replaceParamList(n, info);
+        replaceBodyList(body, info);
+      } else if (body.isExprResult()) {
+        JSDocInfo info = NodeUtil.extractFunctionDocInfo(n);
+        n = n.getFirstChild();
+        Node name = n;
+        if (isResultUsed || !n.hasChildren()) return;
+        n = n.getSecondChild();
+        n = new Node(Token.CALL, new Node(Token.NAME, "", name),
+            new Node(Token.NAME, "JSCOMPILER_PRESERVE"),
+            n);
+        n.setJSDocInfo(info);
+      }
+    } else if (n.isExprResult()) {
+      JSDocInfo info = NodeUtil.extractJSDocInfo(n.getParent());
+      n = n.getFirstChild();
+      Node name = n;
+      if (isResultUsed || !n.hasChildren()) return;
+      n = n.getSecondChild();
+      n = new Node(Token.CALL, new Node(Token.NAME, "", name),
+          new Node(Token.NAME, "JSCOMPILER_PRESERVE"),
+          n);
+      n.setJSDocInfo(info);
+    } else if (n.isNumber()
+        && n.isString()) {
+      return;
+    } else {
+      return;
+    }
+
+    n.replaceChild(n.getLastChild(),
+                   new Node(Token.CALL, new Node(Token.NAME, "JSCOMPILER_PRESERVE")));
   }
