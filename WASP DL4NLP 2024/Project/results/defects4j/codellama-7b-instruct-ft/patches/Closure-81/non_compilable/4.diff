diff --git a/tmp/0dbed268-ac84-402d-803f-b16605ea5450_buggy.java b/tmp/ddc4e4f1-ca64-4ffb-a296-78fe4a96251f_fixed.java
index 6e05e4b..c9f6d25 100644
--- a/tmp/0dbed268-ac84-402d-803f-b16605ea5450_buggy.java
+++ b/tmp/ddc4e4f1-ca64-4ffb-a296-78fe4a96251f_fixed.java
@@ -1,51 +1,59 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+      boolean isUnnamedFunction = false;
+      // An anonymous function in an expression is a SyntaxError, as per the
+      // ES3 spec.  (It is not in ES5; ES5 actually allows this.)
       if (name == null) {
         name = new Name();
-        name.setIdentifier("");
         isUnnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
+        parseError("unnamed function statement");
+      } else {
+        // TODO(bowdidge): Mark line number of paren correctly.
+        // Same problem as below - the left paren might not be on the
+        // same line as the function keyword.
+        int lparenCharno = functionNode.getLp() +
+            functionNode.getAbsolutePosition();
+
+        lp.setCharno(position2charno(lparenCharno));
+        for (AstNode param : functionNode.getParams()) {
+          lp.addChildToBack(transform(param));
+        }
+        node.addChildToBack(lp);
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
 
-      lp.setCharno(position2charno(lparenCharno));
-      for (AstNode param : functionNode.getParams()) {
-        lp.addChildToBack(transform(param));
-      }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
