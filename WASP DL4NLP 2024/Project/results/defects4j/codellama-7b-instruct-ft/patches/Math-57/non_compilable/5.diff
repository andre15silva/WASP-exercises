diff --git a/tmp/ff2535f6-da57-41af-803d-e88c2301388b_buggy.java b/tmp/16dde993-27db-4ae5-a24e-5b3f2b45208b_fixed.java
index ad4b0d8..59a027e 100644
--- a/tmp/ff2535f6-da57-41af-803d-e88c2301388b_buggy.java
+++ b/tmp/16dde993-27db-4ae5-a24e-5b3f2b45208b_fixed.java
@@ -1,47 +1,48 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
         final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
+            // For each data point x, compute D2(xi, xj) where xj is one of the
+            // seed points.
             int sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
+                final double distance2 = 
+                        p.distanceFrom(nearest.getCenter()).getSquaredValue();
+                sum += distance2;
                 dx2[i] = sum;
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+            // probability proportional to D2(xi, xj)
             final double r = random.nextDouble() * sum;
             for (int i = 0 ; i < dx2.length; i++) {
                 if (dx2[i] >= r) {
                     final T p = pointSet.remove(i);
                     resultSet.add(new Cluster<T>(p));
                     break;
                 }
             }
         }
 
         return resultSet;
 
     }
