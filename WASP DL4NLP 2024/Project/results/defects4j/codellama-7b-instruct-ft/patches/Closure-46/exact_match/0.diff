diff --git a/tmp/146b8dbb-602f-4bd9-afee-18f9d55cb74d_buggy.java b/tmp/5357f5e5-a861-416a-82b6-71c55896e713_fixed.java
index 46817a7..f77d518 100644
--- a/tmp/146b8dbb-602f-4bd9-afee-18f9d55cb74d_buggy.java
+++ b/tmp/5357f5e5-a861-416a-82b6-71c55896e713_fixed.java
@@ -1,16 +1,26 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    if (registry.createUnionType(recordType, that).isSubtypeOf(this)) {
+      // this is a strict supertype of that.
+      builder.addProperties(this);
+    } else if (registry.createUnionType(that, recordType).isSubtypeOf(that)) {
+      // that is a strict supertype of this.
+      builder.addProperties(that.toMaybeRecordType());
+    } else {
+      // {d:number, e:string, f:string} = {e:number,b:string} = {a:number}
+      // {a:number} is supertype of {d:number, e:number, f:number}
       for (String property : properties.keySet()) {
         if (that.toMaybeRecordType().hasProperty(property) &&
             that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
                 getPropertyType(property))) {
           builder.addProperty(property, getPropertyType(property),
               getPropertyNode(property));
         }
       }
+    }
     return builder.build();
   }
