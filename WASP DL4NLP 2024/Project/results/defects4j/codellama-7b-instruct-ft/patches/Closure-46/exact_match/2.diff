diff --git a/tmp/659ae538-850a-41aa-b67f-29ae10466fa2_buggy.java b/tmp/8f383cb8-7856-47a0-8f7d-614ab5ed9065_fixed.java
index 46817a7..6daa5b7 100644
--- a/tmp/659ae538-850a-41aa-b67f-29ae10466fa2_buggy.java
+++ b/tmp/8f383cb8-7856-47a0-8f7d-614ab5ed9065_fixed.java
@@ -1,16 +1,47 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+    if (properties.isEmpty() && that.toMaybeRecordType().isEmpty()) {
+      return recordType;
+    } else if (that.toMaybeRecordType().isEmpty()) {
+      return this;
+    } else if (properties.isEmpty()) {
+      return that.toMaybeRecordType();
+    } else {
       RecordTypeBuilder builder = new RecordTypeBuilder(registry);
       for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
+        JSType thisType = getPropertyType(property);
+        JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+        if (thatType == null) {
+          builder.addProperty(property, thisType, getPropertyNode(property));
+        } else if (thisType.isEquivalentTo(thatType)) {
+          builder.addProperty(property, thisType, getPropertyNode(property));
+        } else if (thisType.isEquivalentTo(registry.getNativeType(JSTypeNative.NULL_TYPE))) {
+          builder.recordOptionalProperty(property);
+        } else {
+          builder.addProperty(
+              property,
+              registry.createUnionType(thisType, thatType),
+              getPropertyNode(property));
+        }
+      }
+      builder.addSubtypeOfProperty("d");
+      builder.addSubtypeOfProperty("f");
+      builder.addSubtypeOfProperty("g");
+      for (String property : that.toMaybeRecordType().getNonRecordProps()) {
+        JSType thisType = getPropertyType(property);
+        JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+        if (thisType.isEquivalentTo(thatType)) {
+          builder.addProperty(property, thisType);
+        } else {
+          builder.addProperty(
+              property,
+              registry.createUnionType(thisType, thatType),
               getPropertyNode(property));
         }
       }
       return builder.build();
     }
+  }
