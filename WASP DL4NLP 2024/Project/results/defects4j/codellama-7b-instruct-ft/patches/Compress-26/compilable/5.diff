diff --git a/tmp/557e6cfe-3fc1-475d-bc02-4607e2bdbca3_buggy.java b/tmp/1260b9b5-c87b-4642-935f-b5be58f96bf2_fixed.java
index 4b163f6..e90172d 100644
--- a/tmp/557e6cfe-3fc1-475d-bc02-4607e2bdbca3_buggy.java
+++ b/tmp/1260b9b5-c87b-4642-935f-b5be58f96bf2_fixed.java
@@ -1,28 +1,30 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
-                break;
-            }
+                available -= input.read(new byte[32768], 0, (int) numToSkip > 32768 ? 32768 : (int) numToSkip);
+                numToSkip -= available;
+            } else {
                 numToSkip -= skipped;
             }
+        }
             
-        return available - numToSkip;
+        return available;
     }
