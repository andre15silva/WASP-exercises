diff --git a/tmp/c0095e46-65bb-40c4-a33b-1e333cd74094_buggy.java b/tmp/9db88045-0614-4a94-b9d4-9098380377ce_fixed.java
index 4b163f6..46234f2 100644
--- a/tmp/c0095e46-65bb-40c4-a33b-1e333cd74094_buggy.java
+++ b/tmp/9db88045-0614-4a94-b9d4-9098380377ce_fixed.java
@@ -1,28 +1,40 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      * 
+     * <p>read() is considered more expensive than skip(), so we must
+     * use this as the last resort, when skip() methods have already
+     * failed us. If we find that other skip() method on the
+     * InputStream (from WrappedInputStream) are actually capable of
+     * skipping the bytes (i.e. the InputStrem is buffering), then we
+     * can skip the read() method.</p>
+     *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
-                break;
+                int count = 0;
+                int b;
+                while ((b = input.read()) >= 0 && count < available) {
+                    count++;
+                }
+                skipped = available - count;
             }
             numToSkip -= skipped;
         }
             
         return available - numToSkip;
     }
