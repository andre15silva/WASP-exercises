diff --git a/tmp/565e31bc-9571-4301-ae5d-fdf1d193db55_buggy.java b/tmp/0db4806c-36fe-4740-84d9-5885c9d9ce5a_fixed.java
index 4b163f6..1c5d423 100644
--- a/tmp/565e31bc-9571-4301-ae5d-fdf1d193db55_buggy.java
+++ b/tmp/0db4806c-36fe-4740-84d9-5885c9d9ce5a_fixed.java
@@ -1,28 +1,33 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
+     * <p>This method will stop skipping when it has reached the end of
+     * the input stream.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
-                break;
+                /*
+                 * Skip is not supported. This behaviour is mandated by the
+                 * InputStream interface. However, the caller knows whether or not
+                 * it can use skip on the input stream in question.
+                 */
+                skipped = skipUsingRead(input, numToSkip);
             }
             numToSkip -= skipped;
         }
             
         return available - numToSkip;
     }
