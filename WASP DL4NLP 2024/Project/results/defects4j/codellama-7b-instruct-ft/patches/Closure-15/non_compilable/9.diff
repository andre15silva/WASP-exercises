diff --git a/tmp/0f6e0271-7234-41f4-b222-0c7899e3f7d5_buggy.java b/tmp/63dc50f7-2cb1-4035-a69c-7c4278072bbe_fixed.java
index b56897c..c6d7f32 100644
--- a/tmp/0f6e0271-7234-41f4-b222-0c7899e3f7d5_buggy.java
+++ b/tmp/63dc50f7-2cb1-4035-a69c-7c4278072bbe_fixed.java
@@ -1,27 +1,48 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
+        if (n.isForIn()) {
+          // Check that all assigns to the left side is in the RHS
+          // If this check fails, then it is a FOR-IN loop
+          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && !c.isInLhs()) {
+              return true;
+            }
+          }
+          if (n.getChildCount() > 0 && !n.getFirstChild().isInLhs()) {
+            return true;
+          }
+        }
+        if (n.isSimpleFor()) {
+          // Check the assign to the loop iterator variable to be on the
+          // RHS of the FOR
+          for (Node c = n.getLastChild().getFirstChild(); c != null; c = c.getNext()) {
+            if (!c.isInLhs()) {
+              return true;
+            }
+          }
+        }
         return false;
       }
