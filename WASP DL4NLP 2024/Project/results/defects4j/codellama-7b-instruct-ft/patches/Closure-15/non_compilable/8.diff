diff --git a/tmp/3f42641f-6d03-4f04-8dfb-21e542ddff65_buggy.java b/tmp/e1c59863-c14f-41fb-9e42-16d3eef82caa_fixed.java
index b56897c..a266685 100644
--- a/tmp/3f42641f-6d03-4f04-8dfb-21e542ddff65_buggy.java
+++ b/tmp/e1c59863-c14f-41fb-9e42-16d3eef82caa_fixed.java
@@ -1,27 +1,48 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
+        // We don't know how to handle the for-in case if the left side
+        // affects the right side.  And this is likely never necessary.
+        //
+        // Note: this is not right now if we're not using a simple name
+        // on both sides.
+        if (n.isName()) {
+          String name = n.getString();
+          boolean isSimpleForIn =
+              n.getParent() != null &&
+              n.getParent().isForIn() &&
+              n.getParent().getFirstChild().isName() &&
+              n.getParent().getFirstChild().getString().equals(name) &&
+              (n.getNext() == null ||
+              (n.getNext().getType() == Token.FORIN &&
+               n.getNext().getFirstChild().getNext().getString().equals(
+                   name)));
+          if (isSimpleForIn) {
+            return false;
+          }
+        }
+
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
