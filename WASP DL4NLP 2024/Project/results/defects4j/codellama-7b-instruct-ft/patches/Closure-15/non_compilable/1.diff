diff --git a/tmp/42781a05-227c-42eb-97a3-7b7077406dcf_buggy.java b/tmp/8becdb5e-be55-42f2-9a19-390bd6301b5f_fixed.java
index b56897c..ded16b4 100644
--- a/tmp/42781a05-227c-42eb-97a3-7b7077406dcf_buggy.java
+++ b/tmp/8becdb5e-be55-42f2-9a19-390bd6301b5f_fixed.java
@@ -1,27 +1,36 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+            // We don't inline simple FOR IN expressions. Examples include
+            // a = x in a ? 2 : 3; or a = x in b ? 2 : 3;
+            //
+            // Note, that we don't even inline simple FOR IN statements. Examples
+            // include var a,b,x = a in b; print(2); x, or var a,b,x =
+            // a in b; delete a[b]; x.
+            if (n.isForIn()) {
+              return false;
+            }
             return true;
           }
         }
         return false;
       }
