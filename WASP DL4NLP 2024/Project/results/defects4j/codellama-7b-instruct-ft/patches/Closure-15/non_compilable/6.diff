diff --git a/tmp/ef323c97-8025-44c7-b1fd-36354b7e419c_buggy.java b/tmp/d5801b6b-c1c4-43dc-b75b-00d056cbb2e6_fixed.java
index b56897c..5630563 100644
--- a/tmp/ef323c97-8025-44c7-b1fd-36354b7e419c_buggy.java
+++ b/tmp/d5801b6b-c1c4-43dc-b75b-00d056cbb2e6_fixed.java
@@ -1,27 +1,55 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
+        if (n.isSimpleForIn()) {
+          for (Node c = n.getFirstChild().getFirstChild(); c != null; c = c.getNext()) {
+            if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
+              if (c.isVar() || c.isAssign()) {
+                for (Node child = c.getFirstChild(); child != null; child = child.getNext()) {
+                  // A name in an assignment is a dependent variable
+                  if (child != null && child.isName()) {
+                    // Not all variables are being written.
+                    if (c.isAssign()) {
+                      Node lhs = c.getFirstChild().getNext().getNext().getFirstChild();
+                      if (lhs != null && lhs.isName() && !lhs.isVar()) {
+                        return true;
+                      }
+                    }
+                    break;
+                  }
+                }
+              }
+            } else {
+              for (Node child = c.getFirstChild(); child != null; child = child.getNext()) {
+                // An expression that evaluates to a dependent variable.
+                if (child != null && child.isName()) {
+                  return true;
+                }
+              }
+            }
+          }
+        }
         return false;
       }
