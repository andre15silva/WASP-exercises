diff --git a/tmp/397c9aa9-3d64-46e2-a8d8-05b581235b8f_buggy.java b/tmp/19a01c23-ff60-4498-8549-2f02e8a466b7_fixed.java
index 01967cc..e53eddd 100644
--- a/tmp/397c9aa9-3d64-46e2-a8d8-05b581235b8f_buggy.java
+++ b/tmp/19a01c23-ff60-4498-8549-2f02e8a466b7_fixed.java
@@ -1,35 +1,41 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
          * use typing; that is both due to them being concrete and final,
          * and since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
+                // 02-May-2012, tatu: [Issue#758] Arrays, which have final 'Object[]'
+                //   class but still require deserialization, have to use types
+                //   so it's better to assume that they won't use typed (sub)factories
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
 //                return t.isJavaLangObject() || 
                 return (t.getRawClass() == Object.class)
                         || (!t.isConcrete()
                                 // [databind#88] Should not apply to JSON tree models:
                         || TreeNode.class.isAssignableFrom(t.getRawClass()));
 
             case NON_FINAL:
+                // 02-May-2012, tatu: [Issue#758] Arrays are considered non-final
+                //  but won't handle types unless actually declared as subtypes.
+                //   so skip out of here
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // [Issue#88] Should not apply to JSON tree models:
                 return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
             default:
             //case JAVA_LANG_OBJECT:
 //                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
