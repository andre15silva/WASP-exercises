diff --git a/tmp/5d1487be-017c-4649-bf2f-80e6d82ff103_buggy.java b/tmp/baa521cc-d4fa-4b71-9efe-59e7ed520fc9_fixed.java
index 7116384..6edd348 100644
--- a/tmp/5d1487be-017c-4649-bf2f-80e6d82ff103_buggy.java
+++ b/tmp/baa521cc-d4fa-4b71-9efe-59e7ed520fc9_fixed.java
@@ -1,39 +1,50 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
+        /* If count equals bitsCachedSize we need to handle the case where the
+         * left-shift would result in an overflow, even if the left-bit
+         * position is in the first byte of the long. The mask will be equal to 0,
+         * and the next byte read is simply added to the masked value of the
+         * current value without modification. A zero is returned, however,
+         * if the byte which triggered the overflow is 0xff.
+         */
+            if (bitsCachedSize == 63) {
+                if ((bytesCached >>> ((Long.SIZE-1-(count-1)) % 8)) == 0xFFl) {
+                    bitsCached <<= 8;
+                    bitsCached |= in.read();
+                }
+            }
         final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsOut = (bitsCached & MASKS[count]);
                 bitsCached >>>= count;
             } else {
                 bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
             }
             bitsCachedSize -= count;
         return bitsOut;
     }
