diff --git a/tmp/f04995b8-fe62-4fac-83c6-0946ca5c6c90_buggy.java b/tmp/fa6c7b84-eae2-4b69-ab44-2ccc28da2132_fixed.java
index 4b7e1e4..86ddaa9 100644
--- a/tmp/f04995b8-fe62-4fac-83c6-0946ca5c6c90_buggy.java
+++ b/tmp/fa6c7b84-eae2-4b69-ab44-2ccc28da2132_fixed.java
@@ -1,52 +1,54 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
-            int read = 0;
             while((ch = i.read()) != -1) {
-                read++;
                 if (ch == ' '){
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
-                        read++;
                         if (ch == '='){ // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
-                            final int restLen = len - read;
+                            final int restLen = len - coll.size();
                             if (restLen == 1) { // only NL
                                 headers.remove(keyword);
                             } else {
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
+                } else if (ch == '\n') {
+                    // drop to next header and ignore blank headers
+                    len = 0;
+                    coll.reset();
+                    continue;
                 }
                 len *= 10;
                 len += ch - '0';
             }
             if (ch == -1){ // EOF
                 break;
             }
         }
         return headers;
     }
