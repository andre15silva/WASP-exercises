diff --git a/tmp/dc05a68d-c717-4b89-963c-e939e5e8a0ba_buggy.java b/tmp/1e7be1fb-c870-4dd1-9a94-7d2ef8173753_fixed.java
index e087f95..2721c43 100644
--- a/tmp/dc05a68d-c717-4b89-963c-e939e5e8a0ba_buggy.java
+++ b/tmp/1e7be1fb-c870-4dd1-9a94-7d2ef8173753_fixed.java
@@ -1,53 +1,56 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
+     * The buffer must contain a trailing {@code ' '} or
+     * {@code NUL},
+     * and may contain an additional trailing {@code ' '} or
+     * {@code NUL}.
      *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
+     * The input buffer is allowed to contain all {@code NUL}s,
+     * in which case the method returns
+     * {@code 0L} (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing {@code ' '} or
+     *                  {@code NUL} is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
 
         for (int i = start; i < end; i++){
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+            if (currentByte == ' ' || currentByte == '0') {
                 if (stillPadding) {
                    continue;
             }
-                if (currentByte == (byte) ' ') {
+                if (currentByte == ' ') {
                 break;
                 }
             }
 
         // Must have trailing NUL or space
         // May have additional NUL or space
 
             stillPadding = false;
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
