diff --git a/tmp/79f7743c-d9ac-4b7b-b652-b00024bf8941_buggy.java b/tmp/27b60fb8-b0d7-4383-bce3-83ec41118f7f_fixed.java
index 2d9cf24..f35eabd 100644
--- a/tmp/79f7743c-d9ac-4b7b-b652-b00024bf8941_buggy.java
+++ b/tmp/27b60fb8-b0d7-4383-bce3-83ec41118f7f_fixed.java
@@ -1,33 +1,60 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
         String full = raw.getName();
 
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
             if (full.startsWith(PREFIX_STRING)) {
                 for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
                             // ditto for "FileSystemXmlApplicationContext": block all ApplicationContexts
                             || "AbstractApplicationContext".equals(name)) {
                         break main_check;
                     }
                 }
             }
+            // [databind#1872]: JDK has some generic types that have arrays... not sure what to do here!
+//            } else if (ctxt.isEnabled(DeserializationConfig.Feature.READ_UNKNOWN_EXCEPTION_TYPE_PROPERTIES)) {
+//                DeserializationConfig.Feature.READ_UNKNOWN_EXCEPTION_TYPE_PROPERTIES
+            } else if (false && (full.startsWith(PREFIX_LIST) || full.startsWith(PREFIX_ARRAY))) {
+                // 18-Dec-2017, tatu: There are more nasty JDK types to check, for example:
+                //
+                //     List[Authority> as an array type, or
+                //     List[Authority] as List<Authority>
+                //
+                // [databind#1888]: We get this problem only when non-final types are resolved to be non-final.
+                // So if we don't allow some JDK types, we just avoid that problem (mostly; problem with
+                // `java.util.ArrayList` and `org.springframework.security.core.Authentication[]`,
+                // still there)
+                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+                    String name = cls.getSimpleName();
+                    if (name.startsWith("Security")) { // "SecurityContext"
+                        String superName = cls.getSuperclass()
+                                .getSimpleName();
+                        if (superName.startsWith("Abstract")
+                                && "Authentication".equals(superName.substring(1))) {
+                            break main_check;
+                        }
+                    } else if ("ArrayList".equals(name) || "SecurityContextImpl".equals(name)) {
+                        break main_check;
+                    }
+                }
+            }
             return;
         } while (false);
 
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
