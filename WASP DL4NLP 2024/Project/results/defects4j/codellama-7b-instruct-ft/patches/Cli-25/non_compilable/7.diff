diff --git a/tmp/0be82584-e30c-4c6a-b80a-b3657b883b7b_buggy.java b/tmp/15d6d81d-b6c4-48cc-9d9c-8321458f3a48_fixed.java
index 875b31b..76fac0c 100644
--- a/tmp/0be82584-e30c-4c6a-b80a-b3657b883b7b_buggy.java
+++ b/tmp/15d6d81d-b6c4-48cc-9d9c-8321458f3a48_fixed.java
@@ -1,54 +1,78 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
+        //Long lines need special handling as a single line might start an argument description
+        //and also need continuations
+        if (text.length() > width*2 && !lineNeedsIndent(text,width))
+        {
+            while (true)
+            {
+                text = padding + text.substring(pos).trim();
+                pos = findWrapPos(text, width, 0);
+
+                if (pos == -1)
+                {
+                    sb.append(text);
+
+                    return sb;
+                }
+                
+                if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+                {
+                    pos = width;
+                }
+
+                sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            }
+        }
         while (true)
         {
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
             
             if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
                 pos = width;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
