diff --git a/tmp/4a13f3c2-2803-40e5-acd1-93360546b500_buggy.java b/tmp/570a40b3-ccf8-40aa-89cb-5c667abb3fad_fixed.java
index bf9bb88..4bb6534 100644
--- a/tmp/4a13f3c2-2803-40e5-acd1-93360546b500_buggy.java
+++ b/tmp/570a40b3-ccf8-40aa-89cb-5c667abb3fad_fixed.java
@@ -1,108 +1,164 @@
   /**
    * Computes the follow() node of a given node and its parent. There is a side
    * effect when calling this function. If this function computed an edge that
    * exists a FINALLY, it'll attempt to connect the fromNode to the outer
    * FINALLY according to the finallyMap.
    *
    * @param fromNode The original source node since {@code node} is changed
    *        during recursion.
    * @param node The node that follow() should compute.
    */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
      * This is the case where:
      *
      * 1. Parent is null implies that we are transferring control to the end of
      * the script.
      *
      * 2. Parent is a function implies that we are transferring control back to
      * the caller of the function.
      *
      * 3. If the node is a return statement, we should also transfer control
      * back to the caller of the function.
      *
      * 4. If the node is root then we have reached the end of what we have been
      * asked to traverse.
      *
      * In all cases we should transfer control to a "symbolic return" node.
      * This will make life easier for DFAs.
      */
     Node parent = node.getParent();
     if (parent == null || parent.isFunction() ||
         (cfa != null && node == cfa.root)) {
       return null;
     }
 
     // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
       // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
         return computeFollowNode(fromNode, parent, cfa);
       case Token.CASE:
       case Token.DEFAULT_CASE:
         // After the body of a CASE, the control goes to the body of the next
         // case, without having to go to the case condition.
         if (parent.getNext() != null) {
           if (parent.getNext().isCase()) {
             return parent.getNext().getFirstChild().getNext();
           } else if (parent.getNext().isDefaultCase()) {
             return parent.getNext().getFirstChild();
           } else {
             Preconditions.checkState(false, "Not reachable");
           }
         } else {
           return computeFollowNode(fromNode, parent, cfa);
         }
         break;
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
           return parent;
         } else {
           return parent.getFirstChild().getNext().getNext();
         }
       case Token.WHILE:
       case Token.DO:
         return parent;
       case Token.TRY:
         // If we are coming out of the TRY block...
         if (parent.getFirstChild() == node) {
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
             return computeFallThrough(parent.getLastChild());
           } else { // and have no FINALLY.
             return computeFollowNode(fromNode, parent, cfa);
           }
         // CATCH block.
         } else if (NodeUtil.getCatchBlock(parent) == node){
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
             return computeFallThrough(node.getNext());
           } else {
             return computeFollowNode(fromNode, parent, cfa);
           }
         // If we are coming out of the FINALLY block...
         } else if (parent.getLastChild() == node){
           if (cfa != null) {
             for (Node finallyNode : cfa.finallyMap.get(parent)) {
               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
             }
           }
           return computeFollowNode(fromNode, parent, cfa);
         }
     }
+    /* An important case that is not always handled.
+     * There is a node in the hierarchy similar to foo_bar_baz(), e.g. foo_bar_baz;
+     * then:
+     *
+     *    foo_bar_baz(); (this is the parent of node)
+     *      var yvar2 = 2222;  (this is the break node)
+     *      var xvar1 = 0;  (no break)
+     *      foo_baz();  (break, and is in the parent);
+     *      break;  (the 'break' is deep in the hierarchy and
+     *               it is in same type of the parent of the break.
+     *               So, it cannot be easily discovered. The case above
+     *               is one such case, and it seems that almost everything is
+     *               this type.)
+     *      var yvar1 = 1234;  (no break).
+     *    }
+     *  }
+     *
+     * The break in the line marked 'break' in the tree is a tricky one because of
+     * the break statement deep within the node hierarchy; In particular, this line is
+     * deep nested. This case was discovered while running the control flow analysis
+     * for the below script. In this script, it would throw an ArrayOutOfBoundsException
+     * which was not observed in Firefox. This bug will take more detailed analysis
+     * to further test. One of the reasons for this is that the JIT is more aggressive
+     * about inlining methods that are too costly to inline.
+     *
+     *   function foo_bar() {
+     *     foo_bar_baz();
+     *   }
+     *
+     *   function foo_baz() {
+     *     foo_bar_baz();
+     *   }
+     *
+     *   function foo_bar_baz() {
+     *     for (var i = 0; i < 100; ++i) {
+     *       if (i == 42) {
+     *         break;
+     *       }
+     *     }
+     *   }
+     *
+     *   function foo() {
+     *     foo_bar();
+     *   }
+     *
+     *   foo();
+     *
+     * One of such example in the code is marked by 'break'
+     */
+    if (NodeUtil.isBreakCatchFinally(node) && !NodeUtil.isImmediateBreak(node)) {
+      Node sibling = node.getNext();
+      while (sibling != null && !NodeUtil.isImmediateBreak(sibling)) {
+        sibling = sibling.getNext();
+      }
+      return computeFollowNode(fromNode, sibling, cfa);
+    }
 
     // Now that we are done with the special cases follow should be its
     // immediate sibling, unless its sibling is a function
     Node nextSibling = node.getNext();
 
     // Skip function declarations because control doesn't get pass into it.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
       return computeFallThrough(nextSibling);
     } else {
       // If there are no more siblings, control is transferred up the AST.
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
