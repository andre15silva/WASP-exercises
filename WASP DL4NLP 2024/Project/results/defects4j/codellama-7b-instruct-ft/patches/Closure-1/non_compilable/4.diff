diff --git a/tmp/797e3c6b-543d-4ca6-ad12-09b85bcdd381_buggy.java b/tmp/f3aed483-ba02-498a-9d0d-d32c6c532bb4_fixed.java
index 61ffdbf..4864796 100644
--- a/tmp/797e3c6b-543d-4ca6-ad12-09b85bcdd381_buggy.java
+++ b/tmp/f3aed483-ba02-498a-9d0d-d32c6c532bb4_fixed.java
@@ -1,44 +1,47 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
+    // Function.prototype.length. In debug mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
+    if (!compiler.getDebugOptions().removeUnusedArguments
+      || compiler.getOptions().compilationLevel.isSimpleMode()) {
       boolean modifyCallers = modifyCallSites
           && callSiteOptimizer.canModifyCallers(function);
       if (!modifyCallers) {
         // Strip unreferenced args off the end of the function declaration.
         Node lastArg;
         while ((lastArg = argList.getLastChild()) != null) {
           Var var = fnScope.getVar(lastArg.getString());
           if (!referenced.contains(var)) {
             argList.removeChild(lastArg);
             compiler.reportCodeChange();
           } else {
             break;
           }
         }
       } else {
         callSiteOptimizer.optimize(fnScope, referenced);
       }
     }
+  }
