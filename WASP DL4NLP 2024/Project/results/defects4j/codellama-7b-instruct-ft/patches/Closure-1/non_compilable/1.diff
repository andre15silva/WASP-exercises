diff --git a/tmp/58e2987f-d04a-45b6-b9f4-6d79034221ab_buggy.java b/tmp/f3e7a9f7-4133-47b7-9cb1-93be514404e8_fixed.java
index 61ffdbf..0243fb9 100644
--- a/tmp/58e2987f-d04a-45b6-b9f4-6d79034221ab_buggy.java
+++ b/tmp/f3e7a9f7-4133-47b7-9cb1-93be514404e8_fixed.java
@@ -1,44 +1,45 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
+    // Function.prototype.length. In advanced mode, we don't
+    // really care about this: we consider "length" the equivalent of
+    // reflecting on the function's lexical source.
     //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
+    // In simple mode, for now we don't fix "length".
+    // This test will have to pass:
     //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
+    // http://code.google.com/p/closure-compiler/issues/detail?id=253
+    if (DEBUG_FLAG > 2) {
       Node function = fnScope.getRootNode();
 
       Preconditions.checkState(function.isFunction());
       if (NodeUtil.isGetOrSetKey(function.getParent())) {
         // The parameters object literal setters can not be removed.
         return;
       }
 
       Node argList = getFunctionArgList(function);
       boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
       if (!modifyCallers) {
         // Strip unreferenced args off the end of the function declaration.
         Node lastArg;
         while ((lastArg = argList.getLastChild()) != null) {
           Var var = fnScope.getVar(lastArg.getString());
           if (!referenced.contains(var)) {
             argList.removeChild(lastArg);
             compiler.reportCodeChange();
           } else {
             break;
           }
         }
       } else {
         callSiteOptimizer.optimize(fnScope, referenced);
       }
     }
+  }
