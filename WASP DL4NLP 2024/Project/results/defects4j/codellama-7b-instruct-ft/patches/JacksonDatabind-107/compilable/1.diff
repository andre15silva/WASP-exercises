diff --git a/tmp/c4f988bd-092b-4625-9df0-f12787a4f6df_buggy.java b/tmp/982de75e-239f-48c3-8458-eb426063cc7e_fixed.java
index e8b3baa..3ca959d 100644
--- a/tmp/c4f988bd-092b-4625-9df0-f12787a4f6df_buggy.java
+++ b/tmp/982de75e-239f-48c3-8458-eb426063cc7e_fixed.java
@@ -1,54 +1,94 @@
     protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
     {
         JsonDeserializer<Object> deser = _deserializers.get(typeId);
         if (deser == null) {
             /* As per [databind#305], need to provide contextual info. But for
              * backwards compatibility, let's start by only supporting this
              * for base class, not via interface. Later on we can add this
              * to the interface, assuming deprecation at base class helps.
              */
             JavaType type = _idResolver.typeFromId(ctxt, typeId);
             if (type == null) {
                 // use the default impl if no type id available:
                 deser = _findDefaultImplDeserializer(ctxt);
                 if (deser == null) {
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId);
                     if (actual == null) { // what should this be taken to mean?
                         // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
                         return null;
                     }
                     // ... would this actually work?
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
                 }
             } else {
                 /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
                  *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
                 if ((_baseType != null)
                         && _baseType.getClass() == type.getClass()) {
                     /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                      *   but it appears to check that JavaType impl class is the same which is
                      *   important for some reason?
                      *   Disabling the check will break 2 Enum-related tests.
+                     * 1. com.fasterxml.jackson.databind.deser.filter.ProblemHandlerUnknownTypeId2221Test.testEmpty()
+                     *    fails because it can't convert List<?> as a parameter in the constructor of class Some
+                     *    because the raw type is 'java.lang.Object' - not sure why it wouldn't take a List<?>
+                     * 2. com.fasterxml.jackson.databind.deser.filter.ProblemHandlerUnknownTypeId2221Test.testList()
+                     *    fails because it can't find a suitable deserializer because the raw type is
+                     *    'java.lang.Object' in com.fasterxml.jackson.databind.ser.std.Util.constructArrayType()
+                     * 
+                     * I am assuming that the actual class we get here will have enough
+                     * information to build a valid container type. If not, they we'll get an exception
+                     * when we instantiate.
+                     * 
+                     * Ideally, we could do better sanity checks before hand...
+                     *  1. if we got a concrete container type (List), we can build parameterization (no ifaces)
+                     *  2. if we got a concrete non-container type (Map, etc), we can build parameterization
+                     *      or at least create an actual container type (raw)
+                     *
+                     *  We may still also handle it here by looking at actual value for the type id; if
+                     *  there are two types with same name, we may need to use a context-relative
+                     *  (localized) name when the value type is abstract / parameterized. And since
+                     *  there are no nested classes, can make this lookup by class name; and hence
+                     *  there are no ambiguities.
+                     */
+                    /* 
+                     * 
+                     * [databind#2244] and [databind#2255] are both
+                     * related to this; one related to contextual deserializer, 
+                     * this and the other to problem handler, in particular trying
+                     * to call problem handlers after some types have been resolved.
+                     *
+                     * I am going to add the DeserializationProblemHandler API
+                     * and impls in 2.9.0 (just need to decide on how to handle
+                     * callbacks). Note that it is not always safe
+                     * the exception from here (and generally problems that may
+                     * occur are rather fatal, including but not limited to,
+                     * failing to instantiate value types). But maybe it's worth
+                     * considering making this a callback of some sort...
+                     * (so that if it failed, we could continue working with
+                     * deserializers for the most commonly encountered types)
+                     */
+                    /*
+                     * 16-Feb-2017, tatu: Also need to check if we have "raw" parameterization;
+                     *     see JDK-8143390.
+                     *     If raw had parameterization, we probably need to reconstruct
+                     *     the sub-types.
                      */
-                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
-                    //   generic type with custom type resolvers. If so, should try to retain them.
-                    //  Whether this is sufficient to avoid problems remains to be seen, but for
-                    //  now it should improve things.
                     if (!type.hasGenericTypes()) {
                         type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
                     }
                 }
                 deser = ctxt.findContextualValueDeserializer(type, _property);
             }
             _deserializers.put(typeId, deser);
         }
         return deser;
     }
