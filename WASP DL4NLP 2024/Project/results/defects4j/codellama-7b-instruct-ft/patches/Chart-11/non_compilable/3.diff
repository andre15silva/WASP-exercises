diff --git a/tmp/3b677c68-3c1e-49a5-9dc8-6ff38d45a634_buggy.java b/tmp/be0984fb-cbae-4eaa-a160-520ad686cc17_fixed.java
index ad7255c..fe42475 100644
--- a/tmp/3b677c68-3c1e-49a5-9dc8-6ff38d45a634_buggy.java
+++ b/tmp/be0984fb-cbae-4eaa-a160-520ad686cc17_fixed.java
@@ -1,42 +1,42 @@
     /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
+     * Tests two paths for equality.  If both are <code>null</code> this
      * method returns <code>true</code>.
      *
      * @param p1  path 1 (<code>null</code> permitted).
      * @param p2  path 2 (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
-        if (p1.getWindingRule() != p2.getWindingRule()) {
+        if (p1.getCoordinateStreamCount() != p2.getCoordinateStreamCount()) {
             return false;
         }
-        PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        if (p1.getSegmentListCount() != p2.getSegmentListCount()) {
+            return false;
+        }
+        Iterator iter1 = p1.getCoordinateStreamIterator();
+        Iterator iter2 = p1.getCoordinateStreamIterator();
         double[] d1 = new double[6];
         double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
-                return false;
-            }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
-                return false;
-            }
-            if (!Arrays.equals(d1, d2)) {
-                return false;
-            }
-            iterator1.next();
-            iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
-        }
+        int i1 = iter1.next();
+        int i2 = iter2.next();
+        while (i1 == i2) {
+            if (i1 == GeneralPath.SEGMENT_CLOSE) {
                 return true;
             }
+            Path2D.Double pd1 = (Path2D.Double) i1;
+            Path2D.Double pd2 = (Path2D.Double) i2;
+            if (pd1.toString() != pd2.toString()) {
+                return false;
+            }
+            i1 = iter1.next();
+            i2 = iter2.next();
+        }
+        return false;
+    }
