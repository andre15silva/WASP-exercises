diff --git a/tmp/e802dc0b-4640-4596-9469-6f1d6394fced_buggy.java b/tmp/fa022b1a-0e87-46bc-b5ff-e64728b25f41_fixed.java
index ad7255c..9969697 100644
--- a/tmp/e802dc0b-4640-4596-9469-6f1d6394fced_buggy.java
+++ b/tmp/fa022b1a-0e87-46bc-b5ff-e64728b25f41_fixed.java
@@ -1,42 +1,40 @@
     /**
      * Tests two polygons for equality.  If both are <code>null</code> this
      * method returns <code>true</code>.
      *
      * @param p1  path 1 (<code>null</code> permitted).
      * @param p2  path 2 (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
+        if (!ShapeUtilities.areEqual(p1.getStartPoint(), p2.getStartPoint())) {
+            return false;
+        }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
         PathIterator iterator2 = p1.getPathIterator(null);
-        double[] d1 = new double[6];
-        double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
-                return false;
-            }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
-                return false;
-            }
-            if (!Arrays.equals(d1, d2)) {
-                return false;
-            }
+        GeneralPath tmp1 = new GeneralPath(p1);
+        GeneralPath tmp2 = new GeneralPath(p1);
+        while (!iterator1.isDone()) {
+            tmp1.moveTo(iterator1.currentSegment(
+                    new float[6]), iterator1.getCoordinateSequence());
+            tmp1.closePath();
             iterator1.next();
+        }
+        while (!iterator2.isDone()) {
+            tmp2.moveTo(iterator2.currentSegment(
+                    new float[6]), iterator2.getCoordinateSequence());
+            tmp2.closePath();
             iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
         }
-        return true;
+        return ShapeUtilities.equal(tmp1, tmp2);
     }
