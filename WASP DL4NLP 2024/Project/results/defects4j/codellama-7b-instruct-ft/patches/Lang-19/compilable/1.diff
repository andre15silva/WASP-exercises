diff --git a/tmp/96a4ec92-82cd-4bbc-8503-21902cbd2ba9_buggy.java b/tmp/e84d2acc-6b6c-47ec-9d6c-ca9d418f75f6_fixed.java
index 72a422c..22030e0 100644
--- a/tmp/96a4ec92-82cd-4bbc-8503-21902cbd2ba9_buggy.java
+++ b/tmp/e84d2acc-6b6c-47ec-9d6c-ca9d418f75f6_fixed.java
@@ -1,51 +1,51 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Note that this supports character codes without a ; on the end
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
                 // Check there's more than just an x after the &#
+                if(start < seqEnd) firstChar = input.charAt(start);
+                // Check there's nothing after the &#x (i.e. there's nothing to end the &#x)
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
+            if(input.charAt(end) != ';')
+            {
                 while(input.charAt(end) != ';')
                 {
                     end++;
                 }
+            }
 
             int entityValue;
-            try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
 
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
