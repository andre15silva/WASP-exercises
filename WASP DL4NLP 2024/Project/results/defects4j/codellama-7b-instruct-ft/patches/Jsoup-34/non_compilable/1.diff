diff --git a/tmp/a911ff1f-a0f4-4c3d-8cab-342415b610eb_buggy.java b/tmp/47a5c24e-d686-4766-a548-0888e5353660_fixed.java
index 21f64c6..cde5496 100644
--- a/tmp/a911ff1f-a0f4-4c3d-8cab-342415b610eb_buggy.java
+++ b/tmp/47a5c24e-d686-4766-a548-0888e5353660_fixed.java
@@ -1,23 +1,35 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+        char first = seq.charAt(0);
+        int lastStart = 0;
+        for (int offset = pos; offset < length; offset += lastStart) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (first != input[offset])
+                lastStart = Character.charCount(input[offset]);
+        }
+        for (int i = 0; lastStart + offset < length; offset += Character.charCount(input[offset])) {
+            first = seq.charAt(i);
+            i++;
+            int j = offset;
+            while (first != input[j] && j < length) {
+                j++;
+                lastStart = Character.charCount(input[j]);
+            }
+            if (j < length) {
+                int max = seq.length()-1 + offset;
+                while (i < max && seq.charAt(i) == input[j]) {
+                    i++;
+                    j += Character.charCount(input[j]);
+                }
+                if (i == max && seq.length() == (j - offset))
                     return offset - pos;
             }
         }
         return -1;
     }
