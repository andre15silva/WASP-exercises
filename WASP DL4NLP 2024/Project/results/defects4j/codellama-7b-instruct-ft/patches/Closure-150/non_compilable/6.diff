diff --git a/tmp/c9e9dd34-8d97-4c65-9574-113b149c9ffc_buggy.java b/tmp/37100089-4281-4cf7-84b0-ab37866c8fd6_fixed.java
index 800e6e1..b0b18d8 100644
--- a/tmp/c9e9dd34-8d97-4c65-9574-113b149c9ffc_buggy.java
+++ b/tmp/37100089-4281-4cf7-84b0-ab37866c8fd6_fixed.java
@@ -1,32 +1,50 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
+            if (!parent.getFirstChild().isQualifiedName()) {
               return;
             }
+            ObjectType goog =
+                (ObjectType)(findNameType("goog", lastLocalScope));
+            Node name = parent.getFirstChild();
+                // If parent is function in a namespace, add stub entry. The
+                // goog.foo type can be filled in by the type checker.
+                // TODO(arv): This should only be done for real namespaces in
+                // the user's program.
+                if (name.getNext().isFunction()) {
+                  String namespaceName = name.toQualifiedString();
+                  // Add to the stubs
+                  goog.getStubObject().declare(
+                      new QualifiedName(namespaceName, ImmutableList.<String>of()),
+                      null);
+                  scope.declare(new DeclaredReference(
+                      new QualifiedName(namespaceName), goog.getStubObject()));
+            }
+          }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
