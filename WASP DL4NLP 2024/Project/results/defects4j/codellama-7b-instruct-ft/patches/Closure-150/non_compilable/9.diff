diff --git a/tmp/9e577bed-5895-4a3a-8c5d-d982b07fdee8_buggy.java b/tmp/91fb60cf-2583-470c-88cb-ed5e6982c120_fixed.java
index 800e6e1..2628916 100644
--- a/tmp/9e577bed-5895-4a3a-8c5d-d982b07fdee8_buggy.java
+++ b/tmp/91fb60cf-2583-470c-88cb-ed5e6982c120_fixed.java
@@ -1,32 +1,49 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
+          // If a function is inside of a namespaced function stub, generate var
+          // for it so that it can be used in the stub.
+          if (NodeUtil.isFunctionStub(parent)) {
+            CompilerInput input = t.getCompiler().getInput(t.getInput().getRequestingModule());
+            if (input != null) {
+              ObjectType namespace = ObjectType.getObjectType(
+                  ((ObjectLiteralNode)parent.getLastChild()).getKey().getQualifiedName());
+              if (((ObjectLiteralNode) parent).getKey().getQualifiedName() == null) {
+                break;
+              }
+              Scope stubScope = ((ScriptNode) scope.getRootNode()).getStubScope();
+              if (stubScope != null) {
+                stubScope.defineSlot(n.getFirstChild().getString(), n.getJSDocInfo(),
+                    namespace, false);
+              }
+            }
             defineDeclaredFunction(n, parent);
+          }
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
