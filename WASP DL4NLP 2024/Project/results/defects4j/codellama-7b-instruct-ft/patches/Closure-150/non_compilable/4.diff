diff --git a/tmp/1aea3c77-5687-4045-b4de-24734e709758_buggy.java b/tmp/609687a6-e396-423c-a328-ba4060b1e53f_fixed.java
index 800e6e1..39d2b22 100644
--- a/tmp/1aea3c77-5687-4045-b4de-24734e709758_buggy.java
+++ b/tmp/609687a6-e396-423c-a328-ba4060b1e53f_fixed.java
@@ -1,32 +1,54 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
+          /* handle inline-annotated function expressions
+               i.e.
+           (function(){
+            var ns = {...
+              /** @param {string} bar */
+              foo: function(bar) {...
+             })();*/
+            Node qname = NodeUtil.getAncestorGoogDefine(n);
+            if (qname != null) {
+              ObjectType qnameType =
+                  (ObjectType) new TypeParser(qname.getQualifiedName()).buildType();
+              if (n.isFromExterns()) {
+                defineFunctionTypeInExterns(n, qnameType);
+              } else {
+                defineFunctionTypeInLocalScope(n, qnameType);
+              }
+              addLocalSymbolType(qname, qnameType);
+            } else {
               defineDeclaredFunction(n, parent);
+            }
+          } else {
+            defineDeclaredFunction(n, parent);
+          }
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
