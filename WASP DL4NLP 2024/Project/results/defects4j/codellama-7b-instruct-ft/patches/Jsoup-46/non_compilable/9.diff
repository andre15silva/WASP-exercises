diff --git a/tmp/a8d0cbed-c6d9-4a7f-8d21-6716ec8db129_buggy.java b/tmp/1025a2b3-f219-4d43-86f7-4196112f5de6_fixed.java
index 6b8185e..ab0c65c 100644
--- a/tmp/a8d0cbed-c6d9-4a7f-8d21-6716ec8db129_buggy.java
+++ b/tmp/1025a2b3-f219-4d43-86f7-4196112f5de6_fixed.java
@@ -1,77 +1,88 @@
     // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
     static void escape(StringBuilder accum, String string, Document.OutputSettings out,
                        boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
 
         boolean lastWasWhite = false;
         boolean reachedNonWhite = false;
         final EscapeMode escapeMode = out.escapeMode();
         final CharsetEncoder encoder = out.encoder();
         final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
         final Map<Character, String> map = escapeMode.getMap();
         final int length = string.length();
 
         int codePoint;
         for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
             codePoint = string.codePointAt(offset);
 
             if (normaliseWhite) {
                 if (StringUtil.isWhitespace(codePoint)) {
                     if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                         continue;
                     accum.append(' ');
                     lastWasWhite = true;
                     continue;
                 } else {
                     lastWasWhite = false;
                     reachedNonWhite = true;
                 }
             }
             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                 final char c = (char) codePoint;
                 // html specific and required escapes:
                 switch (c) {
                     case '&':
                         accum.append("&amp;");
                         break;
-                    case 0xA0:
+                    case 0xA0: // no-break space
                         if (escapeMode != EscapeMode.xhtml)
                             accum.append("&nbsp;");
                         else
                             accum.append(c);
                         break;
                     case '<':
                         if (!inAttribute)
                             accum.append("&lt;");
                         else
                             accum.append(c);
                         break;
                     case '>':
                         if (!inAttribute)
                             accum.append("&gt;");
                         else
                             accum.append(c);
                         break;
                     case '"':
                         if (inAttribute)
                             accum.append("&quot;");
                         else
                             accum.append(c);
                         break;
                     default:
                         if (canEncode(coreCharset, c, encoder))
                             accum.append(c);
                         else if (map.containsKey(c))
                             accum.append('&').append(map.get(c)).append(';');
                         else
                             accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
                 }
             } else {
+                // this is ugly: we're testing a hidden implementation detail to catch a bug
+                // where a supplementary encoded in Shift_JIS is invalid in ISO-8859-1.
+                // we assume that if this is the first supplementary char in a document, it's
+                //  - either the first in an encoded stream (no BOM for JIS in input source, so UTF-8 encoded)
+                //  - or from a JIS encoded page with BOM (inputStreamReader decodes to Shift_JIS).
+                // so we retry with Shift_JIS if using ISO-8859-1.
+                //
+                // see https://github.com/jhy/jsoup/issues/818
+                if (escapeMode == EscapeMode.xhtml && coreCharset == CoreCharset.ISO_8859_1
+                        && (codePoint > 0x8080 || string.codePointBefore(offset) > 0x00FF))
+                    coreCharset = CoreCharset.SHIFT_JIS;
                 final String c = new String(Character.toChars(codePoint));
                 if (encoder.canEncode(c)) // uses fallback encoder for simplicity
                     accum.append(c);
                 else
                     accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
             }
         }
     }
