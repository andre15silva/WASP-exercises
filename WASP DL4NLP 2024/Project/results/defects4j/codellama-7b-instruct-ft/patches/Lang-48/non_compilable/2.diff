diff --git a/tmp/72da5908-19ec-441a-872d-55d5fb32b887_buggy.java b/tmp/67878b62-fc6b-425f-9e0f-e88c089c452b_fixed.java
index 82bdfd4..2109bd3 100644
--- a/tmp/72da5908-19ec-441a-872d-55d5fb32b887_buggy.java
+++ b/tmp/67878b62-fc6b-425f-9e0f-e88c089c452b_fixed.java
@@ -1,51 +1,328 @@
     /**
      * <p>Test if two <code>Object</code>s are equal using their
      * <code>equals</code> method.</p>
      *
      * @param lhs  the left hand object
      * @param rhs  the right hand object
      * @return EqualsBuilder - used to chain calls.
      */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
         Class lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
                 // The simple case, not an array, just test the element
                 isEquals = lhs.equals(rhs);
         } else if (lhs.getClass() != rhs.getClass()) {
             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
             this.setEquals(false);
         }
         // 'Switch' on type of array, to dispatch to the correct handler
         // This handles multi dimensional arrays of the same depth
         else if (lhs instanceof long[]) {
             append((long[]) lhs, (long[]) rhs);
         } else if (lhs instanceof int[]) {
             append((int[]) lhs, (int[]) rhs);
         } else if (lhs instanceof short[]) {
             append((short[]) lhs, (short[]) rhs);
         } else if (lhs instanceof char[]) {
             append((char[]) lhs, (char[]) rhs);
         } else if (lhs instanceof byte[]) {
             append((byte[]) lhs, (byte[]) rhs);
         } else if (lhs instanceof double[]) {
             append((double[]) lhs, (double[]) rhs);
         } else if (lhs instanceof float[]) {
             append((float[]) lhs, (float[]) rhs);
         } else if (lhs instanceof boolean[]) {
             append((boolean[]) lhs, (boolean[]) rhs);
         } else {
             // Not an array of primitives
             append((Object[]) lhs, (Object[]) rhs);
         }
         return this;
     }
+    /**
+     * <p>Deep comparison method that treats two <code>long</code> arrays as SETS.</p>
+     *
+     * <p>This method will return <code>true</code> if the object are the same or if they
+     * have the same length and the elements are equal. </p>
+     *
+     * <pre>
+     * Arrays.equals(new long[] {1, 2, 3}, new long[] {1, 2, 3})  = true
+     * </pre>
+     *
+     * @param lhs  the left hand <code>long</code> array
+     * @param rhs  the right hand <code>long</code> array
+     * @return <code>true</code> if values are equal
+     */
+    public EqualsBuilder append(long[] lhs, long[] rhs) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == rhs) {
+            return this;
+        }
+        if (lhs == null || rhs == null) {
+            this.setEquals(false);
+            return this;
+        }
+        if (lhs.length != rhs.length) {
+            return this;
+        }
+        for (int i = 0; i < lhs.length; i++) {
+            append(lhs[i], rhs[i]);
+        }
+        return this;
+    }
+    /**
+     * <p>Deep comparison method that treats two <code>int</code> arrays as SETS.</p>
+     *
+     * <p>This method will return <code>true</code> if the object are the same or if they
+     * have the same length and the elements are equal. </p>
+     *
+     * <pre>
+     * Arrays.equals(new int[] {1, 2, 3}, new int[] {1, 2, 3})  = true
+     * </pre>
+     *
+     * @param lhs  the left hand <code>int</code> array
+     * @param rhs  the right hand <code>int</code> array
+     * @return <code>true</code> if values are equal
+     */
+    public EqualsBuilder append(int[] lhs, int[] rhs) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == rhs) {
+            return this;
+        }
+        if (lhs == null || rhs == null) {
+            this.setEquals(false);
+            return this;
+        }
+        if (lhs.length != rhs.length) {
+            return this;
+        }
+        for (int i = 0; i < lhs.length; i++) {
+            append(lhs[i], rhs[i]);
+        }
+        return this;
+    }
+    /**
+     * <p>Deep comparison method that treats two <code>short</code> arrays as SETS.</p>
+     *
+     * <p>This method will return <code>true</code> if the object are the same or if they
+     * have the same length and the elements are equal. </p>
+     *
+     * <pre>
+     * Arrays.equals(new short[] {1, 2, 3}, new short[] {1, 2, 3})  = true
+     * </pre>
+     *
+     * @param lhs  the left hand <code>short</code> array
+     * @param rhs  the right hand <code>short</code> array
+     * @return <code>true</code> if values are equal
+     */
+    public EqualsBuilder append(short[] lhs, short[] rhs) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == rhs) {
+            return this;
+        }
+        if (lhs == null || rhs == null) {
+            this.setEquals(false);
+            return this;
+        }
+        if (lhs.length != rhs.length) {
+            return this;
+        }
+        for (int i = 0; i < lhs.length; i++) {
+            append(lhs[i], rhs[i]);
+        }
+        return this;
+    }
+    /**
+     * <p>Deep comparison method that treats two <code>char</code> arrays as SETS.</p>
+     *
+     * <p>This method will return <code>true</code> if the object are the same or if they
+     * have the same length and the elements are equal. </p>
+     *
+     * <pre>
+     * Arrays.equals(new char[] {1, 2, 3}, new char[] {1, 2, 3})  = true
+     * </pre>
+     *
+     * @param lhs  the left hand <code>char</code> array
+     * @param rhs  the right hand <code>char</code> array
+     * @return <code>true</code> if values are equal
+     */
+    public EqualsBuilder append(char[] lhs, char[] rhs) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == rhs) {
+            return this;
+        }
+        if (lhs == null || rhs == null) {
+            this.setEquals(false);
+            return this;
+        }
+        if (lhs.length != rhs.length) {
+            return this;
+        }
+        for (int i = 0; i < lhs.length; i++) {
+            append(lhs[i], rhs[i]);
+        }
+        return this;
+    }
+    /**
+     * <p>Deep comparison method that treats two <code>byte</code> arrays as SETS.</p>
+     *
+     * <p>This method will return <code>true</code> if the object are the same or if they
+     * have the same length and the elements are equal.</p>
+     *
+     * @param lhs  the left hand <code>byte</code> array
+     * @param rhs  the right hand <code>byte</code> array
+     * @return <code>true</code> if values are equal
+     */
+    public EqualsBuilder append(byte[] lhs, byte[] rhs) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == rhs) {
+            return this;
+        }
+        if (lhs == null || rhs == null) {
+            this.setEquals(false);
+            return this;
+        }
+        if (lhs.length != rhs.length) {
+            return this;
+        }
+        for (int i = 0; i < lhs.length; i++) {
+            append(lhs[i], rhs[i]);
+        }
+        return this;
+    }
+    /**
+     * <p>Deep comparison method that treats two <code>double</code> arrays as SETS.</p>
+     *
+     * <p>This method will return <code>true</code> if the object are the same or if they
+     * contain the same elements.</p>
+     *
+     * @param lhs  the left hand <code>double</code> array
+     * @param rhs  the right hand <code>double</code> array
+     * @return <code>true</code> if values are equal or arrays are equal
+     */
+    public EqualsBuilder append(double[] lhs, double[] rhs) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == rhs) {
+            return this;
+        }
+        if (lhs == null || rhs == null) {
+            this.setEquals(false);
+            return this;
+        }
+        if (lhs.length != rhs.length) {
+            return this;
+        }
+        for (int i = 0; i < lhs.length; i++) {
+            append(lhs[i], rhs[i]);
+        }
+        return this;
+    }
+    /**
+     * <p>Deep comparison method that treats two <code>float</code> arrays as SETS.</p>
+     *
+     * <p>This method will return <code>true</code> if the object are the same or if they
+     * contain the same elements.</p>
+     *
+     * @param lhs  the left hand <code>float</code> array
+     * @param rhs  the right hand <code>float</code> array
+     * @return <code>true</code> if values are equal or arrays are equal
+     */
+    public EqualsBuilder append(float[] lhs, float[] rhs) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == rhs) {
+            return this;
+        }
+        if (lhs == null || rhs == null) {
+            this.setEquals(false);
+            return this;
+        }
+        if (lhs.length != rhs.length) {
+            return this;
+        }
+        for (int i = 0; i < lhs.length; i++) {
+            append(lhs[i], rhs[i]);
+        }
+        return this;
+    }
+    /**
+     * <p>Deep comparison method that treats two <code>boolean</code> arrays as SETS.</p>
+     *
+     * <p>This method will return <code>true</code> if the object are the same or if they
+     * contain the same elements.</p>
+     *
+     * @param lhs  the left hand <code>boolean</code> array
+     * @param rhs  the right hand <code>boolean</code> array
+     * @return <code>true</code> if values are equal or arrays are equal
+     */
+    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == rhs) {
+            return this;
+        }
+        if (lhs == null || rhs == null) {
+            this.setEquals(false);
+            return this;
+        }
+        if (lhs.length != rhs.length) {
+            return this;
+        }
+        for (int i = 0; i < lhs.length; i++) {
+            append(lhs[i], rhs[i]);
+        }
+        return this;
+    }
+    /**
+     * <p>Deep comparison method that treats two <code>Object</code> arrays as SETS.</p>
+     *
+     * <p>This method will return <code>true</code> if the object are the same or if they
+     * contain the same objects.</p>
+     *
+     * @param lhs  the left hand <code>Object</code> array
+     * @param rhs  the right hand <code>Object</code> array
+     * @return <code>true</code> if values are equal or arrays are equal
+     */
+    public EqualsBuilder append(Object[] lhs, Object[] rhs) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == rhs) {
+            return this;
+        }
+        if (lhs == null || rhs == null) {
+            this.setEquals(false);
+            return this;
+        }
+        if (lhs.length != rhs.length) {
+            return this;
+        }
+        for (int i = 0; i < lhs.length; i++) {
+            append(lhs[i], rhs[i]);
+        }
+        return this;
+    }
