diff --git a/tmp/a21b86b2-318c-4021-bc0b-dbf12b33cbef_buggy.java b/tmp/c3e8a5b1-ff25-41bf-9030-bc1a31e49d81_fixed.java
index 82bdfd4..5fc7607 100644
--- a/tmp/a21b86b2-318c-4021-bc0b-dbf12b33cbef_buggy.java
+++ b/tmp/c3e8a5b1-ff25-41bf-9030-bc1a31e49d81_fixed.java
@@ -1,51 +1,69 @@
     /**
      * <p>Test if two <code>Object</code>s are equal using their
      * <code>equals</code> method.</p>
      *
      * @param lhs  the left hand object
      * @param rhs  the right hand object
      * @return EqualsBuilder - used to chain calls.
      */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
         Class lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
                 // The simple case, not an array, just test the element
+            if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {
+                    /*
+                     * There is hashcode collision happening here sometimes.
+                     * For example, if o1.equals(o2) is true, then o1.hashCode()==o2.hashCode()
+                     * is true as well. However, sometimes when the hashcode are the same, these
+                     * two objects are not equal. 
+                     * See the following example:
+                     * o1.equals(o2): true
+                     * o1.hashCode()==o2.hashCode(): true
+                     * o1.toString().equals(o2.toString()): false
+                     */
+                if (lhs.toString().equals(rhs.toString())) {
+                    this.setEquals(true);
+                } else {
+                    this.setEquals(false);
+                }
+            } else {
                 isEquals = lhs.equals(rhs);
+            }
         } else if (lhs.getClass() != rhs.getClass()) {
             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
             this.setEquals(false);
         }
         // 'Switch' on type of array, to dispatch to the correct handler
         // This handles multi dimensional arrays of the same depth
         else if (lhs instanceof long[]) {
             append((long[]) lhs, (long[]) rhs);
         } else if (lhs instanceof int[]) {
             append((int[]) lhs, (int[]) rhs);
         } else if (lhs instanceof short[]) {
             append((short[]) lhs, (short[]) rhs);
         } else if (lhs instanceof char[]) {
             append((char[]) lhs, (char[]) rhs);
         } else if (lhs instanceof byte[]) {
             append((byte[]) lhs, (byte[]) rhs);
         } else if (lhs instanceof double[]) {
             append((double[]) lhs, (double[]) rhs);
         } else if (lhs instanceof float[]) {
             append((float[]) lhs, (float[]) rhs);
         } else if (lhs instanceof boolean[]) {
             append((boolean[]) lhs, (boolean[]) rhs);
         } else {
             // Not an array of primitives
             append((Object[]) lhs, (Object[]) rhs);
         }
         return this;
     }
