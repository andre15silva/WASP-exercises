diff --git a/tmp/a58aa391-f5c8-4c77-a69a-2343359a8b75_buggy.java b/tmp/28d7cd29-5ab0-456e-97cb-6ded9ed75203_fixed.java
index 2955e62..c382c32 100644
--- a/tmp/a58aa391-f5c8-4c77-a69a-2343359a8b75_buggy.java
+++ b/tmp/28d7cd29-5ab0-456e-97cb-6ded9ed75203_fixed.java
@@ -1,66 +1,92 @@
     /**
      * @return true if the provided reference and declaration can be safely
      *         inlined according to our criteria
      */
     private boolean canInline(
         Reference declaration,
         Reference initialization,
         Reference reference) {
       if (!isValidDeclaration(declaration)
           || !isValidInitialization(initialization)
           || !isValidReference(reference)) {
         return false;
       }
 
       // If the value is read more than once, skip it.
       // VAR declarations and EXPR_RESULT don't need the value, but other
       // ASSIGN expressions parents do.
       if (declaration != initialization &&
           !initialization.getGrandparent().isExprResult()) {
         return false;
       }
 
       // Be very conservative and do no cross control structures or
       // scope boundaries
       if (declaration.getBasicBlock() != initialization.getBasicBlock()
           || declaration.getBasicBlock() != reference.getBasicBlock()) {
         return false;
       }
 
       // Do not inline into a call node. This would change
       // the context in which it was being called. For example,
       //   var a = b.c;
       //   a();
       // should not be inlined, because it calls a in the context of b
       // rather than the context of the window.
       //   var a = b.c;
       //   f(a)
       // is ok.
       Node value = initialization.getAssignedValue();
       Preconditions.checkState(value != null);
       if (value.isGetProp()
           && reference.getParent().isCall()
           && reference.getParent().getFirstChild() == reference.getNode()) {
         return false;
       }
 
       if (value.isFunction()) {
         Node callNode = reference.getParent();
         if (reference.getParent().isCall()) {
           CodingConvention convention = compiler.getCodingConvention();
           // Bug 2388531: Don't inline subclass definitions into class defining
           // calls as this confused class removing logic.
           SubclassRelationship relationship =
               convention.getClassesDefinedByCall(callNode);
           if (relationship != null) {
             return false;
           }
 
           // issue 668: Don't inline singleton getter methods
           // calls as this confused class removing logic.
+          if (compiler.options().advanced
+              && compiler.getOptions().warningLevel >= DiagnosticGroups.STRICT_MODE_ONLY
+              && value.isGetProp()) {
+            // Only check for calls to a Getter defined by goog.addSingletonGetter
+            final Node enclosingScopeRoot = NodeUtil.getEnclosingStatement(ReferenceMap.REFERENCE, value);
+            final ReferenceMap map = scope.getVarRef(
+                enclosingScopeRoot != null ? enclosingScopeRoot : value);
+            final Node callee = value.getFirstChild();
+            if (callee != null && callee.isEmpty()
+                && callee.isQualifiedName()
+                && map != null && map.isSingletonClass()) {
+              final String qname = callee.getQualifiedName();
+              if (qname != null && qname.contains(".prototype.")) {
+                final String methodName =
+                    qname.substring(qname.lastIndexOf(".prototype.") + 10);
+                // issue 871: Be more specific about goog.addSingletonGetter
+                // calls that can be inlined.
+                final Boolean isSingletonGetter =
+                    ClosureRewriteClass.getInstance().isSingletonGetter(
+                        qname, methodName, false);
+                if (isSingletonGetter != null && isSingletonGetter) {
+                  return false;
+                }
+              }
+            }
+          }
         }
       }
 
       return canMoveAggressively(value) ||
           canMoveModerately(initialization, reference);
     }
