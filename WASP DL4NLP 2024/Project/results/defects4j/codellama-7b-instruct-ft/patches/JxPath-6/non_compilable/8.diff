diff --git a/tmp/ba450a3c-e482-4097-8630-69f3f425aa53_buggy.java b/tmp/31a6dbb4-3c9f-4f0a-98ed-2e6d4a67c390_fixed.java
index f650982..2efd323 100644
--- a/tmp/ba450a3c-e482-4097-8630-69f3f425aa53_buggy.java
+++ b/tmp/31a6dbb4-3c9f-4f0a-98ed-2e6d4a67c390_fixed.java
@@ -1,42 +1,52 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
-        if (l instanceof InitialContext || l instanceof SelfContext) {
+        if (l instanceof SelfContext) {
+            EvalContext eval = (EvalContext) l;
             l = ((EvalContext) l).getSingleNodePointer();
+        } else if (l instanceof InitialContext) {
+            l = ((EvalContext) l).getSingleNodePointer();
+        } else if (l instanceof Variable) {
+            l = XPathWrapper.evaluateExpression((Variable) l, context);
         }
 
-        if (r instanceof InitialContext || r instanceof SelfContext) {
+        if (r instanceof SelfContext) {
+            EvalContext eval = (EvalContext) r;
             r = ((EvalContext) r).getSingleNodePointer();
+        } else if (r instanceof InitialContext) {
+            r = ((EvalContext) r).getSingleNodePointer();
+        } else if (r instanceof Variable) {
+            r = XPathWrapper.evaluateExpression((Variable) r, context);
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
