diff --git a/tmp/69fdd827-40c0-4962-9b7f-d4f9d59972ad_buggy.java b/tmp/447cae21-e163-470a-87ac-a8ba5a2afd17_fixed.java
index ef65dd9..9964dc4 100644
--- a/tmp/69fdd827-40c0-4962-9b7f-d4f9d59972ad_buggy.java
+++ b/tmp/447cae21-e163-470a-87ac-a8ba5a2afd17_fixed.java
@@ -1,92 +1,114 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
+    int joinLen = joinString.length();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem)) {
+      if (NodeUtil.isImmutableValue(elem) && !elem.isString() &&
+          // We only replace the optimization for the current string as the
+          // optimized version is only beneficial for strings of equal length.
+          !elem.isNumber() && !elem.isBoolean()) {
+        Node newNode = elem.cloneTree();
+        compiler.reportCodeChange();
+        newNode.setType(Token.STRING);
+        newNode.setToken(arrayFoldedChildren.isEmpty() ? Token.EMPTY_STRING
+            : arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getType());
         if (sb.length() > 0) {
           sb.append(joinString);
         }
-        sb.append(NodeUtil.getStringValue(elem));
+        sb.append(NodeUtil.getStringValue(newNode));
+        arrayFoldedChildren.add(newNode);
+        elem = elem.getNext();
       } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
+        if ((sb.length() > 0) && (arrayFoldedChildren.size() == 0 ||
+            sb.length() + 1 + joinLen < arrayFoldedChildren.get(0).getString().length())) {
+          String s = sb.toString();
+          Node node = NodeUtil.newString(compiler, s);
+          compiler.reportCodeChange();
+          node = node.cloneTree();
+          node.setToken(arrayFoldedChildren.isEmpty() ? Token.EMPTY_STRING
+              : arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getType());
+          arrayFoldedChildren.add(node);
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
-      }
+        if (sb.length() == 0 || arrayFoldedChildren.size() == 0 ||
+            sb.length() + 1 + joinLen < arrayFoldedChildren.get(0).getString().length()) {
+          arrayFoldedChildren.add(elem.cloneTree());
+        } else {
+          sb.append(joinString);
           elem = elem.getNext();
         }
+      }
+    }
 
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
+      Node node = NodeUtil.newString(compiler, sb.toString());
+      node = node.cloneTree();
+      node.setToken(Token.EMPTY_STRING);
+      arrayFoldedChildren.add(node);
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
           }
           int kJoinOverhead = "[].join()".length();
           foldedSize += kJoinOverhead;
           foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
