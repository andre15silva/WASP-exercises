diff --git a/tmp/a5d142de-a9c6-4143-81f9-4370e3a2cc12_buggy.java b/tmp/1e5bc6ca-47ae-4172-949b-711bc61b6663_fixed.java
index 8ff679b..b520e7a 100644
--- a/tmp/a5d142de-a9c6-4143-81f9-4370e3a2cc12_buggy.java
+++ b/tmp/1e5bc6ca-47ae-4172-949b-711bc61b6663_fixed.java
@@ -1,39 +1,48 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    if (interfaceType.isProxyObject()) {
       ObjectType implicitProto = interfaceType.getImplicitPrototype();
       Set<String> currentPropertyNames;
         // This can be the case if interfaceType is proxy to a non-existent
         // object (which is a bad type annotation, but shouldn't crash).
+        if (implicitProto != null) {
         currentPropertyNames = implicitProto.getOwnPropertyNames();
+      }
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
           if (!interfaceType.getPropertyType(name).isEquivalentTo(
               oType.getPropertyType(name))) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
         currentProperties.put(name, interfaceType);
       }
       for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
         checkInterfaceConflictProperties(t, n, functionName, properties,
             currentProperties, iType);
       }
+    } else {
+      for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+        checkInterfaceConflictProperties(t, n, functionName, properties,
+            currentProperties, iType);
+      }
+    }
   }
