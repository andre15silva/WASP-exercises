diff --git a/tmp/b6cf63f1-ca07-4471-bc5b-29904b3f252f_buggy.java b/tmp/928d9ace-68ed-4a57-9549-33cbdfe6f43e_fixed.java
index 8ff679b..585fba5 100644
--- a/tmp/b6cf63f1-ca07-4471-bc5b-29904b3f252f_buggy.java
+++ b/tmp/928d9ace-68ed-4a57-9549-33cbdfe6f43e_fixed.java
@@ -1,39 +1,59 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
       // This can be the case if interfaceType is proxy to a non-existent
       // object (which is a bad type annotation, but shouldn't crash).
       currentPropertyNames = implicitProto.getOwnPropertyNames();
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+    // TODO(aravind): Find a way to do this without a hack using @extends.
+    // It's possible to construct an @interface{A,B} that extends "nonExistent1"
+    // and "nonExistent1". We should check (e.g. by checking the prototype
+    // chain).
+    if (interfaceType.getAnnotationType() != null) {
+      for (NamedType iType :
+          interfaceType.getAnnotationType().getExtendedInterfaces()) {
+        if (iType.getType().isUnknownType()) {
+          if (!iType.getJSType().isUnknownType()) {
+            compiler.report(t.makeError(iType.getNameNode(),
+                NON_STANDARD_JSDOC, "Bad type annotation.", iType.getName()));
+          }
+          else {
+            iType.getJSType().getDefiningTypeRegistry().
+                registerUnresolvedProperty(iType.getType(t).toString(),
+                    null, iType.getName());
+          }
+        }
+        else {
           checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
+              currentProperties, iType.getType(t));
+        }
+      }
     }
   }
