diff --git a/tmp/5d7a6123-a7ff-40a9-aecb-2dc15cf4b983_buggy.java b/tmp/1d2e6211-06f0-4e2b-a2f3-d678883398f5_fixed.java
index 07b0792..169c9a6 100644
--- a/tmp/5d7a6123-a7ff-40a9-aecb-2dc15cf4b983_buggy.java
+++ b/tmp/1d2e6211-06f0-4e2b-a2f3-d678883398f5_fixed.java
@@ -1,22 +1,32 @@
     /**
      * @return Whether the variable is only assigned a value once for its
      *     lifetime.
      */
     boolean isAssignedOnceInLifetime() {
       Reference ref = getOneAndOnlyAssignment();
       if (ref == null) {
         return false;
       }
 
       // Make sure this assignment is not in a loop.
       for (BasicBlock block = ref.getBasicBlock();
            block != null; block = block.getParent()) {
         if (block.isFunction) {
           break;
         } else if (block.isLoop) {
           return false;
         }
       }
 
+      // See http://code.google.com/p/closure-compiler/issues/detail?id=1053. If
+      // I understand that issue correctly, the assignment must be in a global
+      // scope to be "once in lifetime".
+      // TODO(tbreisacher): Remove this (and fix the bug to prevent the
+      // issue from regressing).
+      for (Reference.Container container : getContainingFunctions()) {
+        if (container.isGlobal() || container.isWindow()) {
           return true;
         }
+      }
+      return false;
+    }
