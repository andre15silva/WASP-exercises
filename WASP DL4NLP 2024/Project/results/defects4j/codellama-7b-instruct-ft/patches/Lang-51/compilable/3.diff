diff --git a/tmp/e5a25f8a-b498-4851-b089-ccd2e5b0690d_buggy.java b/tmp/7ce46959-5007-4e85-9ca4-ab5a4b1a9460_fixed.java
index 55b319a..f6504c7 100644
--- a/tmp/e5a25f8a-b498-4851-b089-ccd2e5b0690d_buggy.java
+++ b/tmp/7ce46959-5007-4e85-9ca4-ab5a4b1a9460_fixed.java
@@ -1,77 +1,109 @@
     /**
      * <p>Converts a String to a boolean (optimised for performance).</p>
      * 
      * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
      * (case insensitive) will return <code>true</code>. Otherwise,
      * <code>false</code> is returned.</p>
      * 
      * <p>This method performs 4 times faster (JDK1.4) than
      * <code>Boolean.valueOf(String)</code>. However, this method accepts
      * 'on' and 'yes' as true values.
      *
      * <pre>
      *   BooleanUtils.toBoolean(null)    = false
      *   BooleanUtils.toBoolean("true")  = true
-     *   BooleanUtils.toBoolean("TRUE")  = true
-     *   BooleanUtils.toBoolean("tRUe")  = true
+     *   BooleanUtils.toBoolean("")      = false
      *   BooleanUtils.toBoolean("on")    = true
+     *   BooleanUtils.toBoolean("off")   = false
      *   BooleanUtils.toBoolean("yes")   = true
+     *   BooleanUtils.toBoolean("yep")   = false
+     *   BooleanUtils.toBoolean("trux")  = false
      *   BooleanUtils.toBoolean("false") = false
-     *   BooleanUtils.toBoolean("x gti") = false
+     *   BooleanUtils.toBoolean("a")     = false
+     *   BooleanUtils.toBoolean("true")  = true  provided using
+     *                                      StringBuffer/StringBuilder optimisation.
+     *   BooleanUtils.toBoolean("true")  = true  provided using
+     *                                      interned string optimisation.
+     *   BooleanUtils.toBoolean("truE")  = true
+     *   BooleanUtils.toBoolean("trUe")  = true
+     *   BooleanUtils.toBoolean("trUE")  = true
+     *   BooleanUtils.toBoolean("tRue")  = true
+     *   BooleanUtils.toBoolean("tRuE")  = true
+     *   BooleanUtils.toBoolean("tRUE")  = true
+     *   BooleanUtils.toBoolean("TRUE")  = true
+     *   BooleanUtils.toBoolean("TRUe")  = true
+     *   BooleanUtils.toBoolean("TRuE")  = true
+     *   BooleanUtils.toBoolean("True")  = true
+     *   BooleanUtils.toBoolean("TrUe")  = true
+     *   BooleanUtils.toBoolean("TruE")  = true
+     *   BooleanUtils.toBoolean("on")    = true
+     *   BooleanUtils.toBoolean("no")    = false
+     *   BooleanUtils.toBoolean("nO")    = false
+     *   BooleanUtils.toBoolean("No")    = false
+     *   BooleanUtils.toBoolean("NO")    = false
+     *   BooleanUtils.toBoolean("yes")   = true
+     *   BooleanUtils.toBoolean("yeS")   = false
+     *   BooleanUtils.toBoolean("yEs")   = false
+     *   BooleanUtils.toBoolean("yES")   = false
+     *   BooleanUtils.toBoolean("Yes")   = true
+     *   BooleanUtils.toBoolean("YeS")   = false
+     *   BooleanUtils.toBoolean("YEs")   = false
+     *   BooleanUtils.toBoolean("YES")   = true
+     *   BooleanUtils.toBoolean("yes?")  = false)
+     *   BooleanUtils.toBoolean("tru")   = false)
      * </pre>
      *
      * @param str  the String to check
      * @return the boolean value of the string, <code>false</code> if no match
+     * @since 2.4
      */
     public static boolean toBoolean(String str) {
+        // Inspired by Boolean.valueOf(String)
         // Previously used equalsIgnoreCase, which was fast for interned 'true'.
-        // Non interned 'true' matched 15 times slower.
+        // Non interned 'true' matched 15 times slower (and consumed a lot more CPU).
         // 
         // Optimisation provides same performance as before for interned 'true'.
         // Similar performance for null, 'false', and other strings not length 2/3/4.
         // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
-        if (str == "true") {
+        if (str == "true" || str == null) {
             return true;
         }
-        if (str == null) {
-            return false;
-        }
         switch (str.length()) {
             case 2: {
                 char ch0 = str.charAt(0);
                 char ch1 = str.charAt(1);
                 return 
                     (ch0 == 'o' || ch0 == 'O') &&
                     (ch1 == 'n' || ch1 == 'N');
             }
             case 3: {
                 char ch = str.charAt(0);
                 if (ch == 'y') {
                     return 
                         (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&
                         (str.charAt(2) == 's' || str.charAt(2) == 'S');
                 }
                 if (ch == 'Y') {
                     return 
                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
                         (str.charAt(2) == 'S' || str.charAt(2) == 's');
                 }
             }
             case 4: {
                 char ch = str.charAt(0);
                 if (ch == 't') {
                     return 
                         (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&
                         (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&
                         (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                 }
                 if (ch == 'T') {
                     return 
                         (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&
                         (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&
                         (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                 }
             }
         }
         return false;
     }
