diff --git a/tmp/eac1cd5a-cdea-4c74-8876-74da53834d34_buggy.java b/tmp/ea731e4e-898e-4884-a38e-bc6a041a473c_fixed.java
index 6c9090f..9c91b00 100644
--- a/tmp/eac1cd5a-cdea-4c74-8876-74da53834d34_buggy.java
+++ b/tmp/ea731e4e-898e-4884-a38e-bc6a041a473c_fixed.java
@@ -1,45 +1,59 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
+        // 18-Jul-2015, tatu: TypeFactory needs custom deserializer for set types, if
+        // not final, to build types based on known element type. Is this really needed?
+        boolean specialized = (vt == null || vt.hasRawClass() && !vt.isFinalType());
+        // And then try to find the value deserializer (again, if necessary)
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+        // and finally, we may need specialized handling for "unmodifiableXXX" types, for which
+        // we know of specific ways to deserialize (as well as why we need deserializers at
+        // all).
+        if (valueDeser == null) { // if no value deser, can only have 'unmodifiableXXX' with collection types...
+            // 25-Nov-2015, tatu: As per [databind#245], we also handle sub-classes of Set/List,
+            //   which Jackson 2.x may have automatically constructed earlier
+            if (unmodifiableDeser() == null) {
+                valueDeser = ctxt.handleUntypedObject(vt, specialized);
+            }
+        }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
