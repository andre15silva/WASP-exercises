diff --git a/tmp/90f7a906-b9cb-44a7-b2fe-ed695c43efae_buggy.java b/tmp/b80b9f36-c493-4623-ac38-0ed442e1e97c_fixed.java
index b05b859..d7023bd 100644
--- a/tmp/90f7a906-b9cb-44a7-b2fe-ed695c43efae_buggy.java
+++ b/tmp/b80b9f36-c493-4623-ac38-0ed442e1e97c_fixed.java
@@ -1,61 +1,70 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
+    initialize(args);
+
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
 
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+    // If this is a quiet operation (--warning_level=QUIET), and the user
+    // has specified an error using --jscomp_error, then force VARS to
+    // be off here. This will force warnings to be printed whether or not
+    // they were suppressed by the compilation.
+    String quietLevel = options.warningLevel.getValue();
+    if (quietLevel.equals("QUIET") &&
+        options.jscomp_error != null &&
+        options.jscomp_error.length() != 0) {
+      String errorName = options.jscomp_error.split(",")[0].trim();
+      if (errorName.indexOf(VarCheck.UNDEFINED_VAR_ERROR.name()) ==
+          0) {
+        if (warningsGuard == null || !warningsGuard.disables(
+            DiagnosticGroups.CHECK_VARIABLES)) {
           guards.add(new DiagnosticGroupWarningsGuard(
               DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
         }
+      }
+    }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
