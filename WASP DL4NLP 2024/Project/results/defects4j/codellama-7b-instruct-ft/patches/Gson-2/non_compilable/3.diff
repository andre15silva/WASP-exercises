diff --git a/tmp/ae7534e1-0478-49af-a9a5-29b5892b33ba_buggy.java b/tmp/f7ff34b7-4b62-47ee-b4e9-f25b4a894200_fixed.java
index 6e45f80..3b050dd 100644
--- a/tmp/ae7534e1-0478-49af-a9a5-29b5892b33ba_buggy.java
+++ b/tmp/f7ff34b7-4b62-47ee-b4e9-f25b4a894200_fixed.java
@@ -1,21 +1,33 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        // We pass a non-standard TypeAdapter that converts the input data to a JsonObject before
+        // handing it to the serializer. This is to address a known limitation of the TypeAdapter API,
+        // see the comments in TypeAdaptorsTest#testTypeReferenceWithIncomingTypeJsonElement.
+        final TypeAdapter<JsonElement> elementAdapter = TypeAdapterFactory
+            .newFactory(JsonElement.class, new JsonSerializer<JsonElement>() {
+              public JsonElement serialize(JsonElement pe, Type typeOfSrc, JsonSerializationContext ctx) {
+                return (JsonElement) pe.deepCopy();
+              }
+              public JsonElement deserialize(JsonElement pe, Type typeOfT, JsonDeserializationContext ctx) {
+                return (JsonElement) pe.deepCopy();
+              }
+            });
+        return (TypeAdapter<T2>) elementAdapter.nullSafe();
 
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
