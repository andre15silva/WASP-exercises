diff --git a/tmp/8033b916-77e5-4394-b4ea-aea642b95177_buggy.java b/tmp/c42d148f-0c7c-4cd1-8cf9-a03e474f5fef_fixed.java
index b98f0a7..e23b34e 100644
--- a/tmp/8033b916-77e5-4394-b4ea-aea642b95177_buggy.java
+++ b/tmp/c42d148f-0c7c-4cd1-8cf9-a03e474f5fef_fixed.java
@@ -1,29 +1,34 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
+    // After building the ctor type and inferring arguments on the
+    // args, we can now backward-infer the parameter's type, since
+    // when the args get checked, we'll have learned the parameter's
+    // type.
+    scope = inferTemplateTypes(n, arg, scope, true);
     return scope;
   }
