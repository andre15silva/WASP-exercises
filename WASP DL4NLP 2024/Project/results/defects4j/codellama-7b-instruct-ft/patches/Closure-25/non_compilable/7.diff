diff --git a/tmp/298d73ad-d5a0-4ba5-ab83-ba9d354db3b0_buggy.java b/tmp/31d875bb-0088-4874-9379-13de1663c48c_fixed.java
index b98f0a7..ba9aee7 100644
--- a/tmp/298d73ad-d5a0-4ba5-ab83-ba9d354db3b0_buggy.java
+++ b/tmp/31d875bb-0088-4874-9379-13de1663c48c_fixed.java
@@ -1,29 +1,36 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+    int pos = n.getChildIndex(constructor);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      Node argNode = NodeUtil.getArgumentForCall(arg);
+      if (argNode == n) {
+        JSType argType = ((ObjectType) argNode.getJSType()).getTemplateType(true);
+        checkAndBackwardInfer(arg, argType, scope);
+      } else {
         scope = traverse(arg, scope);
       }
+    }
     return scope;
   }
