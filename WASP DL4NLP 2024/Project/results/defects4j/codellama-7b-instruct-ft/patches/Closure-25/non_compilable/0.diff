diff --git a/tmp/87ee77f7-add9-4e61-9d52-bdaa8a97847e_buggy.java b/tmp/35285499-1e0c-42b0-a2f4-3b8fed00ec81_fixed.java
index b98f0a7..386bfe8 100644
--- a/tmp/87ee77f7-add9-4e61-9d52-bdaa8a97847e_buggy.java
+++ b/tmp/35285499-1e0c-42b0-a2f4-3b8fed00ec81_fixed.java
@@ -1,29 +1,29 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+        setType(constructor, getNativeType(UNKNOWN_TYPE));
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+          List<JSType> argTypes = new ArrayList<JSType>();
+          for (Node argument = constructor.getNext(); argument != null;
+               argument = argument.getNext()) {
+            argTypes.add(argument.getJSType());
           }
+          JSType type = ct.computeBackwardInferredReturn(argTypes);
+          setType(constructor, type);
         }
       }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
     }
-    return scope;
+    return traverse(constructor, scope);
   }
