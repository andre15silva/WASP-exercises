diff --git a/tmp/fbf1d1f5-6102-4ea1-83a4-9a5cd661075a_buggy.java b/tmp/cb1f6173-31e9-483e-aa7f-c44ca068d22c_fixed.java
index b86c1ea..3c96934 100644
--- a/tmp/fbf1d1f5-6102-4ea1-83a4-9a5cd661075a_buggy.java
+++ b/tmp/cb1f6173-31e9-483e-aa7f-c44ca068d22c_fixed.java
@@ -1,38 +1,38 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                out.write(Character.toChars(Character.codePointAt(input, pos)));
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+                // contract with translators is that they have to understand codepoints 
+                // and they just took care of a surrogate pair
                 for (int pt = 0; pt < consumed; pt++) {
                     if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                        pos += Character.charCount(Character.codePointAt(
+                                                             input, pos));
                     } else {
                         pos++;
                     }
                 }
                 pos--;
             }
             pos++;
         }
     }
