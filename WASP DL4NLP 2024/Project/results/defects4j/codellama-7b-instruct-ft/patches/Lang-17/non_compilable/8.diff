diff --git a/tmp/06940601-8c26-42de-8cfb-3bbb5732ec10_buggy.java b/tmp/c9b24c35-fc99-45c5-8e83-d2575d3e1ed1_fixed.java
index b86c1ea..3e94647 100644
--- a/tmp/06940601-8c26-42de-8cfb-3bbb5732ec10_buggy.java
+++ b/tmp/c9b24c35-fc99-45c5-8e83-d2575d3e1ed1_fixed.java
@@ -1,38 +1,45 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
             }
             else {
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
+                Character.toChars(Character.codePointAt(input, pos));
+                // https://issues.apache.org/jira/browse/LANG-720 
+                // We'll need to escape any non-representable characters
+                if (Character.MAX_CODERANGE == Character.UNASSIGNED
+                        && (!input.equals(StringEscapeUtils.escapeXml(input)))) {
+                    StringEscapeUtils.escapeXml(input.toString());
+                }
                 for (int pt = 0; pt < consumed; pt++) {
                     if (pos < len - 2) {
                         pos += Character.charCount(Character.codePointAt(input, pos));
                     } else {
                         pos++;
                     }
                 }
                 pos--;
             }
             pos++;
         }
     }
