diff --git a/tmp/d5f30928-2e88-4dfb-84e0-db4690b25198_buggy.java b/tmp/64e1253f-88c1-46ab-9071-20a0a2c9461d_fixed.java
index 1a63a66..cc70117 100644
--- a/tmp/d5f30928-2e88-4dfb-84e0-db4690b25198_buggy.java
+++ b/tmp/64e1253f-88c1-46ab-9071-20a0a2c9461d_fixed.java
@@ -1,21 +1,26 @@
     @Override
     @Deprecated
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
         // TODO: fix in 2.8
             /*
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
                     */
-            return new SimpleType(subclass, _bindings, this, _superInterfaces,
-                    _valueHandler, _typeHandler, _asStatic);
         // Otherwise, stitch together the hierarchy. First, super-class
         // if not found, try a super-interface
-        // should not get here but...
+        Class<?> superClass = _bindings.getBoundClass(subclass);
+        if (superClass != null) {
+            return _defaultFor(superClass);
+        }
+        Class<?>[] intefs = _superInterfaces;
+        // Should not get here but...
+        throw new IllegalStateException("Failed to find default impl for "
+                +_class.getName()+" given type "+subclass.getName()+" (or any of "+Arrays.asList(intefs)+")");
     }
