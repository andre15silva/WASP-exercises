diff --git a/tmp/9c3f4a2a-9904-4fd7-9572-0a737c92df46_buggy.java b/tmp/0eb5d23d-77b0-4702-87fb-a9061f95eaa3_fixed.java
index e7bb994..200b04c 100644
--- a/tmp/9c3f4a2a-9904-4fd7-9572-0a737c92df46_buggy.java
+++ b/tmp/0eb5d23d-77b0-4702-87fb-a9061f95eaa3_fixed.java
@@ -1,102 +1,158 @@
     /**
      * Returns the range for the specified axis.
      *
      * @param axis  the axis.
      *
      * @return The range.
      */
     public Range getDataRange(ValueAxis axis) {
 
         Range result = null;
         List mappedDatasets = new ArrayList();
         List includedAnnotations = new ArrayList();
         boolean isDomainAxis = true;
 
         // is it a domain axis?
         int domainIndex = getDomainAxisIndex(axis);
         if (domainIndex >= 0) {
             isDomainAxis = true;
             mappedDatasets.addAll(getDatasetsMappedToDomainAxis(
                     new Integer(domainIndex)));
             if (domainIndex == 0) {
                 // grab the plot's annotations
                 Iterator iterator = this.annotations.iterator();
                 while (iterator.hasNext()) {
                     XYAnnotation annotation = (XYAnnotation) iterator.next();
                     if (annotation instanceof XYAnnotationBoundsInfo) {
                         includedAnnotations.add(annotation);
                     }
                 }
             }
         }
 
         // or is it a range axis?
         int rangeIndex = getRangeAxisIndex(axis);
         if (rangeIndex >= 0) {
             isDomainAxis = false;
             mappedDatasets.addAll(getDatasetsMappedToRangeAxis(
                     new Integer(rangeIndex)));
             if (rangeIndex == 0) {
                 Iterator iterator = this.annotations.iterator();
                 while (iterator.hasNext()) {
                     XYAnnotation annotation = (XYAnnotation) iterator.next();
                     if (annotation instanceof XYAnnotationBoundsInfo) {
                         includedAnnotations.add(annotation);
                     }
                 }
             }
         }
 
+        // ensure the auto range includes some of the data
+        if (isDomainAxis) {
+            List list = new ArrayList();
+            Iterator iterator = mappedDatasets.iterator();
+            while (iterator.hasNext()) {
+                XYDataset d = (XYDataset) iterator.next();
+                if (d != null) {
+                    XYItemRenderer r = getRendererForDataset(d);
+                    Range range;
+                    if (r != null) {
+                        range = range.combine(r.findDomainBounds(d));
+                    }
+                    else {
+                        range = range.combine(DatasetUtilities.findDomainBounds(d));
+                    }
+                    list.add(range);
+                }
+            }
+            if (list.size() >= 1) {
+                Iterator it = list.iterator();
+                result = new Range(0, list.get(0));
+                while (it.hasNext()) {
+                    range.add(it.next());
+                }
+            }
+        }
+        else {
+            List list = new ArrayList();
+            Iterator iterator = mappedDatasets.iterator();
+            while (iterator.hasNext()) {
+                XYDataset d = (XYDataset) iterator.next();
+                if (d != null) {
+                    XYItemRenderer r = getRendererForDataset(d);
+                    Range range = null;
+                    if (r != null) {
+                        range = range.combine(r.findDomainBounds(d));
+                    }
+                    else {
+                        range = range.combine(DatasetUtilities.findRangeBounds(d));
+                    }
+                    list.add(range);
+                }
+            }
+            if (list.size() >= 1) {
+                Iterator it = list.iterator();
+                result = new Range(0, list.get(0));
+                while (it.hasNext()) {
+                    range.add(it.next());
+                }
+            }
+            else {
+        		// if all the datasets have no data, then set range to [-1,1]
+        		result = new Range(-1.0, 1.0);
+    		}
+        }
+
         // iterate through the datasets that map to the axis and get the union
         // of the ranges.
         Iterator iterator = mappedDatasets.iterator();
         while (iterator.hasNext()) {
             XYDataset d = (XYDataset) iterator.next();
             if (d != null) {
                 XYItemRenderer r = getRendererForDataset(d);
                 if (isDomainAxis) {
                     if (r != null) {
                         result = Range.combine(result, r.findDomainBounds(d));
                     }
                     else {
                         result = Range.combine(result,
                                 DatasetUtilities.findDomainBounds(d));
                     }
                 }
                 else {
                     if (r != null) {
                         result = Range.combine(result, r.findRangeBounds(d));
                     }
                     else {
                         result = Range.combine(result,
                                 DatasetUtilities.findRangeBounds(d));
                     }
                 }
                 
                     Collection c = r.getAnnotations();
                     Iterator i = c.iterator();
                     while (i.hasNext()) {
                         XYAnnotation a = (XYAnnotation) i.next();
                         if (a instanceof XYAnnotationBoundsInfo) {
                             includedAnnotations.add(a);
                         }
                     }
             }
         }
 
         Iterator it = includedAnnotations.iterator();
         while (it.hasNext()) {
             XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();
             if (xyabi.getIncludeInDataBounds()) {
                 if (isDomainAxis) {
                     result = Range.combine(result, xyabi.getXRange());
                 }
                 else {
                     result = Range.combine(result, xyabi.getYRange());
                 }
             }
         }
 
         return result;
 
     }
