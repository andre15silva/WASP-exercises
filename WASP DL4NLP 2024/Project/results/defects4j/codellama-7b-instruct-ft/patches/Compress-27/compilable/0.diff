diff --git a/tmp/c91d2cb4-25e0-44cd-aac6-53b01081e9b5_buggy.java b/tmp/5c37728c-487b-410a-920d-73dd4214c022_fixed.java
index 81872ca..bf5c08f 100644
--- a/tmp/c91d2cb4-25e0-44cd-aac6-53b01081e9b5_buggy.java
+++ b/tmp/5c37728c-487b-410a-920d-73dd4214c022_fixed.java
@@ -1,70 +1,103 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
+        final long maxOctal = 0777777777777L;
+        final long maxOctalOverflow = 07777777777777L;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
         byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        while (start < end && (trailer == ' ' || trailer == 0)) {
             end--;
             trailer = buffer[end - 1];
         }
         if (start == end) {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, trailer));
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
+            if (result > maxOctal){
+                result &= maxOctal;
+                if (start+1 < end){
+                    start++; // move to next digit
+                    while(start < end && buffer[start] == ' '){ // trim following spaces
+                        start++;
+                    }
+                    if (start != end){
+                        if (start + 1 == end) {
+                            if (buffer[end - 1] == ' ' || buffer[end-1] == 0){
+                                // ok - end is overflow digit only
+                            }
+                        } else {
+                            throw new IllegalArgumentException(
+                                    exceptionMessage(buffer, offset, length, start, buffer[start]));
+                        }
+                    } else {
+                        // ok - all digits processed
+                        if (buffer[start -1] == ' '  || buffer[start -1] == 0){
+                            // the last digit is the only digit
+                        } else {
+                            throw new IllegalArgumentException(
+                                    exceptionMessage(buffer, offset, length, start, buffer[start]));
+                        }
+                    }
+                }
+            }
             // CheckStyle:MagicNumber ON
         }
+        if (start != end){
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, buffer[start]));
+        }
 
         return result;
     }
