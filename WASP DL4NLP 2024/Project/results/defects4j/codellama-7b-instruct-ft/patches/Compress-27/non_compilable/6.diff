diff --git a/tmp/b285513a-c20f-4efd-8584-ab626703e65c_buggy.java b/tmp/0d0adf33-036b-4819-94d6-40313ea56255_fixed.java
index 81872ca..9206018 100644
--- a/tmp/b285513a-c20f-4efd-8584-ab626703e65c_buggy.java
+++ b/tmp/0d0adf33-036b-4819-94d6-40313ea56255_fixed.java
@@ -1,70 +1,104 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
+     * <p>Additionally, unlike the POSIX 1003.1-2003 specification a
+     * missing number is not interpreted as an octal 0 but as an error
+     * message since Commons Compress 1.8.</p>
+     *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
+        // Trim all trailing NULs and spaces
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
         byte trailer = buffer[end - 1];
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
             trailer = buffer[end - 1];
         }
         if (start == end) {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, trailer));
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
+        // To work-around some tar implementations that overrun
+        // the max possible length of a long,
+        // trim trailing zeroes. Doing so before checking for 0
+        // as well to avoid returning -1 if the byte was not
+        // ASCII '0'.
+        while (result > MAX_OCTAL.longValue()){
+            long lastOctal = result % MAX_OCTAL.longValue();
+            result = Long.divideUnsigned(result,MAX_OCTAL.longValue());
+            if (lastOctal == 0){
+                end--;
+            }else{
+                // We trim below and end is now out of sync
+                start++;
+                break;
+            }
+        }
+        if (start == end) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, trailer));
+        }
+
+        for ( ;start < end; start++) {
+            final byte currentByte = buffer[start];
+            // CheckStyle:MagicNumber OFF
+            if (currentByte != '0'){
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+            // CheckStyle:MagicNumber ON
+        }
         return result;
     }
