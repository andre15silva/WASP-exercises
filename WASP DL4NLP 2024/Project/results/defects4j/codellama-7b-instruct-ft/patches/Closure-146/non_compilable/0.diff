diff --git a/tmp/3e03309c-c251-4bcc-bf8c-1c59b7acf479_buggy.java b/tmp/11edfd2e-d0a9-4f33-be14-19c1f8ecb506_fixed.java
index 210695a..bdb7b55 100644
--- a/tmp/3e03309c-c251-4bcc-bf8c-1c59b7acf479_buggy.java
+++ b/tmp/11edfd2e-d0a9-4f33-be14-19c1f8ecb506_fixed.java
@@ -1,32 +1,39 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
       case UNKNOWN:
+      case UNDEFINED: /*
+                     * NOTE(nicksantos): We should treat 2 undefineds as
+                     * equivalent. The way we do this now is:
+                     * 1) interpret (undefined, number) == undefined
+                     * as if "undefined" were just an identity type, and 2)
+                     * then treat "undefined" as equivalent to "NoType".
+                     */
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
