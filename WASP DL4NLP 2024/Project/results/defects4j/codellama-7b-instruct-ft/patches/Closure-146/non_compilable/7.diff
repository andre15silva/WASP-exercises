diff --git a/tmp/0dae3e4b-058b-4bb0-a3a2-1bbcc806eaf3_buggy.java b/tmp/b8313050-21f1-4eab-bfe2-aaeed3df2d05_fixed.java
index 210695a..15e4d49 100644
--- a/tmp/0dae3e4b-058b-4bb0-a3a2-1bbcc806eaf3_buggy.java
+++ b/tmp/b8313050-21f1-4eab-bfe2-aaeed3df2d05_fixed.java
@@ -1,32 +1,44 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
+        // "=" for undef's:
+        if (!hasUndefined()) {
           return new TypePair(null, null);
+        } else {
+          return this.fromCondition(((UnionType) that).testForEquality(this));
+        }
 
       case FALSE:
+        // "!=" for undef's:
+        if (!that.hasUndefined()) {
+          return new TypePair(null, null);
+        } else {
+          return ((UnionType) that).fromCondition(this.testForEquality(that));
+        }
+
       case UNKNOWN:
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
