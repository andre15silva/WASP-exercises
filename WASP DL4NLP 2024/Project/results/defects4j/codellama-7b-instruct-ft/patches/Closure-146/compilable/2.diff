diff --git a/tmp/438c1eb7-cbb5-4cb8-bcb1-71c88dd7623a_buggy.java b/tmp/2f551c37-f437-4410-a160-239653c0d165_fixed.java
index 210695a..7296672 100644
--- a/tmp/438c1eb7-cbb5-4cb8-bcb1-71c88dd7623a_buggy.java
+++ b/tmp/2f551c37-f437-4410-a160-239653c0d165_fixed.java
@@ -1,32 +1,41 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
-      case UNKNOWN:
         return new TypePair(this, that);
+
+      case UNKNOWN:
+        // handle the case where we test this < that
+        // and one side is undefined. This is not as simple as just checking for
+        // equality because of the case where this is an "unknown" type and the
+        // other side is an "unknown" type. For example, we cannot convert from
+        // a Number to an Object. However, if this is a value type and the
+        // other side is NOT an "unknown" type, then we can convert from this to a
+        // "none".
+        // If the types are equal, that case is handled above.
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
