diff --git a/tmp/3c87dbf4-153a-436f-a0f3-65ae6fa81b08_buggy.java b/tmp/8c1b3ea8-43b6-4f6d-9d70-ccc46ad6ea8e_fixed.java
index 851ffc2..20d9e63 100644
--- a/tmp/3c87dbf4-153a-436f-a0f3-65ae6fa81b08_buggy.java
+++ b/tmp/8c1b3ea8-43b6-4f6d-9d70-ccc46ad6ea8e_fixed.java
@@ -1,70 +1,85 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
             candidateDefinition.getParent().replaceChild(
                 candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
         if (firstModule == minimumModule) {
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
-            compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
+          if ("goog".equals(namespace)) {
+            replacementNode.addChildToFront(new Node(Token.NAME, "goog"));
+            replacementNode.addChildToFront(new Node(Token.OBJECTLIT));
+            replacementNode.getParent().addChildToBack(new Node(Token.SCRIPT));
           } else {
             // Add it after the parent namespace.
             ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
+                providedNames.get(namespace.substring(0, namespace.indexOf('.')));
+            if (parentName != null) {
+              Node parentR = parentName.replacementNode;
+              // If they aren't parented to the same script, move them.
+              // Also check that the parent node is a var statement.
+              if (parentR.getParent().getParent() != replacementNode.getParent()) {
+                if (parentR.getType() != Token.VAR) {
+                  parentR = new Node(Token.VAR, parentR);
+                  parentR.useSourceInfoIfMissingFromForTree(firstNode);
+                }
+                replacementNode.replaceChild(
+                    firstNode, parentR);
+              }
+            } else {
+              // The name was provided by two independent modules.
+              // As a temporary solution, we create an entirely new script
+              // that contains this declaration, and place it after all of
+              // the other scripts.
+              compiler.getNodeForCodeInsertion(minimumModule)
+                  .addChildToBack(replacementNode);
+            }
           }
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
