diff --git a/tmp/50be51c9-d487-445e-b861-bfd1a8934a3b_buggy.java b/tmp/c9367c62-f445-4031-a6f9-099d50ac99f6_fixed.java
index 851ffc2..002e741 100644
--- a/tmp/50be51c9-d487-445e-b861-bfd1a8934a3b_buggy.java
+++ b/tmp/c9367c62-f445-4031-a6f9-099d50ac99f6_fixed.java
@@ -1,70 +1,95 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
-        replacementNode = candidateDefinition;
-        if (NodeUtil.isExpressionNode(candidateDefinition)) {
         candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
         Node assignNode = candidateDefinition.getFirstChild();
         Node nameNode = assignNode.getFirstChild();
         if (nameNode.getType() == Token.NAME) {
           // Need to convert this assign to a var declaration.
           Node valueNode = nameNode.getNext();
           assignNode.removeChild(nameNode);
           assignNode.removeChild(valueNode);
           nameNode.addChildToFront(valueNode);
           Node varNode = new Node(Token.VAR, nameNode);
           varNode.copyInformationFrom(candidateDefinition);
           candidateDefinition.getParent().replaceChild(
               candidateDefinition, varNode);
           nameNode.setJSDocInfo(assignNode.getJSDocInfo());
           compiler.reportCodeChange();
           replacementNode = varNode;
         }
-        }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
         if (firstModule == minimumModule) {
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
+        } else if (firstModule != null) {
+          // We have multiple provides with no re-provides in the same module.
+          // For example:
+          //
+          //   goog.provide('b');
+          //   var b = {};
+          //   goog.provide('b.x');
+          //
+          // If we're using the latest version of BSQ, we'll only see one
+          // ProvideNode in replacementModule.  In this case, we want to move
+          // the "var b = { ... }" up to the top of the module, but if we try
+          // to do so, we'll end up making them collide.
+          //
+          // So, if the module doesn't have any uses, we move the defines for
+          // top-level names to the top of the module, but if there are uses
+          // in the module, we need to keep them in the same order in which they
+          // appeared originally.  To make that work, we look for nested modules,
+          // which have a provide in the same module as a prior provide.
+          if (!replacementModule.getFirstChild().getNext().isEmpty()) {
+            ProvidedName parentName =
+                providedNames.get(namespace.substring(0, namespace.lastIndexOf('.')));
+            Preconditions.checkNotNull(parentName);
+            Preconditions.checkNotNull(parentName.replacementNode);
+            parentName.replacementNode.getParent().addChildAfter(
+                replacementNode, parentName.replacementNode);
+          } else {
+            firstNode.getParent().addChildBefore(replacementNode, firstNode);
+          }
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
             // Any old place is fine.
             compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
             // Add it after the parent namespace.
             ProvidedName parentName =
                 providedNames.get(namespace.substring(0, indexOfDot));
             Preconditions.checkNotNull(parentName);
             Preconditions.checkNotNull(parentName.replacementNode);
             parentName.replacementNode.getParent().addChildAfter(
                 replacementNode, parentName.replacementNode);
           }
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
