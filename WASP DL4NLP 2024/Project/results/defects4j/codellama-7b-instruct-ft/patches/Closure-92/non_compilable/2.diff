diff --git a/tmp/1a037bcf-41d7-4675-ad5e-5e1f81bdb20e_buggy.java b/tmp/231fa9fe-c748-4cfb-9258-c9e90f639460_fixed.java
index 851ffc2..c65d8d0 100644
--- a/tmp/1a037bcf-41d7-4675-ad5e-5e1f81bdb20e_buggy.java
+++ b/tmp/231fa9fe-c748-4cfb-9258-c9e90f639460_fixed.java
@@ -1,70 +1,84 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
             candidateDefinition.getParent().replaceChild(
                 candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
         if (firstModule == minimumModule) {
+          // In this case, the minimum code for this name might be somewhere else
+          // besides a common module. This can only happen if two modules in
+          // different directories are trying to define the same symbol.
+          if (namespace != "goog" && !namespaces.contains(namespace)) {
+            ProvidedName.checkNameNotProvided(namespace);
+          }
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
+          if (indexOfDot != -1 && namespaces.contains(namespace.substring(0, indexOfDot))) {
+            // This namespace is already defined by some source, add it right after.
+            ProvidedName parentName =
+                providedNames.get(namespace.substring(0, indexOfDot));
+            Preconditions.checkNotNull(parentName);
+            Preconditions.checkNotNull(parentName.replacementNode);
+            parentName.replacementNode.getParent().addChildAfter(
+                replacementNode, parentName.replacementNode);
+          } else if (indexOfDot == -1) {
             // Any old place is fine.
             compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
             // Add it after the parent namespace.
             ProvidedName parentName =
                 providedNames.get(namespace.substring(0, indexOfDot));
             Preconditions.checkNotNull(parentName);
             Preconditions.checkNotNull(parentName.replacementNode);
             parentName.replacementNode.getParent().addChildAfter(
                 replacementNode, parentName.replacementNode);
           }
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
