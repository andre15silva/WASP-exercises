diff --git a/tmp/73ec61c2-075a-4c90-a869-45b1a0601c65_buggy.java b/tmp/52c806d9-0ab7-48d9-909e-d3ade7804dba_fixed.java
index 0fe7b81..73fa8af 100644
--- a/tmp/73ec61c2-075a-4c90-a869-45b1a0601c65_buggy.java
+++ b/tmp/52c806d9-0ab7-48d9-909e-d3ade7804dba_fixed.java
@@ -1,67 +1,81 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
+     * @param minCheck the lower bound to check for being a root.
+     * @param maxCheck the upper bound to check for being a root.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
+     * @throws IllegalArgumentException if one is root and the other is not.
      */
     public double solve(final UnivariateRealFunction f,
-                        final double min, final double max, final double initial)
+                        final double min, final double max,
+                        final double minCheck, final double maxCheck,
+                        final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+            // min is root
+            if (Math.abs(yMin) <= functionValueAccuracy) {
+                setResult(yMin, 0);
+                return result;
+            }
+            return solve(f, min, yMin, max, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+            // max is root
+            if (Math.abs(yMax) <= functionValueAccuracy) {
+                setResult(yMax, 0);
+                return result;
+            }
+            return solve(f, min, yInitial, max, yMax, min, yMax);
         }
 
         if (yMin * yMax > 0) {
             throw MathRuntimeException.createIllegalArgumentException(
                   NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
         }
 
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
