diff --git a/tmp/37c1758a-c57c-4253-b922-05043f541f79_buggy.java b/tmp/1a207591-e76d-424e-9d47-a1592de4c5fa_fixed.java
index 7e43c1c..cdde42b 100644
--- a/tmp/37c1758a-c57c-4253-b922-05043f541f79_buggy.java
+++ b/tmp/1a207591-e76d-424e-9d47-a1592de4c5fa_fixed.java
@@ -1,19 +1,34 @@
   /**
    * Visits a NEW node.
    */
   private void visitNew(NodeTraversal t, Node n) {
     Node constructor = n.getFirstChild();
     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
       if (fnType != null) {
         visitParameterList(t, n, fnType);
         ensureTyped(t, n, fnType.getInstanceType());
       } else {
         ensureTyped(t, n);
       }
+    } else if (type.isTemplateType()) {
+      // In a function like "new T()", and T is a template type var, the only
+      // safe type to assign this expression to is still 'Object'.
+      // The type param is inferred when the T is resolved.
+      ensureTyped(t, n);
     } else {
       report(t, n, NOT_A_CONSTRUCTOR);
+      if (NodeUtil.isInInterface(n.getParent())) {
+        // The type of an expression like "new Foo" in an interface refers to
+        // the base structural type (the "Foo" type). This is needed to support
+        // JS interfaces as superclasses (issue 1002).
+        TypeI nodeTypeI = getJSType(n).registry.createTemplateType(
+            "NewExpression_" + n.getToken() + "_" +
+            type.toString() + "_" + n.getNext().getChildIndex());
+        n.setType(getJSType(n, null, nodeTypeI));
+      } else {
         ensureTyped(t, n);
       }
     }
+  }
