diff --git a/tmp/233047c8-4e7c-46b4-a11c-20926bdff7c4_buggy.java b/tmp/9dcbc65a-7e60-4753-ae85-cad9861c140d_fixed.java
index 89c5bf7..f97eed4 100644
--- a/tmp/233047c8-4e7c-46b4-a11c-20926bdff7c4_buggy.java
+++ b/tmp/9dcbc65a-7e60-4753-ae85-cad9861c140d_fixed.java
@@ -1,71 +1,90 @@
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
                           String doublequoteEscape,
                           String singlequoteEscape,
                           String backslashEscape,
                           CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
         case '\n': sb.append("\\n"); break;
         case '\r': sb.append("\\r"); break;
         case '\t': sb.append("\\t"); break;
         case '\\': sb.append(backslashEscape); break;
         case '\"': sb.append(doublequoteEscape); break;
         case '\'': sb.append(singlequoteEscape); break;
         case '>':                       // Break --> into --\> or ]]> into ]]\>
           if (i >= 2 &&
               ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
             sb.append("\\>");
           } else {
             sb.append(c);
           }
           break;
         case '<':
           // Break </script into <\/script
           final String END_SCRIPT = "/script";
 
           // Break <!-- into <\!--
           final String START_COMMENT = "!--";
 
           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                               END_SCRIPT.length())) {
             sb.append("<\\");
           } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                      START_COMMENT.length())) {
             sb.append("<\\");
           } else {
             sb.append(c);
           }
           break;
+        case '0':
+          // There must be three digits following a leading 0:
+          // (000 through 029)
+          if ((i > 0) && (i + 2 < s.length()) && isDigitCharacter(s.charAt(i+1)) && isDigitCharacter(s.charAt(i+2))) {
+            break;
+          }
+          case 'x':
+            // There must be at least one digit following a leading 'x'.
+            if ((i > 0) && (i + 2 < s.length()) && isHexCharacter(s.charAt(i+1)) &&
+                isHexCharacter(s.charAt(i+2))) {
+              break;
+            }
+          case 'u':
+            // There must be at least one digit following a leading 'u'.
+            if ((i > 0) && (i + 6 < s.length()) && isHexCharacter(s.charAt(i+1)) &&
+                isHexCharacter(s.charAt(i+2)) && isHexCharacter(s.charAt(i+3)) &&
+                isHexCharacter(s.charAt(i+4)) && isHexCharacter(s.charAt(i+5))) {
+              break;
+            }
         default:
           // If we're given an outputCharsetEncoder, then check if the
           //  character can be represented in this character set.
           if (outputCharsetEncoder != null) {
             if (outputCharsetEncoder.canEncode(c)) {
               sb.append(c);
             } else {
               // Unicode-escape the character.
               appendHexJavaScriptRepresentation(sb, c);
             }
           } else {
             // No charsetEncoder provided - pass straight latin characters
             // through, and escape the rest.  Doing the explicit character
             // check is measurably faster than using the CharsetEncoder.
             if (c > 0x1f && c <= 0x7f) {
               sb.append(c);
             } else {
               // Other characters can be misinterpreted by some js parsers,
               // or perhaps mangled by proxies along the way,
               // so we play it safe and unicode escape them.
               appendHexJavaScriptRepresentation(sb, c);
             }
           }
       }
     }
     sb.append(quote);
     return sb.toString();
   }
