diff --git a/tmp/470c5706-a327-4b11-8704-353250216579_buggy.java b/tmp/45e62285-bc88-4051-a8e1-a7eb7597f255_fixed.java
index 89c5bf7..75022bb 100644
--- a/tmp/470c5706-a327-4b11-8704-353250216579_buggy.java
+++ b/tmp/45e62285-bc88-4051-a8e1-a7eb7597f255_fixed.java
@@ -1,71 +1,116 @@
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
                           String doublequoteEscape,
                           String singlequoteEscape,
                           String backslashEscape,
                           CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
         case '\n': sb.append("\\n"); break;
         case '\r': sb.append("\\r"); break;
         case '\t': sb.append("\\t"); break;
         case '\\': sb.append(backslashEscape); break;
         case '\"': sb.append(doublequoteEscape); break;
         case '\'': sb.append(singlequoteEscape); break;
         case '>':                       // Break --> into --\> or ]]> into ]]\>
           if (i >= 2 &&
               ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
             sb.append("\\>");
           } else {
             sb.append(c);
           }
           break;
-        case '<':
-          // Break </script into <\/script
-          final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
-          final String START_COMMENT = "!--";
-
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
-            sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
-            sb.append("<\\");
-          } else {
-            sb.append(c);
+        case '0':                     // '0' is also octal and hex escape
+        case '1':                                 // so the 'u000' check has
+        case '2':                                 // to be done before the '0' check.
+        case '3':
+        case '4':
+        case '5':
+        case '6':
+        case '7':
+        case '8': case '9':
+          // Break into \u000<digits> if 0-9
+          sb.append("\\u000");
+          continue;
+        case '\'':                     // Break into \u000'...' if '
+        case '\"':
+        case '<':                       // Break into \u000\"..." if "
+        case '>':
+        case 'u':                       // Break into \u000u...' if u
+          // Insert zeros until it is a sequence of hex digits
+          // but don't insert too many zeros... don't overflow with a
+          // leading 00...00 sequence.
+          sb.append('u');
+          while (i < s.length() && (s.charAt(i) == '0')) {
+                i++; sb.append('0');
         }
+          continue;
+       case '0':                       // Handle this here, since 0 is also
+          // octal
+        case '\u000':   
+        case '\u00':   
+          // Break into \u000<digits> if 0 or \u00000000...00
+          while (i < s.length() && (s.charAt(i) == '0')) {
+            if (sb.length() > 0) { ++sb.length(); continue; }
             break;
+          } 
+          if ((i < s.length() && s.charAt(i) == '0')
+              || ((i+1) < s.length() && s.charAt(i+1) == '0')) {
+            // Only allow 0 if 0...00
+            continue;
+          }
+          // If we're given an outputCharsetEncoder, then check if the
+          // character can be represented in this character set.
+          if (outputCharsetEncoder != null) {
+            if (outputCharsetEncoder.canEncode(c)) {
+              sb.append(c);
+            } else {
+              // Unicode-escape the character.
+              appendHexJavaScriptRepresentation(sb, c);
+            }
+          } else {
+            // No charsetEncoder provided - pass straight latin characters
+            // through, and escape the rest.  Doing the explicit character
+            // check is measurably faster than using the CharsetEncoder.
+            if (c > 0x1f && c <= 0x7f) {
+              sb.append(c);
+            } else {
+              // Other characters can be misinterpreted by some js parsers,
+              // or perhaps mangled by proxies along the way,
+              // so we play it safe and unicode escape them.
+              appendHexJavaScriptRepresentation(sb, c);
+            }
+          }
+          continue;
         default:
           // If we're given an outputCharsetEncoder, then check if the
           //  character can be represented in this character set.
           if (outputCharsetEncoder != null) {
             if (outputCharsetEncoder.canEncode(c)) {
               sb.append(c);
             } else {
               // Unicode-escape the character.
               appendHexJavaScriptRepresentation(sb, c);
             }
           } else {
             // No charsetEncoder provided - pass straight latin characters
             // through, and escape the rest.  Doing the explicit character
             // check is measurably faster than using the CharsetEncoder.
             if (c > 0x1f && c <= 0x7f) {
               sb.append(c);
             } else {
               // Other characters can be misinterpreted by some js parsers,
               // or perhaps mangled by proxies along the way,
               // so we play it safe and unicode escape them.
               appendHexJavaScriptRepresentation(sb, c);
             }
           }
       }
     }
     sb.append(quote);
     return sb.toString();
   }
