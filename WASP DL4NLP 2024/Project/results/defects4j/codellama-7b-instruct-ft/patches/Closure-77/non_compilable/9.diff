diff --git a/tmp/ae908658-6f4a-4289-8563-9e1bffaeb380_buggy.java b/tmp/4e76a33f-734d-480d-b3a6-3de9d0668e8b_fixed.java
index 89c5bf7..464eb0e 100644
--- a/tmp/ae908658-6f4a-4289-8563-9e1bffaeb380_buggy.java
+++ b/tmp/4e76a33f-734d-480d-b3a6-3de9d0668e8b_fixed.java
@@ -1,71 +1,79 @@
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
                           String doublequoteEscape,
                           String singlequoteEscape,
                           String backslashEscape,
                           CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
         case '\n': sb.append("\\n"); break;
         case '\r': sb.append("\\r"); break;
         case '\t': sb.append("\\t"); break;
         case '\\': sb.append(backslashEscape); break;
         case '\"': sb.append(doublequoteEscape); break;
         case '\'': sb.append(singlequoteEscape); break;
         case '>':                       // Break --> into --\> or ]]> into ]]\>
           if (i >= 2 &&
               ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
             sb.append("\\>");
           } else {
             sb.append(c);
           }
           break;
         case '<':
           // Break </script into <\/script
           final String END_SCRIPT = "/script";
 
-          // Break <!-- into <\!--
+          // Break <\!-- into <\!--
           final String START_COMMENT = "!--";
 
           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                               END_SCRIPT.length())) {
             sb.append("<\\");
           } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                      START_COMMENT.length())) {
             sb.append("<\\");
           } else {
             sb.append(c);
           }
           break;
         default:
           // If we're given an outputCharsetEncoder, then check if the
           //  character can be represented in this character set.
           if (outputCharsetEncoder != null) {
             if (outputCharsetEncoder.canEncode(c)) {
               sb.append(c);
             } else {
               // Unicode-escape the character.
               appendHexJavaScriptRepresentation(sb, c);
             }
           } else {
             // No charsetEncoder provided - pass straight latin characters
             // through, and escape the rest.  Doing the explicit character
             // check is measurably faster than using the CharsetEncoder.
             if (c > 0x1f && c <= 0x7f) {
               sb.append(c);
             } else {
-              // Other characters can be misinterpreted by some js parsers,
+              // Check that c is not "\u0000" and that we are not in a
+              // 0-length string which means "this should be a string"
+              // instead of a special value.
+              if (c != 0 && !isEscaped(s, i)) {
+                // Other characters can be misinterpreted by some js
+                // parsers,
                 // or perhaps mangled by proxies along the way,
                 // so we play it safe and unicode escape them.
                 appendHexJavaScriptRepresentation(sb, c);
+              } else {
+                sb.append(c);
+              }
             }
           }
       }
     }
     sb.append(quote);
     return sb.toString();
   }
