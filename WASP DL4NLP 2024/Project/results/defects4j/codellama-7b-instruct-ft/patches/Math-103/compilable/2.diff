diff --git a/tmp/1783af09-65e3-49aa-8860-508c2e3e2dc6_buggy.java b/tmp/9a1ffb9a-a9ab-489b-b345-362e62736988_fixed.java
index 6cfa79b..21947d6 100644
--- a/tmp/1783af09-65e3-49aa-8860-508c2e3e2dc6_buggy.java
+++ b/tmp/9a1ffb9a-a9ab-489b-b345-362e62736988_fixed.java
@@ -1,12 +1,18 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
+            double value = 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
+            // Catch exception for top-coding extreme values as we will
+            // continue to fail on these without this work-around
+            if(value > 1) {
+                return value == Double.POSITIVE_INFINITY ? 1.0 : 0.0;
+            }
+            return value;
     }
