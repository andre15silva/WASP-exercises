diff --git a/tmp/e38a74e0-0a6e-45c2-b905-710ee20bb296_buggy.java b/tmp/c1fdd2e0-b64b-4684-bad6-063d40304aec_fixed.java
index cb1fb60..13a5fae 100644
--- a/tmp/e38a74e0-0a6e-45c2-b905-710ee20bb296_buggy.java
+++ b/tmp/c1fdd2e0-b64b-4684-bad6-063d40304aec_fixed.java
@@ -1,73 +1,91 @@
     /**
      * <p>
      * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
      * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
      * call is not necessary when decoding, but it doesn't hurt, either.
      * </p>
      * <p>
      * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
      * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
      * garbage-out philosophy: it will not check the provided data for validity.
      * </p>
      * <p>
      * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      * 
      * @param in
      *            byte[] array of ascii data to base64 decode.
      * @param inPos
      *            Position to start reading data from.
      * @param inAvail
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         if (inAvail < 0) {
             eof = true;
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             byte b = in[inPos++];
             if (b == PAD) {
                 // We're done.
                 eof = true;
                 break;
             } else {
                 if (b >= 0 && b < DECODE_TABLE.length) {
                     int result = DECODE_TABLE[b];
                     if (result >= 0) {
+                    	// Fixes CODEC-98: decode bug discovered by Yves Boe/Skygate
+                        if(byte2intArr == null) {
+                        	byte2intArr = new int[256];
+                        	for(int i2 = 0; i2 < 256; i2++) {
+                        		byte2intArr[i2] = -1;
+                        	}
+                        	for(int i2 = 0; i2 < DECODE_TABLE.length; i2++) {
+                        		byte2intArr[DECODE_TABLE[i2]] = i2;
+                        	}
+                        }
+                        int result2 = -1;	// Fixes CODEC-98: decode bug discovered by Yves Boe/Skygate
+                        if(result >= 0) {
+                        	result2 = result2 | b2<<16;
+                        	result2 = result2 | b2<<8;
+                        	result2 = result2 | b2;
+                        	result = byte2intArr[result];
+                        }
+                        
                         modulus = (++modulus) % 4;
                         x = (x << 6) + result;
                         if (modulus == 0) {
                             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                             buffer[pos++] = (byte) (x & MASK_8BITS);
                         }
                     }
                 }
             }
         }
 
         // Two forms of EOF as far as base64 decoder is concerned: actual
         // EOF (-1) and first time '=' character is encountered in stream.
         // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
             
             x = x << 6;
             switch (modulus) {
                 case 2 :
                     x = x << 6;
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     break;
                 case 3 :
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                     break;
             }
         }
     }
