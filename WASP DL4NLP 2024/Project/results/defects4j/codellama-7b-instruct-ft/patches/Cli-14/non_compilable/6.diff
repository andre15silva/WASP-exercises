diff --git a/tmp/d8d043fa-a832-4b85-8124-c465295e2b58_buggy.java b/tmp/719e9bfb-271e-467f-a422-4e630677a412_fixed.java
index 71189c3..3497e25 100644
--- a/tmp/d8d043fa-a832-4b85-8124-c465295e2b58_buggy.java
+++ b/tmp/719e9bfb-271e-467f-a422-4e630677a412_fixed.java
@@ -1,46 +1,63 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
+                Validator fileValidator = null;
+                final Argument argument = option.getArgument();
+                if (argument != null) {
+                    fileValidator = argument.getValidator();
+                }
+                if (fileValidator != null) {
+                    // must validate it
+                    try {
+                        fileValidator.assertValid(this,
+                                (String) commandLine.getValue(option));
+                    } catch (ValidatorException ve) {
+                        throw new OptionException(this, ve.getMessage());
+                    } catch (ConverterException ce) {
+                        throw new OptionException(this, ce.getMessage());
+                    }
+                } else if (commandLine.hasOption(option)) {
                     option.validate(commandLine);
                 }
+            }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
                 option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
