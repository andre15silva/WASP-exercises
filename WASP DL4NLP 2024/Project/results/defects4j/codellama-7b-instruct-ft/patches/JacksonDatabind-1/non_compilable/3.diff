diff --git a/tmp/59f9f9aa-94e7-45f1-a2e3-9ecff801bbb9_buggy.java b/tmp/f8c5d4b2-ba0d-4e31-a587-c26532677e1f_fixed.java
index dbadad4..1cb0dd2 100644
--- a/tmp/59f9f9aa-94e7-45f1-a2e3-9ecff801bbb9_buggy.java
+++ b/tmp/f8c5d4b2-ba0d-4e31-a587-c26532677e1f_fixed.java
@@ -1,50 +1,74 @@
     /**
      * Alternative to {@link #serializeAsField} that is used when a POJO
      * is serialized as JSON Array; the difference is that no field names
      * are written.
      * 
      * @since 2.1
      */
-    public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
+    public void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider prov)
         throws Exception
     {
         Object value = get(bean);
         if (value == null) { // nulls need specialized handling
             if (_nullSerializer != null) {
                 _nullSerializer.serialize(null, jgen, prov);
             } else { // can NOT suppress entries in tabular output
                 jgen.writeNull();
             }
         }
         // otherwise find serializer to use
-        JsonSerializer<Object> ser = _serializer;
+        JsonSerializer<Object> ser = (JsonSerializer<Object>)_serializer;
         if (ser == null) {
             Class<?> cls = value.getClass();
             PropertySerializerMap map = _dynamicSerializers;
             ser = map.serializerFor(cls);
             if (ser == null) {
                 ser = _findAndAddDynamic(map, cls, prov);
+            } else {
+                // need to nullity?
+                if (ser.isNullValue((JavaType)getType(), value)) { // null need specialized handling
+                    if (_nullSerializer != null) {
+                        _nullSerializer.serialize(null, jgen, prov);
+                    } else { // can NOT suppress entries in tabular output
+                        jgen.writeNull();
                     }
+                    return;
+                }
+            }
+        } else {
+            // need to nullity?
+            if (ser.isNullValue((JavaType)getType(), value)) { // null need specialized handling
+                if (_nullSerializer != null) {
+                    _nullSerializer.serialize(null, jgen, prov);
+                } else { // can NOT suppress entries in tabular output
+                    jgen.writeNull();
+                }
+                return;
+            }
+        }
+        // For non-nulls: simple check for direct cycles
+        if (value == bean) {
+            _handleSelfReference(bean, ser);
         }
         // and then see if we must suppress certain values (default, empty)
         if (_suppressableValue != null) {
             if (MARKER_FOR_EMPTY == _suppressableValue) {
                 if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
                     serializeAsPlaceholder(bean, jgen, prov);
                     return;
                 }
             } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
                 serializeAsPlaceholder(bean, jgen, prov);
                 return;
             }
         }
         // For non-nulls: simple check for direct cycles
         if (value == bean) {
             _handleSelfReference(bean, ser);
         }
         if (_typeSerializer == null) {
             ser.serialize(value, jgen, prov);
         } else {
             ser.serializeWithType(value, jgen, prov, _typeSerializer);
         }
     }
