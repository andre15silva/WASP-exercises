diff --git a/tmp/6d08d59c-3fd3-469f-b50f-8b651ee1e862_buggy.java b/tmp/30513978-ca59-4b0c-b76b-e28196aaf42f_fixed.java
index 4c1ed27..1ea5f2c 100644
--- a/tmp/6d08d59c-3fd3-469f-b50f-8b651ee1e862_buggy.java
+++ b/tmp/30513978-ca59-4b0c-b76b-e28196aaf42f_fixed.java
@@ -1,32 +1,40 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
+//          // contract with translators is that they have to understand codepoints 
+//          // and they just took care of a surrogate pair
+            boolean surrogatePair = false;
+            while (pos < len) {
+                int c = input.charAt(pos);
                 int consumed = translate(input, pos, out);
                 if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
                     out.write(c);
-                pos+= c.length;
-                continue;
+                    pos++;
+                    break;
                 }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                if (Character.highSurrogate(c) != 0) {
+                    surrogatePair = true;
                 }
+                pos += consumed;
+            }
+            if (!surrogatePair) {
+                return;
+            }
+            pos++;
         }
     }
