diff --git a/tmp/5b13739c-81e1-43bf-8a09-10d091b4e7de_buggy.java b/tmp/97223e09-6c2c-4b50-a072-623dbea538e4_fixed.java
index 0722547..c7bbe3d 100644
--- a/tmp/5b13739c-81e1-43bf-8a09-10d091b4e7de_buggy.java
+++ b/tmp/97223e09-6c2c-4b50-a072-623dbea538e4_fixed.java
@@ -1,26 +1,31 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
         // Time to update pointers first
         _currInputProcessed += _origBufferLen;
 
         // Also need to adjust row start, to work as if it extended into the past wrt new buffer
         _currInputRowStart = start - (_inputEnd - _currInputRowStart);
 
         // And then update buffer settings
         _inputBuffer = buf;
         _inputPtr = start;
         _inputEnd = end;
         _origBufferLen = end - start;
+        // offset location (to make it point to first byte, not just how much read so far) but only do so
+        // if there was no (probably empty) buffer before
+        if (_inputPtr <= _inputEnd || _origBufferLen == 0) {
+        	locOffset(buf, start, false);
+        }
     }
