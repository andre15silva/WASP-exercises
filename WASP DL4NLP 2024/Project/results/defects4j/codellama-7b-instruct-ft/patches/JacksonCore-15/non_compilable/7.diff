diff --git a/tmp/3c31f895-4a9d-4b1f-94db-2cf9cf2518c4_buggy.java b/tmp/785a8f8b-37d6-46fb-a6e9-d42a26874681_fixed.java
index 82cd856..49aab41 100644
--- a/tmp/3c31f895-4a9d-4b1f-94db-2cf9cf2518c4_buggy.java
+++ b/tmp/785a8f8b-37d6-46fb-a6e9-d42a26874681_fixed.java
@@ -1,213 +1,87 @@
     @Override
     public JsonToken nextToken() throws IOException
     {
     	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
     	// check for no buffered context _exposedContext - null
-    	//If all the conditions matches then check for scalar / non-scalar property
-    		//if not scalar and ended successfully, then return null
-    		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-    		// then return null 
-        // Anything buffered?
-        TokenFilterContext ctxt = _exposedContext;
-
-        if (ctxt != null) {
-            while (true) {
-                JsonToken t = ctxt.nextTokenToRead();
-                if (t != null) {
-                    _currToken = t;
-                    return t;
-                }
-                // all done with buffered stuff?
-                if (ctxt == _headContext) {
-                    _exposedContext = null;
-                    if (ctxt.inArray()) {
-                        t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
-                        _currToken = t;
-                        return t;
-                    }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
-                    break;
-                }
-                // If not, traverse down the context chain
-                ctxt = _headContext.findChildOf(ctxt);
-                _exposedContext = ctxt;
-                if (ctxt == null) { // should never occur
-                    throw _constructError("Unexpected problem: chain of filtered context broken");
-                }
-            }
-        }
-
-        // If not, need to read more. If we got any:
-        JsonToken t = delegate.nextToken();
-        if (t == null) {
-            // no strict need to close, since we have no state here
-            return (_currToken = t);
-        }
-
-        // otherwise... to include or not?
+    	// If no _allowMultipleMatches and atleast there is one token -- which is _currToken
+    	// In this case if token matches path, consume property -- with the sole exceptions of FIELD_NAME where next token would be object
+    	// For any other token which is NOT FIELD_NAME, object type -- include all properties. (and array elements if not excluded)
         TokenFilter f;
-        
+    	JsonToken t;
+        if (_currToken != null) {
+        	// Check first if we are excluded by any parent property!
+        	do {
+                t = delegate.nextToken();
+                if (t != FIELD_NAME) {
+                    _headContext = _headContext.createChildForToken(t);
                     switch (t.id()) {
                     case ID_START_ARRAY:
-            f = _itemFilter;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
-            }
-            if (f == null) { // does this occur?
-                delegate.skipChildren();
-                break;
-            }
-            // Otherwise still iffy, need to check
-            f = _headContext.checkValue(f);
-            if (f == null) {
-                delegate.skipChildren();
-                break;
-            }
-            if (f != TokenFilter.INCLUDE_ALL) {
-                f = f.filterStartArray();
-            }
-            _itemFilter = f;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
-            }
-            _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
-            if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
-                }
-            }
-            break;
-
                     case ID_START_OBJECT:
+                    	// If not, traverse down the context chain
+                        _exposedContext = _headContext;
                         f = _itemFilter;
                         if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildObjectContext(f, true);
+                            _headContext = _headContext.createChildArrayContext(f, true);
                             return (_currToken = t);
                         }
-            if (f == null) { // does this occur?
-                delegate.skipChildren();
-                break;
-            }
-            // Otherwise still iffy, need to check
-            f = _headContext.checkValue(f);
-            if (f == null) {
-                delegate.skipChildren();
-                break;
-            }
-            if (f != TokenFilter.INCLUDE_ALL) {
-                f = f.filterStartObject();
-            }
-            _itemFilter = f;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildObjectContext(f, true);
+                        _headContext = _headContext.createChildArrayContext(f, false);
                         return (_currToken = t);
-            }
-            _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
-            if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
-                }
-            }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
-            break;
-
                     case ID_END_ARRAY:
                     case ID_END_OBJECT:
                         {
                             boolean returnEnd = _headContext.isStartHandled();
-                f = _headContext.getFilter();
-                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
-                    f.filterFinishArray();
-                }
                             _headContext = _headContext.getParent();
                             _itemFilter = _headContext.getFilter();
+                            _currToken = delegate.getCurrentToken(); // may have changed
                             if (returnEnd) {
                                 return (_currToken = t);
                             }
                         }
                         break;
-
-        case ID_FIELD_NAME:
-            {
-                final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
-                f = _headContext.setFieldName(name);
+                    	// For any other token which is NOT FIELD_NAME, object type -- include all properties. (and array elements if not excluded)
+                    }
+                    return (_currToken = t);
+                }
+            }while (true);
+        }
+    	// If no _allowMultipleMatches and atleast there is one token -- which is _currToken
+    	// check if it matches any property first
+        if ((f = _headContext.includeProperty(_currToken.asString())) != null) {
             if (f == TokenFilter.INCLUDE_ALL) {
-                    _itemFilter = f;
                 if (!_includePath) {
                     // Minor twist here: if parent NOT included, may need to induce output of
                     // surrounding START_OBJECT/END_OBJECT
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
                         t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
                         _exposedContext = _headContext;
                     }
                 }
                 return (_currToken = t);
             }
             if (f == null) {
+                // was not included; consume name
+                _headContext.setFieldName(_currToken.asString());
                 delegate.nextToken();
                 delegate.skipChildren();
                 break;
             }
-                f = f.includeProperty(name);
-                if (f == null) {
-                    delegate.nextToken();
-                    delegate.skipChildren();
-                    break;
-                }
-                _itemFilter = f;
-                if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
-                        return (_currToken = t);
-                    }
-                }
-                if (_includePath) {
-                    t = _nextTokenWithBuffering(_headContext);
-                    if (t != null) {
-                        _currToken = t;
-                        return t;
-                    }
-                }
-                break;
-            }
-
-        default: // scalar value
+        } else {
+        	// No, just include all -- if only one, and it is an Object or an Array
         	f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
                 return (_currToken = t);
             }
+        }
+
+        // check type match
         if (f != null) {
             f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
+            if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                 return (_currToken = t);
             }
         }
         // Otherwise not included (leaves must be explicitly included)
-            break;
-        }
 
         // We get here if token was not yet found; offlined handling
         return _nextToken2();
     }
