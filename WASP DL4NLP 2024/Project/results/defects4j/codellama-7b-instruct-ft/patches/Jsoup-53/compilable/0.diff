diff --git a/tmp/c1e8c6d5-3dbb-4189-a24f-6b1f97f25e49_buggy.java b/tmp/c8f7ff4e-5c3a-4f44-8746-e71aa8026d12_fixed.java
index fecb896..0aaff9d 100644
--- a/tmp/c1e8c6d5-3dbb-4189-a24f-6b1f97f25e49_buggy.java
+++ b/tmp/c8f7ff4e-5c3a-4f44-8746-e71aa8026d12_fixed.java
@@ -1,34 +1,39 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
             if (last == 0 || last != ESC) {
                 if (c.equals(open)) {
                     depth++;
                     if (start == -1)
                         start = pos;
                 }
                 else if (c.equals(close))
                     depth--;
             }
 
-            if (depth > 0 && last != 0)
+            if (depth > 0 && last != 0) {
+                // in balanced mode, the last close only ends count if it matches the inner open. Except, if it is balanced, and we are
+                // on a [ or :
+                boolean inner = (depth == 1 && (last == '[' || last == ':'));
+                if (c.equals(close) && (inner || depth > 1))
                     end = pos; // don't include the outer match pair in the return
+            }
             last = c;
         } while (depth > 0);
         return (end >= 0) ? queue.substring(start, end) : "";
     }
