diff --git a/tmp/f8c42000-fdcb-4dc7-9ef4-4bef010eea74_buggy.java b/tmp/a69bb14e-7bef-4200-abb3-02cbaf99f908_fixed.java
index fecb896..fddb655 100644
--- a/tmp/f8c42000-fdcb-4dc7-9ef4-4bef010eea74_buggy.java
+++ b/tmp/a69bb14e-7bef-4200-abb3-02cbaf99f908_fixed.java
@@ -1,34 +1,55 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
-        char last = 0;
+        boolean inAttribute = false; // if we are within html element attributes, so we don't get confused by unbalanced " and ' in comments
 
         do {
             if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            char c = consume();
+            for (; ; ) {
+                if (inAttribute && c == '\'' && peek() == '>') break;
+                else if (inAttribute && c == '\"' && peek() == '>') break;
+                if (c == open) {
                     depth++;
                     if (start == -1)
                         start = pos;
+                    inAttribute = false;
+                    break;
                 }
-                else if (c.equals(close))
+                else if (c == close) {
                     depth--;
+                    inAttribute = false;
+                    break;
                 }
-
-            if (depth > 0 && last != 0)
+                else if (c == '&' || inAttribute) {
+                    // don't know if we are in an attribute, but parsing as if
+                    int semi = findIndexOf(";");
+                    if (semi != -1) {
+                        // look for ';' (to parse as attributes, so need to know if we are in a comment or literal)
+                        boolean literal = (peek() == '#'); // data literal, like <a href="&lt;:foo&gt;'.
+                        if (literal || (peek() == '>' && semi == (len() - 1))) {
+                            pos = pos + 1; // consume semicolon (we're in a literal)
+                            inAttribute = true;
+                        }
+                    }
+                }
+                if (depth > 0 && start != -1)
                     end = pos; // don't include the outer match pair in the return
+                else if (inAttribute)
+                    inAttribute = true;
+                break;
+            }
             last = c;
         } while (depth > 0);
         return (end >= 0) ? queue.substring(start, end) : "";
     }
