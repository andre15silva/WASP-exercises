diff --git a/tmp/c18d959e-8494-4274-bc84-35997ac65d36_buggy.java b/tmp/76511361-bdbe-4e36-b34a-196598f77bfa_fixed.java
index 7d8d756..9ca26f1 100644
--- a/tmp/c18d959e-8494-4274-bc84-35997ac65d36_buggy.java
+++ b/tmp/76511361-bdbe-4e36-b34a-196598f77bfa_fixed.java
@@ -1,48 +1,56 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
         // first, sanity checks
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
         // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-            }
+        if (p.nextToken() == JsonToken.FIELD_NAME) {
             final String typeId = p.getText();
             JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
-
-        // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
+            // Need to handle "complex" case where types are given as separate
+            // wrappers, then contents of that wrapper needs to be processed
+            // as a separate sub-object.
+            if (p.nextToken() == JsonToken.START_OBJECT) {
                 TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
-            tb.writeFieldName(_typePropertyName);
+                tb.writeStartObject();
+                tb.writeString("type-id");
                 tb.writeString(typeId);
+                tb.writeFieldName("value");
+                tb.writeStartObject();
+                tb.writeString("class");
+                // 30-Oct-2014, tatu: this is actually more complicated, there may be more
+                // levels, and we need to use field names
+                while (p.nextToken() == JsonToken.FIELD_NAME) {
+                    tb.writeFieldName(p.getCurrentName());
+                    tb.copyCurrentStructure(p);
+                }
+                tb.writeEndObject();
+                tb.writeEndObject();
                 p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
             }
-        
             Object value = deser.deserialize(p, ctxt);
             // And then need the closing END_OBJECT
             if (p.nextToken() != JsonToken.END_OBJECT) {
                 throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                         "expected closing END_OBJECT after type information and deserialized value");
             }
             return value;
         }
+        // else something not quite right ...
+        return ctxt.handleUnexpectedToken(baseType(), p);
+    }
