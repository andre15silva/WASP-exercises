diff --git a/tmp/9e3eed5d-5d47-4939-ae4d-8e2bf11faf5d_buggy.java b/tmp/a0b2fcbf-0168-42d4-a53a-4ff1e11a7af1_fixed.java
index 1c875ad..06e08be 100644
--- a/tmp/9e3eed5d-5d47-4939-ae4d-8e2bf11faf5d_buggy.java
+++ b/tmp/a0b2fcbf-0168-42d4-a53a-4ff1e11a7af1_fixed.java
@@ -1,31 +1,32 @@
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
             throw new UnsupportedOperationException();
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {
                 Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+                    //TODO SF - this whole lot can be moved captureFrom implementation
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
                 }
             }
         }
 
 //        for (int position = 0; position < matchers.size(); position++) {
 //            Matcher m = matchers.get(position);
 //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
 //                //TODO SF - this whole lot can be moved captureFrom implementation
 //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
 //                    Object array = invocation.getRawArguments()[position];
 //                    for (int i = 0; i < Array.getLength(array); i++) {
 //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
 //                    }
 //                    //since we've captured all varargs already, it does not make sense to process other matchers.
 //                    return;
 //                } else {
 //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
 //                }
 //            }
 //        }
     }
