diff --git a/tmp/cd832bd1-34e2-4d27-946e-3b94718bcf80_buggy.java b/tmp/fdd6b112-8303-4973-9d88-482ad7b1640d_fixed.java
index fd8eae5..209f6f5 100644
--- a/tmp/cd832bd1-34e2-4d27-946e-3b94718bcf80_buggy.java
+++ b/tmp/fdd6b112-8303-4973-9d88-482ad7b1640d_fixed.java
@@ -1,47 +1,55 @@
     /**
      * Adds or updates an item in the series and sends a
      * {@link SeriesChangeEvent} to all registered listeners.
      *
      * @param x  the x-value (<code>null</code> not permitted).
      * @param y  the y-value (<code>null</code> permitted).
      *
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
     public XYDataItem addOrUpdate(Number x, Number y) {
         if (x == null) {
             throw new IllegalArgumentException("Null 'x' argument.");
         }
 
         // if we get to here, we know that duplicate X values are not permitted
         XYDataItem overwritten = null;
         int index = indexOf(x);
         if (index >= 0 && !this.allowDuplicateXValues) {
             XYDataItem existing = (XYDataItem) this.data.get(index);
             try {
                 overwritten = (XYDataItem) existing.clone();
             }
             catch (CloneNotSupportedException e) {
                 throw new SeriesException("Couldn't clone XYDataItem!");
             }
             existing.setY(y);
         }
         else {
             // if the series is sorted, the negative index is a result from
             // Collections.binarySearch() and tells us where to insert the
             // new item...otherwise it will be just -1 and we should just
             // append the value to the list...
             if (this.autoSort) {
                 this.data.add(-index - 1, new XYDataItem(x, y));
             }
             else {
-                this.data.add(new XYDataItem(x, y));
+                // #1955483 - need to use doubles in order to ensure equality of values
+                Double x1 = new Double(x.doubleValue());
+                for (int i = 0; i < this.data.size(); i++) {
+                    Double x2 = new Double(((XYDataItem) this.data.get(i)).getX().doubleValue());
+                    if (x2.equals(x1)) {
+                        XYDataItem item = (XYDataItem) this.data.get(i);
+                        item.setY(y);
+                        break;
+                    }
                 }
-            // check if this addition will exceed the maximum item count...
                 if (getItemCount() > this.maximumItemCount) {
                     this.data.remove(0);
                 }
             }
+        }
         fireSeriesChanged();
         return overwritten;
     }
