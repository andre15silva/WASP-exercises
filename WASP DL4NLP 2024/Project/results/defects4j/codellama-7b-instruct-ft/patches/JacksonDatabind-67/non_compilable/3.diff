diff --git a/tmp/ab709300-bfd1-46fd-a00c-c243f5d8cf31_buggy.java b/tmp/0c3cab76-7510-4603-9db6-d7f1b40c65c7_fixed.java
index bc80637..6c9d01d 100644
--- a/tmp/ab709300-bfd1-46fd-a00c-c243f5d8cf31_buggy.java
+++ b/tmp/0c3cab76-7510-4603-9db6-d7f1b40c65c7_fixed.java
@@ -1,33 +1,66 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
         // the only non-standard thing is this:
         if (deser == null) {
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
-            }
+                deser = _createEnumKeyDeserializer(ctxt, type);
+            } else {
                 deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
+                // 21-Apr-2014, tatu: [databind#1445] (may also affect earlier versions...):
+                //   Enum type is handled differently
+                //   (as it uses special key-deserializer in some cases).
+                if (!type.isEnumType()) {
+                    deser = new BeanDeserializerModifier() {
+                        @Override
+                        public JsonDeserializer<?> modifyEnumDeserializer(DeserializationConfig config,
+                                final JavaType type, BeanDescription beanDesc,
+                                final JsonDeserializer<?> deserializer) {
+                            return new JsonDeserializer<Enum>() {
+                                @Override
+                                public Enum deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
+                                {
+                                    return KeyDeserializer.deserializeKey(p, ctxt);
+                                }
+                            };
+                        }
+                        @Override
+                        public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config,
+                                final JavaType type, KeyDeserializer deserializer)
+                        {
+                            return new KeyDeserializer() {
+                                @Override
+                                public Object deserializeKey(String key, DeserializationContext ctxt)
+                                        throws IOException
+                                {
+                                    return KeyDeserializer.deserializeKey(key, ctxt);
+                                }
+                            };
+                        }
+                    }.modifyKeyDeserializer(config, type, deser);
+                }
+            }
         }
         // and then post-processing
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
         return deser;
     }
