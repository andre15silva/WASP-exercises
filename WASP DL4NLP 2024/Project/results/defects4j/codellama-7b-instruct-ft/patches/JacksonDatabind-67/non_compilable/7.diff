diff --git a/tmp/a70f5706-ca39-4471-bb12-f50200a2a202_buggy.java b/tmp/6c72781f-5361-42c0-9fbd-6c565eac3b94_fixed.java
index bc80637..c7bf9c7 100644
--- a/tmp/a70f5706-ca39-4471-bb12-f50200a2a202_buggy.java
+++ b/tmp/6c72781f-5361-42c0-9fbd-6c565eac3b94_fixed.java
@@ -1,33 +1,51 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
         // the only non-standard thing is this:
         if (deser == null) {
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
+                JsonDeserializer<?> serializer = new JsonDeserializer<Enum>() {
+                    @Override
+                    public Enum deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+                        Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
+                        final String str = p.getValueAsString().toLowerCase();
+                        return KeyEnum.valueOf(rawClass, str);
                     }
+                };
+                deser = new KeyDeserializer() {
+                    @Override
+                    public Object deserializeKey(String key, DeserializationContext ctxt)
+                            throws IOException
+                    {
+                        Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
+                        return Enum.valueOf(rawClass, key.toLowerCase());
+                    }
+                };
+                deser = _factoryConfig.modifyDeserializer(config, type, deser, serializer);
+            } else {
                 deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
             }
+        }
         // and then post-processing
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
         return deser;
     }
