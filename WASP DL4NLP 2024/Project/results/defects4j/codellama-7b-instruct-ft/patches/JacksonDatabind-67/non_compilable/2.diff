diff --git a/tmp/8fde2b03-44f4-468d-96e6-87cbcef65466_buggy.java b/tmp/d8838ac6-929c-48f4-b706-3109c860d458_fixed.java
index bc80637..a6f167b 100644
--- a/tmp/8fde2b03-44f4-468d-96e6-87cbcef65466_buggy.java
+++ b/tmp/d8838ac6-929c-48f4-b706-3109c860d458_fixed.java
@@ -1,33 +1,44 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
         // the only non-standard thing is this:
         if (deser == null) {
             if (type.isEnumType()) {
                 return _createEnumKeyDeserializer(ctxt, type);
             }
             deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
-        }
-        // and then post-processing
-        if (deser != null) {
-            if (_factoryConfig.hasDeserializerModifiers()) {
+            boolean foundCustom = _factoryConfig.hasDeserializerModifiers();
+            if (foundCustom) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
+            if (!foundCustom) { // otherwise already fixed by deser modifiers
+                deser = new KeyDeserializer() {
+                    @Override
+                    public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {
+                        Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
+                        // 16-May-2012, tatu: Some (broken?) code elsewhere (Jackson-asl) does actual
+                        //       lookup by "real" name; should fix, but for now just
+                        return Enum.valueOf(rawClass, key.toLowerCase());
+                    }
+                    @Override
+                    public Class<?> getKeyType() { return type.getRawClass(); }
+                };
+            }
         }
         return deser;
     }
