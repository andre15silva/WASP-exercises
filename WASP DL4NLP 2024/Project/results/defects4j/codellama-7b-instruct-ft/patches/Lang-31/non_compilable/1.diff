diff --git a/tmp/719a76f9-ea6f-4158-a64a-bc308f7896f0_buggy.java b/tmp/23429e8a-ccd4-4cd6-b987-f46197af9883_fixed.java
index eea9e73..c70fe26 100644
--- a/tmp/719a76f9-ea6f-4158-a64a-bc308f7896f0_buggy.java
+++ b/tmp/23429e8a-ccd4-4cd6-b987-f46197af9883_fixed.java
@@ -1,41 +1,64 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
+		int csLast = csLength - 1;
+		int searchLast = searchLength - 1;
 		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+			char high = Character.toUpperCase(cs.charAt(i));
+			char low = Character.toLowerCase(high);
 			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
+				char searchHigh = Character.toUpperCase(searchChars[j]);
+				char searchLow = Character.toLowerCase(searchHigh);
+				if (high == searchHigh || (noSurrogates && high == searchLow)
+						|| Matching.contains(high, midLowChars)
+						|| Matching.contains(low, midLowChars)
+						|| low == searchLow || (high == searchHigh
+						&& noSurrogates && searchHigh == searchLow)) {
 						// ch is a supplementary character
 						// ch is in the Basic Multilingual Plane
 						return true;
 				}
+				// searchChars contains surrogates
+				else if (!noSurrogates && isSurrogate(searchHigh)) {
+					if (j != searchLast && isSurrogate(searchChars[j + 1])) {
+						if (cs.charAt(i) >= searchHigh
+								&& cs.charAt(i) <= searchChars[j + 1]
+								&& cs.charAt(i + 1) >= searchChars[j + 1]
+								&& cs.charAt(i + 1) <= searchLow) {
+							return true;
+						}
+					}
+					else if (cs.charAt(i) >= searchHigh && cs.charAt(i + 1) == searchLow) {
+								return true;
+							}
+				}
 			}
 		}
 		return false;
 	}
