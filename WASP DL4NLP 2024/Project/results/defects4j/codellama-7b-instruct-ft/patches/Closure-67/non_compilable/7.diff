diff --git a/tmp/a58089b5-0e46-4167-852b-a0832f81e098_buggy.java b/tmp/2ecd03a9-c821-4b54-937a-5bd6d31665f9_fixed.java
index 939f49b..1e72d5f 100644
--- a/tmp/a58089b5-0e46-4167-852b-a0832f81e098_buggy.java
+++ b/tmp/2ecd03a9-c821-4b54-937a-5bd6d31665f9_fixed.java
@@ -1,21 +1,37 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
         // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
           Node child = n.getFirstChild().getFirstChild().getNext();
 
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
+      } else if (NodeUtil.isExportedToScopeRoot(assign)) {
+        Node fnObj = n.getFirstFirstChild().getNext().getLastChild();
+        if (NodeUtil.isFunction(fnObj)) {
+          Node body = fnObj.getLastChild();
+          if (body.hasTwoChildren() &&
+              body.getFirstChild().getType() == Token.THIS &&
+              body.getLastChild().getType() == Token.RETURN) {
+            for (Node node = body.getFirstChild(); node != null;
+                node = node.getNext()) {
+              Node stringLiteral = NodeUtil.getFirstChildValue(node);
+              if (NodeUtil.isConstantStringValue(stringLiteral, "prototype")) {
+                return true;
+              }
+            }
+          }
+        }
       }
 
       return false;
     }
