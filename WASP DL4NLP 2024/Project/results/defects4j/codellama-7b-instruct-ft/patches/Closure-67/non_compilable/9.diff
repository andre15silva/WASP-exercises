diff --git a/tmp/cb1404f3-0686-48bb-9e1c-616dd9048e22_buggy.java b/tmp/a6804cc7-6721-4773-9627-75bfe9c06991_fixed.java
index 939f49b..5ad491d 100644
--- a/tmp/cb1404f3-0686-48bb-9e1c-616dd9048e22_buggy.java
+++ b/tmp/a6804cc7-6721-4773-9627-75bfe9c06991_fixed.java
@@ -1,21 +1,36 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
         // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
           Node child = n.getFirstChild().getFirstChild().getNext();
 
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
+            Node prototypeAssign = n;
+            do {
+              prototypeAssign = prototypeAssign.getNext();
+            } while (prototypeAssign != null &&
+                !NodeUtil.isNamedType(prototypeAssign.getLastChild().getNext()));
+
+            Node typeNode = prototypeAssign.getLastChild().getNext();
+            if (typeNode.getType() == Token.NAME && isAliasedType(typeNode)) {
+              for (Node curr = typeNode.getFirstChild(); curr != null;
+                   curr = curr.getNext()) {
+                curr.putBooleanProp("ES6_PROXY_AWARE", true);
+              }
               return true;
+            } else {
+              return false;
+            }
           }
         }
       }
 
       return false;
     }
