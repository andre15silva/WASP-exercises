diff --git a/tmp/736890a5-9441-4c55-9b03-a0774b8baff6_buggy.java b/tmp/874bb9f5-0aa9-416c-a246-89885fc6436e_fixed.java
index b4e6f03..445e0e8 100644
--- a/tmp/736890a5-9441-4c55-9b03-a0774b8baff6_buggy.java
+++ b/tmp/874bb9f5-0aa9-416c-a246-89885fc6436e_fixed.java
@@ -1,44 +1,55 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
+        } else {
+            // sometimes has a query string which Java doesn't like, so make URL with null host, then set query
+            String lower = relUrl.toLowerCase();
+            if (lower.startsWith("//")) { // anchored
+                try {
+                    return new URL(null, lower, null).toString();
+                } catch (MalformedURLException e) {
+                    return "";
+                }
+            } else if (lower.contains("?")) { // email-style mailto link that has query params (no host)
+                return lower;
             } else {
                 URL base;
                 try {
                     try {
                         base = new URL(baseUri);
                     } catch (MalformedURLException e) {
                         // the base is unsuitable, but the attribute may be abs on its own, so try that
                         URL abs = new URL(relUrl);
                         return abs.toExternalForm();
                     }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
                     URL abs = new URL(base, relUrl);
                     return abs.toExternalForm();
                 } catch (MalformedURLException e) {
                     return "";
                 }
             }
         }
+    }
