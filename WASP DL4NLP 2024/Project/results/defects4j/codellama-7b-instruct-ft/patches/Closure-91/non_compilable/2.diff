diff --git a/tmp/b4d2e959-15f9-424d-9691-c46b135d4edd_buggy.java b/tmp/411d1e91-e95d-453b-ab42-11b293ca2f5e_fixed.java
index 30d7266..7bb86fe 100644
--- a/tmp/b4d2e959-15f9-424d-9691-c46b135d4edd_buggy.java
+++ b/tmp/411d1e91-e95d-453b-ab42-11b293ca2f5e_fixed.java
@@ -1,69 +1,62 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {}; // or
       // var a = {x: function() {}};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN ||
 
             // object literal keys
             pType == Token.STRING ||
             pType == Token.NUMBER)) {
         return false;
       }
 
       // Don't traverse functions that are getting lent to a prototype.
-    }
-
-    if (parent != null && parent.getType() == Token.ASSIGN) {
-      Node lhs = parent.getFirstChild();
-      Node rhs = lhs.getNext();
-
-      if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
-        if (assignLhsChild == null) {
-          assignLhsChild = lhs;
-        }
-      } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-        if (NodeUtil.isGet(lhs)) {
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // TODO(johnlenz): make this warning a lint warning.
+    } else if (n.getType() == Token.OBJECTLIT) {
+      for (Node subkey = n.getFirstChild(); subkey != null;
+           subkey = subkey.getNext()) {
+        if (subkey.isGetterDef() &&
+            subkey.getFirstChild().isThis()) {
           return false;
         }
-          Node llhs = lhs.getFirstChild();
-          if (llhs.getType() == Token.GETPROP &&
-              llhs.getLastChild().getString().equals("prototype")) {
-            return false;
       }
+    } else if (n.getType() == Token.CALL) {
+      // Don't traverse functions that are annotated with @lends annotations
+      // that aren't objects.
+      if (n.getBooleanProp(Node.FUNCTION_PROP)) {
+        // If you're lending to a constructor, it must be with the @constructor
+        // annotation.
+        Node fnTypeNode = NodeUtil.getFunctionTypeNode(n);
+        JSDocInfo jsDoc = fnTypeNode.getJSDocInfo();
+        if (jsDoc != null && jsDoc.isLends()) {
+          return false;
         }
       }
     }
 
     return true;
   }
