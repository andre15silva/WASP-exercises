diff --git a/tmp/04d067d8-378d-477f-80ab-983b5b7d8a8d_buggy.java b/tmp/3f74cd11-d6bb-4fe7-a47c-abe92f0ac20e_fixed.java
index 08093b4..e7b05f5 100644
--- a/tmp/04d067d8-378d-477f-80ab-983b5b7d8a8d_buggy.java
+++ b/tmp/3f74cd11-d6bb-4fe7-a47c-abe92f0ac20e_fixed.java
@@ -1,42 +1,60 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
             // TarEntry's constructor would think this is a directory
             // and not allow any data to be written
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
                 // first pass so we'd need a second.
                 len = actualLength;
                 line = len + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
+        boolean wasPax = false;
+        String origEntryName = entryName;
+        if (null != headers.get(GNU_NAME)) {
+            entryName = origEntryName;
+        } else {
+            wasPax = true;
+            entryName = "./PaxXHeaders.X/" + stripTo7Bits(origEntryName);
+            if (entryName.length() >= TarConstants.NAMELEN) {
+                entryName = entryName.substring(0, TarConstants.NAMELEN - 1);
+            }
+            pex = new TarArchiveEntry(entryName,
+                                      TarConstants.LF_PAX_EXTENDED_HEADER_LC);
+        }
+        pex.setSize(data.length);
+        pex.setPaxHeadersText(w.toString().getBytes(CharsetNames.UTF_8));
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
+        if (wasPax) {
+            writePaxMarkers(origEntryName);
+        }
     }
