diff --git a/tmp/e3dad7ae-3777-40d9-951a-815fd6cf5194_buggy.java b/tmp/e73c3241-85ff-4878-8dd0-e1b5ca10cc91_fixed.java
index fa42cd9..b7459f9 100644
--- a/tmp/e3dad7ae-3777-40d9-951a-815fd6cf5194_buggy.java
+++ b/tmp/e73c3241-85ff-4878-8dd0-e1b5ca10cc91_fixed.java
@@ -1,27 +1,32 @@
   /**
    * Declares a refined type in {@code scope} for the name represented by
    * {@code node}. It must be possible to refine the type of the given node in
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
   protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
     switch (node.getType()) {
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
         break;
 
       case Token.GETPROP:
         String qualifiedName = node.getQualifiedName();
         Preconditions.checkNotNull(qualifiedName);
 
         JSType origType = node.getJSType();
         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
-        // "this" references aren't currently modeled in the CFG.
+      case Token.THIS:
+        JSType thisType = node.getJSType();
+        if (!thisType.isUnknownType()) {
+          thisType = createNullableTypeIf(thisType, thisType.getTruthy());
+          scope.inferQualifiedSlot(node, THIS, thisType, thisType);
+        }
+        break;
 
       default:
-        throw new IllegalArgumentException("Node cannot be refined. \n" +
-            node.toStringTree());
+        throw new IllegalArgumentException("Node cannot be refined");
     }
   }
