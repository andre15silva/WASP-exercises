diff --git a/tmp/7a9ff184-1274-4fbd-a29e-0b320bd0d5c0_buggy.java b/tmp/db3a286f-5c91-4c74-b86e-6d1688082fd0_fixed.java
index fa42cd9..03a94a0 100644
--- a/tmp/7a9ff184-1274-4fbd-a29e-0b320bd0d5c0_buggy.java
+++ b/tmp/db3a286f-5c91-4c74-b86e-6d1688082fd0_fixed.java
@@ -1,27 +1,34 @@
   /**
    * Declares a refined type in {@code scope} for the name represented by
    * {@code node}. It must be possible to refine the type of the given node in
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
   protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
     switch (node.getType()) {
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
         break;
 
       case Token.GETPROP:
         String qualifiedName = node.getQualifiedName();
         Preconditions.checkNotNull(qualifiedName);
 
         JSType origType = node.getJSType();
         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
-        // "this" references aren't currently modeled in the CFG.
+      case Token.THIS:
+        // TODO(johnlenz): implement type inference for this.
+        // 1) This requires getting the type of "this" from the enclosing scope.
+        // 2) The type of "this" isn't known within the current pass. We'll have
+        //    to get the type from the surrounding context when it's parsed, or
+        //    use null if no type was specified.
+        scope.inferSlotType("this", thisType);
+        break;
 
       default:
         throw new IllegalArgumentException("Node cannot be refined. \n" +
             node.toStringTree());
     }
   }
