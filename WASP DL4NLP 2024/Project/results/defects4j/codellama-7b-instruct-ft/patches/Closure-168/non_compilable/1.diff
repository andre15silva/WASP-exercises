diff --git a/tmp/d1abff98-96a7-4b42-8386-2d26af49c357_buggy.java b/tmp/d5ad0e33-fcb9-41b8-a9e2-0541921849c1_fixed.java
index b12de99..37630e7 100644
--- a/tmp/d1abff98-96a7-4b42-8386-2d26af49c357_buggy.java
+++ b/tmp/d5ad0e33-fcb9-41b8-a9e2-0541921849c1_fixed.java
@@ -1,52 +1,94 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
       if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
+      } else if (NodeUtil.isFunction(n)) {
+        // The node names of named functions don't make it to the scope
+        // lookup for their formal parameter names, hence the check against
+        // the formals directly.
+        Node node = NodeUtil.getFunctionNode(n);
+        for (Node paramNode = node.getFirstChild().getFirstChild();
+             paramNode.getFirstChild() != null;
+             paramNode = paramNode.getNext()) {
+          Scope scope = t.getScope(paramNode);
+          String name = paramNode.getString();
+          Var var = scope.getVar(name);
+          if (var != null && !var.isArguments()) {
+            Scope ownerScope = var.getScope();
+            if (!scope.isLocal() && !ownerScope.isAncestorOf(t.getScopeRoot())) {
+              data.get(ownerScope.getRootNode())
+                  .recordNonLocalFunctionParam(paramNode, name);
+            }
+          }
+        }
+      } else if (NodeUtil.isFunction(parent) && parent.isAssign()) {
+        // Detect issues 726.
+        Node assignNode = parent.getParent();
+        if (!n.isQualifiedName() && (n.isFunction() || n.isArrow()) &&
+            n.getParent().isCall() &&
+            (assignNode.getFirstChild() == n ||
+             assignNode.getChildCount() == 1)) {
+          // NOTE(bradford) Since Rhino uses the original source, we can
+          // ignore calls to named functions.
+          // TODO(bradford) We may only need to check against functions
+          // declared in the CALL_SITE_OBJECT, as opposed to the entire
+          // root.
+          for (Scope current = assignNode.getFirstChild().getScope();
+               current != null && current.isLocal();
+               current = current.getOuterScope()) {
+            Var var = current.getVar(assignNode.getFirstChild().getString());
+            if (var != null) {
+              current.getRootNode().getJSTypeProcessor()
+                  .reportClosureUseBeforeDeclaration(
+                      n, n.getFirstChild(), var);
+            }
+          }
+        }
       }
     }
