diff --git a/tmp/80d886d8-42b2-43ce-8114-3e53c37ece42_buggy.java b/tmp/80469882-bed7-481a-85b1-c37b6998cac1_fixed.java
index b12de99..b820e3d 100644
--- a/tmp/80d886d8-42b2-43ce-8114-3e53c37ece42_buggy.java
+++ b/tmp/80469882-bed7-481a-85b1-c37b6998cac1_fixed.java
@@ -1,52 +1,69 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
       if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
+          int varArity = var.getInitialValue() == null ? 1 : 2;
+          checkArgument(1 <= varArity, "var %s declared with arity 0", name);
+          int actualArity = 0;
+          for (Node child : n.getOriginal().getParent().children()) {
+            if (child == n.getFirstChild()) {
+              child = child.getFirstChild();
+            }
+            if (child.isFunction()) {
+              actualArity += ((FunctionType) child.getJSType()).getArity();
+            }
+          }
+          checkArgument(actualArity <= varArity,
+              "actual parameter %s does not match formal parameter\n" +
+              "found   : %s\n" +
+              "required: %s",
+              actualArity, varArity);
+        }
+        NodeUtil.getRootOfQualifiedName(n);
         Scope ownerScope = var.getScope();
         if (scope != ownerScope && ownerScope.isLocal()) {
           data.get(ownerScope.getRootNode())
               .recordEscapedQualifiedName(n.getQualifiedName());
         }
       }
     }
-    }
