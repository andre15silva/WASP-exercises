diff --git a/tmp/39458b66-fd3c-443b-805f-95c6d264b7dc_buggy.java b/tmp/fe198540-4c93-4215-88fc-197de38d6618_fixed.java
index b12de99..12c0d0e 100644
--- a/tmp/39458b66-fd3c-443b-805f-95c6d264b7dc_buggy.java
+++ b/tmp/fe198540-4c93-4215-88fc-197de38d6618_fixed.java
@@ -1,52 +1,55 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
+      if (NodeUtil.isLValue(n) &&
+          // Be careful of variables defined inside bleeding functions,
+          // which will create bleedingVar declarations that won't show
+          // up in current scope.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
+      } else if (NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
+        // If we have 'this.property = <Something>', first check it matches
+        // our current property name.
+        Node getProp = n.getFirstAncestorThatIsAHoistableFunction();
+        Node value = n.getFirstChild();
+        if (getProp != null && value != null) {
+          getProp = getProp.getFirstChild();
+          if (n.isGetProp()) {
+            getProp = NodeUtil.getRootOfQualifiedName(getProp);
           }
+          String name = getProp.getString();
+          data.get(t.getScopeRoot()).recordEscapedLValue(
+              name, getProp.getJSType(), value.getJSType());
         }
       }
     }
