diff --git a/tmp/f1ccc2b6-c6a8-4b08-81ae-630b25604501_buggy.java b/tmp/b1d72e7f-ca4b-4054-9219-d8f4eb332651_fixed.java
index 682b760..dbeb0dd 100644
--- a/tmp/f1ccc2b6-c6a8-4b08-81ae-630b25604501_buggy.java
+++ b/tmp/b1d72e7f-ca4b-4054-9219-d8f4eb332651_fixed.java
@@ -1,100 +1,113 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
-     * {@code 0} and {@code Integer.MAX_VALUE}.
+     * {@code 0} and {@code Integer.MAX_VALUE}.</p>
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
+     *  or one of the boundaries is outside the allowable range (start={@code 0} to {@code end}={@code 'z'} or
+     *  {@code Integer.MAX_VALUE})
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
         if (chars != null && chars.length == 0) {
             throw new IllegalArgumentException("The chars array must not be empty");
         }
 
         if (start == 0 && end == 0) {
             if (chars != null) {
                 end = chars.length;
             } else {
                 if (!letters && !numbers) {
                     end = Integer.MAX_VALUE;
                 } else {
                     end = 'z' + 1;
-                    start = ' ';                
+                    start = '0';                
                 }
             }
+        } else if (start > end) {
+            throw new IllegalArgumentException("range start " + start + " > range end " + end);
+        } else if (start < 0 || start > end ||
+                            end < ' ' || end > 'z' ||
+                            end == Integer.MAX_VALUE) {
+            throw new IllegalArgumentException("the parameters must be >= 0 and <= 126 ("
+                                               + "start="
+                                               + start
+                                               + ", end="
+                                               + end
+                                               + ").");
         }
 
         char[] buffer = new char[count];
         int gap = end - start;
 
         while (count-- != 0) {
             char ch;
             if (chars == null) {
                 ch = (char) (random.nextInt(gap) + start);
             } else {
                 ch = chars[random.nextInt(gap) + start];
             }
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
                 if(ch >= 56320 && ch <= 57343) {
                     if(count == 0) {
                         count++;
                     } else {
                         // low surrogate, insert high surrogate after putting it in
                         buffer[count] = ch;
                         count--;
                         buffer[count] = (char) (55296 + random.nextInt(128));
                     }
                 } else if(ch >= 55296 && ch <= 56191) {
                     if(count == 0) {
                         count++;
                     } else {
                         // high surrogate, insert low surrogate before putting it in
                         buffer[count] = (char) (56320 + random.nextInt(128));
                         count--;
                         buffer[count] = ch;
                     }
                 } else if(ch >= 56192 && ch <= 56319) {
                     // private high surrogate, no effing clue, so skip it
                     count++;
                 } else {
                     buffer[count] = ch;
                 }
             } else {
                 count++;
             }
         }
         return new String(buffer);
     }
