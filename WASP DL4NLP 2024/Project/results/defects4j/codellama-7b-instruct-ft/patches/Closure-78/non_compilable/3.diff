diff --git a/tmp/621fab2b-6d09-4dd1-9ea4-46a19cdbf9f3_buggy.java b/tmp/b586eef7-45c5-4652-b2be-8d684444a1e8_fixed.java
index 27e0871..a13327c 100644
--- a/tmp/621fab2b-6d09-4dd1-9ea4-46a19cdbf9f3_buggy.java
+++ b/tmp/b586eef7-45c5-4652-b2be-8d684444a1e8_fixed.java
@@ -1,86 +1,95 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
-        && (NodeUtil.mayBeString(left, false)
-            || NodeUtil.mayBeString(right, false))) {
+        && (NodeUtil.mayBeString(left, true)
+            || NodeUtil.mayBeString(right, true))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
-        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
+        if (lval < 0 | rval < 0) {
+          result = BitwiseOrAssignment.bits(lval) & BitwiseOrAssignment.bits(rval);
+        } else {
+          result = Math.floor(lval) & Math.floor(rval);
+        }
         break;
       case Token.BITOR:
-        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
+        if (lval < 0 | rval < 0) {
+          result = BitwiseOrAssignment.bits(lval) | BitwiseOrAssignment.bits(rval);
+        } else {
+          result = Math.floor(lval) | Math.floor(rval);
+        }
         break;
       case Token.BITXOR:
-        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
+        result = BitwiseOrAssignment.bits(lval) ^ BitwiseOrAssignment.bits(rval);
         break;
       case Token.ADD:
-        result = lval + rval;
+        result = BitwiseOrAssignment.bits(lval) + BitwiseOrAssignment.bits(rval);
         break;
       case Token.SUB:
-        result = lval - rval;
+        if (lval < 0 | rval < 0) {
+          result = BitwiseOrAssignment.bits(lval) - BitwiseOrAssignment.bits(rval);
+        } else {
+          result = Math.floor(lval) - Math.floor(rval);
+        }
         break;
       case Token.MUL:
-        result = lval * rval;
+        result = BitwiseOrAssignment.bits(lval) * BitwiseOrAssignment.bits(rval);
         break;
       case Token.MOD:
-        if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
-        result = lval % rval;
+        // This is ok because the JS runtime treats the results of 100 % 2 as
+        // 100 == 100 % 2.
+        result = Math.floor(lval) % Math.floor(rval);
         break;
       case Token.DIV:
-        if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
-        result = lval / rval;
+        // This is ok because the JS runtime treats the results of 100 / 2 as
+        // 100 == 100 / 2.
+        result = Math.floor(lval) / Math.floor(rval);
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
     // TODO(johnlenz): consider removing the result length check.
-    // length of the left and right value plus 1 byte for the operator.
+    // length of the left and right value plus 2 byte for the "  "
     if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
+        NodeUtil.getLengthOfStringValue(left)
+        + NodeUtil.getLengthOfStringValue(right) + 2 &&
 
         // Do not try to fold arithmetic for numbers > 2^53. After that
         // point, fixed-point math starts to break down and become inaccurate.
         Math.abs(result) <= MAX_FOLD_NUMBER) {
       Node newNumber = Node.newNumber(result);
       return newNumber;
     } else if (Double.isNaN(result)) {
       return Node.newString(Token.NAME, "NaN");
     } else if (result == Double.POSITIVE_INFINITY) {
       return Node.newString(Token.NAME, "Infinity");
     } else if (result == Double.NEGATIVE_INFINITY) {
       return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
     }
 
     return null;
   }
