diff --git a/tmp/dd9349e7-b85b-45eb-b59a-9f05efade469_buggy.java b/tmp/cd8a91d7-e788-4cc1-9dbc-2b479a0c7991_fixed.java
index 658036e..7656117 100644
--- a/tmp/dd9349e7-b85b-45eb-b59a-9f05efade469_buggy.java
+++ b/tmp/cd8a91d7-e788-4cc1-9dbc-2b479a0c7991_fixed.java
@@ -1,29 +1,56 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+        // [JACKSON-1533] Also, empty string value is ok; but must ensure it is an instance we want
+        // (not Object or other specialized type)
+        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+            Object emptyValue = ctxt.findNullValue(baseTypeName());
+            if (emptyValue != null) {
+                while (true) {
+                    JsonToken token = p.nextToken();
+                    if (token == JsonToken.FIELD_NAME) {
+                        String key = p.currentName();
+                        if (key.equals("type") && !p.nextToken().equals(JsonToken.VALUE_STRING)) {
+                            // invalid type id, fall through and fail
+                            break;
+                        } else { // yes, seems to be fine; but do we have any actual value?
+                            token = p.nextToken();
+                            if (token == JsonToken.VALUE_STRING) {
+                                if (p.nextFieldName() == null) { // is it followed by another field?
+                                    return emptyValue; // yes, means that it's an empty json object; must return null
+                                }
+                            }
+                        }
+                    }
+                    if (token == JsonToken.VALUE_STRING) { // maybe it was a simple String, after all?
+                        break;
+                    } 
+                }
+            }
+        }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
