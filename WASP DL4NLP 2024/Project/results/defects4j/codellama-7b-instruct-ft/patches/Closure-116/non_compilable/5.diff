diff --git a/tmp/6ef52159-5e74-445d-8025-3cefefea55a4_buggy.java b/tmp/5e6e06c5-162c-40b2-bbdd-7eadbacb4153_fixed.java
index 233a867..2ca1703 100644
--- a/tmp/6ef52159-5e74-445d-8025-3cefefea55a4_buggy.java
+++ b/tmp/5e6e06c5-162c-40b2-bbdd-7eadbacb4153_fixed.java
@@ -1,73 +1,75 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
+   *
+   * Issue 1101 reports that if fnNode contains a call to modify an object we
+   * cannot always inline it.
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
-    if (!isDirectCallNodeReplacementPossible(fnNode)) {
-      return CanInlineResult.NO;
+    CanInlineResult result =
+        canInlineReferenceToFunction(CanInlineResult.YES, fnNode, INLINE_DIRECT);
+    if (result != CanInlineResult.NO) {
+      return result;
     }
 
-    Node block = fnNode.getLastChild();
-
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+                  fnNode, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
