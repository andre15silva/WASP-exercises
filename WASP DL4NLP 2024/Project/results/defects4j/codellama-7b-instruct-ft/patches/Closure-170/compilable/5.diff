diff --git a/tmp/6d214e37-87d6-4e3c-8028-10eb37e72d4e_buggy.java b/tmp/a2263873-d4a1-4aa2-a597-ad019d2c0cc0_fixed.java
index 5abdeb5..b3c6916 100644
--- a/tmp/6d214e37-87d6-4e3c-8028-10eb37e72d4e_buggy.java
+++ b/tmp/a2263873-d4a1-4aa2-a597-ad019d2c0cc0_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
+            // We make a special exception when the entire cfgNode is "? :"
+            // hooked assignment expressions,
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+            //   and remove this special case. See issue 1525
+            //   issue 965: http://code.google.com/p/closure-compiler/issues/
+            //     detail?id=965&q=CfgNode
+              (parent.isHook() && n.equals(parent.getFirstChild()))
+          ) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
