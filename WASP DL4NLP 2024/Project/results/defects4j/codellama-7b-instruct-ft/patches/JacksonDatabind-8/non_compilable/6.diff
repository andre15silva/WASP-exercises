diff --git a/tmp/1c434c8b-75f9-45df-b79f-d1a0464041a1_buggy.java b/tmp/0e6bb8f4-cabd-463b-9e0d-92fc3b185e95_fixed.java
index c9da1b7..dc80f8c 100644
--- a/tmp/1c434c8b-75f9-45df-b79f-d1a0464041a1_buggy.java
+++ b/tmp/0e6bb8f4-cabd-463b-9e0d-92fc3b185e95_fixed.java
@@ -1,33 +1,40 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
             }
 
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
+                if (StringBuilder.class.isAssignableFrom(newOne.getRawType())) {
                     // [databind#667]: avoid one particular class of bogus problems
-
+                    StringBuilder sb = newOne.getAnnotated().asStringBuilder();
+                    sb.append("abc");
+                    return;
+                }
+                // [databind#666]: allow sub-classed string builders
+                if (StringBuilder.class != newOne.getRawType()) {
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
                     // otherwise, which one to choose?
                     // new type more generic, use old
                     // new type more specific, use it
                 }
             }
+        }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
