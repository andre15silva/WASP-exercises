diff --git a/tmp/3238be04-8e52-4cbc-ba08-056734c23275_buggy.java b/tmp/d914dc22-7f73-489b-a149-4652affc3165_fixed.java
index 8b2f10f..ea5b0bc 100644
--- a/tmp/3238be04-8e52-4cbc-ba08-056734c23275_buggy.java
+++ b/tmp/d914dc22-7f73-489b-a149-4652affc3165_fixed.java
@@ -1,67 +1,98 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
 
         // When looking at VAR initializers for declared VARs, we tend
         // to use the declared type over the type it's being
         // initialized to in the global scope.
         //
         // For example,
         // /** @param {number} */ var f = goog.abstractMethod;
         // it's obvious that the programmer wants you to use
         // the declared function signature, not the inferred signature.
         //
         // Or,
         // /** @type {Object.<string>} */ var x = {};
         // the one-time anonymous object on the right side
         // is as narrow as it can possibly be, but we need to make
         // sure we back-infer the <string> element constraint on
         // the left hand side, so we use the left hand side.
 
         boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
             // Makes it easier to check for NPEs.
 
         // TODO(nicksantos): This might be a better check once we have
         // back-inference of object/array constraints.  It will probably
         // introduce more type warnings.  It uses the result type iff it's
         // strictly narrower than the declared var type.
         //
         //boolean isVarTypeBetter = isVarDeclaration &&
         //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
         //     || !resultType.isSubtype(varType));
 
 
         if (isVarTypeBetter) {
           redeclareSimpleVar(scope, left, resultType);
         }
         left.setJSType(isVarDeclaration || leftType == null ?
             resultType : null);
 
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
         break;
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
         break;
+      case Token.FUNCTION:
+        break;  // Nothing to do, just ensure this is a function.
+      default:
+        if (!left.isObjectLit() && !left.isAssign()) {
+          // For debugging.
+          // TODO(arv): remove this log.
+          // If the property tree is null, something might have gone wrong.
+          // For example, try this:
+          // var x = null;
+          // x.prop.blahblah(); -- there's no such property.
+          // Or
+          // x.prop = null;  -- there's no such property.
+          // or
+          // x.prop = x = null; -- there's no such property (x on lhs has no props).
+          Node propertyTree = VarCheck.getTopLevelNode(left);
+          if (propertyTree != null) {
+            Node parent = propertyTree.getParent();
+            while (parent != null && !parent.isAssign()) {
+              parent = parent.getParent();
+            }
+            parent = propertyTree.getGrandparent();
+            if (parent == null || parent.isFunction() || parent.isExprResult() ||
+                parent.isScript()) {
+              continue;  // If the left side is a function call or an expression, we're OK.
+            }
+          }
+          logger.fine("No properties on this expression\n" + "found: " + left);
+          logger.fine("required: " + "Object");
+        }
+        left.setJSType(resultType);
+        break;
     }
   }
