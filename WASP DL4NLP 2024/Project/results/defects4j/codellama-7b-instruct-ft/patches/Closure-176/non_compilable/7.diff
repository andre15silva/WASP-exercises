diff --git a/tmp/42dcddff-763e-460d-ac90-b42b2c0f781b_buggy.java b/tmp/60890631-0a57-4bd6-b92a-0a8f04e4290c_fixed.java
index 8b2f10f..acd8630 100644
--- a/tmp/42dcddff-763e-460d-ac90-b42b2c0f781b_buggy.java
+++ b/tmp/60890631-0a57-4bd6-b92a-0a8f04e4290c_fixed.java
@@ -1,67 +1,83 @@
   /**
    * Updates the scope according to the result of a type change, like
    * an assignment or a type cast.
    */
   private void updateScopeForTypeChange(
       FlowScope scope, Node left, JSType leftType, JSType resultType) {
     Preconditions.checkNotNull(resultType);
     switch (left.getType()) {
       case Token.NAME:
         String varName = left.getString();
         Var var = syntacticScope.getVar(varName);
         boolean isVarDeclaration = left.hasChildren();
 
         // When looking at VAR initializers for declared VARs, we tend
         // to use the declared type over the type it's being
         // initialized to in the global scope.
         //
         // For example,
         // /** @param {number} */ var f = goog.abstractMethod;
         // it's obvious that the programmer wants you to use
         // the declared function signature, not the inferred signature.
         //
         // Or,
         // /** @type {Object.<string>} */ var x = {};
         // the one-time anonymous object on the right side
         // is as narrow as it can possibly be, but we need to make
         // sure we back-infer the <string> element constraint on
         // the left hand side, so we use the left hand side.
 
         boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
             // Makes it easier to check for NPEs.
 
         // TODO(nicksantos): This might be a better check once we have
         // back-inference of object/array constraints.  It will probably
         // introduce more type warnings.  It uses the result type iff it's
         // strictly narrower than the declared var type.
-        //
 //        boolean isVarTypeBetter = isVarDeclaration &&
 //            (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
 //             || !resultType.isSubtype(varType));
 
 
         if (isVarTypeBetter) {
           redeclareSimpleVar(scope, left, resultType);
         }
         left.setJSType(isVarDeclaration || leftType == null ?
             resultType : null);
 
         if (var != null && var.isTypeInferred()) {
           JSType oldType = var.getType();
           var.setType(oldType == null ?
               resultType : oldType.getLeastSupertype(resultType));
         }
         break;
       case Token.GETPROP:
         String qualifiedName = left.getQualifiedName();
         if (qualifiedName != null) {
           scope.inferQualifiedSlot(left, qualifiedName,
               leftType == null ? unknownType : leftType,
               resultType);
         }
 
         left.setJSType(resultType);
         ensurePropertyDefined(left, resultType);
         break;
     }
+    if (!resultType.isObject()) {
+      // When we do a typecast, the expression does not have any
+      // properties, so we get no type warnings if the result type
+      // is an interface. This seems to be an open issue.  For now we
+      // just make sure that the property exists.
+      ObjectType oResultType = ObjectType.cast(resultType);
+      if (oResultType.getPropertyCount() == 0 &&
+          oResultType.getImplicitPrototype().hasNoProperties()) {
+        // TODO(johnlenz): update the existing errors to reflect this
+        // warning.  For now we just check for no properties
+        if (resultType.isAllType()) {
+          resultType = ObjectType.cast(TypeLattice.LOWER_BOUND);
+        }
+        report(JSError.make(left, Issue.NO_PROPERTIES_ON_THIS_EXPRESSION,
+            resultType.toAnnotationString()));
+      }
+    }
   }
