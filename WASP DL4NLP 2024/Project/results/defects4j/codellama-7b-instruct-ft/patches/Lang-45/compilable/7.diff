diff --git a/tmp/5c94c551-6ed1-4848-bb1e-f8cc712b6e55_buggy.java b/tmp/52921d90-5d40-42d5-97f7-93cfc6fdeb19_fixed.java
index 1b36a4f..ae07166 100644
--- a/tmp/5c94c551-6ed1-4848-bb1e-f8cc712b6e55_buggy.java
+++ b/tmp/52921d90-5d40-42d5-97f7-93cfc6fdeb19_fixed.java
@@ -1,58 +1,81 @@
     /**
      * Abbreviates a string nicely.
      * 
-     * This method searches for the first space after the lower limit and abbreviates
-     * the String there. It will also append any String passed as a parameter
-     * to the end of the String. The upper limit can be specified to forcibly
-     * abbreviate a String.
+     * This method searches for the first occurrence of one or more spaces after the
+     * lower limit and abbreviates the String there. It will also append any String
+     * passed as a parameter to the end of the String.
+     * The upper limit can be specified to forcibly abbreviate a String.
+     * If the lower limit is -1, it will start looking for spaces from the beginning
+     * and abbreviate at the first suitable place.
+     * If the lower limit is 0, it will only stop at the first space.
+     * A negative lower limit is not really useful (and means that it starts looking
+     * at the end). It is included for symmetry.
      *
-     * @param str         the string to be abbreviated. If null is passed, null is returned.
-     *                    If the empty String is passed, the empty string is returned.
+     * <p>Examples:</p>
+     * <ul>
+     *   <li> <code>abbreviate(null, 4, 10, "...")	</code> returns <code>null</code></li>
+     *   <li> <code>abbreviate("", 4, 10, "...")	</code>  returns "" </li>
+     *   <li> <code>abbreviate("string", 0, 5, "...")  </code> returns "s..."</li>
+     *   <li> <code>abbreviate("string", 1, 5, "...")   </code> returns "string" </li>
+     *   <li> <code>abbreviate("string string", 0, 5, "...")   </code> returns "s..."</li>
+     *   <li> <code>abbreviate("string string", 1, 5, "---")   </code> returns "string" </li>
+     *   <li> <code>abbreviate("string string", 2, 5, "...") returns "string "...</li>
+     *   <li> <code>abbreviate("string string", 10, 15, "...") returns "... string"</li>
+     * </ul>
+     *
+     * @param str         the string to be abbreviated.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
-     *                    If the upper limit is lower than the lower limit, it will be
-     *                    adjusted to be the same as the lower limit.
+     *                    If the upper value is less than the lower value,
+     *                    it will be adjusted to be the same a the lower value.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
-     *                    The append does not count towards the lower or upper limits.
+     *                    The append does not count towards the lower or upper limits
      * @return the abbreviated String.
-     * @since 2.4
      */
-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
+    public static String abbreviate(
+            final String str, 
+            final int lower, 
+            final int upper, 
+            final String appendToEnd) {
         // initial parameter checks
-        if (str == null) {
+        if (null == str) {
             return null;
         }
-        if (str.length() == 0) {
+        if ("".equals(str)) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
+        // convert -1 to NO_LIMIT
+        int low = lower >= 0 ? lower : str.length() + 1;
+        int hi = upper >= lower ? upper : low;
+
+        if (hi > str.length()) {
+            hi = str.length();
+        }
+
+        // if lower value is greater than the length of the string,
+        // set to the length
         // if the upper value is -1 (i.e. no limit) or is greater
         // than the length of the string, set to the length of the string
-        if (upper == -1 || upper > str.length()) {
-            upper = str.length();
-        }
-        // if upper is less than lower, raise it to lower
-        if (upper < lower) {
-            upper = lower;
+        if (hi < low) {
+            low = hi;
         }
 
-        StringBuffer result = new StringBuffer();
-        int index = StringUtils.indexOf(str, " ", lower);
+        final StringBuffer result = new StringBuffer();
+        final int index = StringUtils.indexOf(str, " ", low);
         if (index == -1) {
-            result.append(str.substring(0, upper));
+            result.append(str.substring(0, hi));
             // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
+            if (hi != str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
+        } else if (index > hi) {
+            result.append(str.substring(0, hi));
             result.append(StringUtils.defaultString(appendToEnd));
         } else {
             result.append(str.substring(0, index));
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
