diff --git a/tmp/88883d62-fee2-4c41-8b89-efbfcb8d81d4_buggy.java b/tmp/da244d1c-6530-4abb-9c98-b2f4b58fe0a7_fixed.java
index 3a790cb..5d06d28 100644
--- a/tmp/88883d62-fee2-4c41-8b89-efbfcb8d81d4_buggy.java
+++ b/tmp/da244d1c-6530-4abb-9c98-b2f4b58fe0a7_fixed.java
@@ -1,74 +1,116 @@
     private void inlineNonConstants(
         Var v, ReferenceCollection referenceInfo,
         boolean maybeModifiedArguments) {
       int refCount = referenceInfo.references.size();
       Reference declaration = referenceInfo.references.get(0);
       Reference init = referenceInfo.getInitializingReference();
       int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
       if (refCount > 1 &&
           isImmutableAndWellDefinedVariable(v, referenceInfo)) {
         // if the variable is referenced more than once, we can only
         // inline it if it's immutable and never defined before referenced.
         Node value;
         if (init != null) {
           value = init.getAssignedValue();
         } else {
           // Create a new node for variable that is never initialized.
           Node srcLocation = declaration.getNode();
           value = NodeUtil.newUndefinedNode(srcLocation);
         }
         Preconditions.checkNotNull(value);
         inlineWellDefinedVariable(v, value, referenceInfo.references);
         staleVars.add(v);
+        /**
+         * TODO(johnlenz,mraleph)
+         * This optimization fails for
+         *
+         * var v;
+         * function f() {
+         *   v = Random();
+         *   var y = v;
+         *   if (u) {
+         *     v = 3;
+         *   }
+         *   alert(x==v);
+         * }
+         *
+         * and another variant:
+         *
+         *   function f() {
+         *     var v;
+         *     function g() {
+         *       v = Random();
+         *     }
+         *     g(); alert(v); v = 42; g();
+         *   }
+         *
+         * The issue is that in the first example, v is referenced but
+         * not-aliased in any scope other than in the function f. It's a
+         * case where inlining the variable definition may introduce a
+         * difference between whether or not the code is well-defined.
+         *
+         * In the second example, v is only referenced, not aliased. The
+         * issue here is that it may be difficult to determine whether or
+         * not v has been initialized inside f() and that the issue is
+         * independent of whether or not v is externally reachable.
+         *
+         * Note: an externally reachable variable is always inlineable,
+         * even if it's not aliased.
+         */
+        // There is a bug for this case, https://code.google.com/p/v8/issues/detail?id=1053
+        /*
+        if (refCount == 1 && maybeModifiedArguments) {
+          inlineWellDefinedVariable(v, v.getInitialValue(), referenceInfo.references);
+        }*/
       } else if (refCount == firstRefAfterInit) {
         // The variable likely only read once, try some more
         // complex inlining heuristics.
         Reference reference = referenceInfo.references.get(
             firstRefAfterInit - 1);
         if (canInline(declaration, init, reference)) {
           inline(v, declaration, init, reference);
           staleVars.add(v);
         }
       } else if (declaration != init && refCount == 2) {
         if (isValidDeclaration(declaration) && isValidInitialization(init)) {
           // The only reference is the initialization, remove the assignment and
           // the variable declaration.
           Node value = init.getAssignedValue();
           Preconditions.checkNotNull(value);
           inlineWellDefinedVariable(v, value, referenceInfo.references);
           staleVars.add(v);
         }
       }
 
       // If this variable was not inlined normally, check if we can
       // inline an alias of it. (If the variable was inlined, then the
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
       if (!maybeModifiedArguments &&
           !staleVars.contains(v) &&
           referenceInfo.isWellDefined() &&
           referenceInfo.isAssignedOnceInLifetime()) {
           // Inlining the variable based solely on well-defined and assigned
           // once is *NOT* correct. We relax the correctness requirement if
           // the variable is declared constant.
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
           if (aliasCandidates.containsKey(nameNode)) {
             AliasCandidate candidate = aliasCandidates.get(nameNode);
             if (!staleVars.contains(candidate.alias) &&
                 !isVarInlineForbidden(candidate.alias)) {
               Reference aliasInit;
               aliasInit = candidate.refInfo.getInitializingReference();
               Node value = aliasInit.getAssignedValue();
               Preconditions.checkNotNull(value);
               inlineWellDefinedVariable(candidate.alias,
                   value,
                   candidate.refInfo.references);
               staleVars.add(candidate.alias);
             }
           }
         }
       }
     }
