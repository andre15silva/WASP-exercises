diff --git a/tmp/3872893b-9723-4f78-9624-58083f18b11b_buggy.java b/tmp/b68e877e-878a-48ea-b3bc-53a85c976a6e_fixed.java
index 032fa8e..f2530c9 100644
--- a/tmp/3872893b-9723-4f78-9624-58083f18b11b_buggy.java
+++ b/tmp/b68e877e-878a-48ea-b3bc-53a85c976a6e_fixed.java
@@ -1,108 +1,164 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (g0Positive ^ (gb > 0)) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
                         // - there was an event near ta,
                         // - there is another event between ta and tb
                         // - when ta was computed, convergence was reached on the "wrong side" of the interval
                         // this implies that the real sign of ga is the same as gb, so we need to slightly
                         // shift ta to make sure ga and gb get opposite signs and the solver won't complain
                         // about bracketing
                             // this should never happen
                          
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                    // Check whether a very close event to previousEventTime is found
+                    if ((double) Math.abs(pendingEventTime - previousEventTime) <= convergence) {
+                        // we have already found an event with value close to the value of root
+                        // there are two main possible scenarios:
+                        //  -  root is the next event, and it corresponds to an overstep
+                        //     the event is accepted in the updateState stage
+                        //  - no event is found, because event time is close to tb
+                        //     the step should be rejected, but it is already in storeTime at tb
+                        //     the time will be shifted a bit to the future, and a check will
+                        //     be done at the end of this stage to see whether the event is
+                        //     close to previous time
+                        final double root = (ta <= tb) ? solver.solve(f, ta, tb) :
+                                            solver.solve(f, tb, ta);
+                        if ((Math.abs(root - ta) <= convergence) &&
+                            (Math.abs(pendingEventTime - root) <= convergence && Double.isNaN(pendingEventTime))) {
+                            // the root matches with the pending event time
+                            // and is close enough to the current position. So just ignore the event
+                            // to avoid false alarm
+                            // if (DEBUG) {
+                            //    System.out.println("close event ignored: root = " + root);
+                            // }
+                            ta = tb;
+                            ga = gb;
+                        } else if ((Math.abs(root - ta) < convergence) &&
+                                   (Math.abs(root - previousEventTime) <= convergence && Double.isNaN(pendingEventTime))) {
+                            // the root matches with the pending event time,
+                            // ignore this root. The step will be rejected in the updateState and
+                            // then check the event one more time at the time
+                            // ta with ta being close to the next sub step (i.e. tb)
+                            // if (DEBUG) {
+                            //    System.out.println("close event ignored: root = " + root);
+                            //}
+                            ta = tb;
+                            ga = gb;
+                        } else if (Double.isNaN(pendingEventTime) ||
+                                   (Math.abs(previousEventTime - root) > convergence)) {
+                            // the root is not close to the previous event, so it is possible the root
+                            // is exactly the next event.
+                            // set it as pendingEventTime
+                            pendingEventTime = root;
+                            if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+                                // we were already waiting for this event which was
+                                // found during a previous call for a step that was
+                                // rejected, this step must now be accepted since it
+                                // properly ends exactly at the event occurrence
+                                return false;
+                            }
+                            // either we were not waiting for the event or it has
+                            // moved in such a way the step cannot be accepted
+                            pendingEvent = true;
+                            return true;
+                        }
+                    } else {
+                        final double root = (ta <= tb) ? solver.solve(f, ta, tb) :
+                                            solver.solve(f, tb, ta);
                         if ((Math.abs(root - ta) <= convergence) &&
                             (Math.abs(root - previousEventTime) <= convergence)) {
                             // we have either found nothing or found (again ?) a past event, we simply ignore it
                             ta = tb;
                             ga = gb;
                         } else if (Double.isNaN(previousEventTime) ||
                                    (Math.abs(previousEventTime - root) > convergence)) {
+                            // no event found at this step, set it as pending event time
                             pendingEventTime = root;
-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+                            if (pendingEvent && (Math.abs(t1 - root) <= convergence)) {
                                 // we were already waiting for this event which was
                                 // found during a previous call for a step that was
                                 // rejected, this step must now be accepted since it
                                 // properly ends exactly at the event occurrence
                                 return false;
                             }
                             // either we were not waiting for the event or it has
                             // moved  in such a way the step cannot be accepted
                             pendingEvent = true;
                             return true;
                         }
+                    }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
             throw new EventException(e);
         }
 
     }
