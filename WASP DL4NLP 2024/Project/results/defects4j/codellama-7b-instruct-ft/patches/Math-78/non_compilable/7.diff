diff --git a/tmp/4c4a404c-c6dd-413c-9b40-faf16a24163d_buggy.java b/tmp/0eb37179-3bb1-4ea2-b98f-3f73bed26dae_fixed.java
index 032fa8e..237007b 100644
--- a/tmp/4c4a404c-c6dd-413c-9b40-faf16a24163d_buggy.java
+++ b/tmp/0eb37179-3bb1-4ea2-b98f-3f73bed26dae_fixed.java
@@ -1,108 +1,139 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
                 if (g0Positive ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
-                            return false;
-                        }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
                         pendingEvent = true;
                         return true;
+                    } else if (Math.abs(root - r1) <= tolerance) {
+                        // event very close to the root that we have found, so we need to check
+                        // that we do not have a close event on the other side of the root
+                        increasing = ga > 0;
+                        final UnivariateRealFunction fprime = new UnivariateRealFunction() {
+                            public double value(final double t) throws FunctionEvaluationException {
+                                try {
+                                    interpolator.setInterpolatedTime(t);
+                                    return handler.g(t, interpolator.getInterpolatedState());
+                                } catch (DerivativeException e) {
+                                    throw new FunctionEvaluationException(e, t);
+                                } catch (EventException e) {
+                                    throw new FunctionEvaluationException(e, t);
+                                }
+                            }
+                        };
+                        final String fname = handler.getClass().getName();
+                        final double checkValue = new UnivariateRealSolver()
+                                .solve(new UnivariateRealFunction() {
+                                            public double value(final double t) {
+                                                return fprime.value((t - root) / r2 - 0.5) + f.value(t);
+                                            }
+                                        }, 0,
+                                        100,
+                                        tolerance / (100));
+                        if (MathUtils.equals(checkValue, 0.0, tolerance)) {
+                            // looks like the event is very close to one of the endpoints, so we need to
+                            // reconsider the event time and its sign
+                            ga = gb;
+                            pendingEventTime = root;
+                            pendingEvent = true;
+                            return true;
+                        } else {
+                            // the event is not very close to the end of the interval
+                            ta = tb;
+                            ga = gb;
+                        }
+                    } else if ((((increasing && (root > r1)) || (!increasing && (root < r1))) ||
+                                ((!increasing && (root > r1)) || (increasing && (root < r1)))) &&
+                               (Math.abs(root - r1) < tolerance)) {
+                        // event sign very close to the given one, so we need to reconsider the event sign
+                        ga = gb;
+                        pendingEventTime = root;
+                        pendingEvent = true;
+                        return true;
+                    } else {
+                        // the event is not in the given interval
+                        ta = tb;
+                        ga = gb;
                     }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
             throw new EventException(e);
         }
 
     }
