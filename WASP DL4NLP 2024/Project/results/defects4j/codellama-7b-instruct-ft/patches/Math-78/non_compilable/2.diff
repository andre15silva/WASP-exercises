diff --git a/tmp/c70a7741-2268-4717-89eb-155eac463322_buggy.java b/tmp/48e447cb-27f7-4660-9df3-ee6ff1db9448_fixed.java
index 032fa8e..c2199f1 100644
--- a/tmp/c70a7741-2268-4717-89eb-155eac463322_buggy.java
+++ b/tmp/48e447cb-27f7-4660-9df3-ee6ff1db9448_fixed.java
@@ -1,108 +1,181 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
+                // check if the endpoints are close events
+                if (( Math.abs((r1 - ta) - (r2 - tb)) <= (0.5 * (10 * tolerance)) ) &&
+                    ((r1 - ta) * (r2 - tb) < 0)) {
+
+                    // close events: the sign change occurs exactly at the boundaries
+                    // if events are close but their value are the same, this is a sign
+                    // change that occurred during the last interval where the event is not reported
+                    // we need to detect such events to avoid singularity
+                    final int event = handler.eventOccurred(tb, interpolator.getInterpolatedState(), forward);
+                    if (event == CONTINUE) {
+                        // event not found
+                    } else if (event == OVERSHOOT_STOP) { // this may happen if the handler is continuous
+                            // we compute some g(t) and g'(t) at the root and test the two conditions for
+                            // event detection.
+                        final UnivariateRealFunction f = new UnivariateRealFunction() {
+                            public double value(final double t) throws FunctionEvaluationException {
+                                try {
+                                    interpolator.setInterpolatedTime(t);
+                                    return handler.g(t, interpolator.getInterpolatedState());
+                                } catch (DerivativeException e) {
+                                    throw new FunctionEvaluationException(e, t);
+                                } catch (EventException e) {
+                                    throw new FunctionEvaluationException(e, t);
+                                }
+                            }
+                        };
+                        final BrentSolver solver = new BrentSolver();
+                        solver.setAbsoluteAccuracy(convergence);
+                        solver.setMaximalIterationCount(maxIterationCount);
+                        tb      = t0 - (interpolator.isForward() ? convergence : -convergence);
+                        ta      = t0;
+                        previousEventTime = r1;
+                        final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                        if ((Math.abs(root - ta) <= convergence) &&
+                         (Math.abs(root - previousEventTime) <= convergence)) {
+                            // we have either found nothing or found (again ?) a past event, we simply ignore it
+                            ta = tb;
+                            ga = gb;
+                        } else if (Double.isNaN(previousEventTime) ||
+                                   (Math.abs(previousEventTime - root) > convergence)) {
+                            // new event found
+                            previousEventTime = r1;
+                            pendingEventTime = root;
+                            if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+                                // we were already waiting for this event which was
+                                // found during a previous call for a step that was
+                                // rejected, this step must now be accepted since it
+                                // properly ends exactly at the event occurrence
+                                return false;
+                            }
+                            // either we were not waiting for the event or it has
+                            // moved in such a way the step cannot be accepted
+                            pendingEvent = true;
+                            return true;
+                        }
+                    }
+                }
+                final double gap = (r2 - r1);
                 // check events occurrence
                 if (g0Positive ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
                         // - there was an event near ta,
                         // - there is another event between ta and tb
                         // - when ta was computed, convergence was reached on the "wrong side" of the interval
                         // this implies that the real sign of ga is the same as gb, so we need to slightly
                         // shift ta to make sure ga and gb get opposite signs and the solver won't complain
                         // about bracketing
                             // this should never happen
                          
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
+                        // new event found
+                        previousEventTime = r1;
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
                             // rejected, this step must now be accepted since it
                             // properly ends exactly at the event occurrence
                             return false;
                         }
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
                         return true;
                     }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
-            }
+            } else if (forward && (r1 > Double.POSITIVE_INFINITY)) {
+                throw new EventException(Double.POSITIVE_INFINITY,
+                                        Double.POSITIVE_INFINITY,
+                                        -1,
+                                        +1,
+                                        e);
+            } else if (!forward && (r2 < Double.NEGATIVE_INFINITY)) {
+                throw new EventException(Double.NEGATIVE_INFINITY,
+                                        Double.NEGATIVE_INFINITY,
+                                        -1,
+                                        -1,
+                                        e);
+            } else {
                 throw new EventException(e);
             }
+        }
 
     }
