diff --git a/tmp/4fba55b8-beac-438a-94cc-095cbab470f6_buggy.java b/tmp/ed2f35e3-0a1f-4f23-8b12-7c5f21e77991_fixed.java
index 70cafe0..28126b8 100644
--- a/tmp/4fba55b8-beac-438a-94cc-095cbab470f6_buggy.java
+++ b/tmp/ed2f35e3-0a1f-4f23-8b12-7c5f21e77991_fixed.java
@@ -1,18 +1,28 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
             if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
                 if (row == null) {
                 row = i;
                 } else {
+                    // Optimum if only one variable in objective and constraint set.
+                    // See JAC 3.4 "Single Variable and Single Constraint"
+                    if (getWidth() == 1 && getNumConstraints() == 1) {
+                        final double objectiveOffset = -getObjectiveFunction().getValue();
+                        final double objectiveCoefficient = getObjectiveFunction().getCoefficients()[0];
+                        final double rhsValue = new LinearEqualityConstraint(objectiveCoefficient, objectiveOffset).getRHS();
+                        return objectiveCoefficient > 0.0 ?
+                                (getHeight() == 1 ? 0 : getHeight() - 1) : // objective has a positive coefficient, so optimize its negative
+                                (!MathUtils.equals(rhsValue, 0, epsilon) ? getHeight() : null); // objective has an empty rhs, so minimize and maximize if valid
+                    }
                     return null;
                 }
             }
         }
         return row;
     }
