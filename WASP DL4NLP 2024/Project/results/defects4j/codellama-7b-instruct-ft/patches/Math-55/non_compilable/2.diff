diff --git a/tmp/9d155d17-803a-4975-8590-0d1bbc3a08e9_buggy.java b/tmp/767b5fbd-2237-4eb4-9f56-5192c03404ce_fixed.java
index 1478ee1..6d69c8c 100644
--- a/tmp/9d155d17-803a-4975-8590-0d1bbc3a08e9_buggy.java
+++ b/tmp/767b5fbd-2237-4eb4-9f56-5192c03404ce_fixed.java
@@ -1,24 +1,26 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
 
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
 
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      final double rho2 = v1.crossProductTo(v2).getNormSq();
 
 
       // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x)
+             .subtract(new Vector3D(v1.x * v2.z - v1.z * rho2, v1.y * v2.x - v1.x * v2.y, v1.y * rho2 - v1.x * v2.x));
 
   }
