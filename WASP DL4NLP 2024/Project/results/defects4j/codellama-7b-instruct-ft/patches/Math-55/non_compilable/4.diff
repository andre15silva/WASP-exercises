diff --git a/tmp/4a7291d7-ad73-4962-8a76-85cde092f9dc_buggy.java b/tmp/78d7ec02-5fa1-43cd-91e7-b276b64d0781_fixed.java
index 1478ee1..d4d182d 100644
--- a/tmp/4a7291d7-ad73-4962-8a76-85cde092f9dc_buggy.java
+++ b/tmp/78d7ec02-5fa1-43cd-91e7-b276b64d0781_fixed.java
@@ -1,24 +1,27 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
 
       // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // to ensure their norm are similar to 1
 
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+    double rho    = v1.dotProduct(v2) * FastMath.scalb(-100, 1) / v2.dotProduct(v2);
+    Vector3D smallV = new Vector3D(rho, v1);
+    Vector3D v3 = new Vector3D(1.0, v2);
+    v3 = v3.subtract(smallV);
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);
 
   }
