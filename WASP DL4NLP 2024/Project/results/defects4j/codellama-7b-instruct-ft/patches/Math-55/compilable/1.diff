diff --git a/tmp/0d0ffddb-728f-4d46-a69d-f83e7b88fc89_buggy.java b/tmp/2458d07c-dbdb-4e34-9214-cdd7dd36b20d_fixed.java
index 1478ee1..617134a 100644
--- a/tmp/0d0ffddb-728f-4d46-a69d-f83e7b88fc89_buggy.java
+++ b/tmp/2458d07c-dbdb-4e34-9214-cdd7dd36b20d_fixed.java
@@ -1,24 +1,22 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
-
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
+      // v3 without loss of precision  Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
 
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // compute cross product from v2 and v1 and not v1 and v2
+      return new Vector3D(v2.y * v1.z - v2.z * v1.y, v2.z * v1.x - v2.x * v1.z, v2.x * v1.y - v2.y * v1.x);
 
   }
