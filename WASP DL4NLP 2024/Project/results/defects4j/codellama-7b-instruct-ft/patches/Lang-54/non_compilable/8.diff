diff --git a/tmp/fc149fda-237a-4ec3-b463-945d4835d67c_buggy.java b/tmp/5358fded-8894-4d49-92dd-bc0e0fba82a1_fixed.java
index 90fe130..7cad556 100644
--- a/tmp/fc149fda-237a-4ec3-b463-945d4835d67c_buggy.java
+++ b/tmp/5358fded-8894-4d49-92dd-bc0e0fba82a1_fixed.java
@@ -1,61 +1,58 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
-        int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        if (len == 2) {
-            return new Locale(str, "");
+        if (str.indexOf('_') == -1) {
+            int i = str.indexOf('_', 0);
+            if (i != -1) {
+                // try again with the default under bar
+                str = str.replace('_', '-');
+            }
+            if (i == -1) {
+                if (str.length() == 2) {     // only language (no country)
+                    return new Locale(str.toLowerCase(), "");
+                } else if (str.length() >= 4 && str.charAt(3) == '-') {    // only language+variant
+                    return new Locale(str.substring(0, 2).toLowerCase(), str.substring(3));
                 } else {
-            if (str.charAt(2) != '_') {
+                    // TODO add language+country
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
         } else {
-                if (str.charAt(5) != '_') {
-                    throw new IllegalArgumentException("Invalid locale format: " + str);
-                }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            int i = str.indexOf('_');
+            if (i == 2) {    // only language (no country)
+                return new Locale(str.substring(0, 2).toLowerCase(), "");
+            } else if (i == 5) {    // country
+                return new Locale(str.substring(0, 2).toLowerCase(), str.substring(3, 5).toUpperCase());
+            } else {    // language+country (or variant)
+                return i == 1 || i == 10 ? new Locale(str.substring(0, i).toLowerCase(), str.substring(i + 1, i + 3).toUpperCase(), str.substring(i + 4)) : null;
             }
         }
     }
