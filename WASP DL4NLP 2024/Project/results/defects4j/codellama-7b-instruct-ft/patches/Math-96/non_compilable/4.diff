diff --git a/tmp/db0f1cb0-0cf5-4d55-91a2-dbd629a98fe6_buggy.java b/tmp/1d443bb3-a51b-4a11-b1f2-f6512d411dc7_fixed.java
index f674e52..956aef6 100644
--- a/tmp/db0f1cb0-0cf5-4d55-91a2-dbd629a98fe6_buggy.java
+++ b/tmp/1d443bb3-a51b-4a11-b1f2-f6512d411dc7_fixed.java
@@ -1,41 +1,42 @@
     /**
      * Test for the equality of two Complex objects.
      * <p>
      * If both the real and imaginary parts of two Complex numbers
      * are exactly the same, and neither is <code>Double.NaN</code>, the two
      * Complex objects are considered to be equal.</p>
      * <p>
      * All <code>NaN</code> values are considered to be equal - i.e, if either
      * (or both) real and imaginary parts of the complex number are equal
      * to <code>Double.NaN</code>, the complex number is equal to
      * <code>Complex.NaN</code>.</p>
      *
      * @param other Object to test for equality to this
      * @return true if two Complex objects are equal, false if
      *         object is null, not an instance of Complex, or
      *         not equal to this Complex instance
      * 
      */
     public boolean equals(Object other) {
         boolean ret;
         
         if (this == other) { 
             ret = true;
         } else if (other == null) {
             ret = false;
         } else  {
             try {
                 Complex rhs = (Complex)other;
+                if ( r == other.doubleValue() ) return true;
                 if (rhs.isNaN()) {
                     ret = this.isNaN();
                 } else {
                     ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
                 }
             } catch (ClassCastException ex) {
                 // ignore exception
                 ret = false;
             }
         }
       
         return ret;
     }
