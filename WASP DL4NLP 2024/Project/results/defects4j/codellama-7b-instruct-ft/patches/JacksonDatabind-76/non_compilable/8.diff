diff --git a/tmp/3419dc4b-b115-433f-93f1-0e9e86764002_buggy.java b/tmp/6332f375-507f-45a5-9fba-e73c4953bdd7_fixed.java
index 3effef5..2a472b5 100644
--- a/tmp/3419dc4b-b115-433f-93f1-0e9e86764002_buggy.java
+++ b/tmp/6332f375-507f-45a5-9fba-e73c4953bdd7_fixed.java
@@ -1,73 +1,74 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
+                creatorProp = checkIfResolvable(creator.findCreatorProperty(propName));
+                if(creatorProp.isRequiresObjectId()
+                        || (creatorProp.hasDefaultValue() && tokens.isEmpty())) {
+                    p.nextToken(); // to point to value
+                    if (!buffer.assignParameter(creatorProp,
+                            creatorProp.deserialize(p, ctxt))) {
                         tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
                     }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                } else{
+                    tokens.writeFieldName(propName);
+                    tokens.copyCurrentStructure(p);
                 }
-                continue;
             }
             // Object Id property?
-            if (buffer.readIdProperty(propName)) {
+            else if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
+            else {
                 SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
-            tokens.writeFieldName(propName);
+                SettableBeanProperty.CreatorPropertyCreator creatorPropertyCreator = null;
+                if((creatorPropertyCreator = checkIfCreatorInjected(prop))!=null) {
+                    t = p.nextToken();
+                    Object bean = creatorPropertyCreator.createUsingCreator(ctxt, buffer);
+                    while (t == JsonToken.FIELD_NAME) {
+                        p.nextToken();
                         tokens.copyCurrentStructure(p);
+                        t = p.nextToken();
+                    }
+                    tokens.writeEndObject();
+                    tokens.writeEndObject();
+                    return bean;
+                } else if(prop != null) {
+                    p.nextToken();
+                    Object propVal = prop.deserialize(p, ctxt);
+                    if(tokens.isEmpty()) {
+                        beansToConstructWith = creator;
+                    }
+                    buffer.bufferProperty(prop, propVal);
+                }
                 // "any property"?
-            if (_anySetter != null) {
+                else if (_anySetter != null) {
                     buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
                 }
             }
+        }
 
         // We hit END_OBJECT, so:
         Object bean;
         // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
