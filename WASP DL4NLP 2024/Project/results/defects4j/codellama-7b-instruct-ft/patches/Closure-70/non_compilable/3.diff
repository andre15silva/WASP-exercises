diff --git a/tmp/2d3306f2-7064-4a6c-ad88-a9cd28d24360_buggy.java b/tmp/21ce2a32-a65d-4d58-8cd6-a49ac9431513_fixed.java
index 1530b34..5d4c844 100644
--- a/tmp/2d3306f2-7064-4a6c-ad88-a9cd28d24360_buggy.java
+++ b/tmp/21ce2a32-a65d-4d58-8cd6-a49ac9431513_fixed.java
@@ -1,23 +1,47 @@
     /**
      * Declares all of a function's arguments.
      */
     private void declareArguments(Node functionNode) {
       Node astParameters = functionNode.getFirstChild().getNext();
       Node body = astParameters.getNext();
       FunctionType functionType = (FunctionType) functionNode.getJSType();
       if (functionType != null) {
         Node jsDocParameters = functionType.getParametersNode();
         if (jsDocParameters != null) {
           Node jsDocParameter = jsDocParameters.getFirstChild();
           for (Node astParameter : astParameters.children()) {
             if (jsDocParameter != null) {
               defineSlot(astParameter, functionNode,
                   jsDocParameter.getJSType(), true);
               jsDocParameter = jsDocParameter.getNext();
             } else {
               defineSlot(astParameter, functionNode, null, true);
             }
           }
         }
       }
+      if (body.isBlock()) {
+        for (Node nameDecl : body.children()) {
+          if (nameDecl.isName()) {
+            String name = nameDecl.getString();
+            Node nameNode = getName(name, nameDecl);
+            if (nameNode != null) {
+              warnDuplicate(name, "function parameter", null,
+                  false, nameNode);
+            }
+          } else if (nameDecl.isVar()) {
+            Node nameNode = nameDecl.getFirstChild();
+            String name = nameNode.getString();
+            Node nameVarNode = getName(name, nameNode);
+            if (nameVarNode != null) {
+              warnVariableRedeclaration(name, nameVarNode);
+              this.usedVars[nodeIdMap.getOrAddId(nameNode)] = true;
+              warnInitializingVariable(name, nameNode,
+                  nameNode.getJSType());
+            } else {
+              this.togetherUsed[nodeIdMap.getOrAddId(nameNode)] = true;
+            }
+          }
+        }
+      }
     } // end declareArguments
