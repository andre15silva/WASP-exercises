diff --git a/tmp/03e1138a-809e-40cf-89dd-2e96f6cff2b4_buggy.java b/tmp/4e64ec92-834d-43ac-afc8-12336fbef522_fixed.java
index e4d90e7..a7512e9 100644
--- a/tmp/03e1138a-809e-40cf-89dd-2e96f6cff2b4_buggy.java
+++ b/tmp/4e64ec92-834d-43ac-afc8-12336fbef522_fixed.java
@@ -1,45 +1,55 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
         sb.append(getPropertyType(property).toString());
 
         ++i;
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
-      return sb.toString();
+      String result = sb.toString();
+      if (getReferenceType().isRecordType()) {
+        ObjectType loop = getReferenceType().toMaybeObjectType();
+        while ((loop = loop.getReferencedType()) != null
+            && loop.toMaybeObjectType() == this) {
+          sb.append(", ...");
+          loop.getDefinitelyAssignedProperties().appendPropertyNamesTo(
+              sb, "a", forAnnotations);
+        }
+      }
+      return result;
     } else {
       return "{...}";
     }
   }
