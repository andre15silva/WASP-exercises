diff --git a/tmp/0bf339f1-ccac-4ac1-81e7-a7162d876d7a_buggy.java b/tmp/5ac3ddbf-28f7-4ed8-a63b-bb9921fd9d9f_fixed.java
index e4d90e7..f16e925 100644
--- a/tmp/0bf339f1-ccac-4ac1-81e7-a7162d876d7a_buggy.java
+++ b/tmp/5ac3ddbf-28f7-4ed8-a63b-bb9921fd9d9f_fixed.java
@@ -1,45 +1,61 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
         sb.append(getPropertyType(property).toString());
 
+        ObjectType referencedType = getReferencedType();
+        if (referencedType != null && referencedType instanceof RecordType) {
+          sb.append(", ...");
+          sb.append(referencedType.toString(true));
+          break;
+        }
+
         ++i;
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
+      if (forAnnotations) {
+        sb.replace("{loop: ?,", "{loop: ?, ...");
+        sb.replace("{loop: number,", "{loop: number, ...");
+        sb.replace("{loop: boolean,", "{loop: boolean, ...");
+        sb.replace("{loop: _,", "{loop: _, ...");
+        sb.replace("{loop: {_: ?,", "{loop: {_: ?, ...");
+        sb.replace("{loop: {_: number,", "{loop: {_: number, ...");
+        sb.replace("{loop: {_: boolean,", "{loop: {_: boolean, ...");
+      }
       return sb.toString();
     } else {
       return "{...}";
     }
   }
