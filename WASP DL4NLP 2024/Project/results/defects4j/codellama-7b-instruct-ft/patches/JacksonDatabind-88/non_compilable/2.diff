diff --git a/tmp/876286e8-3c8a-40fe-8b1c-a073fc6af66e_buggy.java b/tmp/e4740090-6a95-4066-aa15-0792816a0184_fixed.java
index ae1f3a6..0bca4bf 100644
--- a/tmp/876286e8-3c8a-40fe-8b1c-a073fc6af66e_buggy.java
+++ b/tmp/e4740090-6a95-4066-aa15-0792816a0184_fixed.java
@@ -1,34 +1,46 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
                 // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+            if (t.hasGenericTypes()) {
+                String clsName = _baseType.toCanonical(); // may need to have the same
+                                                        // concrete type.
+                JavaType ct = tf.constructSpecializedType(t, clsName);
+                if (!t.isAssignableFrom(ct)) { 
+                    // Let's not allow deserialization, that can potentially lead
+                    // to security vulnerabilities
+                    IOException ioe = new IllegalArgumentException("Invalid type id '"+id+"'; type not subtype of "+clsName);
+                    ctxt.getParser().wrapException("problem deserializing property '"+_baseTypeName+"'", ioe);
+                }
+                return ct;
+            }
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
         return tf.constructSpecializedType(_baseType, cls);
     }
