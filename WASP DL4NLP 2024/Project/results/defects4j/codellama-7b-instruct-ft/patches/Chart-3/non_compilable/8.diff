diff --git a/tmp/0f0c75d9-bb2b-4bc3-976f-b6ddf4786518_buggy.java b/tmp/d2082865-0729-46e5-b78f-379e85b1314b_fixed.java
index 388771b..5be5130 100644
--- a/tmp/0f0c75d9-bb2b-4bc3-976f-b6ddf4786518_buggy.java
+++ b/tmp/d2082865-0729-46e5-b78f-379e85b1314b_fixed.java
@@ -1,37 +1,40 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
+            TimeSeriesDataItem last = (TimeSeriesDataItem) this.data
+                                                .get(start);
+            copy.updateMinMax(last);
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
