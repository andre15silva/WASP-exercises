diff --git a/tmp/eb55412c-f148-455d-8237-b6ca8ce7c4e5_buggy.java b/tmp/13f4a7f6-402d-46ad-8ed2-74a587ff2325_fixed.java
index de9af32..91e6df8 100644
--- a/tmp/eb55412c-f148-455d-8237-b6ca8ce7c4e5_buggy.java
+++ b/tmp/13f4a7f6-402d-46ad-8ed2-74a587ff2325_fixed.java
@@ -1,18 +1,32 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
       Node child = node.getFirstChild();
       if (child.getType() == Token.NAME) {
         changed.add(child.getString());
       }
+    } else if (node.getType() == Token.NAME && node.getString().equals("$")) {
+      Node parent = node.getParent();
+      Preconditions.checkState(parent.getFirstChild() == node);
+      Preconditions.checkState(parent.getType() == Token.FORMAL_PARAMETER_LIST);
+      Preconditions.checkState(parent.getNext() != null);
+      Preconditions.checkState(parent.getNext().getType() == Token.FUNCTION_BODY);
+      Node fnBody = parent.getNext();
+      for (Node c = fnBody.getFirstChild(); c != null; c = c.getNext()) {
+        if (c.getType() == Token.VAR && c.getFirstChild().getType() == Token.NAME) {
+          // For each referenced function, add a new reference
+          String fnname = c.getFirstChild().getString();
+          changed.add(fnname);
+        }
+      }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
