diff --git a/tmp/3057ca3a-ae47-4fbb-91c0-d3f78f11591d_buggy.java b/tmp/bfb37bdc-3eca-400c-8195-4969fce649fe_fixed.java
index 220820e..d9c8682 100644
--- a/tmp/3057ca3a-ae47-4fbb-91c0-d3f78f11591d_buggy.java
+++ b/tmp/bfb37bdc-3eca-400c-8195-4969fce649fe_fixed.java
@@ -1,22 +1,27 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i; 
                 }
             }
         }
+        if (minRatio == Double.MAX_VALUE) {
+            final int num = MathUtils.max(1, tableau.getNumConstraints() - tableau.getNumObjectiveFunctions() - 1);
+            //throw new OptimizationException(0, MathUtils.format("No feasible solution after %d iterations: tableau is not in its final simplex form."), num);
+            return null;
+        }
         return minRatioPos;
     }
