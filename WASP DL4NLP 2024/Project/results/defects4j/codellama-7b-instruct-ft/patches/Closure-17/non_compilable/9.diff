diff --git a/tmp/8053d691-59e7-4930-badc-10b9de6c5f79_buggy.java b/tmp/45a407b5-28af-476a-92d4-1d18f6d690e8_fixed.java
index eb9ce9f..f6048fe 100644
--- a/tmp/8053d691-59e7-4930-badc-10b9de6c5f79_buggy.java
+++ b/tmp/45a407b5-28af-476a-92d4-1d18f6d690e8_fixed.java
@@ -1,60 +1,77 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       } else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
       } else if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
+        } else if (info.isConstant()) {
           if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+            JSType knownType = null;
             // If rValue has a type-cast, we use the type in the type-cast.
             // If rValue's type was already computed during scope creation,
             // then we can safely use that.
+            if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
               return rValue.getJSType();
-              } else if (rValue.isOr()) {
+            } else if (rValue.isOr() && rValue.getFirstChild().isName()) {
               // Check for a very specific JS idiom:
               // var x = x || TYPE;
               // This is used by Closure's base namespace for esoteric
               // reasons.
               Node firstClause = rValue.getFirstChild();
               Node secondClause = firstClause.getNext();
               boolean namesMatch = firstClause.isName()
                   && lValue.isName()
                   && firstClause.getString().equals(lValue.getString());
               if (namesMatch && secondClause.getJSType() != null
                   && !secondClause.getJSType().isUnknownType()) {
                 return secondClause.getJSType();
               }
             }
+            if (rValue.isObjectLit() && !lValue.isQualifiedName()) {
+              JSType objectLitType = rValue.getJSType();
+              // For an extern object literal, the type of the l-value can be
+              // very loose when we first encounter it.  When it's actually
+              // used in a function, its type can be very precise if there's
+              // a corresponding {@code @record}.
+              if (sourceName.contains(".extern.") &&
+                  objectLitType != null &&
+                  !objectLitType.isUnknownType()) {
+                String typeName = this.node.getEnclosingTypeName();
+                if (typeName != null) {
+                  JSType recordType =
+                      scope.getEnumType(scope.resolveSimpleName(typeName));
+                  if (objectLitType.isSubtypeOf(recordType)) {
+                    return this.scope.createAnonymousObjectType(
+                        recordType.toMaybeRecordType());
+                  }
+                }
+              }
             }
           }
         }
       }
 
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
