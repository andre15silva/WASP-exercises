diff --git a/tmp/514324d9-a4fb-4d08-b3fb-cd8253e4a0ee_buggy.java b/tmp/e7558fb3-d042-4a0a-b982-4ecae37adf2c_fixed.java
index eb9ce9f..a92b870 100644
--- a/tmp/514324d9-a4fb-4d08-b3fb-cd8253e4a0ee_buggy.java
+++ b/tmp/e7558fb3-d042-4a0a-b982-4ecae37adf2c_fixed.java
@@ -1,60 +1,83 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       } else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
       } else if (info != null) {
-        if (info.hasEnumParameterType()) {
+        if (info.isConstructor() || info.isInterface()) {
+          return createFunctionTypeFromNodes(
+              rValue, lValue.getQualifiedName(), info, lValue);
+        } else if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
-        } else if (info.isConstructor() || info.isInterface()) {
-          return createFunctionTypeFromNodes(
-              rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
+        } else if (info.isConstant()) {
           // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
           if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
+            JSType knownType = null;
+            if (info.isConstant() && rValue.getJSType() != null
+                && !rValue.getJSType().isUnknownType()) {
+              // If rValue has a type-cast, we use the type in the
+              // type-cast. If rValue's type was already computed
+              // during scope creation, then we can safely use that.
               return rValue.getJSType();
-              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
-                Node firstClause = rValue.getFirstChild();
-                Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
-                    && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
+            } else if (!info.isConstant()) {
+              // If the user has given a type annotation even for a
+              // non-constant expression, then it's probably the
+              // intended behavior.
+            } else if (info.isDeprecated() && info.getOriginalCommentString() != null) {
+              // If the user has marked the declaration as @deprecated,
+              // see if the type annotation is more informative than the
+              // other type.
+              List<JSType> types = null;
+              List<String> comments = null;
+              TypeRegistry.parseComments(info.getOriginalCommentString(),
+                  sourceCode,
+                  info.getAssociatedNode(),
+                  false,
+                  false,
+                  info,
+                  null,
+                  rValue.getSourceFileName(),
+                  rValue.getLineno(),
+                  rValue.getCharno(),
+                  rValue.getEndLineno(),
+                  rValue.getEndCharno(),
+                  false,
+                  false,
+                  false,
+                  null,
+                  types=new ArrayList<JSType>(),
+                  comments=new ArrayList<String>());
+
+              for (JSType t : types) {
+                if (!t.isUnknownType()) {
+                  return t;
                 }
               }
+            } else if (info.hasType()) {
+              // This is @const, but the declared type is something
+              // other than @this.
+              return getDeclaredTypeInAnnotation(sourceName, lValue, info);
             }
           }
         }
       }
 
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
