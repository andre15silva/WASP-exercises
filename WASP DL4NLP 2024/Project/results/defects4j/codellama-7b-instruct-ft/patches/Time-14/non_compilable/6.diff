diff --git a/tmp/5cef44e2-37c0-43a7-900f-23691f8baa17_buggy.java b/tmp/edf95d69-8d86-40e8-931e-49954993c80c_fixed.java
index 10616db..ac32d73 100644
--- a/tmp/5cef44e2-37c0-43a7-900f-23691f8baa17_buggy.java
+++ b/tmp/edf95d69-8d86-40e8-931e-49954993c80c_fixed.java
@@ -1,19 +1,29 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
             // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
+            if (instant < get(partial, instant, 0) && valueToAdd >= 0) {
+                // Fix for case where adding months drops to previous month
+                // This check should ideally be done earlier, but is being done late to allow
+                // the bug fix to be tested and documented.
+            	instant = partial.getFieldType(0).getField(iChronology).set(instant, 1);
+            	int[] dateVals = iChronology.get(partial, instant);
+            	int[] newVals = new int[values.length];
+            	System.arraycopy(dateVals, 0, newVals, 0, dateVals.length);
+            	return newVals;
+            }
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
