diff --git a/tmp/43b4df0d-e179-445e-87e7-a5034ebd050d_buggy.java b/tmp/88c17532-2512-4cb3-92bb-85b16d5dde61_fixed.java
index 4bbd561..2529a72 100644
--- a/tmp/43b4df0d-e179-445e-87e7-a5034ebd050d_buggy.java
+++ b/tmp/88c17532-2512-4cb3-92bb-85b16d5dde61_fixed.java
@@ -1,37 +1,48 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
-            boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
-                isHex = true;
-            }
-
             int end = start;
-            while(input.charAt(end) != ';') {
+
+            if (start < input.length() && input.charAt(start) == 'x'
+                    || input.charAt(start) == 'X') {
+                start++;
+            }
+
+            do {
+                if(input.charAt(end) == ';') {
+                    break;
+                }
                 end++;
-            }
+            } while(end < input.length());
 
             int entityValue;
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                if(start < end) {
+                    if(input.charAt(start) == 'x'
+                            || input.charAt(start) == 'X') {
+                        entityValue = Integer.parseInt(
+                                input.subSequence(start + 1, end)
+                                        .toString(),
+                                16);
                     } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                        entityValue = Integer.parseInt(
+                                input.subSequence(start, end).toString(),
+                                10);
+                    }
+                }else {
+                    break;
                 }
             } catch(NumberFormatException nfe) {
-                return 0;
+                break;
             }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            out.write(Character.toChars(entityValue));
+            return 2 + (end - start) + 1;
         }
         return 0;
     }
