diff --git a/tmp/fd11caf8-aeda-4cc6-a522-f720f39c6261_buggy.java b/tmp/2555a441-aae6-4592-9fba-2ecf4a436d11_fixed.java
index 4bbd561..a40f152 100644
--- a/tmp/fd11caf8-aeda-4cc6-a522-f720f39c6261_buggy.java
+++ b/tmp/2555a441-aae6-4592-9fba-2ecf4a436d11_fixed.java
@@ -1,37 +1,44 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
             while(input.charAt(end) != ';') {
                 end++;
             }
 
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
+            // Supplementary characters are written directly to the writer rather than
+            // through out.write(), which cannot handle them.
+            if (Character.isSupplementaryCodePoint(entityValue)) {
+                out.write((Character.highSurrogate(entityValue)));
+                out.write((Character.lowSurrogate(entityValue)));
+            } else {
+                out.write(Character.toChars(entityValue));
+            }
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
