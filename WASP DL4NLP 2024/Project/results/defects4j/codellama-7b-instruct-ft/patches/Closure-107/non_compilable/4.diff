diff --git a/tmp/40ad9492-8da4-4b24-9045-0864ac864c29_buggy.java b/tmp/c46b4307-bbc3-4418-80fc-684814162419_fixed.java
index fa9dfcc..1d951d4 100644
--- a/tmp/40ad9492-8da4-4b24-9045-0864ac864c29_buggy.java
+++ b/tmp/c46b4307-bbc3-4418-80fc-684814162419_fixed.java
@@ -1,61 +1,72 @@
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     if (flags.processJqueryPrimitives) {
       options.setCodingConvention(new JqueryCodingConvention());
     } else {
       options.setCodingConvention(new ClosureCodingConvention());
     }
 
     options.setExtraAnnotationNames(flags.extraAnnotationName);
 
     CompilationLevel level = flags.compilationLevel;
     level.setOptionsForCompilationLevel(options);
 
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
     if (flags.useTypesForOptimization) {
       level.setTypeBasedOptimizationOptions(options);
     }
 
     if (flags.generateExports) {
       options.setGenerateExports(flags.generateExports);
     }
 
     WarningLevel wLevel = flags.warningLevel;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
 
     options.closurePass = flags.processClosurePrimitives;
-
-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
-        flags.processJqueryPrimitives;
+    options.jQueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
+        options.closurePass;
 
     options.angularPass = flags.angularPass;
 
     if (!flags.translationsFile.isEmpty()) {
       try {
         options.messageBundle = new XtbMessageBundle(
             new FileInputStream(flags.translationsFile),
             flags.translationsProject);
       } catch (IOException e) {
         throw new RuntimeException("Reading XTB file", e);
       }
     } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
       // In SIMPLE or WHITESPACE mode, if the user hasn't specified a
       // translations file, they might reasonably try to write their own
       // implementation of goog.getMsg that makes the substitution at
       // run-time.
       //
       // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
       // so we might as well inline it. But shut off the i18n warnings,
       // because the user didn't really ask for i18n.
       options.messageBundle = new EmptyMessageBundle();
+      // Disable the wiring check because this is disabled in Closure
+      // language mode.
+      options.setWarningLevel(DiagnosticGroups.WIRING_FAILS,
+                             CheckLevel.OFF);
+      // Only run warnings that are known to occur, since they may be
+      // generated by Closure library code.
+      options.setWarningLevel(DiagnosticGroups.ALL_WARNINGS,
+                             CheckLevel.WARNING);
+      // But still treat warnings as errors, since they might not be
+      // generated by Closure.
+      options.setWarningLevel(DiagnosticGroups.ALL_CHECKS,
+                             CheckLevel.ERROR);
     }
 
     return options;
   }
