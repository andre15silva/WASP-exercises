diff --git a/tmp/a1edb365-decd-48ac-afd1-556a7b253e15_buggy.java b/tmp/b3700651-ac0f-40e7-87e0-62c478dcdb1f_fixed.java
index fa9dfcc..f4a4648 100644
--- a/tmp/a1edb365-decd-48ac-afd1-556a7b253e15_buggy.java
+++ b/tmp/b3700651-ac0f-40e7-87e0-62c478dcdb1f_fixed.java
@@ -1,61 +1,66 @@
   @Override
   protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     if (flags.processJqueryPrimitives) {
       options.setCodingConvention(new JqueryCodingConvention());
     } else {
       options.setCodingConvention(new ClosureCodingConvention());
     }
 
     options.setExtraAnnotationNames(flags.extraAnnotationName);
 
     CompilationLevel level = flags.compilationLevel;
     level.setOptionsForCompilationLevel(options);
 
     if (flags.debug) {
       level.setDebugOptionsForCompilationLevel(options);
     }
 
     if (flags.useTypesForOptimization) {
       level.setTypeBasedOptimizationOptions(options);
     }
 
     if (flags.generateExports) {
       options.setGenerateExports(flags.generateExports);
     }
 
     WarningLevel wLevel = flags.warningLevel;
     wLevel.setOptionsForWarningLevel(options);
     for (FormattingOption formattingOption : flags.formatting) {
       formattingOption.applyToOptions(options);
     }
 
     options.closurePass = flags.processClosurePrimitives;
 
     options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
         flags.processJqueryPrimitives;
 
     options.angularPass = flags.angularPass;
 
     if (!flags.translationsFile.isEmpty()) {
-      try {
       options.messageBundle = new XtbMessageBundle(
           new FileInputStream(flags.translationsFile),
           flags.translationsProject);
-      } catch (IOException e) {
-        throw new RuntimeException("Reading XTB file", e);
-      }
     } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
       // In SIMPLE or WHITESPACE mode, if the user hasn't specified a
       // translations file, they might reasonably try to write their own
       // implementation of goog.getMsg that makes the substitution at
       // run-time.
       //
       // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
-      // so we might as well inline it. But shut off the i18n warnings,
-      // because the user didn't really ask for i18n.
+      // so we might as well inline it.
+      //
+      // But if we're in WHITESPACE mode with no translations file, then
+      // the i18n warnings will be about the user's calls to goog.getMsg
+      // to verify that the translator has specified strings for each
+      // message, as opposed to the user's calls to _one of_ the calls to
+      // goog.getMsg that might be optimized into the compiled output.
+      // We don't want to warn the user about those missing messages.
       options.messageBundle = new EmptyMessageBundle();
+    } else {
+      // We're in SIMPLE.
+      options.disableI18nNameWiring = true;
     }
 
     return options;
   }
