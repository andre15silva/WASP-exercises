diff --git a/tmp/a456aa52-7de8-40e5-b3ee-d198ae645319_buggy.java b/tmp/798369b1-11d6-4a4d-9d8c-57a9d7cea442_fixed.java
index 7b89a27..8217035 100644
--- a/tmp/a456aa52-7de8-40e5-b3ee-d198ae645319_buggy.java
+++ b/tmp/798369b1-11d6-4a4d-9d8c-57a9d7cea442_fixed.java
@@ -1,76 +1,97 @@
     /**
      * Determines whether a qualified name is inferred.
      * NOTE(nicksantos): Determining whether a property is declared or not
      * is really really obnoxious.
      *
      * The problem is that there are two (equally valid) coding styles:
      *
      * (function() {
      *   /* The authoritative definition of goog.bar. /
      *   goog.bar = function() {};
      * })();
      *
      * function f() {
      *   goog.bar();
      *   /* Reset goog.bar to a no-op. /
      *   goog.bar = function() {};
      * }
      *
      * In a dynamic language with first-class functions, it's very difficult
      * to know which one the user intended without looking at lots of
      * contextual information (the second example demonstrates a small case
      * of this, but there are some really pathological cases as well).
      *
      * The current algorithm checks if either the declaration has
      * JsDoc type information, or @const with a known type,
      * or a function literal with a name we haven't seen before.
      */
     private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
       if (qName != null && qName.endsWith(".prototype")) {
           return false;
       }
 
+      JSType ownerFunctionParamType = null;
+      // if the owner function of the prototype we are setting has a @param
+      // with the name 'a' then we are setting the prototype of a function that
+      // takes only 1 argument with name 'a'. An example would be
+      //   function f() {};
+      //   f.prototype.a.b.c = 3;
+      if (n != null && !n.isRoot() && n.isName()) {
+        Node ownerFunction = n.getParent().getParent().getParent();
+        if (ownerFunction != null &&
+            ownerFunction.getJSDocInfo() != null &&
+            ownerFunction.getJSDocInfo().hasParameterByName("a")) {
+          ownerFunctionParamType = ownerFunction
+              .getJSDocInfo().getParameterType("a");
+        }
+      }
+      if (ownerFunctionParamType != null) {
+        valueType = ownerFunctionParamType.getFunctionParamTypeByName("a");
+      }
+
       boolean inferred = true;
+      boolean inIssue1024WorkaroundMode = false;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
-            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
+            || FunctionTypeBuilder.isFunctionTypeDeclaration(info)
+            || ownerFunctionParamType != null);
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
           return false;
         } else if (!scope.isDeclared(qName, false) &&
             n.isUnscopedQualifiedName()) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
             return false;
           }
         }
       }
-      return inferred;
+      return inferred && !inIssue1024WorkaroundMode;
     }
