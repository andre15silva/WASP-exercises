diff --git a/tmp/40ec2e6c-3869-481c-9389-cb905f0796d1_buggy.java b/tmp/46ab6363-449a-4dee-ae5d-9f155add446c_fixed.java
index 730ab7d..867f3e0 100644
--- a/tmp/40ec2e6c-3869-481c-9389-cb905f0796d1_buggy.java
+++ b/tmp/46ab6363-449a-4dee-ae5d-9f155add446c_fixed.java
@@ -1,48 +1,58 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
-            }
             int offset = 0;
+            long size = rawCentralDirectoryData.length;
             if (hasUncompressedSize) {
-                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                size -= DWORD;
+                this.size = new ZipEightByteInteger(rawCentralDirectoryData,
+                                                   offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
+                size -= DWORD;
+                this.compressedSize = new ZipEightByteInteger(
+                    rawCentralDirectoryData,
                     offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                size -= DWORD;
+                this.relativeHeaderOffset = new ZipEightByteInteger(
+                    rawCentralDirectoryData,
+                    offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
+                size -= WORD;
+                this.diskStart = new ZipLong(rawCentralDirectoryData,
+                                            offset);
                 offset += WORD;
             }
+            if (size > 0) {
+                throw new ZipException("central directory zip64 extended"
+                                       + " information extra field's length"
+                                       + " doesn't match central directory"
+                                       + " data.  Expected length "
+                                       + expectedLength
+                                       + " but is "
+                                       + size);
+            }
         }
     }
