diff --git a/tmp/f745fe7d-be92-4513-a366-59daac4da3ad_buggy.java b/tmp/64f83fbf-6209-40b4-887c-6b2a3ad79443_fixed.java
index 730ab7d..f859008 100644
--- a/tmp/f745fe7d-be92-4513-a366-59daac4da3ad_buggy.java
+++ b/tmp/64f83fbf-6209-40b4-887c-6b2a3ad79443_fixed.java
@@ -1,48 +1,65 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
             if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
+                if (rawCentralDirectoryData.length < expectedLength) {
+                    throw new ZipException("Central directory zip64 extended"
                                            + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
+                                           + " (offset: " + offset
+                                           + ") is less than expected "
+                                           + expectedLength);
+                }
+                else {
+                    int extraFieldLength = rawCentralDirectoryData.length - offset;
+                    System.err.println("Warning: extra field length differs from"
+                                       + " documentation in LocalFileHeader.xml: "
+                                       + extraFieldLength + " != " + expectedLength
+                                       + " (" + this + ")");
+                    expectedLength = extraFieldLength;
+                }
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
             }
+            if (offset != expectedLength) {
+                throw new ZipException("central directory zip64 extended"
+                                       + " information extra field's length"
+                                       + " doesn't match central directory"
+                                       + " data.  Expected length "
+                                       + expectedLength + " but is "
+                                       + offset);
+            }
         }
     }
