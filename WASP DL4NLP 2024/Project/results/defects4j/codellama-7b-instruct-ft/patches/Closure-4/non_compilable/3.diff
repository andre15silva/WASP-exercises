diff --git a/tmp/a0058001-f8b5-4414-b1c8-236506bf8d29_buggy.java b/tmp/726a6826-f497-43e7-bef6-e205a6b712e4_fixed.java
index d6a560a..8a2a38f 100644
--- a/tmp/a0058001-f8b5-4414-b1c8-236506bf8d29_buggy.java
+++ b/tmp/726a6826-f497-43e7-bef6-e205a6b712e4_fixed.java
@@ -1,33 +1,36 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
+    checkImplementRelationship(t,
+        registry.isLastGeneration() ?
+            getReferencedType() : this);
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
