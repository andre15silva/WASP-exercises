diff --git a/tmp/42916e9c-f0d2-46fd-b8e2-240f7f17e0b9_buggy.java b/tmp/718f034b-1be1-4f24-b9cc-7b03c8701ba2_fixed.java
index d6a560a..e98dc1e 100644
--- a/tmp/42916e9c-f0d2-46fd-b8e2-240f7f17e0b9_buggy.java
+++ b/tmp/718f034b-1be1-4f24-b9cc-7b03c8701ba2_fixed.java
@@ -1,33 +1,39 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    JSType i = registry.getNativeType(JSType.I_IMPLEMENTS_TYPE);
+    if (isResolved() && getReferencedType().isSubtypeOf(i)) {
+      // We allow the type to implement "implements", which makes the
+      // type implement the subtype of "implements".
+      finishPropertyContinuations();
+    }
     super.resolveInternal(t, enclosing);
-    if (isResolved()) {
+    if (registry.isLastGeneration()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
