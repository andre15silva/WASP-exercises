diff --git a/tmp/72bd3a5f-2966-4d0d-afc9-e8b93fa65d82_buggy.java b/tmp/7afdfd45-5751-4745-b858-42bc43584fa7_fixed.java
index 29a9d2f..ff1aa88 100644
--- a/tmp/72bd3a5f-2966-4d0d-afc9-e8b93fa65d82_buggy.java
+++ b/tmp/7afdfd45-5751-4745-b858-42bc43584fa7_fixed.java
@@ -1,43 +1,50 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
       if (provided == null || !provided.isExplicitlyProvided()) {
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
+        if (goog) {
+          t.reportCodeChange();
+        }
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
 
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
 
       // Requires should be removed before further processing.
       // Some clients run closure pass multiple times, first with
       // the checks for broken requires turned off. In these cases, we
       // allow broken requires to be preserved by the first run to
       // let them be caught in the subsequent run.
       if (provided != null) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
+    } else {
+      if (!goog) {
+        compiler.report(JSError.make(n, ProcessCommonJSPrimitives.NO_UNDECLARED_VAR));
+      }
     }
   }
