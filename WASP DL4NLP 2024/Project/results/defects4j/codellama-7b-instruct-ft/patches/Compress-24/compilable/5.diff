diff --git a/tmp/1b636e35-b6df-4851-979c-59dda8fe0da7_buggy.java b/tmp/6d2301e9-7b8e-45aa-9da5-43eb08c59dc6_fixed.java
index d9d2789..d97e2a5 100644
--- a/tmp/1b636e35-b6df-4851-979c-59dda8fe0da7_buggy.java
+++ b/tmp/6d2301e9-7b8e-45aa-9da5-43eb08c59dc6_fixed.java
@@ -1,73 +1,82 @@
     /**
      * Parse an octal string from a buffer.
      *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+     * <p>Leading spaces and leading NULs are ignored.</p>
+     * The input buffer must contain a trailing space or NUL,
+     * and may contain an additional trailing space or NUL.
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
+     * <p>Some implementations have a 13 character limit on the octal numbers.
+     * For example Solaris omits leading zeros so '00777' is only a tautology for '777' and
+     * the '0777' is used for Big sizes/uids/gids. This can cause problems for
+     * tararchives over 3G in size and the bug has been around for a long time.
+     * This is addressed by Commons Compress by ignoring a leading NUL if it is the
+     * first char in a line.</p>
      * 
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         if (buffer[start] == 0) {
             return 0L;
         }
 
-        // Skip leading spaces
+        // Skip leading NULs and spaces.
+        start:
         while (start < end){
-            if (buffer[start] == ' '){
+            if (buffer[start] == 0){
+                if (start != offset || buffer[start + 1] == 0){
+                    break start;
+                }
+                start++;
+            } else if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
 
         // Trim all trailing NULs and spaces.
         // The ustar and POSIX tar specs require a trailing NUL or
         // space but some implementations use the extra digit for big
         // sizes/uids/gids ...
         byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' '){
             end--;
-        } else {
+        } else if (trailer > 32) {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
         trailer = buffer[end - 1];
         while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
             end--;
             trailer = buffer[end - 1];
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
