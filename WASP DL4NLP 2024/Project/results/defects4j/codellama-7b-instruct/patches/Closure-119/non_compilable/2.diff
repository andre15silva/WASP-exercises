diff --git a/tmp/ca679771-954d-45dc-a3f6-62e8d1d9df5e_buggy.java b/tmp/e75f6180-2328-4a99-8220-8f91c9ddbc04_fixed.java
index 6dd359b..97a7bab 100644
--- a/tmp/ca679771-954d-45dc-a3f6-62e8d1d9df5e_buggy.java
+++ b/tmp/e75f6180-2328-4a99-8220-8f91c9ddbc04_fixed.java
@@ -1,125 +1,120 @@
 public void collect(JSModule module, Scope scope, Node n) {
     Node parent = n.getParent();
-
     String name;
-      boolean isSet = false;
-      Name.Type type = Name.Type.OTHER;
-      boolean isPropAssign = false;
+    boolean isGlobalName = false;
+    Name.Type type;
+    isSet = false;
 
     switch (n.getType()) {
         case Token.GETTER_DEF:
         case Token.SETTER_DEF:
         case Token.STRING_KEY:
             // This may be a key in an object literal declaration.
             name = null;
             if (parent != null && parent.isObjectLit()) {
                 name = getNameForObjLitKey(n);
             }
+            isGlobalName = isGlobalNameReference(name, scope);
             if (name == null) {
                 return;
             }
             isSet = true;
             switch (n.getType()) {
                 case Token.STRING_KEY:
                     type = getValueType(n.getFirstChild());
                     break;
                 case Token.GETTER_DEF:
-              type = Name.Type.GET;
+                    type = Name.Type.Getter;
                     break;
                 case Token.SETTER_DEF:
-              type = Name.Type.SET;
+                    type = Name.Type.Setter;
                     break;
                 default:
                     throw new IllegalStateException("unexpected:" + n);
             }
             break;
         case Token.NAME:
             // This may be a variable get or set.
             if (parent != null) {
                 switch (parent.getType()) {
                     case Token.VAR:
-                isSet = true;
-                Node rvalue = n.getFirstChild();
-                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
+                        type = getValueType(n.getFirstChild());
+                        if (isGlobalName(name, scope)) {
+                            isGlobalName = true;
+                        }
                         break;
                     case Token.ASSIGN:
                         if (parent.getFirstChild() == n) {
+                            if (isGlobalName(name, scope)) {
+                                isGlobalName = true;
+                            }
                             isSet = true;
                             type = getValueType(n.getNext());
                         }
                         break;
                     case Token.GETPROP:
-                return;
                     case Token.FUNCTION:
-                Node gramps = parent.getParent();
-                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
-                  return;
-                }
-                isSet = true;
-                type = Name.Type.FUNCTION;
-                break;
                     case Token.INC:
                     case Token.DEC:
-                isSet = true;
-                type = Name.Type.OTHER;
-                break;
                     default:
                         if (NodeUtil.isAssignmentOp(parent) &&
                                 parent.getFirstChild() == n) {
+                            if (isGlobalName(name, scope)) {
+                                isGlobalName = true;
+                            }
                             isSet = true;
-                  type = Name.Type.OTHER;
+                            type = getValueType(n.getNext());
                         }
                 }
             }
             name = n.getString();
+            isGlobalName = isGlobalNameReference(name, scope);
             break;
         case Token.GETPROP:
             // This may be a namespaced name get or set.
             if (parent != null) {
                 switch (parent.getType()) {
                     case Token.ASSIGN:
                         if (parent.getFirstChild() == n) {
                             isSet = true;
                             type = getValueType(n.getNext());
                             isPropAssign = true;
                         }
                         break;
                     case Token.INC:
                     case Token.DEC:
-                isSet = true;
-                type = Name.Type.OTHER;
-                break;
                     case Token.GETPROP:
-                return;
+                        isGlobalName = isGlobalNameReference(name, scope);
+                        break;
                     default:
                         if (NodeUtil.isAssignmentOp(parent) &&
                                 parent.getFirstChild() == n) {
                             isSet = true;
-                  type = Name.Type.OTHER;
+                            type = getValueType(n.getNext());
                         }
                 }
             }
             name = n.getQualifiedName();
+            isGlobalName = isGlobalNameReference(name, scope);
             if (name == null) {
                 return;
             }
             break;
         default:
             return;
     }
+    isGlobalName = isGlobalNameReference(name, scope);
 
     // We are only interested in global names.
-      if (!isGlobalNameReference(name, scope)) {
-        return;
-      }
-
+    if (isGlobalName) {
         if (isSet) {
             if (isGlobalScope(scope)) {
                 handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
             } else {
                 handleSetFromLocal(module, scope, n, parent, name);
             }
         } else {
             handleGet(module, scope, n, parent, name);
         }
     }
+}
\ No newline at end of file
