diff --git a/tmp/8bdf406b-626a-4536-ac31-9eb7a9692a85_buggy.java b/tmp/36734863-7780-42eb-847e-4fbc6bce43d2_fixed.java
index b86c1ea..6908998 100644
--- a/tmp/8bdf406b-626a-4536-ac31-9eb7a9692a85_buggy.java
+++ b/tmp/36734863-7780-42eb-847e-4fbc6bce43d2_fixed.java
@@ -1,38 +1,36 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
-    public final void translate(CharSequence input, Writer out) throws IOException {
+    public void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
-            int consumed = translate(input, pos, out);
+            int consumed = translateForward(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
+                // contract with translators is that they have to understand codepoints 
+                // and they just took care of a surrogate pair
+            }
             pos++;
         }
     }
-                pos--;
+
+
+    private int translateForward(CharSequence input, int pos, Writer out) throws IOException {
+        int codePoint = Character.codePointAt(input, pos);
+        if (Character.isSurrogate(codePoint)) {
+            pos += Character.charCount(codePoint);
+            return 1;
         }
-            pos++;
+        int consumed =  translate(input, pos, out);
+        if (consumed == 0) {
+            consumed = Character.charCount(codePoint);
         }
+        return consumed;
     }
