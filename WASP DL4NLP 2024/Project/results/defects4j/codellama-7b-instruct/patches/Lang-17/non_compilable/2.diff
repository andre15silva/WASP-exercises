diff --git a/tmp/e601c74e-8ce8-49f6-9169-7ad2ca93f87b_buggy.java b/tmp/f52e4854-ab60-4fea-8015-dcb5f581e351_fixed.java
index b86c1ea..7b34b04 100644
--- a/tmp/e601c74e-8ce8-49f6-9169-7ad2ca93f87b_buggy.java
+++ b/tmp/f52e4854-ab60-4fea-8015-dcb5f581e351_fixed.java
@@ -1,38 +1,33 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
+    private Translator translator;
+
+    @Override
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
-            int consumed = translate(input, pos, out);
+            int consumed = translator.translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
             }
             else {
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
                     if (pos < len - 2) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
                     } else {
                         pos++;
                     }
                 }
                 pos--;
             }
             pos++;
         }
     }
