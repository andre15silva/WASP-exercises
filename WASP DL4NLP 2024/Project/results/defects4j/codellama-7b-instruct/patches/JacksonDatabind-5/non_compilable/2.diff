diff --git a/tmp/1c302517-4b38-4d89-bb90-a3e2c00e35e3_buggy.java b/tmp/e8bef2ab-9949-4325-b309-96ec83e3c9c8_fixed.java
index b2db1d6..5dd5b52 100644
--- a/tmp/1c302517-4b38-4d89-bb90-a3e2c00e35e3_buggy.java
+++ b/tmp/e8bef2ab-9949-4325-b309-96ec83e3c9c8_fixed.java
@@ -1,29 +1,27 @@
-    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
-            Class<?> mixInCls, AnnotatedMethodMap mixIns)
-    {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
-        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
-            for (Method m : mixin.getDeclaredMethods()) {
-                if (!_isIncludableMemberMethod(m)) {
-                    continue;
-                }
-                AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
-                if (am != null) {
-                    _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
-                } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+// testDisappearingMixins515() method
+    @Test
+    void testDisappearingMixins515() throws Exception {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)
+            .disable(MapperFeature.AUTO_DETECT_FIELDS)
+            .disable(MapperFeature.AUTO_DETECT_GETTERS)
+            .disable(MapperFeature.AUTO_DETECT_IS_GETTERS)
+            .disable(MapperFeature.INFER_PROPERTY_MUTATORS);
+        SimpleModule module = new SimpleModule("Test");
+        module.setMixInAnnotation(Person.class, PersonMixin.class);        
+        mapper.registerModule(module);
+
+        assertEquals("{\"city\":\"Seattle\"}", mapper.writeValueAsString(new PersonImpl()));
     }
+
+public class PersonImpl implements Person {
+    private String city = "Seattle";
+
+    public String getCity() {
+        return city;
     }
+
+    public void setCity(String city) {
+        this.city = city;
     }
 }
\ No newline at end of file
