diff --git a/tmp/bda3bfda-4b04-47e9-a454-376d87f84816_buggy.java b/tmp/854b9272-db78-4e75-826d-f71fb93bfa72_fixed.java
index b2db1d6..9e2c244 100644
--- a/tmp/bda3bfda-4b04-47e9-a454-376d87f84816_buggy.java
+++ b/tmp/854b9272-db78-4e75-826d-f71fb93bfa72_fixed.java
@@ -1,29 +1,4 @@
-    protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
-            Class<?> mixInCls, AnnotatedMethodMap mixIns)
+    protected AnnotatedMethod _constructMethod(Method m)
     {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
-        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
-            for (Method m : mixin.getDeclaredMethods()) {
-                if (!_isIncludableMemberMethod(m)) {
-                    continue;
-                }
-                AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
-                if (am != null) {
-                    _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
-                } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
-                }
-            }
-        }
+        // Construct a new AnnotatedMethod with the given Method
     }
\ No newline at end of file
