diff --git a/tmp/2ff61e3b-158a-4568-9080-f7c655dcfbf3_buggy.java b/tmp/b3a1d548-d992-43eb-bd03-f6330de1b04c_fixed.java
index b2db1d6..b156e11 100644
--- a/tmp/2ff61e3b-158a-4568-9080-f7c655dcfbf3_buggy.java
+++ b/tmp/b3a1d548-d992-43eb-bd03-f6330de1b04c_fixed.java
@@ -1,29 +1,18 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
-        List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
-        ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
-            for (Method m : mixin.getDeclaredMethods()) {
-                if (!_isIncludableMemberMethod(m)) {
+        for (Class<?> mixin : mixInCls.getDeclaredFields()) {
+            for (Field m : mixin.getDeclaredFields()) {
+                if (!_isIncludableMemberMethod(m) || !_isVisibleMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
+                // Well, or, as per [Issue#515], multi-level merge within mixins...
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                         mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
\ No newline at end of file
