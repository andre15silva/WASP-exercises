diff --git a/tmp/18c32569-f1be-4535-8d97-6103f66e56cb_buggy.java b/tmp/eed3b915-734b-482e-b60b-9b992771be19_fixed.java
index d6a560a..5b44562 100644
--- a/tmp/18c32569-f1be-4535-8d97-6103f66e56cb_buggy.java
+++ b/tmp/eed3b915-734b-482e-b60b-9b992771be19_fixed.java
@@ -1,33 +1,24 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+  JSType resolveInternal(ErrorReporter t, StaticScope enclosing) {
+    // Resolve the type via registry
+    if (!resolveViaRegistry(t, enclosing)) {
+      // If the type cannot be resolved via registry, try resolving it via properties
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
+    }
 
+    // Check if the type is fully resolved
+    if (registry.isLastGeneration() && isResolved()) {
+      finishPropertyContinuations();
+      return getReferencedType();
+    }
+
+    // Fallback to super method
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return this;
   }
