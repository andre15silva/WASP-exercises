diff --git a/tmp/b9d088bd-d99b-45bb-a5e4-8c3fce736e21_buggy.java b/tmp/569d288d-3989-44ff-bb8d-396f05f7afcf_fixed.java
index 99d6a44..d1cee31 100644
--- a/tmp/b9d088bd-d99b-45bb-a5e4-8c3fce736e21_buggy.java
+++ b/tmp/569d288d-3989-44ff-bb8d-396f05f7afcf_fixed.java
@@ -1,58 +1,72 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+                if (resetFields) {
                     saveField(DateTimeFieldType.year(), iDefaultYear);
                     return computeMillis(resetFields, text);
                 }
+                if (text != null) {
+                    StringBuilder message = new StringBuilder(text);
+                    message.append(" too large: ");
+                    message.append(iSavedFieldsCount);
+                    throw new IllegalArgumentException(message.toString());
+                }
+                throw new IllegalArgumentException();
+            }
         }
 
         long millis = iMillis;
+        boolean tooLarge = false;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
+                if (!tooLarge && i == 0 && compareReverse(savedFields[i].iField, months) >= 0 && compareReverse(savedFields[i].iField, days) <= 0) {
+                    tooLarge = true;
+                }
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
-                e.prependMessage("Cannot parse \"" + text + '"');
+                e.prependMessage(text + ": Cannot parse: ");
             }
             throw e;
         }
 
+        if (tooLarge) {
             if (iZone == null) {
                 millis -= iOffset;
             } else {
                 int offset = iZone.getOffsetFromLocal(millis);
                 millis -= offset;
                 if (offset != iZone.getOffset(millis)) {
-                String message =
-                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+                    String message = "Illegal instant due to time zone offset transition (" + iZone + ')';
                     if (text != null) {
-                    message = "Cannot parse \"" + text + "\": " + message;
+                        message = text + ": " + message;
                     }
                     throw new IllegalArgumentException(message);
                 }
             }
+        }
 
         return millis;
     }
