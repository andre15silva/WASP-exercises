diff --git a/tmp/b7fb21ec-0019-4319-b2ca-b0fac1d718dc_buggy.java b/tmp/08efdac1-a5db-44d7-87ea-a984ed829e2a_fixed.java
index 220820e..b43a6d5 100644
--- a/tmp/b7fb21ec-0019-4319-b2ca-b0fac1d718dc_buggy.java
+++ b/tmp/08efdac1-a5db-44d7-87ea-a984ed829e2a_fixed.java
@@ -1,22 +1,29 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
-        Integer minRatioPos = null;
+        int minRatioPos = -1;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i;
                 }
             }
         }
+
+        // If minRatioPos is still -1, then no row with a positive ratio was found.
+        // This is an unfeasible basis, so we need to return null.
+        if (minRatioPos == -1) {
+            return null;
+        }
+
         return minRatioPos;
     }
