diff --git a/tmp/62bd53ab-9b8e-4aa9-b8c7-e31f8adc56b4_buggy.java b/tmp/6694c995-8435-4751-816e-848bae08e436_fixed.java
index 5481b94..9576bd3 100644
--- a/tmp/62bd53ab-9b8e-4aa9-b8c7-e31f8adc56b4_buggy.java
+++ b/tmp/6694c995-8435-4751-816e-848bae08e436_fixed.java
@@ -1,49 +1,19 @@
-    public Object handle(Invocation invocation) throws Throwable {
+public Object handle(Invocation invocation) {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
-            // stubbing voids with stubVoid() or doAnswer() style
-            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
-                            .getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
-        VerificationMode verificationMode = mockingProgress.pullVerificationMode();
-
-        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
-                        invocation);
-
-        mockingProgress.validateState();
-
-        //if verificationMode is not null then someone is doing verify()        
-        if (verificationMode != null) {
-            //We need to check if verification was started on the correct mock 
-            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
-                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
-                verificationMode.verify(data);
-                return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            }
-        }
-        
+    verificationMode = mockingProgress.pullVerificationMode();
+    invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
-        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
-        mockingProgress.reportOngoingStubbing(ongoingStubbing);
-
+    if (verificationMode != null) {
+        verificationMode.verify(invocationMatcher);
+    }
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
-
     if (stubbedInvocation != null) {
-            stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
-            Object ret = mockSettings.getDefaultAnswer().answer(invocation);
-
-            // redo setting invocation for potential stubbing in case of partial
-            // mocks / spies.
-            // Without it, the real method inside 'when' might have delegated
-            // to other self method and overwrite the intended stubbed method
-            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
-            return ret;
+        return mockSettings.getDefaultAnswer().answer(invocation);
     }
 }
\ No newline at end of file
