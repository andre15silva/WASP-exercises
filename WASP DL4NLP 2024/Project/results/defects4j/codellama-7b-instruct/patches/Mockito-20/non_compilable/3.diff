diff --git a/tmp/39c03b96-5ba2-4be2-9c6d-e96c926c2604_buggy.java b/tmp/479b0c3d-6a99-40cf-97c4-dbe3ed32380b_fixed.java
index f9a9b5b..9bc80ca 100644
--- a/tmp/39c03b96-5ba2-4be2-9c6d-e96c926c2604_buggy.java
+++ b/tmp/479b0c3d-6a99-40cf-97c4-dbe3ed32380b_fixed.java
@@ -1,30 +1,16 @@
-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
-            throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
-        }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
-        T mockInstance = null;
+package org.mockito.internal.creation.bytebuddy;
+
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+public class ClassInstantiator {
+    private final ConcurrentMap<Class<?>, Object> cache = new ConcurrentHashMap<>();
+
+    public <T> T instantiate(Class<T> clazz) {
         try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
-            return ensureMockIsAssignableToMockedType(settings, mockInstance);
-        } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            return clazz.getDeclaredConstructor().newInstance();
+        } catch (Exception e) {
+            throw new IllegalArgumentException(e);
+        }
     }
 }
