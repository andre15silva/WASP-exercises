diff --git a/tmp/1e2e0497-054b-42d5-8204-a8612b980b83_buggy.java b/tmp/3566ce0b-276d-49ba-8b18-4df762ae2bbe_fixed.java
index addeb8d..e6b42f8 100644
--- a/tmp/1e2e0497-054b-42d5-8204-a8612b980b83_buggy.java
+++ b/tmp/3566ce0b-276d-49ba-8b18-4df762ae2bbe_fixed.java
@@ -1,38 +1,31 @@
-    /**
-     * Searches the string builder to find the first reference to the specified
-     * string starting searching from the given index.
-     * <p>
-     * Note that a null input string will return -1, whereas the JDK throws an exception.
-     * 
-     * @param str  the string to find, null returns -1
-     * @param startIndex  the index to start at, invalid index rounded to edge
-     * @return the first index of the string, or -1 if not found
-     */
 public int indexOf(String str, int startIndex) {
         startIndex = (startIndex < 0 ? 0 : startIndex);
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
         if (strLen > size) {
             return -1;
         }
         char[] thisBuf = buffer;
         int len = thisBuf.length - strLen;
-        outer:
-        for (int i = startIndex; i < len; i++) {
-            for (int j = 0; j < strLen; j++) {
-                if (str.charAt(j) != thisBuf[i + j]) {
-                    continue outer;
-                }
+        int i;
+        for (i = startIndex; i < len; i++) {
+            if (thisBuf[i] == str.charAt(0)) {
+                int j = 1;
+                while (j < strLen && thisBuf[i + j] == str.charAt(j)) {
+                    j++;
                 }
+                if (j == strLen) {
                     return i;
                 }
+            }
+        }
         return -1;
     }
\ No newline at end of file
