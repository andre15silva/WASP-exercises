diff --git a/tmp/5ae49049-9649-4958-930d-4ea93a60156c_buggy.java b/tmp/327719fa-5dce-46ca-8221-d7d46ecb687e_fixed.java
index b98f0a7..ac29ab9 100644
--- a/tmp/5ae49049-9649-4958-930d-4ea93a60156c_buggy.java
+++ b/tmp/327719fa-5dce-46ca-8221-d7d46ecb687e_fixed.java
@@ -1,29 +1,26 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
-      } else {
+    } else if (constructorType instanceof FunctionType) {
       FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
+
   n.setJSType(type);
+
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
+
   return scope;
 }
\ No newline at end of file
