diff --git a/tmp/dc350cd2-eaca-40ae-8d82-cdc88dd6495d_buggy.java b/tmp/c6f1c3c2-2dc7-45de-8fb8-6ede4618c66b_fixed.java
index b98f0a7..085c4fa 100644
--- a/tmp/dc350cd2-eaca-40ae-8d82-cdc88dd6495d_buggy.java
+++ b/tmp/c6f1c3c2-2dc7-45de-8fb8-6ede4618c66b_fixed.java
@@ -1,29 +1 @@
-  private FlowScope traverseNew(Node n, FlowScope scope) {
-
-    Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
 JSType constructorType = constructor.getJSType();
\ No newline at end of file
-    JSType type = null;
-    if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
-      } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
-    return scope;
-  }
