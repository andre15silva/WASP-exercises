diff --git a/tmp/14c66aec-6120-4c53-930f-f2b033a93aa1_buggy.java b/tmp/cf37b52a-bfd3-49f4-88cf-75775bc00bfe_fixed.java
index b98f0a7..120dce8 100644
--- a/tmp/14c66aec-6120-4c53-930f-f2b033a93aa1_buggy.java
+++ b/tmp/cf37b52a-bfd3-49f4-88cf-75775bc00bfe_fixed.java
@@ -1,29 +1,23 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+      constructorType = Type.restrictByNotNullOrUndefined(constructorType).toMaybeFunctionType();
+      if (constructorType != null && constructorType.isUnknownType()) {
+        type = Type.getNativeType(Type.UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+        constructorType = (FunctionType) constructorType;
+        if (constructorType.isConstructor()) {
+          type = constructorType.getInstanceType();
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
