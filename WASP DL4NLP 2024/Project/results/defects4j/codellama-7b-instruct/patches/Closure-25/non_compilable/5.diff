diff --git a/tmp/62279aa3-a9a8-425c-b5d9-85bbf9f08fb7_buggy.java b/tmp/a5dee301-f45e-4f5a-8957-6d44d8e45987_fixed.java
index b98f0a7..e346c4b 100644
--- a/tmp/62279aa3-a9a8-425c-b5d9-85bbf9f08fb7_buggy.java
+++ b/tmp/a5dee301-f45e-4f5a-8957-6d44d8e45987_fixed.java
@@ -1,29 +1,8 @@
-  private FlowScope traverseNew(Node n, FlowScope scope) {
-
-    Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
-    JSType constructorType = constructor.getJSType();
-    JSType type = null;
+def traverseNew(Node n, FlowScope scope) {
 if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
+    // existing code
 } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+   n.setJSType(Object);
 }
 return scope;
 }
\ No newline at end of file
