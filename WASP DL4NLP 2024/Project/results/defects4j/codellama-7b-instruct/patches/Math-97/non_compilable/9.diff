diff --git a/tmp/69c7f6c3-e43d-4e68-affd-9e7d613c0b8b_buggy.java b/tmp/7bfbe558-5e52-4e85-9a4f-4172cf8dc30a_fixed.java
index 88647d1..7e4b7c4 100644
--- a/tmp/69c7f6c3-e43d-4e68-affd-9e7d613c0b8b_buggy.java
+++ b/tmp/7bfbe558-5e52-4e85-9a4f-4172cf8dc30a_fixed.java
@@ -1,44 +1,31 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
         
         clearResult();
-        verifyInterval(min, max);
 
         double ret = Double.NaN;
         
         double yMin = f.value(min);
         double yMax = f.value(max);
         
+        if (min.equals(max)) {
+            ret = min;
+        } else {
             // Verify bracketing
             double sign = yMin * yMax;
             if (sign >= 0) {
                 // check if either value is close to a zero
                     // neither value is close to zero and min and max do not bracket root.
                     throw new IllegalArgumentException
                     ("Function values at endpoints do not have different signs." +
                             "  Endpoints: [" + min + "," + max + "]" + 
                             "  Values: [" + yMin + "," + yMax + "]");
             } else {
                 // solve using only the first endpoint as initial guess
                 ret = solve(min, yMin, max, yMax, min, yMin);
                 // either min or max is a root
             }
+        }
 
         return ret;
     }
