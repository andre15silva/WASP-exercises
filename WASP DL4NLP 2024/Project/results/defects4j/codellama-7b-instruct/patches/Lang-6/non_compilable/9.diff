diff --git a/tmp/0f2c6be6-1cc8-4e67-b3ce-488ccf7c1fa8_buggy.java b/tmp/6eafc933-e186-4c21-89c2-2b65010a6bb6_fixed.java
index 4c1ed27..5168d3f 100644
--- a/tmp/0f2c6be6-1cc8-4e67-b3ce-488ccf7c1fa8_buggy.java
+++ b/tmp/6eafc933-e186-4c21-89c2-2b65010a6bb6_fixed.java
@@ -1,32 +1,23 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
   public final void translate(CharSequence input, Writer out) throws IOException {
       if (out == null) {
           throw new IllegalArgumentException("The Writer must not be null");
       }
       if (input == null) {
           return;
       }
       int pos = 0;
       int len = input.length();
       while (pos < len) {
           int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+          // If we consume a surrogate pair, we need to move the position forward 4 code points
+          // instead of 2.
+          if (consumed >= 2 && Character.isSurrogate(input.charAt(pos + 1))) {
+              pos += 4;
+          } else {
+              pos += consumed;
           }
       }
   }
+  ```
+  
+  This patch updates the loop to handle surrogate pairs correctly. When we consume a surrogate pair, we move the position forward 4 code points instead of 2. This ensures that we properly process the entire code point.
\ No newline at end of file
