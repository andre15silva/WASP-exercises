diff --git a/tmp/fbcb9a22-32ed-4099-9f21-8070a0c7b662_buggy.java b/tmp/d971b4cc-9080-4fbe-af18-6e3c6232c9c1_fixed.java
index 6e45f80..73f080f 100644
--- a/tmp/fbcb9a22-32ed-4099-9f21-8070a0c7b662_buggy.java
+++ b/tmp/d971b4cc-9080-4fbe-af18-6e3c6232c9c1_fixed.java
@@ -1,21 +1,19 @@
 /**
  * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
  * that the deserialized type matches the type requested.
  */
-  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
-      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
+public static <T> TypeAdapterFactory newTypeHierarchyFactory(
+    final Class<T> clazz, final TypeAdapter<T> typeAdapter) {
     return new TypeAdapterFactory() {
-      @SuppressWarnings("unchecked")
-      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
-        final Class<? super T2> requestedType = typeToken.getRawType();
+        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) throws IllegalArgumentException {
+            final Class<? super T> requestedType = typeToken.getRawType();
             if (!clazz.isAssignableFrom(requestedType)) {
-          return null;
+                throw new IllegalArgumentException("Deserialized type " + requestedType.getName() + " does not match expected type " + clazz.getName());
             }
-        return (TypeAdapter<T2>) typeAdapter;
-
+            return typeAdapter;
         }
         @Override public String toString() {
             return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
         }
     };
 }
\ No newline at end of file
