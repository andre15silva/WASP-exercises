diff --git a/tmp/ec8b1f73-e16b-4804-a0c4-2f1bfee811fd_buggy.java b/tmp/4f55f129-56a1-4963-90ec-a29c6920365b_fixed.java
index 139579d..a076b2e 100644
--- a/tmp/ec8b1f73-e16b-4804-a0c4-2f1bfee811fd_buggy.java
+++ b/tmp/4f55f129-56a1-4963-90ec-a29c6920365b_fixed.java
@@ -1,43 +1,49 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
         final int len = classAttr.length();
         final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+        // if the attribute is too short, we know it can't have the class we're looking for
+        if (len < wantLen + 1) {
             return false;
         }
 
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
+        // if the attribute is equal to the length of the class we're looking for
+        // and starts with the class we're looking for, it's a match
+        if (len == wantLen && classAttr.startsWith(className)) {
+            return true;
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
+
+        // scan the attribute string
         for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
-                if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
+            // if we're in a class name, and we find a whitespace, we've found the end of the class name
+            if (inClass && Character.isWhitespace(classAttr.charAt(i))) {
+                // compare the class name with the requested one, ignore case
                 if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                     return true;
                 }
+
+                // reset the inClass flag
                 inClass = false;
             }
-            } else {
-                if (!inClass) {
-                    // we're in a class name : keep the start of the substring
+
+            // if we're not in a class name, and we find a non-whitespace character, we've found the start of the class name
+            if (!inClass && !Character.isWhitespace(classAttr.charAt(i))) {
+                // set the start of the substring
                 inClass = true;
                 start = i;
             }
         }
-        }
 
         // check the last entry
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
         return false;
     }
\ No newline at end of file
