diff --git a/tmp/5598ed6c-74da-4800-921e-818fdd8fcfeb_buggy.java b/tmp/801ea3c9-0832-4013-936d-6003add62872_fixed.java
index 97f28e5..8bd13cc 100644
--- a/tmp/5598ed6c-74da-4800-921e-818fdd8fcfeb_buggy.java
+++ b/tmp/801ea3c9-0832-4013-936d-6003add62872_fixed.java
@@ -1,26 +1,21 @@
-    /**
-     * Creates a printer that will print values to the given stream following the CSVFormat.
-     * <p>
-     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation
-     * and escaping with a different character) are not supported.
-     * </p>
-     * 
-     * @param out
-     *        stream to which to print. Must not be null.
-     * @param format
-     *        the CSV format. Must not be null.
-     * @throws IOException
-     *         thrown if the optional header cannot be printed.
-     * @throws IllegalArgumentException
-     *         thrown if the parameters of the format are inconsistent or if either out or format are null.
-     */
-    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {
-        Assertions.notNull(out, "out");
-        Assertions.notNull(format, "format");
 
-        this.out = out;
-        this.format = format;
-        this.format.validate();
-        // TODO: Is it a good idea to do this here instead of on the first call to a print method?
-        // It seems a pain to have to track whether the header has already been printed or not.
+  private String formatCSVRecord(final Map<String, String> record, final CSVFormat format) {
+    final StringBuffer sb = new StringBuffer();
+    final List<String> headers = format.getHeaders();
+    if (headers != null) {
+      final String delimiter = format.getDelimiter();
+      for (final String header : headers) {
+        final String value = record.get(header);
+        if (value != null) {
+          if (sb.length() > 0) {
+            sb.append(delimiter);
+          } else if (delimiter == format.getQuote()) {
+            sb.append(format.getQuote());
+          }
+          sb.append(value);
+        }
+      }
+      sb.append("\r\n");
+    }
+    return sb.toString();
   }  
\ No newline at end of file
