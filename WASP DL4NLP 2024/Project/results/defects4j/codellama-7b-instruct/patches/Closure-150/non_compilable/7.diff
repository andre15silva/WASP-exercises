diff --git a/tmp/6dc28142-7fc5-4cb4-b269-ad9cdfc96cc1_buggy.java b/tmp/ca307cca-3d5e-40e2-8284-e61ceda34809_fixed.java
index 800e6e1..5aba133 100644
--- a/tmp/6dc28142-7fc5-4cb4-b269-ad9cdfc96cc1_buggy.java
+++ b/tmp/ca307cca-3d5e-40e2-8284-e61ceda34809_fixed.java
@@ -1,32 +1,19 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
-      if (n == scope.getRootNode()) return;
+  public void testNamespacedFunctionStubLocal() {
+    testSame(
+        "(function() {" +
+        "var goog = {};" +
+        "/** @param {number} x */ goog.foo;" +
+        "});");
 
-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
-        handleFunctionInputs(parent);
-        return;
-      }
+    ObjectType goog = (ObjectType) findNameType("goog", lastLocalScope);
+    assertTrue(goog.hasProperty("foo"));
+    assertEquals("function (number): ?",
+        goog.getPropertyType("foo").toString());
+    assertTrue(goog.isPropertyTypeDeclared("foo"));
 
-      attachLiteralTypes(n);
-      switch (n.getType()) {
-        case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
+    assertEquals(lastLocalScope.getVar("goog.foo").getType(),
+        goog.getPropertyType("foo"));
   }
-          defineDeclaredFunction(n, parent);
-          break;
-        case Token.CATCH:
-          defineCatch(n, parent);
-          break;
-        case Token.VAR:
-          defineVar(n, parent);
-          break;
+});
   }
 }
\ No newline at end of file
