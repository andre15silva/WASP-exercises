diff --git a/tmp/ba7c9b32-ff8d-47b3-b3d0-2f649e573db4_buggy.java b/tmp/b5e9f240-2f4a-4f30-b1b7-d418f157debc_fixed.java
index e087f95..79ac146 100644
--- a/tmp/ba7c9b32-ff8d-47b3-b3d0-2f649e573db4_buggy.java
+++ b/tmp/b5e9f240-2f4a-4f30-b1b7-d418f157debc_fixed.java
@@ -1,53 +1,9 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
+int byteCount = 0;
 for (int i = start; i < end; i++) {
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+    if (buffer[i] != (byte) ' ' && buffer[i] != 0) {
+        ++byteCount;
     }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
 }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
-        }
-
-        return result;
+if (byteCount < 2) {
+    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, buffer[i]));
 }
\ No newline at end of file
