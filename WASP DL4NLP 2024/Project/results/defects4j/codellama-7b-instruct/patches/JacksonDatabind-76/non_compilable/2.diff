diff --git a/tmp/8e507419-5b90-4f80-9111-5e21f2a9ea22_buggy.java b/tmp/2d5501f7-7187-416d-8c0d-566f9b98cc28_fixed.java
index 3effef5..cb17baf 100644
--- a/tmp/8e507419-5b90-4f80-9111-5e21f2a9ea22_buggy.java
+++ b/tmp/2d5501f7-7187-416d-8c0d-566f9b98cc28_fixed.java
@@ -1,73 +1,26 @@
-    @SuppressWarnings("resource")
-    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
-    		DeserializationContext ctxt)
-        throws IOException, JsonProcessingException
-    {
-        final PropertyBasedCreator creator = _propertyBasedCreator;
-        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
+public class Person {
+    int id;
+    String firstName;
+    String lastName;
+    int age;
+    boolean alive;
+}
 
-        TokenBuffer tokens = new TokenBuffer(p, ctxt);
-        tokens.writeStartObject();
+public class BuilderWithUnwrappedTest {
+    @Test
+    public void testWithUnwrappedAndCreatorSingleParameterAtBeginning() {
+        Person person = new Person();
 
-        JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
-            String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
-            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
-            if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-                }
-                continue;
-            }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
-            }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
-            }
-        }
+        person.id = 1234;
+        person.firstName = "John";
+        person.lastName = "Doe";
+        person.age = 30;
+        person.alive = true;
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
-        try {
-            bean = creator.build(ctxt, buffer);
-        } catch (Exception e) {
-            return wrapInstantiationProblem(e, ctxt);
+        assertEquals(1234, person.id);
+        assertEquals("John", person.firstName);
+        assertEquals("Doe", person.lastName);
+        assertEquals(30, person.age);
+        assertEquals(true, person.alive);
     }
-        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
