diff --git a/tmp/d55cbbd9-7550-44e1-a14e-4791e8379ae4_buggy.java b/tmp/927aebc4-6d7c-4f7e-931a-16ef3aecc41a_fixed.java
index 5f8ac1a..f30ed2e 100644
--- a/tmp/d55cbbd9-7550-44e1-a14e-4791e8379ae4_buggy.java
+++ b/tmp/927aebc4-6d7c-4f7e-931a-16ef3aecc41a_fixed.java
@@ -1,34 +1,19 @@
-    private int compareNodePointers(
-        NodePointer p1,
-        int depth1,
-        NodePointer p2,
-        int depth2) 
-    {
-        if (depth1 < depth2) {
-            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
-            return r == 0 ? -1 : r;
+private int compareNodePointers(NodePointer p1, int depth1, NodePointer p2, int depth2) {
+    if (p1 != null && p2 != null) {
+        // If the objects are not part of the same tree, throw an exception
+        if (p1.getParent() == null || p2.getParent() == null || p1.getParent() != p2.getParent()) {
+            throw new JXPathException("Cannot compare pointers that do not belong to the same tree: '" + p1 + "' and '" + p2 + "'");
         }
+    
+        // If the depth of one object is greater than the depth of the other, then the objects are not part of the same tree    
         if (depth1 > depth2) {
-            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
-            return r == 0 ? 1 : r;
-        }
-        if (p1 == null && p2 == null) {
-            return 0;
+            throw new JXPathException("Cannot compare pointers that do not belong to the same tree: '" + p1 + "' and '" + p2 + "'");
         }
 
-        if (p1 != null && p1.equals(p2)) {
+        // Otherwise, compare the objects
+        return p1.compareTo(p2);
+    } else {
+        // If either object is null, return 0
         return 0;
     }
-
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
-        }
-        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
-        if (r != 0) {
-            return r;
-        }
-
-        return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
