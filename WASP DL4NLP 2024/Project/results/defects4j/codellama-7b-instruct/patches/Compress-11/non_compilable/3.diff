diff --git a/tmp/60dc1c0e-e3a2-4c12-ac6c-e64240770655_buggy.java b/tmp/5fe43154-8b9d-437e-9d0d-b2f43eec8d06_fixed.java
index 6b160ef..5db1c86 100644
--- a/tmp/60dc1c0e-e3a2-4c12-ac6c-e64240770655_buggy.java
+++ b/tmp/5fe43154-8b9d-437e-9d0d-b2f43eec8d06_fixed.java
@@ -1,68 +1,32 @@
-    /**
-     * Create an archive input stream from an input stream, autodetecting
-     * the archive type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in the input stream
-     * @return the archive input stream
-     * @throws ArchiveException if the archiver name is not known
-     * @throws IllegalArgumentException if the stream is null or does not support mark
-     */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
+    // Check if the input stream is null
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
+    // Check if the input stream supports mark
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
+    // Read the first 32 bytes from the input stream
+    final byte[] signature = new byte[32];
     in.mark(signature.length);
-        try {
     int signatureLength = in.read(signature);
     in.reset();
-            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-                return new ZipArchiveInputStream(in);
-            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
-            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                return new CpioArchiveInputStream(in);
-            }
 
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
+    // Check if the signature matches a known archiver
+    for (String archiver : new String[]{"Zip", "Jar", "Ar", "Cpio", "Dump", "Tar"}) {
+        ArchiveInputStream result = (ArchiveInputStream) Class.forName("org.apache.commons.compress.archivers.ArchiveStreamFactory." + archiver + "ArchiveInputStream")
+                .getConstructor(InputStream.class)
+                .newInstance(in);
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
+        if (matches(signature, signatureLength, result)) {
+            return result;
         }
-        } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
+    // If no archiver was found, throw an exception
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
