diff --git a/tmp/182f8bc7-7a74-4fa5-aba9-e199e6a76c45_buggy.java b/tmp/02859d79-0e9c-4a63-aa92-8ae66ef52bd9_fixed.java
index eb0c9a2..37b9d6a 100644
--- a/tmp/182f8bc7-7a74-4fa5-aba9-e199e6a76c45_buggy.java
+++ b/tmp/02859d79-0e9c-4a63-aa92-8ae66ef52bd9_fixed.java
@@ -1,85 +1,32 @@
     /**
      * Update the index values for the maximum and minimum bounds.
      * 
      * @param period  the time period.
      * @param index  the index of the time period.
      */
     private void updateBounds(TimePeriod period, int index) {
         
         long start = period.getStart().getTime();
         long end = period.getEnd().getTime();
         long middle = start + ((end - start) / 2);
       
-        if (this.minStartIndex >= 0) {
-            long minStart = getDataItem(this.minStartIndex).getPeriod()
-                .getStart().getTime();
-            if (start < minStart) {
-                this.minStartIndex = index;           
+        if (minStartIndex < 0 || start < getDataItem(minStartIndex).getPeriod().getStart().getTime()) {
+            minStartIndex = index;
         }
+        if (maxStartIndex < 0 || start > getDataItem(maxStartIndex).getPeriod().getStart().getTime()) {
+            maxStartIndex = index;
         }
-        else {
-            this.minStartIndex = index;
+        if (minMiddleIndex < 0 || middle < getDataItem(minMiddleIndex).getPeriod().getStart().getTime() + (getDataItem(minMiddleIndex).getPeriod().getEnd().getTime() - getDataItem(minMiddleIndex).getPeriod().getStart().getTime()) / 2) {
+            minMiddleIndex = index;
         }
-        
-        if (this.maxStartIndex >= 0) {
-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()
-                .getStart().getTime();
-            if (start > maxStart) {
-                this.maxStartIndex = index;           
-            }
-        }
-        else {
-            this.maxStartIndex = index;
-        }
-        
-        if (this.minMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long minMiddle = s + (e - s) / 2;
-            if (middle < minMiddle) {
-                this.minMiddleIndex = index;           
-            }
-        }
-        else {
-            this.minMiddleIndex = index;
-        }
-        
-        if (this.maxMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long maxMiddle = s + (e - s) / 2;
-            if (middle > maxMiddle) {
-                this.maxMiddleIndex = index;           
-            }
-        }
-        else {
-            this.maxMiddleIndex = index;
-        }
-        
-        if (this.minEndIndex >= 0) {
-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end < minEnd) {
-                this.minEndIndex = index;           
-            }
-        }
-        else {
-            this.minEndIndex = index;
-        }
-       
-        if (this.maxEndIndex >= 0) {
-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end > maxEnd) {
-                this.maxEndIndex = index;           
+        if (maxMiddleIndex < 0 || middle > getDataItem(maxMiddleIndex).getPeriod().getStart().getTime() + (getDataItem(maxMiddleIndex).getPeriod().getEnd().getTime() - getDataItem(maxMiddleIndex).getPeriod().getStart().getTime()) / 2) {
+            maxMiddleIndex = index;
         }
+        if (minEndIndex < 0 || end < getDataItem(minEndIndex).getPeriod().getEnd().getTime()) {
+            minEndIndex = index;
         }
-        else {
-            this.maxEndIndex = index;
+        if (maxEndIndex < 0 || end > getDataItem(maxEndIndex).getPeriod().getEnd().getTime()) {
+            maxEndIndex = index;
         }
         
     }
\ No newline at end of file
