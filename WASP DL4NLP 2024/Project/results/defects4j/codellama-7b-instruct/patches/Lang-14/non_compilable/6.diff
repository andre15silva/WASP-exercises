diff --git a/tmp/62eb0984-e84d-463d-8f2e-916cddf16a0f_buggy.java b/tmp/7e14f2a3-bd17-4b0b-a285-2a6929c1e85b_fixed.java
index c18eb8b..4027105 100644
--- a/tmp/62eb0984-e84d-463d-8f2e-916cddf16a0f_buggy.java
+++ b/tmp/7e14f2a3-bd17-4b0b-a285-2a6929c1e85b_fixed.java
@@ -1,30 +1,30 @@
     /**
      * <p>Compares two CharSequences, returning {@code true} if they represent
-     * equal sequences of characters.</p>
+     * equal sequences of characters, ignoring case differences.</p>
      *
      * <p>{@code null}s are handled without exceptions. Two {@code null}
-     * references are considered to be equal. The comparison is case sensitive.</p>
+     * references are considered equal. </p>
      *
      * <pre>
-     * StringUtils.equals(null, null)   = true
-     * StringUtils.equals(null, "abc")  = false
-     * StringUtils.equals("abc", null)  = false
-     * StringUtils.equals("abc", "abc") = true
-     * StringUtils.equals("abc", "ABC") = false
+     * StringUtils.equalsIgnoreCase(null, null)   = true
+     * StringUtils.equalsIgnoreCase(null, "abc")  = false
+     * StringUtils.equalsIgnoreCase("abc", null)  = false
+     * StringUtils.equalsIgnoreCase("abc", "abc") = true
+     * StringUtils.equalsIgnoreCase("abc", "ABC") = true
      * </pre>
      *
-     * @see java.lang.CharSequence#equals(Object)
-     * @param cs1  the first CharSequence, may be {@code null}
-     * @param cs2  the second CharSequence, may be {@code null}
-     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
-     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
+     * @see java.lang.String#equalsIgnoreCase(String)
+     * @param cs1  the first CharSequence, may be null
+     * @param cs2  the second CharSequence, may be null
+     * @return {@code true} if the CharSequences are equal ignoring the case, or both {@code null}
+     * @since 3.4
      */
-    public static boolean equals(CharSequence cs1, CharSequence cs2) {
+     public static boolean equalsIgnoreCase(CharSequence cs1, CharSequence cs2) {
          if (cs1 == cs2) {
         return true;
          }
          if (cs1 == null || cs2 == null) {
              return false;
          }
-            return cs1.equals(cs2);
+         return cs1.toString().equalsIgnoreCase(cs2.toString());
      }
