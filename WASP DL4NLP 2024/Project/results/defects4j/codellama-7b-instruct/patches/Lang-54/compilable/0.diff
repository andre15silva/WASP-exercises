diff --git a/tmp/af06e6b7-cf0a-4444-aecd-816ec9707a1b_buggy.java b/tmp/45bf1d39-1861-442e-8c4b-4236e8c2861f_fixed.java
index 90fe130..49c06da 100644
--- a/tmp/af06e6b7-cf0a-4444-aecd-816ec9707a1b_buggy.java
+++ b/tmp/45bf1d39-1861-442e-8c4b-4236e8c2861f_fixed.java
@@ -1,61 +1,33 @@
     /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
+     * Converts a String to a Locale.
      *
      * @param str the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
+        //Added validation for variant
+        if(!str.matches("[a-z]{2}\\_?[A-Z]{2}\\_?[A-Z0-9]{0,8}")){
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        if (len == 2) {
+        if (len == 2 || len == 5 || len == 6) {
             return new Locale(str, "");
-        } else {
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+        else if (len == 4 || len == 7) {
+            if (str.charAt(4) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
-                if (str.charAt(5) != '_') {
-                    throw new IllegalArgumentException("Invalid locale format: " + str);
+            return new Locale(str.substring(0, 2), str.substring(5, len));
         }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+        else if (len == 8 || len == 9) {
+            if (str.charAt(4) != '_' && str.charAt(7) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            return new Locale(str.substring(0, 2), str.substring(5, 7), str.substring(8, len));
         }
+        return null;
     }
\ No newline at end of file
