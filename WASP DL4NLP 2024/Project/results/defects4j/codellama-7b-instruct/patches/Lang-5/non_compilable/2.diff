diff --git a/tmp/9c9be3bc-abac-498d-8914-48852655f2e4_buggy.java b/tmp/c85d500f-d253-4c37-8384-7d70382b9d29_fixed.java
index f843d29..9a8cef1 100644
--- a/tmp/9c9be3bc-abac-498d-8914-48852655f2e4_buggy.java
+++ b/tmp/c85d500f-d253-4c37-8384-7d70382b9d29_fixed.java
@@ -1,68 +1,36 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
+     * <p>This method validates the input thoroughly. The input must be non-null,
+     * with no whitespaces and at least 3 characters in length.</p>
      *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
+     * @param str  the locale String to convert, must be non-null
+     * @return a Locale, never null
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
-            return null;
+            throw new IllegalArgumentException("Locale must not be null");
         }
         final int len = str.length();
-        if (len < 2) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
+        if (len < 3) {
+            throw new IllegalArgumentException("Locale must be at least 3 characters in length, got " + str);
         }
         final char ch0 = str.charAt(0);
         final char ch1 = str.charAt(1);
         if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            throw new IllegalArgumentException("Invalid locale format: '" + str + "'");
         }
\ No newline at end of file
