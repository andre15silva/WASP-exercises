diff --git a/tmp/d83b20bb-bfe9-418d-b6b9-20693639b674_buggy.java b/tmp/642d4366-31de-4bc6-9012-259ea71990dc_fixed.java
index 1ad070d..c9e1389 100644
--- a/tmp/d83b20bb-bfe9-418d-b6b9-20693639b674_buggy.java
+++ b/tmp/642d4366-31de-4bc6-9012-259ea71990dc_fixed.java
@@ -1,38 +1,7 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
-    int readEscape() throws IOException {
-        // the escape char has just been read (normally a backslash)
-        final int c = in.read();
-        switch (c) {
-        case 'r':
-            return CR;
-        case 'n':
-            return LF;
-        case 't':
-            return TAB;
-        case 'b':
-            return BACKSPACE;
-        case 'f':
-            return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
-        default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
-        }
-    }
+// buggy code
+final Lexer lexer = getLexer(" character\\NEscaped", formatWithEscaping);
+assertThat(lexer.nextToken(new Token()), hasContent("character\\NEscaped"));
+
+// fixed version
+final Lexer lexer = getLexer("character\\NEscaped", formatWithEscaping);
+assertThat(lexer.nextToken(new Token()), hasContent("character\\NEscaped"));
\ No newline at end of file
