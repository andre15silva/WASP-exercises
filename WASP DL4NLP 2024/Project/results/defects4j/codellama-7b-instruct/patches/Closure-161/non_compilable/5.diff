diff --git a/tmp/9a68db81-b1d9-4f87-aefd-d2a85f1ae975_buggy.java b/tmp/c040d6ed-01e4-4ffe-b0f4-cbb9d5e8752b_fixed.java
index 1303a19..74602f9 100644
--- a/tmp/9a68db81-b1d9-4f87-aefd-d2a85f1ae975_buggy.java
+++ b/tmp/c040d6ed-01e4-4ffe-b0f4-cbb9d5e8752b_fixed.java
@@ -1,45 +1,35 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
-
     if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
-      return n;
-    }
-
-    double index = right.getDouble();
+      // Convert string index to a numeric index
+      double index = NumberFormat.parseDouble(((StringNode) right).getString());
       int intIndex = (int) index;
       if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
       }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
+      // Fold the array access
       Node elem = left.getFirstChild();
       for (int i = 0; elem != null && i < intIndex; i++) {
         elem = elem.getNext();
       }
 
       if (elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
       }
 
       if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
       } else {
         left.removeChild(elem);
       }
 
       // Replace the entire GETELEM with the value
       n.getParent().replaceChild(n, elem);
       reportCodeChange();
       return elem;
     }
+    return n;
+  }
