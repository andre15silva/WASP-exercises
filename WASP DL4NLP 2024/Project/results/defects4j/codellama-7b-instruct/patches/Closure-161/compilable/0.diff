diff --git a/tmp/b286b51c-6075-4633-a5d4-1075c6a077c9_buggy.java b/tmp/2b9412fb-38cc-41f0-a5da-9f0100f05ec0_fixed.java
index 1303a19..7acfc36 100644
--- a/tmp/b286b51c-6075-4633-a5d4-1075c6a077c9_buggy.java
+++ b/tmp/2b9412fb-38cc-41f0-a5da-9f0100f05ec0_fixed.java
@@ -1,45 +1,40 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
-      left.removeChild(elem);
+      left.replaceChild(elem, elem.getFirstChild());
     }
 
     // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
+    parent.replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
