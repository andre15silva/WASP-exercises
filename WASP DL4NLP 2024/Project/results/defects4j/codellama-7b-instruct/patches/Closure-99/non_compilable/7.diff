diff --git a/tmp/eb219c6f-e262-45ce-8752-81b63a8ac03c_buggy.java b/tmp/829c5aaa-8ee8-459e-aaad-5af38716a18b_fixed.java
index 86553f4..b0d7f1a 100644
--- a/tmp/eb219c6f-e262-45ce-8752-81b63a8ac03c_buggy.java
+++ b/tmp/829c5aaa-8ee8-459e-aaad-5af38716a18b_fixed.java
@@ -1,57 +1,64 @@
 /**
 * Since this pass reports errors only when a global {@code this} keyword
 * is encountered, there is no reason to traverse non global contexts.
 */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
       
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
             return false;
           }
           if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
             return false;
           }
       }
     }
 
+    // Replaced the buggy if-statement with an if-else statement
+    if (n.getType() != Token.GETPROP || lhs.getLastChild().getString().equals("prototype")) {
+      return true;
+    } else {
+      return false;
+    }
+
     return true;
 }
\ No newline at end of file
