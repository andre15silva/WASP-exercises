diff --git a/tmp/58c9b0f1-0a80-461b-b2b2-b4233f57d09c_buggy.java b/tmp/f23b813b-15ff-4813-842f-9782facae0d9_fixed.java
index 03b03d7..4a42c8d 100644
--- a/tmp/58c9b0f1-0a80-461b-b2b2-b4233f57d09c_buggy.java
+++ b/tmp/f23b813b-15ff-4813-842f-9782facae0d9_fixed.java
@@ -1,25 +1,15 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
-    public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
+    public void testBug3476684_adjustOffset() {
+        final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
+        final DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);
+        final DateTime baseBefore = base.plusHours(1);  // 23:15 (first)
+        final DateTime baseAfter = base.plusHours(2);  // 23:15 (second)
         
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
-        }
+        assertEquals(base, base.withEarlierOffsetAtOverlap());
+        assertEquals(base, base.withLaterOffsetAtOverlap());
         
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        assertEquals(baseBefore, baseBefore.withEarlierOffsetAtOverlap());
+        assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        assertEquals(baseAfter, baseAfter.withLaterOffsetAtOverlap());
+        assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());
     }
\ No newline at end of file
