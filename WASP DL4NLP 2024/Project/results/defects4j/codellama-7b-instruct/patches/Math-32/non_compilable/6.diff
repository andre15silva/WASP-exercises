diff --git a/tmp/c6abe4ad-7241-4d7f-8acb-79f656dfa923_buggy.java b/tmp/94cc4ace-0beb-4ee4-828a-6a53817d5ea3_fixed.java
index c53ca2a..29b1918 100644
--- a/tmp/c6abe4ad-7241-4d7f-8acb-79f656dfa923_buggy.java
+++ b/tmp/94cc4ace-0beb-4ee4-828a-6a53817d5ea3_fixed.java
@@ -1,54 +1,135 @@
     /** {@inheritDoc} */
     @Override
     protected void computeGeometricalProperties() {
 
         final Vector2D[][] v = getVertices();
 
         if (v.length == 0) {
             final BSPTree<Euclidean2D> tree = getTree(false);
             if ((Boolean) tree.getAttribute()) {
                 // the instance covers the whole space
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
                 setSize(0);
                 setBarycenter(new Vector2D(0, 0));
             }
         } else if (v[0][0] == null) {
             // there is at least one open-loop: the polygon is infinite
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             // all loops are closed, we compute some integrals around the shape
 
             double sum  = 0;
             double sumX = 0;
             double sumY = 0;
 
             for (Vector2D[] loop : v) {
                 double x1 = loop[loop.length - 1].getX();
                 double y1 = loop[loop.length - 1].getY();
                 for (final Vector2D point : loop) {
                     final double x0 = x1;
                     final double y0 = y1;
                     x1 = point.getX();
                     y1 = point.getY();
                     final double factor = x0 * y1 - y0 * x1;
                     sum  += factor;
                     sumX += factor * (x0 + x1);
                     sumY += factor * (y0 + y1);
                 }
             }
 
             if (sum < 0) {
                 // the polygon as a finite outside surrounded by an infinite inside
                 setSize(Double.POSITIVE_INFINITY);
                 setBarycenter(Vector2D.NaN);
             } else {
                 setSize(sum / 2);
                 setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
             }
 
         }
 
     }
+
+    /**
+     * Get the size of the instance.
+     * @return the size of the instance
+     */
+    public double getSize() {
+        return size;
+    }
+
+    /**
+     * Get the barycenter of the instance.
+     * @return the barycenter of the instance
+     */
+    public Vector2D getBarycenter() {
+        return barycenter;
+    }
+
+    /**
+     * Sets the size of the instance.
+     * @param size new value for the size
+     */
+    public void setSize(double size) {
+        this.size = size;
+    }
+
+    /**
+     * Sets the barycenter of the instance.
+     * @param barycenter new value for the barycenter
+     */
+    public void setBarycenter(Vector2D barycenter) {
+        this.barycenter = barycenter;
+    }
+
+    @Test
+    public void testIssue780() {
+        float[] coords = {
+            1.000000f, -1.000000f, -1.000000f, 
+            1.000000f, -1.000000f, 1.000000f, 
+            -1.000000f, -1.000000f, 1.000000f, 
+            -1.000000f, -1.000000f, -1.000000f, 
+            1.000000f, 1.000000f, -1f, 
+            0.999999f, 1.000000f, 1.000000f,   // 1.000000f, 1.000000f, 1.000000f, 
+            -1.000000f, 1.000000f, 1.000000f, 
+            -1.000000f, 1.000000f, -1.000000f};
+        int[] indices = {
+            0, 1, 2, 0, 2, 3, 
+            4, 7, 6, 4, 6, 5, 
+            0, 4, 5, 0, 5, 1, 
+            1, 5, 6, 1, 6, 2, 
+            2, 6, 7, 2, 7, 3, 
+            4, 0, 3, 4, 3, 7};
+        ArrayList<SubHyperplane<Euclidean3D>> subHyperplaneList = new ArrayList<SubHyperplane<Euclidean3D>>();
+        for (int idx = 0; idx < indices.length; idx += 3) {
+            int idxA = indices[idx] * 3;
+            int idxB = indices[idx + 1] * 3;
+            int idxC = indices[idx + 2] * 3;
+            Vector3D v_1 = new Vector3D(coords[idxA], coords[idxA + 1], coords[idxA + 2]);
+            Vector3D v_2 = new Vector3D(coords[idxB], coords[idxB + 1], coords[idxB + 2]);
+            Vector3D v_3 = new Vector3D(coords[idxC], coords[idxC + 1], coords[idxC + 2]);
+            Vector3D[] vertices = {v_1, v_2, v_3};
+            Plane polyPlane = new Plane(v_1, v_2, v_3);
+            ArrayList<SubHyperplane<Euclidean2D>> lines = new ArrayList<SubHyperplane<Euclidean2D>>();
+
+            Vector2D[] projPts = new Vector2D[vertices.length];
+            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
+                projPts[ptIdx] = polyPlane.toSubSpace(vertices[ptIdx]);
+            }
+
+            SubLine lineInPlane = null;
+            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
+                lineInPlane = new SubLine(projPts[ptIdx], projPts[(ptIdx + 1) % projPts.length]);
+                lines.add(lineInPlane);
+            }
+            Region<Euclidean2D> polyRegion = new PolygonsSet(lines);
+            SubPlane polygon = new SubPlane(polyPlane, polyRegion);
+            subHyperplaneList.add(polygon);
+        }
+        PolyhedronsSet polyhedronsSet = new PolyhedronsSet(subHyperplaneList);
+        Assert.assertEquals( 8.0, polyhedronsSet.getSize(), 3.0e-6);
+        Assert.assertEquals(24.0, polyhedronsSet.getBoundarySize(), 5.0e-6);
+    }
