diff --git a/tmp/a94757bc-1a27-4609-93d8-f317670868e2_buggy.java b/tmp/c2bad3cb-610e-4086-8c9b-acbbb3e50a6f_fixed.java
index d80b7d0..4d35ef8 100644
--- a/tmp/a94757bc-1a27-4609-93d8-f317670868e2_buggy.java
+++ b/tmp/c2bad3cb-610e-4086-8c9b-acbbb3e50a6f_fixed.java
@@ -1,61 +1,31 @@
-    /**
-     * Checks dimensions and values of boundaries and inputSigma if defined.
-     */
-    private void checkParameters() {
-        final double[] init = getStartPoint();
-        final double[] lB = getLowerBound();
-        final double[] uB = getUpperBound();
-
-        // Checks whether there is at least one finite bound value.
-        boolean hasFiniteBounds = false;
-        for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
-                hasFiniteBounds = true;
-                break;
-            }
-        }
         // Checks whether there is at least one infinite bound value.
         boolean hasInfiniteBounds = false;
         if (hasFiniteBounds) {
             for (int i = 0; i < lB.length; i++) {
                 if (Double.isInfinite(lB[i]) ||
                     Double.isInfinite(uB[i])) {
                     hasInfiniteBounds = true;
+                    System.out.println("Infinite bounds found at index " + i);
                     break;
                 }
             }
 
             if (hasInfiniteBounds) {
+                System.out.println("Infinite bounds found");
                 // If there is at least one finite bound, none can be infinite,
                 // because mixed cases are not supported by the current code.
                 throw new MathUnsupportedOperationException();
             } else {
+                System.out.println("Finite bounds found");
                 // Convert API to internal handling of boundaries.
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
 
                 // Abort early if the normalization will overflow (cf. "encode" method).
             }
         } else {
+            System.out.println("No finite bounds found");
             // Convert API to internal handling of boundaries.
             boundaries = null;
         }
\ No newline at end of file
-
-        if (inputSigma != null) {
-            if (inputSigma.length != init.length) {
-                throw new DimensionMismatchException(inputSigma.length, init.length);
-            }
-            for (int i = 0; i < init.length; i++) {
-                if (inputSigma[i] < 0) {
-                    throw new NotPositiveException(inputSigma[i]);
-                }
-                if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
-                    }
-                }
-            }
-        }
-    }
