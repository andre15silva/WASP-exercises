diff --git a/tmp/0ccd9d2f-4aa9-4dfa-909f-e05d99b4e244_buggy.java b/tmp/712f4d6f-88f2-4a30-9eda-a327c29ebda6_fixed.java
index b91f7de..3375e52 100644
--- a/tmp/0ccd9d2f-4aa9-4dfa-909f-e05d99b4e244_buggy.java
+++ b/tmp/712f4d6f-88f2-4a30-9eda-a327c29ebda6_fixed.java
@@ -1,69 +1,54 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
-        if (length < 2){
+        if (length < 2)
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
-        }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
+        // Check for leading NUL or space
+        if (buffer[start] == 0 || buffer[start] == ' '){
             if (buffer[start] == ' '){
                 start++;
-            } else {
-                break;
             }
-        }
-
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
+            // Check for trailing NUL or space
             byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+            while (start < end && (trailer == 0 || trailer == ' '))
                 end--;
-            trailer = buffer[end - 1];
-        }
-
+            if (start > 0){
+                // Found non-NUL/space, continue parsing
                 for ( ;start < end; start++) {
                     final byte currentByte = buffer[start];
-            if (currentByte == 0) {
+                    if (currentByte == 0)
                         break;
-            }
                     // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
+                    result <<= 3;
+                    result += currentByte - '0';
                     // CheckStyle:MagicNumber ON
                 }
+            }
+        }
 
         return result;
     }
