diff --git a/tmp/706f3257-8b2a-42f1-91f0-df61d960513e_buggy.java b/tmp/f2a0fd68-dfa1-47ab-8206-7295bcc63191_fixed.java
index b91f7de..9d87d7e 100644
--- a/tmp/706f3257-8b2a-42f1-91f0-df61d960513e_buggy.java
+++ b/tmp/f2a0fd68-dfa1-47ab-8206-7295bcc63191_fixed.java
@@ -1,69 +1,35 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
+    public static long parseOctal(byte[] buffer, int offset, int length) {
+        long result = 0L;
         int start = offset;
 
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+        if (length == 1) {
+            return result;
         }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        // Skip leading spaces and NULs
+        while (start < length && (buffer[start] == ' ' || buffer[start] == 0)) {
             start++;
-            } else {
-                break;
         }
+
+        // We have reached the end of the input
+        if (start == length) {
+            return result;
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        // Trim all trailing spaces and NULs
+        int end = length - 1;
+        while (end >= start && (buffer[end] == ' ' || buffer[end] == 0)) {
             end--;
-            trailer = buffer[end - 1];
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
-            // CheckStyle:MagicNumber OFF
+        for (int i = start; i <= end; i++) {
+            final byte currentByte = buffer[i];
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        "Invalid octal digit: " + currentByte);
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0');
         }
 
         return result;
     }
\ No newline at end of file
