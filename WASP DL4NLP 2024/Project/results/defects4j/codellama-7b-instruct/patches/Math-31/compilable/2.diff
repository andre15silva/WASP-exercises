diff --git a/tmp/384ca1e6-c980-4175-9444-9e5a585e123f_buggy.java b/tmp/fdb05110-5d2a-493c-be4c-e7a719fa4523_fixed.java
index 57d43b9..625d2dc 100644
--- a/tmp/384ca1e6-c980-4175-9444-9e5a585e123f_buggy.java
+++ b/tmp/fdb05110-5d2a-493c-be4c-e7a719fa4523_fixed.java
@@ -1,102 +1,71 @@
-    /**
-     * <p>
-     * Evaluates the continued fraction at the value x.
-     * </p>
-     *
-     * <p>
-     * The implementation of this method is based on the modified Lentz algorithm as described
-     * on page 18 ff. in:
-     * <ul>
-     * <li>
-     *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
-     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
-     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
-     * </li>
-     * </ul>
-     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
-     * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
-     * </p>
-     *
-     * @param x the evaluation point.
-     * @param epsilon maximum error allowed.
-     * @param maxIterations maximum number of convergents
-     * @return the value of the continued fraction evaluated at x.
-     * @throws ConvergenceException if the algorithm fails to converge.
-     */
     public double evaluate(double x, double epsilon, int maxIterations) {
         final double small = 1e-50;
         double hPrev = getA(0, x);
 
         // use the value of small as epsilon criteria for zero checks
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
 
         int n = 1;
         double dPrev = 0.0;
         double p0 = 1.0;
         double q1 = 1.0;
         double cPrev = hPrev;
         double hN = hPrev;
 
         while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
+            double a = getA(n, x);
+            double b = getB(n, x);
 
             double cN = a * hPrev + b * p0;
             double q2 = a * q1 + b * dPrev;
             if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                 double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
                 final int maxPower = 5;
                 final double scale = FastMath.max(a,b);
                 if (scale <= 0) {  // Can't scale
                     throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                 }
                 for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
                     if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
+                        cN = hPrev / FastMath.pow(scale, i) + (b / FastMath.pow(scale, i+1) * p0);
+                        q2 = q1 / FastMath.pow(scale, i) + (b / FastMath.pow(scale, i+1) * dPrev);
                     } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+                        cN = (a / FastMath.pow(scale, i) * hPrev) + p0 / FastMath.pow(scale, i);
+                        q2 = (a / FastMath.pow(scale, i) * q1) + dPrev / FastMath.pow(scale, i);
                     }
                     if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                         break;
                     }
                 }
             }
 
-            final double deltaN = cN / q2 / cPrev;
+            double deltaN = cN / q2 / cPrev;
             hN = cPrev * deltaN;
 
             if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
             }
             if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);
             }
 
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
 
             dPrev = q1;
             cPrev = cN / q2;
             p0 = hPrev;
             hPrev = cN;
             q1 = q2;
             n++;
         }
 
         if (n >= maxIterations) {
-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
-                                                maxIterations, x);
+            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);
         }
 
         return hN;
     }
\ No newline at end of file
