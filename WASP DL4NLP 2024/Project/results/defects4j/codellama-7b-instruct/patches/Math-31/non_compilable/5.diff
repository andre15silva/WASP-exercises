diff --git a/tmp/30ceec5e-9cde-4f58-9095-a4c69ff1418d_buggy.java b/tmp/3f7137a3-8a8e-479b-bec5-5bf50b6c979a_fixed.java
index 57d43b9..74522ff 100644
--- a/tmp/30ceec5e-9cde-4f58-9095-a4c69ff1418d_buggy.java
+++ b/tmp/3f7137a3-8a8e-479b-bec5-5bf50b6c979a_fixed.java
@@ -1,102 +1,108 @@
     /**
      * <p>
-     * Evaluates the continued fraction at the value x.
+     * Returns the inversion of the cumulative distribution function P(x &lt;= r) of the binomial
+     * distribution with a probability of success of 0.5 and a certain number of trials.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
-     * @param x the evaluation point.
+     * @param r the evaluation point.
+     * @param trials the number of trials.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
-     * @return the value of the continued fraction evaluated at x.
+     * @return the inversion of the cumulative distribution function at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
-    public double evaluate(double x, double epsilon, int maxIterations) {
+    public static double invCumulativeProbability(double r, int trials, double epsilon, int maxIterations) {
+        if (r < 0.0 || r > 1.0) {
+            throw new IllegalArgumentException("Invalid r value, r must be between 0.0 and 1.0.");
+        }
+        if (trials < 1) {
+            throw new IllegalArgumentException("Invalid trials value, must be positive.");
+        }
         final double small = 1e-50;
-        double hPrev = getA(0, x);
+        double hPrev = getA(0, r, trials);
 
         // use the value of small as epsilon criteria for zero checks
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
 
         int n = 1;
         double dPrev = 0.0;
         double p0 = 1.0;
         double q1 = 1.0;
         double cPrev = hPrev;
         double hN = hPrev;
 
         while (n < maxIterations) {
-            final double a = getA(n, x);
-            final double b = getB(n, x);
+            final double a = getA(n, r, trials);
+            final double b = getB(n, r, trials);
 
             double cN = a * hPrev + b * p0;
             double q2 = a * q1 + b * dPrev;
             if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                 double scaleFactor = 1d;
                 double lastScaleFactor = 1d;
                 final int maxPower = 5;
                 final double scale = FastMath.max(a,b);
                 if (scale <= 0) {  // Can't scale
-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, r, trials);
                 }
                 for (int i = 0; i < maxPower; i++) {
                     lastScaleFactor = scaleFactor;
                     scaleFactor *= scale;
                     if (a != 0.0 && a > b) {
                         cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                         q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
                     } else if (b != 0) {
                         cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
                         q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                     }
                     if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                         break;
                     }
                 }
             }
 
             final double deltaN = cN / q2 / cPrev;
             hN = cPrev * deltaN;
 
             if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, r, trials);
             }
             if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
+                throw new ConvergenceException(LocalizedFormats.CONTINUATED_FRACTION_NAN_DIVERGENCE, r, trials);
             }
 
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
 
             dPrev = q1;
             cPrev = cN / q2;
             p0 = hPrev;
             hPrev = cN;
             q1 = q2;
             n++;
         }
 
         if (n >= maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
-                                                maxIterations, x);
+                                                maxIterations, r, trials);
         }
 
         return hN;
     }
\ No newline at end of file
