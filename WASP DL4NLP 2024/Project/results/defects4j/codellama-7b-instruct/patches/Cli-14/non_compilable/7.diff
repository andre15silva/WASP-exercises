diff --git a/tmp/af5fa649-9f4c-46d8-9b2b-0f39f6066249_buggy.java b/tmp/9681a001-52e0-40a8-871b-e51f1aeec2cc_fixed.java
index 71189c3..0c75063 100644
--- a/tmp/af5fa649-9f4c-46d8-9b2b-0f39f6066249_buggy.java
+++ b/tmp/9681a001-52e0-40a8-871b-e51f1aeec2cc_fixed.java
@@ -1,46 +1,53 @@
+
     public void validate(final WriteableCommandLine commandLine)
             throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
+        System.out.println("options size: " + options.size());
+
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
+                System.out.println("Found: " + option.getLabel());
                 if (++present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
                 option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
+            System.out.println("Too many options: " + unexpected.getLabel());
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
+            System.out.println("Too few options: " + present + " < " +
+                    minimum);
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
