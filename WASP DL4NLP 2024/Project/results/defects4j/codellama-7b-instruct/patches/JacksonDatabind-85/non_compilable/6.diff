diff --git a/tmp/f4242578-4ed3-4db0-b3b5-2c07333e2bca_buggy.java b/tmp/60e1751e-b49e-4346-9967-4d3df72d8cb3_fixed.java
index d926eea..a3befc0 100644
--- a/tmp/f4242578-4ed3-4db0-b3b5-2c07333e2bca_buggy.java
+++ b/tmp/60e1751e-b49e-4346-9967-4d3df72d8cb3_fixed.java
@@ -1,48 +1,23 @@
-    @Override
-    public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
-        if (property == null) {
-            return this;
-        }
-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
-            return this;
-        }
-        // Simple case first: serialize as numeric timestamp?
-        JsonFormat.Shape shape = format.getShape();
-        if (shape.isNumeric()) {
-            return withFormat(Boolean.TRUE, null);
-        }
-
+    ...
+    } else {
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                 || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                 ? format.getPattern()
                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+            JsonFormat.Value newformat = withFormat(Boolean.FALSE, df);
+            return newformat;
         }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
     }
+    ...
\ No newline at end of file
