diff --git a/tmp/f381ffba-a93a-4bbc-ab70-2b07a5668c3e_buggy.java b/tmp/4798c668-ce13-4efa-8a07-808f9c8b87a2_fixed.java
index d926eea..dee9fc8 100644
--- a/tmp/f381ffba-a93a-4bbc-ab70-2b07a5668c3e_buggy.java
+++ b/tmp/4798c668-ce13-4efa-8a07-808f9c8b87a2_fixed.java
@@ -1,48 +1,21 @@
+public class MyDateContextualSerializer extends ContextualSerializer {
      @Override
-    public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
-        if (property == null) {
-            return this;
-        }
-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
-        if (format == null) {
-            return this;
-        }
-        // Simple case first: serialize as numeric timestamp?
-        JsonFormat.Shape shape = format.getShape();
-        if (shape.isNumeric()) {
-            return withFormat(Boolean.TRUE, null);
+     public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {
+        // get the expected date format from the SerializerProvider
+        SimpleDateFormat expectedFormat = (SimpleDateFormat)serializers.getFormat();
+        
+        // return the expected DateFormat
+        return new MyDateSerializer(expectedFormat);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
+    static class MyDateSerializer extends JsonSerializer<Date> {
+        private SimpleDateFormat format;
+        public MyDateSerializer(SimpleDateFormat format) {
+            this.format = format;
+        }
+        @Override
+        public void serialize(Date value, JsonGenerator generator, SerializerProvider serializers) throws IOException, JsonProcessingException {
+            generator.writeString(format.format(value));
         }
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
     }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
 }
