diff --git a/tmp/db74aed2-4d6c-4201-8a00-a7a0d3f85f07_buggy.java b/tmp/0f6438a1-06ee-4fa9-bb41-033fb2cd9464_fixed.java
index b6b11b6..cf69abe 100644
--- a/tmp/db74aed2-4d6c-4201-8a00-a7a0d3f85f07_buggy.java
+++ b/tmp/0f6438a1-06ee-4fa9-bb41-033fb2cd9464_fixed.java
@@ -1,38 +1,37 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
         int lastHold = start;
         for (int i = pos.getIndex(); i < pattern.length(); i++) {
             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
                 appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
                         QUOTE);
                 pos.setIndex(i + ESCAPED_QUOTE.length());
                 lastHold = pos.getIndex();
                 continue;
             }
             switch (c[pos.getIndex()]) {
             case QUOTE:
                 next(pos);
                 return appendTo == null ? null : appendTo.append(c, lastHold,
                         pos.getIndex() - lastHold);
             default:
                 next(pos);
             }
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        if (appendTo != null) {
+            appendTo.append(c, start, pos.getIndex() - start);
+        }
+        return appendTo;
     }
