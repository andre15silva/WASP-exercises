diff --git a/tmp/aeda4016-8c55-4bb9-b4f8-ace14b7dd387_buggy.java b/tmp/9ac40834-aecf-49e0-aa2b-c413d7e43e6c_fixed.java
index 4ebe4f9..787177f 100644
--- a/tmp/aeda4016-8c55-4bb9-b4f8-ace14b7dd387_buggy.java
+++ b/tmp/9ac40834-aecf-49e0-aa2b-c413d7e43e6c_fixed.java
@@ -1,41 +1,28 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
     @Override
     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
-        // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegate = null;
-        if (_valueInstantiator != null) {
-            // [databind#2324]: check both array-delegating and delegating
-            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
-            if (delegateCreator != null) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
-                delegate = findDeserializer(ctxt, delegateType, property);
-            }
-        }
+        JavaType valueType = _containerType.getContentType();
+        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
+                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+
+        // 11-Dec-2015, tatu: Added check for delegating creator:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
-        final JavaType valueType = _containerType.getContentType();
         if (valueDeser == null) {
-            // [databind#125]: May have a content converter
             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
             if (valueDeser == null) {
-            // And we may also need to get deserializer for String
                 valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
             }
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
         }
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
-        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
-                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
+        // if delegating creator, check it further by instantiating a delegate
+        if (valueDeser instanceof DelegatingArrayCreatorBase) {
+            valueDeser = ((DelegatingArrayCreatorBase) valueDeser).createContextual(ctxt, property);
+        }
         NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
         if (isDefaultDeserializer(valueDeser)) {
             valueDeser = null;
         }
-        return withResolved(delegate, valueDeser, nuller, unwrapSingle);
+        return withResolved(null, valueDeser, nuller, unwrapSingle);
     }
