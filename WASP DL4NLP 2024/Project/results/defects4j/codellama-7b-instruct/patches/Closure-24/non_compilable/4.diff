diff --git a/tmp/360296b0-7851-44ff-be54-d455f72103ee_buggy.java b/tmp/73a11e11-d7a9-4c55-b6f9-e10241669fac_fixed.java
index 602226b..3929032 100644
--- a/tmp/360296b0-7851-44ff-be54-d455f72103ee_buggy.java
+++ b/tmp/73a11e11-d7a9-4c55-b6f9-e10241669fac_fixed.java
@@ -1,26 +1,22 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
+        if (type == Token.VAR) {
             if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+                // Check if the variable is a private variable
+                if (!v.isPrivate()) {
                     String name = n.getString();
                     Var aliasVar = scope.getVar(name);
                     aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                    String qualifiedName = aliasVar.getInitialValue()
+                            .getQualifiedName();
                     transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+                }
             }
         }
     }
 }
\ No newline at end of file
