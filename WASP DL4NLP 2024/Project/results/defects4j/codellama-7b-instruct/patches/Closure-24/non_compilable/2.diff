diff --git a/tmp/d07a91d9-16b5-4ea7-9d43-ce7cd6bcfc48_buggy.java b/tmp/b064e3d5-5b41-470b-b826-ec252d25245b_fixed.java
index 602226b..0b4e5c0 100644
--- a/tmp/d07a91d9-16b5-4ea7-9d43-ce7cd6bcfc48_buggy.java
+++ b/tmp/b064e3d5-5b41-470b-b826-ec252d25245b_fixed.java
@@ -1,26 +1,4 @@
-    private void findAliases(NodeTraversal t) {
-      Scope scope = t.getScope();
-      for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
-        }
-      }
+...
+else if (!v.getNode().hasChildren()) {
+  ...
 }
\ No newline at end of file
