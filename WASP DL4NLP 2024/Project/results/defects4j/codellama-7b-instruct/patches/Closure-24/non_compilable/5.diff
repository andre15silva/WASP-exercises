diff --git a/tmp/08073327-2a8d-44c6-992a-0a2041627f83_buggy.java b/tmp/d77b6563-6bc7-48f3-bdef-35f3057d3e94_fixed.java
index 602226b..a3725d6 100644
--- a/tmp/08073327-2a8d-44c6-992a-0a2041627f83_buggy.java
+++ b/tmp/d77b6563-6bc7-48f3-bdef-35f3057d3e94_fixed.java
@@ -1,26 +1,10 @@
-    private void findAliases(NodeTraversal t) {
-      Scope scope = t.getScope();
-      for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
+    if (parent.isFunction()) {
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+    } else {
+      // TODO(robbyw): Support using locals for private variables.
+      aliasVar = scope.getVar(name);
       aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+      qualifiedName =  aliasVar.getInitialValue().getQualifiedName();
       transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
-        }
-      }
     }
\ No newline at end of file
