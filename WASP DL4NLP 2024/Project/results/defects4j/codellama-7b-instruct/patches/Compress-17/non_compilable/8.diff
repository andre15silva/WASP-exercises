diff --git a/tmp/d90dc0c4-2eb5-4c67-878f-9c2060ed09be_buggy.java b/tmp/dba0c9e2-20af-4161-9595-df578f67531c_fixed.java
index 3b9a3c0..98336bd 100644
--- a/tmp/d90dc0c4-2eb5-4c67-878f-9c2060ed09be_buggy.java
+++ b/tmp/dba0c9e2-20af-4161-9595-df578f67531c_fixed.java
@@ -1,71 +1,28 @@
+package org.apache.commons.compress.archivers.tar;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+class TarArchiveInputStreamUtil {
   /**
-     * Parse an octal string from a buffer.
+   * Skip a given number of bytes in the stream.
    *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+   * @param in The input stream to read from.
+   * @param n The number of bytes to skip.
+   * @throws IOException if an exception occurs while copying the data.
    */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
-        if (length < 2){
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+  public static void skip(InputStream in, long n) throws IOException {
+    if (n == 0) {
+      return;
     }
-
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
+    long count = 0;
+    byte[] buffer = new byte[4096];
+    while (count < n) {
+      int size = in.read(buffer, 0, (int) Math.min(n - count, buffer.length));
+      if (size == -1) {
         break;
       }
+      count += size;
     }
-
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
   }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        }
-
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
-        }
-
-        return result;
 }
\ No newline at end of file
