diff --git a/tmp/b705fc30-5fe1-42c6-a45f-3d08d3ec3bc4_buggy.java b/tmp/016858a9-c708-4284-b9f6-09c77c87c297_fixed.java
index 3b9a3c0..71b5518 100644
--- a/tmp/b705fc30-5fe1-42c6-a45f-3d08d3ec3bc4_buggy.java
+++ b/tmp/016858a9-c708-4284-b9f6-09c77c87c297_fixed.java
@@ -1,71 +1,68 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
+        // Check if the buffer is valid
         if (length < 2) {
-            throw new IllegalArgumentException("Length "+length+" must be at least 2");
+            throw new IllegalArgumentException("Length is less than 2");
+        }
+        if (length > buffer.length - offset) {
+            throw new IllegalArgumentException("Length is greater than the buffer length");
         }
 
+        // Check if the buffer is in the correct format
         if (buffer[start] == 0) {
             return 0L;
         }
+        if (buffer[end-1] != ' ' && buffer[end-1] != 0) {
+            throw new IllegalArgumentException("Incorrect format");
+        }
 
         // Skip leading spaces
         while (start < end) {
-            if (buffer[start] == ' '){
-                start++;
-            } else {
-                break;
+            if (buffer[start++] == 0) {
+                throw new IllegalArgumentException("Incorrect format");
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
         // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+        if (buffer[end - 1] == 0 || buffer[end - 1] == ' ') {
             end--;
         }
 
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
+}
\ No newline at end of file
