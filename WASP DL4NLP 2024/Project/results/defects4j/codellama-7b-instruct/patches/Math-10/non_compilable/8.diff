diff --git a/tmp/6291be76-26ca-4c91-8f56-76a35c7eb8bb_buggy.java b/tmp/7528aaf9-f516-4f15-8c8d-8bd8c40584f9_fixed.java
index d27c40c..360eb1c 100644
--- a/tmp/6291be76-26ca-4c91-8f56-76a35c7eb8bb_buggy.java
+++ b/tmp/7528aaf9-f516-4f15-8c8d-8bd8c40584f9_fixed.java
@@ -1,49 +1,8 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
-    public void atan2(final double[] y, final int yOffset,
-                      final double[] x, final int xOffset,
-                      final double[] result, final int resultOffset) {
-
-        // compute r = sqrt(x^2+y^2)
-        double[] tmp1 = new double[getSize()];
-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
-        double[] tmp2 = new double[getSize()];
-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
-
-        if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+public static double[] atan2(double[] y, int yOffset, double[] x, int xOffset, double[] r) {
+    double[] tmp1 = new double[y.length];
+    double[] tmp2 = new double[y.length];
+    for (int i = 0; i < y.length; i++) {
+        tmp1[i] = Math.atan2(Math.hypot(x[xOffset + i], y[yOffset + i]), Math.hypot(x[xOffset + i], x[xOffset + i]));
     }
-
-        } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
-            for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
-            }
-
-        }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+    return tmp1;
 }
\ No newline at end of file
