diff --git a/tmp/9d2a3ec9-d7b0-41e9-a221-0baef071b0c5_buggy.java b/tmp/4f8be9ea-1ade-4095-95a1-5c1229576773_fixed.java
index 49a5702..e70b8f1 100644
--- a/tmp/9d2a3ec9-d7b0-41e9-a221-0baef071b0c5_buggy.java
+++ b/tmp/4f8be9ea-1ade-4095-95a1-5c1229576773_fixed.java
@@ -1,66 +1,99 @@
+ package com.google.javascript.jscomp;
+
+import com.google.javascript.rhino.Node;
+
+import javax.annotation.Nullable;
+
+public class RemoveUnusedCode implements NodeTraversal.Callback {
+
+  private final AbstractCompiler compiler;
+
+  public RemoveUnusedCode(AbstractCompiler compiler) {
+    this.compiler = compiler;
+  }
+
+  @Nullable
   @Override
-  public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
-      return;
-    }
-
-    if (parent == null) {
-      return;
+  public Tree visit(NodeTraversal t, Node n, Node parent) {
+    if (n.isEmpty() || isComma(n, parent)) {
+      return null;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
-    if (n.isExprResult()) {
-      return;
+    if (isExprResult(n) || isBlock(n)) {
+      return null;
     }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {
-      return;
+    // If the node is a qualified name type with JSDoc information,
+    // return here as it is only used for type annotations.
+    if (isQualifiedName(n) && n.getJSDocInfo() != null) {
+      return null;
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
+    boolean isUsed = isExpressionResultUsed(n, t.getScope());
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
     if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
-      if (n == parent.getLastChild()) {
+      if (parent.getLastChild() == n) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+          if (ancestorType == Token.COMMA) {
+            continue;
           }
+          if (!isExprResult(an, t.getScope()) && !isBlock(an, t.getScope())) {
+            return null;
           }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
+          break;
         }
       }
+    } else if (isExprResult(n, t.getScope()) || isBlock(n, t.getScope())) {
+      return null;
+    }
+
     if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
-      String msg = "This code lacks side-effects. Is there a bug?";
-      if (n.isString()) {
-        msg = "Is there a missing '+' on the previous line?";
-      } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
-            "' operator is not being used.";
+        n.isComma() ||
+        isSimpleOp ||
+        !NodeUtil.mayHaveSideEffects(n, compiler)
+    ) {
+      return null;
     }
 
-      t.getCompiler().report(
-          t.makeError(n, level, USELESS_CODE_ERROR, msg));
+    compiler.report(
+        t,
+        n.getJSDocInfo() != null ? USELESS_VAR_ERROR : USELESS_CODE_ERROR,
+        "This code lacks side-effects. Is there a bug?"
+    );
+
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
-        problemNodes.add(n);
+      return null;
     }
+
+    return null;
+  }
+
+  // Checks if the node is a comma operator
+  private static boolean isComma(Node n, Node parent) {
+    return n.isComma() &&
+        parent != null &&
+        parent.isExprResult();
+  }
+
+  // Checks if the node is an expression result
+  private static boolean isExprResult(Node n) {
+    return n.isExprResult();
+  }
+
+  // Checks if the node is a block
+  private static boolean isBlock(Node n) {
+    return n.isBlock();
+  }
+
+  // Checks if the node is a qualified name
+  private static boolean isQualifiedName(Node n) {
+    return n.isQualifiedName();
   }
 }
\ No newline at end of file
