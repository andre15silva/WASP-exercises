diff --git a/tmp/21b202f3-6ab9-4e59-a3d8-9f62acce771f_buggy.java b/tmp/62fb4b87-838e-4061-a38c-0cb5aeed4ac8_fixed.java
index eea9e73..bb3ed3e 100644
--- a/tmp/21b202f3-6ab9-4e59-a3d8-9f62acce771f_buggy.java
+++ b/tmp/62fb4b87-838e-4061-a38c-0cb5aeed4ac8_fixed.java
@@ -1,41 +1,50 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
 		for (int i = 0; i < csLength; i++) {
 			char ch = cs.charAt(i);
 			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+				char testCh = searchChars[j];
+				if (testCh == ch) {
 					return true;
 				}
+				else if (Character.isSupplementaryCodePoint(testCh)) {
+					// testCh is a supplementary character
+					if (supplementaryMatches(testCh, ch)) {
+						return true;
+					}
+				}
 			}
 		}
 		return false;
 	}
+
+	private static boolean supplementaryMatches(char high, char low) {
+		return high == (0xd800 | (low >> 10)) && low == (0xdc00 | (low & 0x3ff));
+	}
