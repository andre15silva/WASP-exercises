diff --git a/tmp/79a7aa6c-238e-435c-9c39-9ff26b0fdd83_buggy.java b/tmp/f83bac76-ae21-45b6-be7f-ab68cb4988a7_fixed.java
index e8705ac..847515a 100644
--- a/tmp/79a7aa6c-238e-435c-9c39-9ff26b0fdd83_buggy.java
+++ b/tmp/f83bac76-ae21-45b6-be7f-ab68cb4988a7_fixed.java
@@ -1,24 +1,18 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
  private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
-      Node first = n.getFirstChild();
+      Node thisValue = n.getFirstChild();
+      if (NodeUtil.isGet(thisValue)) {
+        thisValue = thisValue.getLastChild();
+      }
 
       // ignore cast nodes.
 
-      if (!NodeUtil.isGet(first)) {
+      if (thisValue.isName() && "eval".equals(thisValue.getString())) {
+        thisValue.putBooleanProp(Node.DIRECT_EVAL, true);
+      }
+
       n.putBooleanProp(Node.FREE_CALL, true);
     }
-
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
-      }
-    }
