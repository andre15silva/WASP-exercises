diff --git a/tmp/a0e1f7b3-fc0c-423c-9fb6-d2b024ff33cf_buggy.java b/tmp/fc6e4efb-1f58-4487-a377-df03ddc02997_fixed.java
index d8b0158..4e9694b 100644
--- a/tmp/a0e1f7b3-fc0c-423c-9fb6-d2b024ff33cf_buggy.java
+++ b/tmp/fc6e4efb-1f58-4487-a377-df03ddc02997_fixed.java
@@ -1,113 +1,60 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
-    Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
-        return n;
-      }
-    }
-
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
       // "," is the default, it doesn't need to be explicit
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+    String joinString = ",";
+    if (arrayNode.getFirstChild().getNext() != null) {
+      joinString = NodeUtil.getStringValue(arrayNode.getFirstChild().getNext());
+    }
+
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
-    Node prev = null;
+    StringBuilder sb = new StringBuilder();
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
-        } else {
-          sb.append(joinString);
-        }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
-        }
-        foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
-      prev = elem;
       elem = elem.getNext();
     }
 
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+    if (sb.length() == 0) {
+      return n;
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+
+    String foldedString = sb.toString();
+    if (foldedString.isEmpty()) return n;
+
+    int foldedSize = foldedString.length();
 
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
+
+    Node foldedArray = Node.newArrayLiteral(arrayFoldedChildren).copyInformationFrom(n);
+    if (foldedSize < originalSize) {
       return n;
     }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
+
+    Node foldedStringNode = Node.newString(foldedString).copyInformationFrom(n);
+
     n.getParent().replaceChild(n, foldedStringNode);
     reportCodeChange();
+
     return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        reportCodeChange();
-        break;
-    }
-
-    return n;
   }
\ No newline at end of file
