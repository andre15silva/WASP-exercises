diff --git a/tmp/75a077ba-8464-4073-a41a-c89f3336562c_buggy.java b/tmp/16d1a544-b750-4746-8457-8fee7de69071_fixed.java
index 3ec995f..70074ef 100644
--- a/tmp/75a077ba-8464-4073-a41a-c89f3336562c_buggy.java
+++ b/tmp/16d1a544-b750-4746-8457-8fee7de69071_fixed.java
@@ -1,26 +1,16 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    private static float toJavaVersionInt(String version) {
+        if (version == null) {
+            return 0;
+        }
+        String[] versionParts = version.split("\\.");
+        if (versionParts.length < 3) {
+            return 0;
+        }
+        String majorVersion = versionParts[0];
+        String minorVersion = versionParts[1];
+        String patchVersion = versionParts[2];
+        int major = Integer.parseInt(majorVersion);
+        int minor = Integer.parseInt(minorVersion);
+        int patch = Integer.parseInt(patchVersion);
+        return (major * 10000) + (minor * 100) + patch;
     }
\ No newline at end of file
