diff --git a/tmp/d900af1d-70c0-400a-9077-26b6c5be0ce5_buggy.java b/tmp/189194f3-f55c-47fe-9d93-b4b945d76cc1_fixed.java
index 3ec995f..f925dc7 100644
--- a/tmp/d900af1d-70c0-400a-9077-26b6c5be0ce5_buggy.java
+++ b/tmp/189194f3-f55c-47fe-9d93-b4b945d76cc1_fixed.java
@@ -1,26 +1,15 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
     static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+        // validate input
+        if (version == null || version.isEmpty()) {
+            return 0;
+        }
+        // remove trailing characters
+        String cleanedVersion = version.replaceAll("[^0-9.]", "");
+        // split version into parts
+        String[] parts = cleanedVersion.split("\\.");
+        // convert parts to ints
+        int major = Integer.parseInt(parts[0]);
+        int minor = Integer.parseInt(parts[1]);
+        // calculate version
+        return major * 100 + minor;
     }
\ No newline at end of file
