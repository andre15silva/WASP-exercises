diff --git a/tmp/282f63c5-eff3-4e8d-b6f0-7fcf0b96fd3c_buggy.java b/tmp/3fa758e0-2a14-4414-a27f-bddcf54c9663_fixed.java
index 19fd63e..4900d36 100644
--- a/tmp/282f63c5-eff3-4e8d-b6f0-7fcf0b96fd3c_buggy.java
+++ b/tmp/3fa758e0-2a14-4414-a27f-bddcf54c9663_fixed.java
@@ -1,24 +1,8 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      if (n.getFirstChild().getType() == Token.EXPR_RESULT) {
+        return NodeUtil.isExpressionNode(n.getFirstChild().getFirstChild());
       }
     }
-
     return false;
   }
