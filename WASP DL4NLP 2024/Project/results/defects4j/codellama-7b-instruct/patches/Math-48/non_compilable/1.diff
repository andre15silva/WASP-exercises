diff --git a/tmp/42b04bcc-9d43-42e7-83b1-89ef363be2c4_buggy.java b/tmp/d8d59143-a9d2-4273-adab-37d3cbec6dca_fixed.java
index 14b51f9..06e33ca 100644
--- a/tmp/42b04bcc-9d43-42e7-83b1-89ef363be2c4_buggy.java
+++ b/tmp/d8d59143-a9d2-4273-adab-37d3cbec6dca_fixed.java
@@ -1,124 +1,159 @@
-    /** {@inheritDoc} */
     protected final double doSolve() {
         // Get initial solution
         double x0 = getMin();
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
 
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
         if (f0 == 0.0) {
             return x0;
         }
         if (f1 == 0.0) {
             return x1;
         }
 
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
 
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
 
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
 
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
-            final double fx = computeObjectiveValue(x);
+            double x = null;
+            double fx = null;
+            if (f1 * f0 < 0) {
+                // If the bounds have switched sides, we need to switch the
+                // current interval.
+                if (inverted) {
+                    x = x1;
+                    fx = f0;
+                } else {
+                    x = x0;
+                    fx = f1;
+                }
+            } else {
+                // If the bounds haven't switched sides, we have 2 options to
+                // choose from:
+                // 1. Use the bracketing interval [x0, x1] to calculate the
+                //    next approximation.
+                // 2. Use the other bracketing interval [x1, x0] to calculate the
+                //    next approximation.
+                if (inverted) {
+                    x = x1;
+                    fx = f0;
+                } else {
+                    x = x0;
+                    fx = f1;
+                }
+            }
 
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
 
             // Update the bounds with the new approximation.
-            if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
-                x0 = x1;
-                f0 = f1;
-                inverted = !inverted;
-            } else {
-                switch (method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                case REGULA_FALSI:
-                    // Detect early that algorithm is stuck, instead of waiting
-                    // for the maximum number of iterations to be exceeded.
-                    break;
-                default:
-                    // Should never happen.
-                    throw new MathInternalError();
-                }
-            }
-            // Update from [x0, x1] to [x0, x].
-            x1 = x;
-            f1 = fx;
+            double temp = x;
+            x = x1;
+            x1 = temp;
+            temp = fx;
+            fx = f1;
+            f1 = f0;
+            f0 = temp;
 
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
             if (FastMath.abs(f1) <= ftol) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
+                    return inverted ? x1 : x0;
                 case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
+                    return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
                 }
             }
 
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                    if (f1 <= 0) {
+                        return x1;
+                    }
+                    break;
                 case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                    if (f1 >= 0) {
+                        return x1;
+                    }
+                    break;
                 default:
                     throw new MathInternalError();
                 }
             }
+
+            // If the iteration limit has been exceeded, throw a convergence
+            // exception if we need to.
+            if (iterations != null) {
+                if (iterations.get() >= maxIterCount) {
+                    throw new ConvergenceException(LocalizedFormats.MAX_COUNT_EXCEEDED,
+                                                   maxIterCount);
+                }
+            }
+
+            // Update the inverted flag if the bounds have switched sides.
+            if (f1 * f0 < 0) {
+                inverted = !inverted;
+            }
+
+            // If the iteration count is about to be exceeded, check if we are
+            // allowed to use the other bracketing interval.
+            if (iterations != null) {
+                if (iterations.get() + 1 >= maxIterCount) {
+                    if (f1 * fx > 0) {
+                        // It's possible to use [x1, x0] to calculate the next
+                        // approximation.
+                        inverted = !inverted;
+                    } else {
+                        // The current approximation is still close to the root.
+                        // Return it.
+                        return x1;
+                    }
+                }
+            }
         }
     }
