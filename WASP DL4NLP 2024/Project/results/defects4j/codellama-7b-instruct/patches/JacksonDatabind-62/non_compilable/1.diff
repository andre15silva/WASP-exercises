diff --git a/tmp/0f805dc0-ce56-46ec-8961-4425760f06fe_buggy.java b/tmp/86a2ec65-033b-4885-9406-420e2b189fe4_fixed.java
index 6c9090f..d0e9a53 100644
--- a/tmp/0f805dc0-ce56-46ec-8961-4425760f06fe_buggy.java
+++ b/tmp/86a2ec65-033b-4885-9406-420e2b189fe4_fixed.java
@@ -1,45 +1,20 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
  @Override
-    public CollectionDeserializer createContextual(DeserializationContext ctxt,
-            BeanProperty property) throws JsonMappingException
-    {
-        // May need to resolve types for delegate-based creators:
-        JsonDeserializer<Object> delegateDeser = null;
-        if (_valueInstantiator != null) {
-            if (_valueInstantiator.canCreateUsingDelegate()) {
-                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
-                if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
-                }
-                delegateDeser = findDeserializer(ctxt, delegateType, property);
-            }
-        }
-        // [databind#1043]: allow per-property allow-wrapping of single overrides:
-        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
-        //   comes down to "List vs Collection" I suppose... for now, pass Collection
-        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
-                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
-        // also, often value deserializer is resolved here:
-        JsonDeserializer<?> valueDeser = _valueDeserializer;
+ public CollectionDeserializer createContextual(DeserializationContext ctxt, BeanProperty property)
+        throws JsonMappingException {
+    CollectionDeserializer result = super.createContextual(ctxt, property);
 
-        // May have a content converter
+    JavaType vt = _collectionType.getContentType();
+    if (vt instanceof SimpleType) {
+        SimpleType vts = (SimpleType) vt;
+        Class<?> raw = vts.getRawClass();
+        if (raw == Collections.UnmodifiableSet.class) {
             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
-        final JavaType vt = _collectionType.getContentType();
-        if (valueDeser == null) {
-            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
-        } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
+            result =
+                    new CollectionDeserializer(_collectionType, _valueInstantiator, _valueDeserializer,
+                            valueDeser, _valueTypeDeserializer, Boolean.TRUE);
         }
-        // and finally, type deserializer needs context as well
-        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
-        if (valueTypeDeser != null) {
-            valueTypeDeser = valueTypeDeser.forProperty(property);
     }
-        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
+
+    return result;
 }
\ No newline at end of file
