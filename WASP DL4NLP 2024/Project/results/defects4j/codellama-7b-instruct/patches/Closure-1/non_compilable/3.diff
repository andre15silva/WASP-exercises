diff --git a/tmp/dd96aa12-112a-42f6-9b97-74a8c9a7409a_buggy.java b/tmp/a45b66fe-eee8-4046-b5d0-8a32234e55cc_fixed.java
index 61ffdbf..84bf2c3 100644
--- a/tmp/dd96aa12-112a-42f6-9b97-74a8c9a7409a_buggy.java
+++ b/tmp/a45b66fe-eee8-4046-b5d0-8a32234e55cc_fixed.java
@@ -1,44 +1,43 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
+    // Skip the rest of the method body if the function is not inside a call site
+    if (!fnScope.isInsideOfCallSite()) {
+      return;
+    }
+
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
+
+    // Here we check if the containing call site is in 'simple mode'
+    if (fnScope.getCallSite().getCompilationLevel() == CompilationLevel.SIMPLE_OPTIMIZATIONS) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
