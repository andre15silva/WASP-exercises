diff --git a/tmp/76c3df43-ab36-44b5-90ac-17fa66ffe5b2_buggy.java b/tmp/96d31e69-d6f5-47cf-9edc-4c4160d18f19_fixed.java
index 61ffdbf..774fa0d 100644
--- a/tmp/76c3df43-ab36-44b5-90ac-17fa66ffe5b2_buggy.java
+++ b/tmp/96d31e69-d6f5-47cf-9edc-4c4160d18f19_fixed.java
@@ -1,44 +1,40 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
+
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
+
+    // Instead of removing unreferenced args only from the function
+    // declaration, process all call sites and remove any unreferenced
+    // arguments from each call site.
+
+    // This helps ensure that the length of the function call signature
+    // matches the actual length of the parameter list.
+
+    // Also note that in advanced mode, this processing is done at
+    // the call site itself, rather than in the function declaration.
+
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
