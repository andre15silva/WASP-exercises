diff --git a/tmp/35d64e33-ab80-4420-91f9-da8b613200e3_buggy.java b/tmp/b7cd5fc8-57c2-4485-a803-9f2b5968d92a_fixed.java
index f8caf72..0d33ddb 100644
--- a/tmp/35d64e33-ab80-4420-91f9-da8b613200e3_buggy.java
+++ b/tmp/b7cd5fc8-57c2-4485-a803-9f2b5968d92a_fixed.java
@@ -1,65 +1,70 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
-    public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
+   public class DateTimeZone implements Serializable {
+  
+      public static DateTimeZone forID(String id) {
+         return new DateTimeZone(id);
       }
+  
+      public static final DateTimeZone UT;
+  
+      public static final DateTimeZone UTC = UT = new DateTimeZone(0, new String[] {"UTC"});
+      
+      public static final DateTimeZone LONDON = new DateTimeZone(new int[]{0, 3600000}, new String[] {"Europe/London"});
+  
+  
+      public static final DateTimeZone PARIS = new DateTimeZone(new int[]{0, 3600000}, new String[] {"Europe/Paris"});
+      
+      public static final DateTimeZone NEW_YORK = new DateTimeZone(new int[]{30000000, -21600000}, new String[] {"America/New_York"});
+      
+  
+      private final List<int[]> offsetData;
+      
+      private final String[] idData;
+  
+      private final int[] cachedData;
+      
+      private DateTimeZone (int offset, String[] ids) {
+         this.offsetData = new ArrayList<int[]>();
+         this.offsetData.add(new int[] {offset});
+         this.idData = ids;
+         this.cachedData = new int[] {offset};
       }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
+      
+      private DateTimeZone(int[] offsets, String[] ids) {
+         this.offsetData = new ArrayList<int[]>();
+         for (int i = 0; i < offsets.length; i++) {
+            this.offsetData.add(new int[] {offsets[i]});
          }
+         this.idData = ids;
+         this.cachedData = new int[offsets.length];
+         for (int i = 0; i < offsets.length; i++) {
+            this.cachedData[i] = offsets[i];
          }
       }
-        return offsetAdjusted;
+      
+      public String getID() {
+         return this.idData[0];
+      }
+      
+      public int[] getOffsetTransitions() {
+         return this.cachedData;
+      }
+      
+      public String[] getIDs() {
+         return this.idData;
+      }
+      
+      public int getOffset(long instant) {
+         int[] transitions = this.getOffsetTransitions();
+         int count = transitions.length;
+         if (instant >= transitions[count - 1]) {
+            return transitions[count - 1];
+         }
+         for (int i = 0; i < count - 1; i++) {
+            if (instant >= transitions[i] && instant < transitions[i + 1]) {
+               return i;
+            }
+         }
+         return 0;
+      }
+      
    }
