diff --git a/tmp/a95f3465-fec5-4999-a9b8-e235c2273824_buggy.java b/tmp/08b952c6-9761-44ce-a11d-b1e0365e7510_fixed.java
index ec6c9ee..4a8103e 100644
--- a/tmp/a95f3465-fec5-4999-a9b8-e235c2273824_buggy.java
+++ b/tmp/08b952c6-9761-44ce-a11d-b1e0365e7510_fixed.java
@@ -1,21 +1,25 @@
     //-----------------------------------------------------------------------
     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
         if (notPrinter && notParser) {
             throw new IllegalStateException("Builder has created neither a printer nor a parser");
         }
         int size = elementPairs.size();
         if (size >= 2 && elementPairs.get(0) instanceof Separator) {
             Separator sep = (Separator) elementPairs.get(0);
+            // The default implementation of finish is not being used, so we need to provide a proper implementation:
+            sep = Separator.create(sep);
+            // Recursively call the method toFormatter to create the PeriodFormatter for the rest of the elements in the list:
             PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
-                sep = sep.finish(f.getPrinter(), f.getParser());
+            // Assign the printer and parser to the Separator instance:
+            sep.withPrinter(f.getPrinter()).withParser(f.getParser());
             return new PeriodFormatter(sep, sep);
         }
         Object[] comp = createComposite(elementPairs);
         if (notPrinter) {
             return new PeriodFormatter(null, (PeriodParser) comp[1]);
         } else if (notParser) {
             return new PeriodFormatter((PeriodPrinter) comp[0], null);
         } else {
             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
         }
     }
