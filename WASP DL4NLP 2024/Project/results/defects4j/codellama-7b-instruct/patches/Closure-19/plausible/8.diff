diff --git a/tmp/2234e540-0cc4-4665-8408-66c85b4d3128_buggy.java b/tmp/44ae7821-f811-4d48-bbe4-fbf36cd23e2b_fixed.java
index fa42cd9..0506932 100644
--- a/tmp/2234e540-0cc4-4665-8408-66c85b4d3128_buggy.java
+++ b/tmp/44ae7821-f811-4d48-bbe4-fbf36cd23e2b_fixed.java
@@ -1,27 +1,28 @@
-  /**
-   * Declares a refined type in {@code scope} for the name represented by
-   * {@code node}. It must be possible to refine the type of the given node in
-   * the given scope, as determined by {@link #getTypeIfRefinable}.
-   */
-  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
+  protected void declareNameInScope(
+        FlowScope scope, Node node, JSType type) {
     switch (node.getType()) {
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
         break;
 
       case Token.GETPROP:
         String qualifiedName = node.getQualifiedName();
         Preconditions.checkNotNull(qualifiedName);
 
-        JSType origType = node.getJSType();
-        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
+        JSType origType =
+            node.getJSType() == null ? getNativeType(UNKNOWN_TYPE) : node.getJSType();
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
         // "this" references aren't currently modeled in the CFG.
 
       default:
+        // if node is a this expression, it's not refinable
+        if (node.isThis()) {
+          break;
+        } else {
           throw new IllegalArgumentException("Node cannot be refined. \n" +
               node.toStringTree());
         }
     }
+  }
