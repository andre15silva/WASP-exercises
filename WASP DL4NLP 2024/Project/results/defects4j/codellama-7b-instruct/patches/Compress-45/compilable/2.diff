diff --git a/tmp/e7a487e1-0947-452a-84dc-5d092bf022bd_buggy.java b/tmp/6e9c1c89-f1e7-4cc8-b55b-1f889cc644a8_fixed.java
index 1bbc082..a0b7a9e 100644
--- a/tmp/e7a487e1-0947-452a-84dc-5d092bf022bd_buggy.java
+++ b/tmp/6e9c1c89-f1e7-4cc8-b55b-1f889cc644a8_fixed.java
@@ -1,36 +1,27 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
+        if (value < 0) {
+            throw new IllegalArgumentException("Value " + value + " is negative.");
+        }
+
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
+        if (value > maxAsOctalChar) {
+            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+        }
+
         final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+        if (!negative && value <= maxAsOctalChar) {
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
         if (length < 9) {
             formatLongBinary(value, buf, offset, length, negative);
         }
         formatBigIntegerBinary(value, buf, offset, length, negative);
 
         buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
