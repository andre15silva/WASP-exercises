diff --git a/tmp/013b4a02-8c1a-4706-82d5-39498fc36b23_buggy.java b/tmp/0d091f76-cd71-4256-94e7-9ed27c2a94c7_fixed.java
index 1126687..c886f04 100644
--- a/tmp/013b4a02-8c1a-4706-82d5-39498fc36b23_buggy.java
+++ b/tmp/0d091f76-cd71-4256-94e7-9ed27c2a94c7_fixed.java
@@ -1,65 +1,47 @@
-  /**
-   * Try to fold shift operations
-   */
-  private Node tryFoldShift(Node n, Node left, Node right) {
+**private Node tryFoldShift(Node n, Node left, Node right) {
 if (left.getType() == Token.NUMBER &&
 right.getType() == Token.NUMBER) {
-
 double result;
 double lval = left.getDouble();
 double rval = right.getDouble();
 
 // check ranges.  We do not do anything that would clip the double to
 // a 32-bit range, since the user likely does not intend that.
 if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
 error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
+return n; }
 
 // only the lower 5 bits are used when shifting, so don't do anything
 // if the shift amount is outside [0,32)
 if (!(rval >= 0 && rval < 32)) {
 error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
-      }
+return n; }
 
 // Convert the numbers to ints
 int lvalInt = (int) lval;
 if (lvalInt != lval) {
 error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
+return n; }
 
 int rvalInt = (int) rval;
 if (rvalInt != rval) {
 error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
+return n; }
 
 switch (n.getType()) {
-        case Token.LSH:
-          result = lvalInt << rvalInt;
+case Token.LSH: result = lvalInt << rvalInt;
 break;
-        case Token.RSH:
-          result = lvalInt >> rvalInt;
+case Token.RSH: result = lvalInt >> rvalInt;
 break;
-        case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+case Token.URSH: result = lvalInt >>> rvalInt;
 break;
-        default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
-      }
+default: throw new IllegalArgumentException("Unknown shift operator: " +
+Node.tokenToName(n.getType())); }
 
 Node newNumber = Node.newNumber(result);
 n.getParent().replaceChild(n, newNumber);
 reportCodeChange();
 
-      return newNumber;
-    }
+return newNumber; }
 
-    return n;
-  }
+return n; }**
\ No newline at end of file
