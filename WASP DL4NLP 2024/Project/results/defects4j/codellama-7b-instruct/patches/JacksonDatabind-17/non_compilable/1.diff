diff --git a/tmp/3dd3a2c7-593b-4c04-be9a-1d8d965ec8d8_buggy.java b/tmp/03f3e294-4654-4dab-bb2d-53a673a877cc_fixed.java
index 01967cc..73ec0af 100644
--- a/tmp/3dd3a2c7-593b-4c04-be9a-1d8d965ec8d8_buggy.java
+++ b/tmp/03f3e294-4654-4dab-bb2d-53a673a877cc_fixed.java
@@ -1,35 +1,34 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
+         * use typing; that is both due to them being concrete and final, and
+         * since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
+                return t.isJavaLangObject() || 
+                        (t.getRawClass() == Object.class)
                         || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
                                 || TreeNode.class.isAssignableFrom(t.getRawClass()));
 
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+                return !t.isFinal() 
+                        && !TreeNode.class.isAssignableFrom(t.getRawClass());
             default:
             //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
+                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
