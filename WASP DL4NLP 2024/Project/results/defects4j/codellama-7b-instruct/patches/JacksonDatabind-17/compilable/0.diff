diff --git a/tmp/d99b9a9f-b78b-40fc-90bc-fc2c1b8ca586_buggy.java b/tmp/7491e6f4-f728-4c35-9e16-67a0feccbd32_fixed.java
index 01967cc..760a620 100644
--- a/tmp/d99b9a9f-b78b-40fc-90bc-fc2c1b8ca586_buggy.java
+++ b/tmp/7491e6f4-f728-4c35-9e16-67a0feccbd32_fixed.java
@@ -1,35 +1,38 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
          * use typing; that is both due to them being concrete and final,
          * and since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
 //                return t.isJavaLangObject() || 
+                if (!t.isConcrete()) { 
+                    if (TreeNode.class.isAssignableFrom(t.getRawClass())) { 
+                        return false;
+                    } 
+                }
                 return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                        || TreeNode.class.isAssignableFrom(t.getRawClass());
 
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // [Issue#88] Should not apply to JSON tree models:
                 return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
             default:
             //case JAVA_LANG_OBJECT:
 //                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
