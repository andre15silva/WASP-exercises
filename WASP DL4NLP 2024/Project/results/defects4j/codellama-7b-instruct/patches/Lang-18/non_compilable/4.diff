diff --git a/tmp/389adf06-602a-4113-a391-4981a3b74ec0_buggy.java b/tmp/0c9dc2d5-2139-42cc-a5b0-1f7eb0940110_fixed.java
index fd08cd0..aa94f1e 100644
--- a/tmp/389adf06-602a-4113-a391-4981a3b74ec0_buggy.java
+++ b/tmp/0c9dc2d5-2139-42cc-a5b0-1f7eb0940110_fixed.java
@@ -1,128 +1,84 @@
-    /**
-     * <p>Returns a list of Rules given a pattern.</p>
-     *
-     * @return a {@code List} of Rule objects
-     * @throws IllegalArgumentException if pattern is invalid
-     */
-    protected List<Rule> parsePattern() {
-        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
-        List<Rule> rules = new ArrayList<Rule>();
+def parsePattern():
+    symbols = DateFormatSymbols(mLocale)
+    rules = []
 
-        String[] ERAs = symbols.getEras();
-        String[] months = symbols.getMonths();
-        String[] shortMonths = symbols.getShortMonths();
-        String[] weekdays = symbols.getWeekdays();
-        String[] shortWeekdays = symbols.getShortWeekdays();
-        String[] AmPmStrings = symbols.getAmPmStrings();
+    EraSymbols = symbols.getEras()
+    MonthSymbols = symbols.getMonths()
+    shortMonthSymbols = symbols.getShortMonths()
+    WeekdaySymbols = symbols.getWeekdays()
+    shortWeekdaySymbols = symbols.getShortWeekdays()
+    AmPmSymbols = symbols.getAmPmStrings()
 
-        int length = mPattern.length();
-        int[] indexRef = new int[1];
+    patternLength = len(mPattern)
+    indexRef = 0
 
-        for (int i = 0; i < length; i++) {
-            indexRef[0] = i;
-            String token = parseToken(mPattern, indexRef);
-            i = indexRef[0];
+    for i in range(patternLength):
+        indexRef = i
+        token = parseToken(mPattern, indexRef)
+        i = indexRef
 
-            int tokenLen = token.length();
-            if (tokenLen == 0) {
-                break;
-            }
+        if len(token) == 0:
+            break
 
-            Rule rule;
-            char c = token.charAt(0);
+        rule = None
 
-            switch (c) {
-            case 'G': // era designator (text)
-                rule = new TextField(Calendar.ERA, ERAs);
-                break;
-            case 'y': // year (number)
-                if (tokenLen >= 4) {
-                    rule = selectNumberRule(Calendar.YEAR, tokenLen);
-                } else {
-                    rule = TwoDigitYearField.INSTANCE;
-                }
-                break;
-            case 'M': // month in year (text and number)
-                if (tokenLen >= 4) {
-                    rule = new TextField(Calendar.MONTH, months);
-                } else if (tokenLen == 3) {
-                    rule = new TextField(Calendar.MONTH, shortMonths);
-                } else if (tokenLen == 2) {
-                    rule = TwoDigitMonthField.INSTANCE;
-                } else {
-                    rule = UnpaddedMonthField.INSTANCE;
-                }
-                break;
-            case 'd': // day in month (number)
-                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
-                break;
-            case 'h': // hour in am/pm (number, 1..12)
-                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
-                break;
-            case 'H': // hour in day (number, 0..23)
-                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
-                break;
-            case 'm': // minute in hour (number)
-                rule = selectNumberRule(Calendar.MINUTE, tokenLen);
-                break;
-            case 's': // second in minute (number)
-                rule = selectNumberRule(Calendar.SECOND, tokenLen);
-                break;
-            case 'S': // millisecond (number)
-                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
-                break;
-            case 'E': // day in week (text)
-                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
-                break;
-            case 'D': // day in year (number)
-                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
-                break;
-            case 'F': // day of week in month (number)
-                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
-                break;
-            case 'w': // week in year (number)
-                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
-                break;
-            case 'W': // week in month (number)
-                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
-                break;
-            case 'a': // am/pm marker (text)
-                rule = new TextField(Calendar.AM_PM, AmPmStrings);
-                break;
-            case 'k': // hour in day (1..24)
-                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
-                break;
-            case 'K': // hour in am/pm (0..11)
-                rule = selectNumberRule(Calendar.HOUR, tokenLen);
-                break;
-            case 'z': // time zone (text)
-                if (tokenLen >= 4) {
-                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);
-                } else {
-                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
-                }
-                break;
-            case 'Z': // time zone (value)
-                if (tokenLen == 1) {
-                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
-                } else {
-                    rule = TimeZoneNumberRule.INSTANCE_COLON;
-                }
-                break;
-            case '\'': // literal text
-                String sub = token.substring(1);
-                if (sub.length() == 1) {
-                    rule = new CharacterLiteral(sub.charAt(0));
-                } else {
-                    rule = new StringLiteral(sub);
-                }
-                break;
+        c = token[0]
+        switch (c):
+            case 'G':
+                rule = TextField(Calendar.ERA, EraSymbols)
+            case 'y':
+                if len(token) >= 4:
+                    rule = selectNumberRule(Calendar.YEAR, token)
+                else:
+                    rule = TwoDigitYearField.INSTANCE
+            case 'M':
+                if len(token) >= 4:
+                    rule = TextField(Calendar.MONTH, MonthSymbols)
+                elif len(token) == 3:
+                    rule = TextField(Calendar.MONTH, shortMonthSymbols)
+                elif len(token) == 2:
+                    rule = TwoDigitMonthField.INSTANCE
+                else:
+                    rule = UnpaddedMonthField.INSTANCE
+            case 'd':
+                rule = selectNumberRule(Calendar.DAY_OF_MONTH, token)
+            case 'H':
+                rule = selectNumberRule(Calendar.HOUR, token)
+            case 'k':
+                rule = TwoDigitHourField(selectNumberRule(Calendar.HOUR, token))
+            case 'm':
+                rule = selectNumberRule(Calendar.MINUTE, token)
+            case 's':
+                rule = selectNumberRule(Calendar.SECOND, token)
+            case 'S':
+                rule = selectNumberRule(Calendar.MILLISECOND, token)
+            case 'E':
+                rule = TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdaySymbols : weekdaySymbols)
+            case 'D':
+                rule = selectNumberRule(Calendar.DAY_OF_YEAR, token)
+            case 'F':
+                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, token)
+            case 'W':
+                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, token)
+            case 'w':
+                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, token)
+            case 'a':
+                rule = TextField(Calendar.AM_PM, AmPmSymbols)
+            case 'Z':
+                if len(token) == 1:
+                    rule = TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG)
+                else:
+                    rule = TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT)
+            case '\'':
+                sub = token.substring(1)
+                if len(sub) == 1:
+                    rule = CharacterLiteral(sub[0])
+                else:
+                    rule = StringLiteral(sub)
             default:
-                throw new IllegalArgumentException("Illegal pattern component: " + token);
-            }
+                raise IllegalArgumentException(f"Illegal pattern component: {token}")
 
-            rules.add(rule);
-        }
+        if rule is not None:
+            rules.append(rule)
 
-        return rules;
-    }
+    return rules
