diff --git a/tmp/fdc4d44a-54c1-4b9e-a664-f95c5e464b91_buggy.java b/tmp/7244e746-c17a-4f10-8c73-c25220132729_fixed.java
index 544303b..61c7afe 100644
--- a/tmp/fdc4d44a-54c1-4b9e-a664-f95c5e464b91_buggy.java
+++ b/tmp/7244e746-c17a-4f10-8c73-c25220132729_fixed.java
@@ -1,29 +1,33 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
+        // initialize mostNegative to the minimum value
+        double mostNegative = Double.MAX_VALUE;
+        for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {
+            int basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - mostNegative;
+            if (value < mostNegative) {
+                mostNegative = value;
+            }
+        }
+
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            int basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            if (basicRow != null) {
                 // if multiple variables can take a given value 
                 // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
+                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - mostNegative;
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
                 }
             }
         }
-        }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
