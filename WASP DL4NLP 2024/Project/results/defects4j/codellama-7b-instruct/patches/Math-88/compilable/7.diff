diff --git a/tmp/b6f39e72-93ee-400e-9008-5c01e974066c_buggy.java b/tmp/819eb756-3623-4374-a1a6-74643f6052e9_fixed.java
index 544303b..85099a8 100644
--- a/tmp/b6f39e72-93ee-400e-9008-5c01e974066c_buggy.java
+++ b/tmp/819eb756-3623-4374-a1a6-74643f6052e9_fixed.java
@@ -1,29 +1,22 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        double mostNegative = basicRow != null ? getEntry(basicRow, getRhsOffset()) : 0;
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
                 // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
+                // then we choose the first and set the rest equal to mostNegative 
                 coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+                    (basicRow == null ? mostNegative : getEntry(basicRow, getRhsOffset())) -
                     (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                          coefficients[i] = 0;
                     }
                 }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
