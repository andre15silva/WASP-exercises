diff --git a/tmp/ec8935b6-e1a0-4a4b-8933-d51fb311c67a_buggy.java b/tmp/822d19bf-837c-4134-aa4d-33e6f8a5ce0e_fixed.java
index 7e64f1d..c9f7df6 100644
--- a/tmp/ec8935b6-e1a0-4a4b-8933-d51fb311c67a_buggy.java
+++ b/tmp/822d19bf-837c-4134-aa4d-33e6f8a5ce0e_fixed.java
@@ -1,78 +1,26 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
-        boolean eatTheRest = false;
-
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
-            if ("--".equals(arg))
-            {
-                eatTheRest = true;
-                tokens.add("--");
-            }
-            else if ("-".equals(arg))
-            {
-                tokens.add("-");
-            }
-            else if (arg.startsWith("-"))
-            {
-                String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
+            if (arg.startsWith("-") && (arg.endsWith("=") || options.hasOption(arg)))
             {
                 tokens.add(arg);
             }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
+            else if (arg.startsWith("-") && arg.split("=").length >= 2)
             {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                tokens.add(arg.split("=")[0]);
+                tokens.add(arg.split("=")[1]);
             }
             else
             {
-                        eatTheRest = stopAtNonOption;
                 tokens.add(arg);
             }
         }
-            }
-            else
-            {
-                tokens.add(arg);
-            }
-
-            if (eatTheRest)
-            {
-                for (i++; i < arguments.length; i++)
-                {
-                    tokens.add(arguments[i]);
-                }
-            }
-        }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
+}
\ No newline at end of file
