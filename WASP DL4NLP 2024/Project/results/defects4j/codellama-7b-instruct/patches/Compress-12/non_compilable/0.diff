diff --git a/tmp/6ec63a3a-5b9f-4bfd-8481-8ccbf6e3877f_buggy.java b/tmp/5fe34582-4193-4492-97e4-0a465d362bb9_fixed.java
index b5a206b..f1daa65 100644
--- a/tmp/6ec63a3a-5b9f-4bfd-8481-8ccbf6e3877f_buggy.java
+++ b/tmp/5fe34582-4193-4492-97e4-0a465d362bb9_fixed.java
@@ -1,80 +1,22 @@
-    /**
-     * Get the next entry in this tar archive. This will skip
-     * over any remaining data in the current entry, if there
-     * is one, and place the input stream at the header of the
-     * next entry, and read the header and instantiate a new
-     * TarEntry from the header bytes and return that entry.
-     * If there are no more entries in the archive, null will
-     * be returned to indicate that the end of the archive has
-     * been reached.
-     *
-     * @return The next TarEntry in the archive, or null.
-     * @throws IOException on error
-     */
-    public TarArchiveEntry getNextTarEntry() throws IOException {
-        if (hasHitEOF) {
-            return null;
-        }
-
-        if (currEntry != null) {
-            long numToSkip = entrySize - entryOffset;
-
-            while (numToSkip > 0) {
-                long skipped = skip(numToSkip);
-                if (skipped <= 0) {
+        byte[] b = new byte[100000];
+        int len = readBuf.length;
+        while (true) {
+            int i = inputStream.read(b, 0, len);
+            if (i < 0) {
+                if (buffer.length() != 0) {
                     throw new RuntimeException("failed to skip current tar entry");
                 }
-                numToSkip -= skipped;
-            }
-
-            readBuf = null;
-        }
-
-        byte[] headerBuf = getRecord();
-
-        if (hasHitEOF) {
                 currEntry = null;
                 return null;
             }
-
-        currEntry = new TarArchiveEntry(headerBuf);
-        entryOffset = 0;
-        entrySize = currEntry.getSize();
-
-        if (currEntry.isGNULongNameEntry()) {
-            // read in the name
-            StringBuffer longName = new StringBuffer();
-            byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
-            while ((length = read(buf)) >= 0) {
-                longName.append(new String(buf, 0, length));
+            for (int j = 0; j < i; j++) {
+                byte b = b[j];
+                if (b == 0) {
+                    break;
                 }
-            getNextEntry();
-            if (currEntry == null) {
-                // Bugzilla: 40334
-                // Malformed tar file - long entry name not followed by entry
-                return null;
+                buffer.append((char)b);
             }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
-                longName.deleteCharAt(longName.length() - 1);
+            if (b[i-1] == 0) {
+                break;
             }
-            currEntry.setName(longName.toString());
-        }
-
-        if (currEntry.isPaxHeader()){ // Process Pax headers
-            paxHeaders();
-        }
-
-        if (currEntry.isGNUSparse()){ // Process sparse files
-            readGNUSparse();
-        }
-
-        // If the size of the next element in the archive has changed
-        // due to a new size being reported in the posix header
-        // information, we update entrySize here so that it contains
-        // the correct value.
-        entrySize = currEntry.getSize();
-        return currEntry;
         }
\ No newline at end of file
