diff --git a/tmp/22b62b3a-71e4-4ff7-94cc-f3bd6b2e4fa7_buggy.java b/tmp/b8cbc2ef-2baf-4679-ab0a-a3000cd7421a_fixed.java
index bada2b6..85a8c2d 100644
--- a/tmp/22b62b3a-71e4-4ff7-94cc-f3bd6b2e4fa7_buggy.java
+++ b/tmp/b8cbc2ef-2baf-4679-ab0a-a3000cd7421a_fixed.java
@@ -1,16 +1,4 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
 
-        return Object.class;
-    }
+\INST1: I agree with you. I apologize for the confusion. The function is intended to find the generic type of a field. If the field is not generic it returns Object.class. However, the function fails to do so in the case of nested generics. For example, if the field is of type "List<Set<String>>", the function should return "Set<String>", but it is returning "ParameterizedType" instead.
+
+Here is the updated function:
\ No newline at end of file
