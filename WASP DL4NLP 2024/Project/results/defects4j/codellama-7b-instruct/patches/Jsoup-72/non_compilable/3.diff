diff --git a/tmp/9ee97c60-06fa-420b-9df4-df013bf792bb_buggy.java b/tmp/86d705ac-b97f-4669-8f97-28185e08cefe_fixed.java
index d666a67..b5e65ad 100644
--- a/tmp/9ee97c60-06fa-420b-9df4-df013bf792bb_buggy.java
+++ b/tmp/86d705ac-b97f-4669-8f97-28185e08cefe_fixed.java
@@ -1,36 +1,23 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
-    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
-        if (count > maxStringCacheLen)
+    private static String cacheString(final char[] charBuf, int start, int count) {
+        if (count > MAX_CACHE_LENGTH)
             return new String(charBuf, start, count);
 
-        // calculate hash:
         int hash = 0;
-        int offset = start;
         for (int i = 0; i < count; i++) {
-            hash = 31 * hash + charBuf[offset++];
+            hash = 31 * hash + charBuf[start++];
         }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
-        String cached = stringCache[index];
-
-        if (cached == null) { // miss, add
+        String cached = stringCache[hash & stringCache.length - 1];
+        if (cached == null) {
             cached = new String(charBuf, start, count);
-            stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+            stringCache[hash & stringCache.length - 1] = cached;
+        } else {
+            if (cached.charAt(0) == charBuf[start]) {
                 return cached;
-            } else { // hashcode conflict
+            } else {
                 cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
+                stringCache[hash & stringCache.length - 1] = cached;
             }
         }
         return cached;
     }
\ No newline at end of file
