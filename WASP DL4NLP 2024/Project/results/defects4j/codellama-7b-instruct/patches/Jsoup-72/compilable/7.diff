diff --git a/tmp/f54a17f2-9b49-4e70-88e9-1ba26c42ee00_buggy.java b/tmp/f975ab06-f232-4c94-8132-a1a4b6de532d_fixed.java
index d666a67..96aa48c 100644
--- a/tmp/f54a17f2-9b49-4e70-88e9-1ba26c42ee00_buggy.java
+++ b/tmp/f975ab06-f232-4c94-8132-a1a4b6de532d_fixed.java
@@ -1,36 +1,24 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
-    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
-        if (count > maxStringCacheLen)
-            return new String(charBuf, start, count);
+private static String cacheString(char[] charBuf, String[] stringCache, int start, int count) {
+  if (count > maxStringCacheLen) return new String(charBuf, start, count);
 
-        // calculate hash:
   int hash = 0;
-        int offset = start;
   for (int i = 0; i < count; i++) {
-            hash = 31 * hash + charBuf[offset++];
+    hash = 31 * hash + charBuf[start + i];
   }
 
-        // get from cache
   final int index = hash & stringCache.length - 1;
   String cached = stringCache[index];
 
   if (cached == null) { // miss, add
     cached = new String(charBuf, start, count);
     stringCache[index] = cached;
   } else { // hashcode hit, check equality
     if (rangeEquals(charBuf, start, count, cached)) { // hit
       return cached;
     } else { // hashcode conflict
       cached = new String(charBuf, start, count);
       stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
     }
   }
   return cached;
 }
\ No newline at end of file
