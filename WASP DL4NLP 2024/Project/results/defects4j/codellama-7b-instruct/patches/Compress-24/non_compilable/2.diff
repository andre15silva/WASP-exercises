diff --git a/tmp/315a80fc-944c-4307-8d74-e177d0c5908d_buggy.java b/tmp/7c5558f4-1011-4b49-8866-ed1bba85925d_fixed.java
index d9d2789..a2b6105 100644
--- a/tmp/315a80fc-944c-4307-8d74-e177d0c5908d_buggy.java
+++ b/tmp/7c5558f4-1011-4b49-8866-ed1bba85925d_fixed.java
@@ -1,73 +1,56 @@
 /**
  * Parse an octal string from a buffer.
  *
  * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+ * The buffer must contain a trailing NUL, and may contain an additional trailing NUL.</p>
  *
  * <p>The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
  * <p>To work-around some tar implementations that insert a
  * leading NUL this method returns 0 if it detects a leading NUL
  * since Commons Compress 1.4.</p>
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the octal format is invalid or if the trailing NUL is missing.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long    result = 0;
     int     end = offset + length;
     int     start = offset;
 
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
-                break;
-            }
-        }
-
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
+    // Trim the trailing spaces and NULs from the octal string
     byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
+    while (trailer == 0 || trailer == ' '){
         end--;
         trailer = buffer[end - 1];
     }
 
+    if (end - start < 2){
+        throw new IllegalArgumentException("Invalid octal format for '"+new String(buffer, start, end - start, CharsetNames.UTF_8)+"'");
+    }
+
+    // CheckStyle:MagicNumber OFF
     for ( ;start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException("Invalid octal format for '"+new String(buffer, start, end - start, CharsetNames.UTF_8)+"'");
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
+    }
     // CheckStyle:MagicNumber ON
+
+    if (result > 4294967295L){
+        throw new IllegalArgumentException("Octal value too big: " + result);
     }
 
     return result;
 }
