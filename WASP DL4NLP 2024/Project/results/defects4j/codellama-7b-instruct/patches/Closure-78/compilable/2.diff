diff --git a/tmp/87ca296e-1825-42ed-a5b1-74cee6a73d92_buggy.java b/tmp/a68a2ad1-33aa-44eb-94be-0755471d50fc_fixed.java
index 27e0871..3082a07 100644
--- a/tmp/87ca296e-1825-42ed-a5b1-74cee6a73d92_buggy.java
+++ b/tmp/a68a2ad1-33aa-44eb-94be-0755471d50fc_fixed.java
@@ -1,86 +1,60 @@
-  /**
-   * Try to fold arithmetic binary operators
-   */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
-    if (opType == Token.ADD
-        && (NodeUtil.mayBeString(left, false)
-            || NodeUtil.mayBeString(right, false))) {
+    if (opType == Token.ADD && (NodeUtil.mayBeString(left, false) || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
-    double result;
+    double result = 0.0;
+    double leftVal = NodeUtil.getNumberValue(left);
+    double rightVal = NodeUtil.getNumberValue(right);
 
-    // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
-    // to zero so this is a little akward here.
-
-    Double lValObj = NodeUtil.getNumberValue(left);
-    if (lValObj == null) {
-      return null;
-    }
-    Double rValObj = NodeUtil.getNumberValue(right);
-    if (rValObj == null) {
+    if (leftVal == 0 || rightVal == 0) {
+      error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
       return null;
     }
 
-    double lval = lValObj;
-    double rval = rValObj;
-
     switch (opType) {
       case Token.BITAND:
-        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
+        result = ScriptRuntime.toInt32(leftVal) & ScriptRuntime.toInt32(rightVal);
         break;
       case Token.BITOR:
-        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
+        result = ScriptRuntime.toInt32(leftVal) | ScriptRuntime.toInt32(rightVal);
         break;
       case Token.BITXOR:
-        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
+        result = ScriptRuntime.toInt32(leftVal) ^ ScriptRuntime.toInt32(rightVal);
         break;
       case Token.ADD:
-        result = lval + rval;
+        result = leftVal + rightVal;
         break;
       case Token.SUB:
-        result = lval - rval;
+        result = leftVal - rightVal;
         break;
       case Token.MUL:
-        result = lval * rval;
+        result = leftVal * rightVal;
         break;
       case Token.MOD:
-        if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
-        result = lval % rval;
+        result = leftVal % rightVal;
         break;
       case Token.DIV:
-        if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
-        result = lval / rval;
+        result = leftVal / rightVal;
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
-    if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
-
-        // Do not try to fold arithmetic for numbers > 2^53. After that
-        // point, fixed-point math starts to break down and become inaccurate.
-        Math.abs(result) <= MAX_FOLD_NUMBER) {
+    if (String.valueOf(result).length() <= String.valueOf(leftVal).length() + String.valueOf(rightVal).length() + 1 && Math.abs(result) <= MAX_FOLD_NUMBER) {
       Node newNumber = Node.newNumber(result);
       return newNumber;
     } else if (Double.isNaN(result)) {
       return Node.newString(Token.NAME, "NaN");
     } else if (result == Double.POSITIVE_INFINITY) {
       return Node.newString(Token.NAME, "Infinity");
     } else if (result == Double.NEGATIVE_INFINITY) {
       return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
     }
 
     return null;
   }
\ No newline at end of file
