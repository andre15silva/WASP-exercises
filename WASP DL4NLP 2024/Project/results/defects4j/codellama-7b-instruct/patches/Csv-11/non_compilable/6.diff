diff --git a/tmp/78565373-caf3-4516-92be-1b9a72bcb82e_buggy.java b/tmp/316b00d9-14f8-485b-a6db-a10608c8deba_fixed.java
index 784bbab..a1d2b04 100644
--- a/tmp/78565373-caf3-4516-92be-1b9a72bcb82e_buggy.java
+++ b/tmp/316b00d9-14f8-485b-a6db-a10608c8deba_fixed.java
@@ -1,42 +1,17 @@
-    /**
-     * Initializes the name to index mapping if the format defines a header.
-     *
-     * @return null if the format has no header.
-     * @throws IOException if there is a problem reading the header or skipping the first record
-     */
-    private Map<String, Integer> initializeHeader() throws IOException {
-        Map<String, Integer> hdrMap = null;
-        final String[] formatHeader = this.format.getHeader();
-        if (formatHeader != null) {
-            hdrMap = new LinkedHashMap<String, Integer>();
+import java.io.File;
+import java.io.IOException;
+import org.apache.commons.csv.CSVFormat;
+import org.apache.commons.csv.CSVParser;
+import org.apache.commons.csv.CSVRecord;
 
-            String[] headerRecord = null;
-            if (formatHeader.length == 0) {
-                // read the header from the first line of the file
-                final CSVRecord nextRecord = this.nextRecord();
-                if (nextRecord != null) {
-                    headerRecord = nextRecord.values();
+public class CSVParserTest {
+    public static void main(String[] args) throws IOException {
+        File file = new File(args[0]);
+        CSVFormat format = CSVFormat.DEFAULT;
+        CSVParser parser = new CSVParser(file, format);
+        parser.setHeaderIndexes(parser.getHeaderIndexes());
+        for (CSVRecord record : parser) {
+            System.out.println(record);
         }
-            } else {
-                if (this.format.getSkipHeaderRecord()) {
-                    this.nextRecord();
     }
-                headerRecord = formatHeader;
-            }
-
-            // build the name to index mappings
-            if (headerRecord != null) {
-                for (int i = 0; i < headerRecord.length; i++) {
-                    final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
-                        throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
-                                "\" in " + Arrays.toString(headerRecord));
-                    }
-                    hdrMap.put(header, Integer.valueOf(i));
-                }
-            }
-        }
-        return hdrMap;
 }
\ No newline at end of file
