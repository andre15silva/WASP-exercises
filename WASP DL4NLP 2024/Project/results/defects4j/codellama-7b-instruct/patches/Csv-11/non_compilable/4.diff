diff --git a/tmp/3da596a5-94bd-43ff-991f-2a1c144a7207_buggy.java b/tmp/129224e1-dd96-416d-8693-a6d99d833cc9_fixed.java
index 784bbab..c696a0b 100644
--- a/tmp/3da596a5-94bd-43ff-991f-2a1c144a7207_buggy.java
+++ b/tmp/129224e1-dd96-416d-8693-a6d99d833cc9_fixed.java
@@ -1,42 +1,50 @@
    /**
      * Initializes the name to index mapping if the format defines a header.
      *
      * @return null if the format has no header.
      * @throws IOException if there is a problem reading the header or skipping the first record
      */
     private Map<String,Integer> initializeHeader() throws IOException {
         Map<String,Integer> hdrMap = null;
-        final String[] formatHeader = this.format.getHeader();
+        String[] formatHeader = this.format.getHeader();
         if (formatHeader != null) {
             hdrMap = new LinkedHashMap<String,Integer>();
 
             String[] headerRecord = null;
             if (formatHeader.length == 0) {
                 // read the header from the first line of the file
-                final CSVRecord nextRecord = this.nextRecord();
-                if (nextRecord != null) {
+                CSVRecord nextRecord = this.nextRecord();
                 headerRecord = nextRecord.values();
-                }
             } else {
                 if (this.format.getSkipHeaderRecord()) {
-                    this.nextRecord();
+                    nextRecord = this.nextRecord();
                 }
                 headerRecord = formatHeader;
             }
 
             // build the name to index mappings
             if (headerRecord != null) {
                 for (int i = 0; i < headerRecord.length; i++) {
-                    final String header = headerRecord[i];
-                    final boolean containsHeader = hdrMap.containsKey(header);
-                    final boolean emptyHeader = header.trim().isEmpty();
-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
+                    String header = headerRecord[i];
+
+                    // skip any empty headers
+                    if (header.isEmpty()) {
+                        // check if the header name already exists
+                        if (containsKey(header)) {
+                            throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
+                                    "\" in " + Arrays.toString(headerRecord));
+                        }
+                        continue;
+                    }
+
+                    // check if the header name already exists
+                    if (containsKey(header)) {
                         throw new IllegalArgumentException("The header contains a duplicate name: \"" + header +
                                 "\" in " + Arrays.toString(headerRecord));
                     }
                     hdrMap.put(header, Integer.valueOf(i));
                 }
             }
         }
         return hdrMap;
     }
