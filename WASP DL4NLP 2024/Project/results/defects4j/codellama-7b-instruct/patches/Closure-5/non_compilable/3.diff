diff --git a/tmp/fd4421ae-b370-4d45-bc8b-1b99f855e77f_buggy.java b/tmp/98a56557-faa9-42ff-a9c9-ea816f68a7ee_fixed.java
index 31af44b..a064679 100644
--- a/tmp/fd4421ae-b370-4d45-bc8b-1b99f855e77f_buggy.java
+++ b/tmp/98a56557-faa9-42ff-a9c9-ea816f68a7ee_fixed.java
@@ -1,107 +1,77 @@
-    /**
-     * Counts the number of direct (full) references to an object.
-     * Specifically, we check for references of the following type:
-     * <pre>
-     *   x;
-     *   x.fn();
-     * </pre>
-     */
 private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       Set<String> validProperties = Sets.newHashSet();
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore most indirect references, like x.y (but not x.y(),
         // since the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target may be using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
 
           // Deleting a property has different semantics from deleting
           // a variable, so deleted properties should not be inlined.
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
           //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+          // NOTE(nicksantos): This pass's object-splitting algorithm
+          // has a blind spot.  It assumes that if a property isn't
+          // defined on an object, then the value is undefined.  This
+          // is not true, because Object.prototype can have arbitrary
+          // properties on it.
+          //
+          // We short-circuit this problem by bailing out if we see
+          // a reference to a property that isn't defined on the object
+          // literal.  This isn't a perfect algorithm, but it should
+          // catch most cases.
           String propName = parent.getLastChild().getString();
           if (!validProperties.contains(propName)) {
             if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
               validProperties.add(propName);
             } else {
               return false;
             }
           }
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
-        if (!isVarOrAssignExprLhs(name)) {
+        if (!NodeUtil.isVarOrSimpleAssignLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
-        // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
-        // Make sure that the value is not self-referential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
+        // We're looking for object literal assignments only.
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
 
           validProperties.add(child.getString());
-
-          Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
-              }
-              refNode = refNode.getParent();
-            }
         }
-        }
-
 
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
+        // We have found an acceptable object literal assignment.
+        // As long as there are no other assignments that mess things up,
         // we can inline.
         ret = true;
       }
       return ret;
     }
