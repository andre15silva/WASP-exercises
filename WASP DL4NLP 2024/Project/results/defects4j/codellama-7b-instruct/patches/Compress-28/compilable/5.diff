diff --git a/tmp/5786b3b3-3483-4e97-942d-1edf7c01b263_buggy.java b/tmp/234a8502-4b12-4af7-adf6-80c8ca427465_fixed.java
index 0f439b3..612c5fc 100644
--- a/tmp/5786b3b3-3483-4e97-942d-1edf7c01b263_buggy.java
+++ b/tmp/234a8502-4b12-4af7-adf6-80c8ca427465_fixed.java
@@ -1,38 +1,19 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
-    	int totalRead = 0;
-
     	if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
-
-        if (currEntry == null) {
-            throw new IllegalStateException("No current tar entry");
+        int totalRead = 0;
+        while (totalRead < numToRead) {
+        	int read = is.read(buf, offset + totalRead, numToRead - totalRead);
+        	if (read == -1) {
+        		break;
+        	}
+        	totalRead += read;
         }
-
-        numToRead = Math.min(numToRead, available());
-        
-        totalRead = is.read(buf, offset, numToRead);
         count(totalRead);
-        
-        if (totalRead == -1) {
-            hasHitEOF = true;
-        } else {
+        if (totalRead > 0) {
             entryOffset += totalRead;
         }
-
         return totalRead;
     }
