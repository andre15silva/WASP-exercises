diff --git a/tmp/ade5ffcd-16da-425f-a970-6bc974051bf9_buggy.java b/tmp/3d990888-7b20-4c9f-bfc5-977a5d79e370_fixed.java
index be2af16..dea7a0d 100644
--- a/tmp/ade5ffcd-16da-425f-a970-6bc974051bf9_buggy.java
+++ b/tmp/3d990888-7b20-4c9f-bfc5-977a5d79e370_fixed.java
@@ -1,29 +1,29 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if ((base = getBase()) == null) {
+            base = GJChronology.getInstanceUTC();
         }
 
-        // Assume date is Gregorian.
         long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+
+        if (instant == iCutoverMillis) {
+            // The instant is equal to the cutover instant, which indicates
+            // that the date does not exist in Gregorian calendar.
             throw new IllegalArgumentException("Specified date does not exist");
         }
+
+        instant = base.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+        if (instant < iCutoverMillis) {
+            // The date is in the legal gap between Gregorian and Julian calendars
+            instant = instant + 1;
         }
+
         return instant;
     }
