diff --git a/tmp/24fc80f9-16f6-422e-970d-1c51c03f0e9e_buggy.java b/tmp/c096fe86-082d-4593-adbb-4a5e64647c18_fixed.java
index be2af16..7c7b5a9 100644
--- a/tmp/24fc80f9-16f6-422e-970d-1c51c03f0e9e_buggy.java
+++ b/tmp/c096fe86-082d-4593-adbb-4a5e64647c18_fixed.java
@@ -1,29 +1,24 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        Chronology base = getBase();
+        if (base == null) {
+            base = GregorianChronology.getInstance();
         }
-
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        long instant = base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
             // Maybe it's Julian.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
         return instant;
     }
\ No newline at end of file
