diff --git a/tmp/7c97af57-fea7-4f98-b5cc-b2130056a5ac_buggy.java b/tmp/0deb463b-2da5-4077-9c55-5fe8eb2cfad8_fixed.java
index 730ab7d..fe3da94 100644
--- a/tmp/7c97af57-fea7-4f98-b5cc-b2130056a5ac_buggy.java
+++ b/tmp/0deb463b-2da5-4077-9c55-5fe8eb2cfad8_fixed.java
@@ -1,48 +1,62 @@
   /**
    * Parses the raw bytes read from the central directory extra
    * field with knowledge which fields are expected to be there.
    *
    * <p>All four fields inside the zip64 extended information extra
    * field are optional and must only be present if their corresponding
    * entry inside the central directory contains the correct magic
    * value.</p>
    */
    public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                            boolean hasCompressedSize,
                                            boolean hasRelativeHeaderOffset,
                                            boolean hasDiskStart)
        throws ZipException {
+       if (rawCentralDirectoryData == null) {
+           return;
+       }
+       int expectedLength = (hasUncompressedSize ? DWORD : 0)
+           + (hasCompressedSize ? DWORD : 0)
+           + (hasRelativeHeaderOffset ? DWORD : 0)
+           + (hasDiskStart ? WORD : 0);
+       if (rawCentralDirectoryData.length != expectedLength) {
+           throw new ZipException("central directory zip64 extended"
+                                      + " information extra field's length"
+                                      + " doesn't match central directory"
+                                      + " data.  Expected length "
+                                      + expectedLength + " but is "
+                                      + rawCentralDirectoryData.length);
+       }
+       int offset = 0;
        if (rawCentralDirectoryData != null) {
            int expectedLength = (hasUncompressedSize ? DWORD : 0)
                + (hasCompressedSize ? DWORD : 0)
                + (hasRelativeHeaderOffset ? DWORD : 0)
                + (hasDiskStart ? WORD : 0);
            if (rawCentralDirectoryData.length != expectedLength) {
                throw new ZipException("central directory zip64 extended"
                                           + " information extra field's length"
                                           + " doesn't match central directory"
                                           + " data.  Expected length "
                                           + expectedLength + " but is "
                                           + rawCentralDirectoryData.length);
            }
            int offset = 0;
            if (hasUncompressedSize) {
                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                offset += DWORD;
            }
            if (hasCompressedSize) {
                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                offset += DWORD;
            }
            if (hasRelativeHeaderOffset) {
                relativeHeaderOffset =
                  new ZipEightByteInteger(rawCentralDirectoryData, offset);
                offset += DWORD;
            }
            if (hasDiskStart) {
                diskStart = new ZipLong(rawCentralDirectoryData, offset);
                offset += WORD;
            }
\ No newline at end of file
-        }
-    }
