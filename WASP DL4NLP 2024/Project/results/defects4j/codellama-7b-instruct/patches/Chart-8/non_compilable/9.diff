diff --git a/tmp/e358ec43-6f15-4e49-8cf3-57f7c3cf1540_buggy.java b/tmp/a261d02e-f010-4a83-a00d-a9ddbb846c5a_fixed.java
index 99f4092..c42dba0 100644
--- a/tmp/e358ec43-6f15-4e49-8cf3-57f7c3cf1540_buggy.java
+++ b/tmp/a261d02e-f010-4a83-a00d-a9ddbb846c5a_fixed.java
@@ -1,13 +1,27 @@
-    /**
-     * Creates a time period for the week in which the specified date/time
-     * falls, calculated relative to the specified time zone.
-     *
-     * @param time  the date/time (<code>null</code> not permitted).
-     * @param zone  the time zone (<code>null</code> not permitted).
-     *
-     * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.
-     */
-    public Week(Date time, TimeZone zone) {
-        // defer argument checking...
-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());
+    public Week(Date time, TimeZone zone, Locale locale) {
+        if (time == null) {
+            throw new IllegalArgumentException("The time cannot be null");
+        }
+        if (zone == null) {
+            throw new IllegalArgumentException("The time zone cannot be null");
+        }
+        if (locale == null) {
+            throw new IllegalArgumentException("The locale cannot be null");
+        }
+
+        // handle daylight saving time
+        TimeZone adjustedZone = TimeZone.getTimeZone(zone.getID());
+        int offset = adjustedZone.getOffset(time.getTime());
+        time = new Date(time.getTime() - offset);
+
+        // this is the original implementation
+        Calendar cal = new GregorianCalendar(locale);
+        cal.setTime(time);
+        int firstDayOfWeek = cal.getFirstDayOfWeek();
+        int week = cal.get(Calendar.WEEK_OF_YEAR);
+        if (cal.get(Calendar.DAY_OF_WEEK) < firstDayOfWeek) {
+            week--;
+        }
+        this.week = week;
+        this.day = cal.get(Calendar.DAY_OF_WEEK);
     }
