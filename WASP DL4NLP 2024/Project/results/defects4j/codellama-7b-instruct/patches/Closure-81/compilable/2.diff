diff --git a/tmp/44791e7c-983a-4d62-8a09-75caa4ed704e_buggy.java b/tmp/159863d5-5781-4f1a-b045-64be385ebf87_fixed.java
index 6e05e4b..3529052 100644
--- a/tmp/44791e7c-983a-4d62-8a09-75caa4ed704e_buggy.java
+++ b/tmp/159863d5-5781-4f1a-b045-64be385ebf87_fixed.java
@@ -1,51 +1,22 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
+  // Get the function name
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
-        isUnnamedFunction = true;
   }
   Node node = newNode(Token.FUNCTION);
+  // Transform the function name
   Node newName = transform(name);
-      if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
-        newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
-      }
-
   node.addChildToBack(newName);
-      Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
-        lp.setLineno(functionNode.getLineno());
-      }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
-      lp.setCharno(position2charno(lparenCharno));
+  // Transform the function parameters
   for (AstNode param : functionNode.getParams()) {
-        lp.addChildToBack(transform(param));
+    node.addChildToBack(transform(param));
   }
-      node.addChildToBack(lp);
-
+  // Transform the function body
   Node bodyNode = transform(functionNode.getBody());
-      parseDirectives(bodyNode);
+  // Attach the function body to the function node
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
