diff --git a/tmp/2a277d65-e825-43a8-8cce-34b1061be06d_buggy.java b/tmp/aea39021-99ca-49dd-ba1f-a7a7fc583021_fixed.java
index cd412d2..2493528 100644
--- a/tmp/2a277d65-e825-43a8-8cce-34b1061be06d_buggy.java
+++ b/tmp/aea39021-99ca-49dd-ba1f-a7a7fc583021_fixed.java
@@ -1,76 +1,49 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
-        DateFormat df;
+        if (len <= 10 && Character.isDigit(dateStr.charAt(len-1))) {
+            return _formatPlain.parse(dateStr, pos);
+        }
     
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
-            df = _formatPlain;
-            if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+        /* Let's try basic validation before doing some scrubbing; but we
+         * can do better since we can verify timezone is actually recognized
+         */
+        if (!BasicDateValidator.instance.isValid(dateStr)) {
+            try {
+                return DateFormat.getDateInstance(DateFormat.DEFAULT, _locale).parse(dateStr);
+            } catch (ParseException e) {
+                throw new IllegalArgumentException("Invalid date: '"+dateStr+"'");
             }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+        /*
+         * So, does it seem like we have "Zulu" format?
+         */
+        if (dateStr.charAt(len-1) == 'Z') {
+            if (len <= 19 && dateStr.charAt(len-4) == ':') {
+                dateStr = dateStr.substring(0, len-1).concat("000");
             }
-        } else {
-            // Let's see if we have timezone indicator or not...
+            return _formatISO8601_z.parse(dateStr, pos);
+        }
+        /* Nope, has time zone indicator? */
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
+            char c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
+                return _formatISO8601.parse(dateStr.substring(0, len-3).concat(dateStr.substring(len-2)), pos);
             } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
+                dateStr = dateStr.substring(0, len-3).concat("000"); // add millis
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+            /* Now we have at most 16-char string like '2013-11-08T11:37:16' */
+            return _formatISO8601.parse(dateStr, pos);
         }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
-            } else {
         // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
+        dateStr = dateStr.substring(0, len);
+        if (dateStr.charAt(len-4) == ':') {
+            dateStr = dateStr.substring(0, len-4).concat("000"); // add millis
         }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
-            }
-        }
-        return df.parse(dateStr, pos);
+        dateStr = dateStr.concat("Z");
+        return _formatISO8601_z.parse(dateStr, pos);
     }
