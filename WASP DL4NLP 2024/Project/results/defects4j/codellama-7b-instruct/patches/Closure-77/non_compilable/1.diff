diff --git a/tmp/df591148-d9cc-4ebf-b551-d9e7619e5b35_buggy.java b/tmp/a2327467-1643-4b60-9895-a1a156751a79_fixed.java
index 89c5bf7..bf1db39 100644
--- a/tmp/df591148-d9cc-4ebf-b551-d9e7619e5b35_buggy.java
+++ b/tmp/a2327467-1643-4b60-9895-a1a156751a79_fixed.java
@@ -1,71 +1,35 @@
-  /** Helper to escape javascript string as well as regular expression */
-  static String strEscape(String s, char quote,
-                          String doublequoteEscape,
-                          String singlequoteEscape,
-                          String backslashEscape,
-                          CharsetEncoder outputCharsetEncoder) {
-    StringBuilder sb = new StringBuilder(s.length() + 2);
-    sb.append(quote);
-    for (int i = 0; i < s.length(); i++) {
-      char c = s.charAt(i);
-      switch (c) {
-        case '\n': sb.append("\\n"); break;
-        case '\r': sb.append("\\r"); break;
-        case '\t': sb.append("\\t"); break;
-        case '\\': sb.append(backslashEscape); break;
-        case '\"': sb.append(doublequoteEscape); break;
-        case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
-          if (i >= 2 &&
-              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
-               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
-            sb.append("\\>");
-          } else {
-            sb.append(c);
-          }
-          break;
-        case '<':
-          // Break </script into <\/script
-          final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
-          final String START_COMMENT = "!--";
-
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
-            sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
-            sb.append("<\\");
-          } else {
-            sb.append(c);
-          }
-          break;
-        default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
-          if (outputCharsetEncoder != null) {
-            if (outputCharsetEncoder.canEncode(c)) {
-              sb.append(c);
-            } else {
-              // Unicode-escape the character.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
-          } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
-              sb.append(c);
-            } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
-          }
-      }
-    }
-    sb.append(quote);
-    return sb.toString();
-  }
+`public static String strEscape( String s ) {
+ String res = s;
+  res = res.replace( "\u0000", "\\0" );
+  res = res.replace( "\u0001", "" );
+  res = res.replace( "\u0002", "" );
+  res = res.replace( "\u0003", "" );
+  res = res.replace( "\u0004", "" );
+  res = res.replace( "\u0005", "" );
+  res = res.replace( "\u0006", "" );
+  res = res.replace( "\u0007", "" );
+  res = res.replace( "\u0008", "" );
+  res = res.replace( "\u0009", "" );
+  res = res.replace( "\u000B", "" );
+  res = res.replace( "\u000C", "" );
+  res = res.replace( "\u000D", "" );
+  res = res.replace( "\u000E", "" );
+  res = res.replace( "\u000F", "" );
+  res = res.replace( "\u0010", "" );
+  res = res.replace( "\u0011", "" );
+  res = res.replace( "\u0012", "" );
+  res = res.replace( "\u0013", "" );
+  res = res.replace( "\u0014", "" );
+  res = res.replace( "\u0015", "" );
+  res = res.replace( "\u0016", "" );
+  res = res.replace( "\u0017", "" );
+  res = res.replace( "\u0018", "" );
+  res = res.replace( "\u0019", "" );
+  res = res.replace( "\u001A", "" );
+  res = res.replace( "\u001B", "" );
+  res = res.replace( "\u001C", "" );
+  res = res.replace( "\u001D", "" );
+  res = res.replace( "\u001E", "" );
+  res = res.replace( "\u001F", "" );
+  return res;
+}`
\ No newline at end of file
