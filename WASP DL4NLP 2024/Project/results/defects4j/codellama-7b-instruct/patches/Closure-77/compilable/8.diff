diff --git a/tmp/93a1dcc4-42b4-4035-8f09-5ac99e3ffebd_buggy.java b/tmp/505e9dce-e38b-4a9f-bd21-3008f4f8a51a_fixed.java
index 89c5bf7..62bed72 100644
--- a/tmp/93a1dcc4-42b4-4035-8f09-5ac99e3ffebd_buggy.java
+++ b/tmp/505e9dce-e38b-4a9f-bd21-3008f4f8a51a_fixed.java
@@ -1,71 +1,49 @@
-  /** Helper to escape javascript string as well as regular expression */
 static String strEscape(String s, char quote,
                         String doublequoteEscape,
                         String singlequoteEscape,
                         String backslashEscape,
                         CharsetEncoder outputCharsetEncoder) {
   StringBuilder sb = new StringBuilder(s.length() + 2);
   sb.append(quote);
   for (int i = 0; i < s.length(); i++) {
     char c = s.charAt(i);
     switch (c) {
-        case '\n': sb.append("\\n"); break;
-        case '\r': sb.append("\\r"); break;
-        case '\t': sb.append("\\t"); break;
       case '\\': sb.append(backslashEscape); break;
-        case '\"': sb.append(doublequoteEscape); break;
       case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
+      case '\"': sb.append(doublequoteEscape); break;
+      case '>':
         if (i >= 2 &&
             ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
              (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
           sb.append("\\>");
-          } else {
-            sb.append(c);
+          break;
         }
+        // Break --> into --\> or ]]> into ]>\>
+        sb.append('>');
         break;
       case '<':
+        if (s.regionMatches(true, i + 1, "script", 0, "script".length())) {
           // Break </script into <\/script
-          final String END_SCRIPT = "/script";
-
+          sb.append("\\/");
+          i += "script".length();
+        } else if (s.regionMatches(false, i + 1, "!--", 0, "!--".length())) {
           // Break <!-- into <\!--
-          final String START_COMMENT = "!--";
-
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
-            sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
-            sb.append("<\\");
+          sb.append("\\");
+          i += "!--".length();
         } else {
           sb.append(c);
         }
         break;
       default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
-          if (outputCharsetEncoder != null) {
-            if (outputCharsetEncoder.canEncode(c)) {
-              sb.append(c);
-            } else {
+        if (outputCharsetEncoder != null &&
+            !outputCharsetEncoder.canEncode(c)) {
           // Unicode-escape the character.
           appendHexJavaScriptRepresentation(sb, c);
-            }
         } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
           sb.append(c);
-            } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
         }
     }
   }
   sb.append(quote);
   return sb.toString();
 }
\ No newline at end of file
