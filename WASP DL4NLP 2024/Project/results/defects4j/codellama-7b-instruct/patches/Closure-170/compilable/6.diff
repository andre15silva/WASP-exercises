diff --git a/tmp/004e07f0-55af-4618-9ee7-4543a22df565_buggy.java b/tmp/972f0e31-700c-479b-9bb6-2100397d5030_fixed.java
index 5abdeb5..0f0f9de 100644
--- a/tmp/004e07f0-55af-4618-9ee7-4543a22df565_buggy.java
+++ b/tmp/972f0e31-700c-479b-9bb6-2100397d5030_fixed.java
@@ -1,29 +1,29 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
             !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+               (parent.getFirstChild() == n) &&
+               (parent.getNext() != null) &&
+               (parent.getNext().isAssign()))) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
