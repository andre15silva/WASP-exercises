diff --git a/tmp/2d36379f-8904-4707-85d4-6782832b5a36_buggy.java b/tmp/019aee9a-2774-412c-b0b6-5f93961ffe6d_fixed.java
index 5abdeb5..cfd62f8 100644
--- a/tmp/2d36379f-8904-4707-85d4-6782832b5a36_buggy.java
+++ b/tmp/019aee9a-2774-412c-b0b6-5f93961ffe6d_fixed.java
@@ -1,29 +1,9 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
-    private void getNumUseInUseCfgNode(final Node cfgNode) {
-
-      numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
-        @Override
-        public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
-              numUsesWithinCfgNode++;
-          }
-        }
-
-      };
-
-      NodeTraversal.traverse(compiler, cfgNode, gatherCb);
-    }
+if (n.isName() && n.getString().equals(varName) &&`
+`! (parent.isAssign() &&`
+`(parent.getFirstChild() == n))) {`
+`// Don't count lhs of top-level assignment chain`
+`numUsesWithinCfgNode++;`
+`} }`
+`};`
+`NodeTraversal.traverse(compiler, cfgNode, gatherCb);`
+`}`
\ No newline at end of file
