diff --git a/tmp/3b05f70b-6c30-4c88-8f52-133c2947daf5_buggy.java b/tmp/edfdd44f-691d-47b4-b21e-096c029f3464_fixed.java
index 5abdeb5..f4a3e74 100644
--- a/tmp/3b05f70b-6c30-4c88-8f52-133c2947daf5_buggy.java
+++ b/tmp/edfdd44f-691d-47b4-b21e-096c029f3464_fixed.java
@@ -1,29 +1,17 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isQualifiedName() && CfgNodeUtils.isAssignmentTo(n, varName)) {
         numUsesWithinCfgNode++;
       }
+      continue;
     }
-
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
