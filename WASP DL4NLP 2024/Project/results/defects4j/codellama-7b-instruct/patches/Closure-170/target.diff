diff --git a/tmp/7d3a55dd-f23a-4fb4-a239-086c8bb25847_buggy.java b/tmp/ded1f721-c7ba-42ad-a60e-f37a6a4e230e_fixed.java
index 5abdeb5..1151b85 100644
--- a/tmp/7d3a55dd-f23a-4fb4-a239-086c8bb25847_buggy.java
+++ b/tmp/ded1f721-c7ba-42ad-a60e-f37a6a4e230e_fixed.java
@@ -1,29 +1,40 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+            if (parent.isAssign() && (parent.getFirstChild() == n)
+                && isAssignChain(parent, cfgNode)) {
               // Don't count lhs of top-level assignment chain
+              return;
+            } else {
               numUsesWithinCfgNode++;
             }
           }
+        }
 
+        private boolean isAssignChain(Node child, Node ancestor) {
+          for (Node n = child; n != ancestor; n = n.getParent()) {
+            if (!n.isAssign()) {
+              return false;
+            }
+          }
+          return true;
+        }
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
