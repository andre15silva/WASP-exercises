diff --git a/tmp/f5957998-6395-49c0-ac50-f23cb2a5da4c_buggy.java b/tmp/b39a6f05-4130-44d9-a151-8bc8c21c1db2_fixed.java
index 99141e0..9f17b04 100644
--- a/tmp/f5957998-6395-49c0-ac50-f23cb2a5da4c_buggy.java
+++ b/tmp/b39a6f05-4130-44d9-a151-8bc8c21c1db2_fixed.java
@@ -1,33 +1,27 @@
-    static String unescape(String string) {
-        if (!string.contains("&"))
-            return string;
-
+static StringBuffer unescape(StringBuffer string) {
+    string.setLength(0);
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
-
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
                 int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+                // skip
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+        if (charval == -1) {
+            string.append(m.group(0));
         } else {
-                m.appendReplacement(accum, m.group(0));
+            string.append(Character.toString((char) charval));
         }
     }
-        m.appendTail(accum);
-        return accum.toString();
+    return string;
 }
\ No newline at end of file
