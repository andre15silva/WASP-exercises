diff --git a/tmp/a8b3cae6-255b-421f-b24a-392e62537467_buggy.java b/tmp/8c932863-8302-4df2-86c1-af5321bb2058_fixed.java
index c3944a7..9615ec9 100644
--- a/tmp/a8b3cae6-255b-421f-b24a-392e62537467_buggy.java
+++ b/tmp/8c932863-8302-4df2-86c1-af5321bb2058_fixed.java
@@ -1,71 +1,58 @@
 /**
  * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
  * @param tableau simple tableau for the problem
  * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
  * @return row with the minimum ratio
-     */
-    private Integer getPivotRow(SimplexTableau tableau, final int col) {
-        // create a list of all the rows that tie for the lowest score in the minimum ratio test
-        List<Integer> minRatioPositions = new ArrayList<Integer>();
-        double minRatio = Double.MAX_VALUE;
+ *
+public Integer[] getPivotRow(SimplexTableau tableau, final int col) {
+    List<Integer> minRatioPositions = new ArrayList<>();
+
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
+        double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+        double entry = tableau.getEntry(i, col);
 
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
-                final int cmp = Double.compare(ratio, minRatio);
-                if (cmp == 0) {
+        if (entry > 0) {
+            double ratio = rhs / entry;
+            if (ratio == minRatio) { // FIXED TO <
                 minRatioPositions.add(i);
-                } else if (cmp < 0) {
+            } else if (ratio < minRatio) {
                 minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
+                minRatioPositions = new ArrayList<>();
                 minRatioPositions.add(i);
             }
         }
     }
 
-        if (minRatioPositions.size() == 0) {
+    if (minRatioPositions.isEmpty()) {
         return null;
     } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
-
         // 1. check if there's an artificial variable that can be forced out of the basis
+        try {
+            List<Integer> artificialVariableRows = new ArrayList<>();
             for (Integer row : minRatioPositions) {
                 for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                     int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
+                    if (Precision.compareTo(tableau.getEntry(row, column), 1.0, maxUlps) == 0 &&
+                row == tableau.getBasicRow(column)) {
+                    artificialVariableRows.add(row);
                 }
             }
+            if (!artificalVariableRows.isEmpty()) {
+                return artificialVariableRows.get(0);
+            }
+        } catch (Exception e) {
+            logger.error("An unknown error occurred while attempting to get the artificial variable rows");
         }
 
         // 2. apply Bland's rule to prevent cycling:
         // take the row for which the corresponding basic variable has the smallest index
-            //
         // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
-                Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
-                            }
-                        }
-                    }
-                }
-                return minRow;
+        // see http://en.wikipedia.org/wiki/Bland%27s_rule_%28linear_programming%29 (not equivalent to the above paper)
+        Integer[] pivotRows = minRatioPositions.toArray(new Integer[minRatioPositions.size()]);
+        Integer[][] pivotRowsReverse = pivotRows.clone();
+        Arrays.sort(pivotRowsReverse, Comparator.comparingInt(pivotRows::indexOf));
+        return pivotRowsReverse[0];
     }
     return minRatioPositions.get(0);
 }
+}
\ No newline at end of file
