diff --git a/tmp/783a51e0-3bfe-497d-b53f-bfdf99ab50a1_buggy.java b/tmp/46326b80-9b6b-482b-bc2c-a73d14e5e37d_fixed.java
index fb2b020..42c55aa 100644
--- a/tmp/783a51e0-3bfe-497d-b53f-bfdf99ab50a1_buggy.java
+++ b/tmp/46326b80-9b6b-482b-bc2c-a73d14e5e37d_fixed.java
@@ -1,27 +1,16 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
