diff --git a/tmp/b0aa6fe7-1aaf-496a-8e91-d4d625cc5ce5_buggy.java b/tmp/873e3c9d-3892-4d5e-9259-4ec7403c2774_fixed.java
index db19f52..e7dc1d9 100644
--- a/tmp/b0aa6fe7-1aaf-496a-8e91-d4d625cc5ce5_buggy.java
+++ b/tmp/873e3c9d-3892-4d5e-9259-4ec7403c2774_fixed.java
@@ -1,32 +1,29 @@
     // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
+            byteData.mark();
+            byteData.rewind();
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+            String docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+        }
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
         if (doc == null) {
             // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
             // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
             // into head mode
 
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
