diff --git a/tmp/cf5d08d0-41b3-4bb8-8af1-6e3c663cb11c_buggy.java b/tmp/393f6b76-3449-41be-88f6-745cb3718687_fixed.java
index db19f52..7de21d7 100644
--- a/tmp/cf5d08d0-41b3-4bb8-8af1-6e3c663cb11c_buggy.java
+++ b/tmp/393f6b76-3449-41be-88f6-745cb3718687_fixed.java
@@ -1,32 +1,23 @@
-    // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
+        String docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        Document doc = parser.parseInput(docData, baseUri);
+
+        // Check if there is a <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> tag in the html header
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
 
+        // re-parse the html data to handle any spurious Byte Order Mark (BOM)
         doc = parser.parseInput(docData, baseUri);
+
+        // Set the output encoding
         doc.outputSettings().charset(charsetName);
-        }
+
         return doc;
     }
\ No newline at end of file
