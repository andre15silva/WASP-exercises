diff --git a/tmp/ec23ac53-a8ec-48b9-9145-a755eff6549e_buggy.java b/tmp/eeee1be7-c6e2-4590-ada7-de514695cd1a_fixed.java
index cfdcd9c..358e50f 100644
--- a/tmp/ec23ac53-a8ec-48b9-9145-a755eff6549e_buggy.java
+++ b/tmp/eeee1be7-c6e2-4590-ada7-de514695cd1a_fixed.java
@@ -1,51 +1,40 @@
-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
+
+  Node tryFoldArrayAccess(Node n, Node left, Node right) {
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
-    if (!right.isNumber()) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
-      return n;
-    }
-
-    double index = right.getDouble();
-    int intIndex = (int) index;
-    if (intIndex != index) {
+    // Handle the non-integer index value cases
+    if (!right.isNumber() || !isValidArrayIndex(right.getDouble())) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
+    int index = right.getInt32();
     Node current = left.getFirstChild();
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
+    for (int i = 0; current != null && i < index; i++) {
         elem = current;
-
       current = current.getNext();
     }
 
-    if (elem == null) {
+    if (elem == null || (index < 0) ) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
+
