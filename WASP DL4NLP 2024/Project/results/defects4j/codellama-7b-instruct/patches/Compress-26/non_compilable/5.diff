diff --git a/tmp/9e84ee02-cdbc-4738-a3fd-f91e951f0838_buggy.java b/tmp/9be577b6-a43f-488d-8abf-9df7b958a4da_fixed.java
index 4b163f6..62eb283 100644
--- a/tmp/9e84ee02-cdbc-4738-a3fd-f91e951f0838_buggy.java
+++ b/tmp/9be577b6-a43f-488d-8abf-9df7b958a4da_fixed.java
@@ -1,28 +1,42 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
+ * bytes if the end of the input stream has been reached.
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
             break;
         }
         numToSkip -= skipped;
     }
-            
-        return available - numToSkip;
+    if (numToSkip > 0) {
+        // fall back to using read() method
+        skipped = 0;
+        byte[] buf = new byte[1024];
+        while (numToSkip > 0 && available > 0) {
+            int toRead = (int) Math.min(buf.length, available);
+            int read = input.read(buf, 0, toRead);
+            if (read == -1) {
+                break;
+            }
+            skipped += read;
+            numToSkip -= read;
+            available -= read;
+        }
+    }
+    return available - numToSkip + skipped;
 }
\ No newline at end of file
