diff --git a/tmp/e4983fac-98ba-4c77-8c72-321ab975f3b9_buggy.java b/tmp/d3957e7b-4f70-4861-9723-56984f4a2ca6_fixed.java
index 2608424..3d6551c 100644
--- a/tmp/e4983fac-98ba-4c77-8c72-321ab975f3b9_buggy.java
+++ b/tmp/d3957e7b-4f70-4861-9723-56984f4a2ca6_fixed.java
@@ -1,39 +1,38 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
-        final int[] indices = new int[dimension];
-
         int count = 0;
         for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+            count += uniCounterOffset[i];
         }
 
         int idx = 1;
         while (count < index) {
             count += idx;
             ++idx;
         }
         --idx;
-        indices[last] = idx;
+
+        final int[] indices = new int[dimension];
+        int subCount = 0;
+        for (int i = last - 1; i >= 0; i--) {
+            final int offset = uniCounterOffset[i];
+            indices[i] = offset != 0
+                ? (index - subCount) / offset
+                : -1;
+            subCount += indices[i] * offset;
+        }
 
         return indices;
     }
