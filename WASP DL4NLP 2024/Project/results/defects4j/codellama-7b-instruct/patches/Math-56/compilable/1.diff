diff --git a/tmp/0b4b2e95-c38e-42e7-bc6b-72efe81679ab_buggy.java b/tmp/fb8bb57d-2c3d-4016-a1b9-1d6645c21055_fixed.java
index 2608424..9606c03 100644
--- a/tmp/0b4b2e95-c38e-42e7-bc6b-72efe81679ab_buggy.java
+++ b/tmp/fb8bb57d-2c3d-4016-a1b9-1d6645c21055_fixed.java
@@ -1,39 +1,30 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
+        if (index < 0 || index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
-
         final int[] indices = new int[dimension];
-
-        int count = 0;
         for (int i = 0; i < last; i++) {
+            int offset = uniCounterOffset[i];
             int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+            while (offset <= index) {
+                idx += offset;
+                offset = offset % totalSize;
             }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+            idx -= offset;
+            indices[i] = idx % dimension;
         }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
+        int offset = uniCounterOffset[last];
+        while (offset <= index) {
+            offset = offset % totalSize;
         }
-        --idx;
-        indices[last] = idx;
-
+        indices[last] = index % dimension;
         return indices;
     }
\ No newline at end of file
