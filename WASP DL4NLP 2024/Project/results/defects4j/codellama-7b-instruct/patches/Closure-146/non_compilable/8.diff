diff --git a/tmp/5b43e73b-f558-4a8a-ba96-573d9e212105_buggy.java b/tmp/c4ebae7e-43be-4d68-ba96-646b4a9c5bc5_fixed.java
index 210695a..991109f 100644
--- a/tmp/5b43e73b-f558-4a8a-ba96-573d9e212105_buggy.java
+++ b/tmp/c4ebae7e-43be-4d68-ba96-646b4a9c5bc5_fixed.java
@@ -1,32 +1,32 @@
 /**
 * Computes the subset of {@code this} and {@code that} types if inequality
 * is observed. If a value {@code v1} of type {@code number} is not equal to a
 * value {@code v2} of type {@code (undefined,number)}, we can infer that the
 * type of {@code v1} is {@code number} and the type of {@code v2} is
 * {@code number} as well.
 *
 * @return a pair containing the restricted type of {@code this} as the first
 *         component and the restricted type of {@code that} as the second
 *         element. The returned pair is never {@code null} even though its
 *         components may be {@code null}
 */
 public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
         TypePair p = that.getTypesUnderInequality(this);
         return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
         case TRUE:
-        return new TypePair(null, null);
+            return new TypePair(NO_TYPE, NO_TYPE);
 
         case FALSE:
         case UNKNOWN:
             return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
 }
\ No newline at end of file
