diff --git a/tmp/0be85906-665d-48f3-bc15-320508574e2e_buggy.java b/tmp/8116e637-f645-4ac7-95d8-f1273d72664b_fixed.java
index d28ed6a..8badc56 100644
--- a/tmp/0be85906-665d-48f3-bc15-320508574e2e_buggy.java
+++ b/tmp/8116e637-f645-4ac7-95d8-f1273d72664b_fixed.java
@@ -1,78 +1,69 @@
-    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations
-    static void escape(StringBuilder accum, String string, Document.OutputSettings out,
+    void escape(StringBuilder accum, String string, Document.OutputSettings out,
                 boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {
 
         boolean lastWasWhite = false;
         boolean reachedNonWhite = false;
         final EscapeMode escapeMode = out.escapeMode();
         final CharsetEncoder encoder = out.encoder();
         final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());
         final Map<Character, String> map = escapeMode.getMap();
         final int length = string.length();
 
         int codePoint;
-        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {
+        for (int offset = 0; offset < length; offset += Character.charsCount(codePoint)) {
             codePoint = string.codePointAt(offset);
 
             if (normaliseWhite) {
                 if (StringUtil.isWhitespace(codePoint)) {
                     if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)
                         continue;
                     accum.append(' ');
                     lastWasWhite = true;
                     continue;
                 } else {
                     lastWasWhite = false;
                     reachedNonWhite = true;
                 }
             }
             // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):
             if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
                 final char c = (char) codePoint;
                 // html specific and required escapes:
-                switch (c) {
-                    case '&':
+                if (c == '&') {
                     accum.append("&amp;");
-                        break;
-                    case 0xA0:
+                } else if (c == 0xA0) {
                     if (escapeMode != EscapeMode.xhtml)
                         accum.append("&nbsp;");
                     else
                         accum.append("&#xa0;");
-                        break;
-                    case '<':
-                        // escape when in character data or when in a xml attribue val; not needed in html attr val
+                } else if (c == '<') {
                     if (!inAttribute)
                         accum.append("&lt;");
                     else
                         accum.append(c);
-                        break;
-                    case '>':
+                } else if (c == '>') {
                     if (!inAttribute)
                         accum.append("&gt;");
                     else
                         accum.append(c);
-                        break;
-                    case '"':
+                } else if (c == '"') {
                     if (inAttribute)
                         accum.append("&quot;");
                     else
                         accum.append(c);
-                        break;
-                    default:
-                        if (canEncode(coreCharset, c, encoder))
+                } else if (canEncode(coreCharset, c, encoder)) {
                     accum.append(c);
-                        else if (map.containsKey(c))
+                } else if (map.containsKey(c)) {
                     accum.append('&').append(map.get(c)).append(';');
-                        else
+                } else {
                     accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
                 }
             } else {
                 final String c = new String(Character.toChars(codePoint));
                 if (encoder.canEncode(c)) // uses fallback encoder for simplicity
                     accum.append(c);
                 else
                     accum.append("&#x").append(Integer.toHexString(codePoint)).append(';');
             }
         }
     }
