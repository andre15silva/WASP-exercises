diff --git a/tmp/2bf17d78-79db-47d6-a39c-8b987e33cc6d_buggy.java b/tmp/df318e8e-42e3-4430-8e1f-e174897bb01a_fixed.java
index 6f24eb6..2f800a0 100644
--- a/tmp/2bf17d78-79db-47d6-a39c-8b987e33cc6d_buggy.java
+++ b/tmp/df318e8e-42e3-4430-8e1f-e174897bb01a_fixed.java
@@ -1,99 +1,28 @@
-  /**
-   * Determines whether the given property is visible in the current context.
-   * @param t The current traversal.
-   * @param getprop The getprop node.
-   */
    private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
-    ObjectType objectType =
-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+  
+    // get the object type of the property
+    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+  
+    // get the name of the property
     String propertyName = getprop.getLastChild().getString();
   
-    if (objectType != null) {
-      // Is this a normal property access, or are we trying to override
-      // an existing property?
-      boolean isOverride = t.inGlobalScope() &&
-          parent.getType() == Token.ASSIGN &&
-          parent.getFirstChild() == getprop;
+    // check if the property is a class and if so check its visibility
+    if (objectType.isClassy() == true) {
+      // check if the property is defined in a file different from the current one
+      if((!objectType.getSourceFile().jsname.equals(currentFile)) && !t.inGlobalScope()){
       
-      // Find the lowest property defined on a class with visibility
-      // information.
-      if (isOverride) {
-        objectType = objectType.getImplicitPrototype();
+        checkForOutOfFileAccess(getprop, objectType);
       }
-      JSDocInfo docInfo = null;
-      for (; objectType != null;
-           objectType = objectType.getImplicitPrototype()) {
-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
-        if (docInfo != null &&
-            docInfo.getVisibility() != Visibility.INHERITED) {
-          break;
-        }
-      }
-
-      if (objectType == null) {
-        // We couldn't find a visibility modifier; assume it's public.
-        return;
-      }
-
-      boolean sameInput =
-          t.getInput().getName().equals(docInfo.getSourceName());
-      Visibility visibility = docInfo.getVisibility();
-      JSType ownerType = normalizeClassType(objectType);
-      if (isOverride) {
-        // Check an ASSIGN statement that's trying to override a property
-        // on a superclass.
-        JSDocInfo overridingInfo = parent.getJSDocInfo();
-        Visibility overridingVisibility = overridingInfo == null ?
-            Visibility.INHERITED : overridingInfo.getVisibility();
            
-        // Check that (a) the property *can* be overridden, and
-        // (b) that the visibility of the override is the same as the
-        // visibility of the original property.
-        if (visibility == Visibility.PRIVATE && !sameInput) {
-          compiler.report(
-              t.makeError(getprop, PRIVATE_OVERRIDE,
-                  objectType.toString()));
-        } else if (overridingVisibility != Visibility.INHERITED &&
-            overridingVisibility != visibility) {
-          compiler.report(
-              t.makeError(getprop, VISIBILITY_MISMATCH,
-                  visibility.name(), objectType.toString(),
-                  overridingVisibility.name()));
+      // check if the property is private and if so check if it is being accessed from a different file than the file where it was defined
+      // and if so check if the file that is making the access does not import the file where the private property was defined
+      if (objectType.isClassy() == true){
+        if(objectType..getOwnPropertyJSDocInfo(propertyName).visibility == Visibility.PRIVATE){
+          checkPrivateAccessFromDifferentFile(getprop, objectType)
         }
-      } else {
-        if (sameInput) {
-          // private access is always allowed in the same file.
-          return;
-        } else if (visibility == Visibility.PRIVATE &&
-            (currentClass == null || ownerType.differsFrom(currentClass))) {
-          if (docInfo.isConstructor() &&
-              isValidPrivateConstructorAccess(parent)) {
-            return;
       } 
            
-          // private access is not allowed outside the file from a different
-          // enclosing class.
-          compiler.report(
-              t.makeError(getprop,
-                  BAD_PRIVATE_PROPERTY_ACCESS,
-                  propertyName,
-                  validator.getReadableJSTypeName(
-                      getprop.getFirstChild(), true)));
-        } else if (visibility == Visibility.PROTECTED) {
-          // There are 3 types of legal accesses of a protected property:
-          // 1) Accesses in the same file
-          // 2) Overriding the property in a subclass
-          // 3) Accessing the property from inside a subclass
-          // The first two have already been checked for.
-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {
-            compiler.report(
-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
-                    propertyName,
-                    validator.getReadableJSTypeName(
-                        getprop.getFirstChild(), true)));
-          }
-        }
-      }
     }
    }
+  
\ No newline at end of file
