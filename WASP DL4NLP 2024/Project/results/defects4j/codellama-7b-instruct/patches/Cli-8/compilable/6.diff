diff --git a/tmp/5b5d488a-d99f-4ce0-b2ca-c1beb8301e0f_buggy.java b/tmp/4d203d9e-181c-4926-bdc6-4b5b0d9757f7_fixed.java
index 8e93a5e..bdc1ab3 100644
--- a/tmp/5b5d488a-d99f-4ce0-b2ca-c1beb8301e0f_buggy.java
+++ b/tmp/4d203d9e-181c-4926-bdc6-4b5b0d9757f7_fixed.java
@@ -1,43 +1,32 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
-            sb.append(rtrim(text));
+        sb.append(text);
 
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    sb.append(text.substring(0, pos)).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
-        final String padding = createPadding(nextLineTabStop);
+    String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(text.substring(0, pos)).append(defaultNewLine);
     }
 }
\ No newline at end of file
