diff --git a/tmp/b027143b-4801-41c8-8caa-fcffec125a60_buggy.java b/tmp/ee6cabac-be1a-481a-b2bf-cde6cb983b8f_fixed.java
index 51ebfca..26f4b4d 100644
--- a/tmp/b027143b-4801-41c8-8caa-fcffec125a60_buggy.java
+++ b/tmp/ee6cabac-be1a-481a-b2bf-cde6cb983b8f_fixed.java
@@ -1,32 +1,15 @@
-    /**
-     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
-     * 
-     * @param binaryData
-     *            Array containing binary data to encode.
-     * @param isChunked
-     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
-     * @param urlSafe
-     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
-     * @param maxResultSize
-     *            The maximum result size to accept.
-     * @return Base64-encoded data.
-     * @throws IllegalArgumentException
-     *             Thrown when the input array needs an output array bigger than maxResultSize
-     * @since 1.4
-     */
 public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
-        if (binaryData == null || binaryData.length == 0) {
-            return binaryData;
+    if (binaryData == null) {
+        return null;
     }
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
-        if (len > maxResultSize) {
+    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
+    byte[] encoded = b64.encode(binaryData);
+    if (encoded.length > maxResultSize) {
         throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
-                len +
+                encoded.length +
                 ") than the specified maxium size of " +
                 maxResultSize);
     }
-                
-        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
-        return b64.encode(binaryData);
+    return encoded;
 }
\ No newline at end of file
