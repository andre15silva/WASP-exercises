diff --git a/tmp/809b2d2d-fb5e-4473-a6a7-ad5da9039855_buggy.java b/tmp/2eeb24af-bd7c-4a5f-8ec1-824ede3367fe_fixed.java
index 3127f85..1c29dbf 100644
--- a/tmp/809b2d2d-fb5e-4473-a6a7-ad5da9039855_buggy.java
+++ b/tmp/2eeb24af-bd7c-4a5f-8ec1-824ede3367fe_fixed.java
@@ -1,24 +1,7 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
-        final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+    if (x == Double.POSITIVE_INFIinity) {
         return 1;
     } else {
-                throw ex;
-            }
+        return your-original-code-here;
     }
 }
\ No newline at end of file
