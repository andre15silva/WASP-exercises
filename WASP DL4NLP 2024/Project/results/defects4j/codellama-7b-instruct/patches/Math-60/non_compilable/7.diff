diff --git a/tmp/e2b680d0-01e4-473c-a0d3-0251b3f46b26_buggy.java b/tmp/ba2c59e0-4aa0-42d9-bf07-955d6ce506a7_fixed.java
index 3127f85..4586556 100644
--- a/tmp/e2b680d0-01e4-473c-a0d3-0251b3f46b26_buggy.java
+++ b/tmp/ba2c59e0-4aa0-42d9-bf07-955d6ce506a7_fixed.java
@@ -1,24 +1,19 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
-        final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
+    double dev = x - mean;
+    double cdf = 0.0;
+    int count = 0;
+    double lastDev = dev;
+    while (count < 100) {
+        cdf = 0.5 * (1.0 + Erf.erf((dev) /
                 (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
+        if (cdf < 0.0 || cdf > 1.0 || lastDev == dev) {
+            break;
         }
+        lastDev = dev;
+        count++;
     }
+    if (count == 100) {
+        throw new ConvergenceException("Continued fraction diverged to NaN for value " + x);
+    }
+    return count < 100 ? cdf : 1.0;
 }
