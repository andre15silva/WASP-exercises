diff --git a/tmp/74992a94-3b35-42d4-8151-23a3dfe68820_buggy.java b/tmp/ec46925c-be83-4a7b-9a5c-0c3d984b08f0_fixed.java
index 181b1ac..8980ec3 100644
--- a/tmp/74992a94-3b35-42d4-8151-23a3dfe68820_buggy.java
+++ b/tmp/ec46925c-be83-4a7b-9a5c-0c3d984b08f0_fixed.java
@@ -1,23 +1,10 @@
-    /**
-     * Return the sum of this complex number and the given complex number.
-     * <p>
-     * Uses the definitional formula
-     * <pre>
-     * (a + bi) + (c + di) = (a+c) + (b+d)i
-     * </pre></p>
-     * <p>
-     * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
-     * returned in the parts of the result according to the rules for
-     * {@link java.lang.Double} arithmetic.</p>
-     *
-     * @param rhs the other complex number
-     * @return the complex number sum
-     * @throws NullArgumentException if <code>rhs</code> is null
-     */
-    public Complex add(Complex rhs)
-        throws NullArgumentException {
-        MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+@Test
+public void testAddNaN() {
+    Complex x = new Complex(3.0, 4.0);
+    Complex z = x.add(Complex.NaN);
+    Assert.assertTrue(z.isNaN());
+    z = new Complex(1, nan);
+    Complex w = x.add(z);
+    Assert.assertTrue(Double.isNaN(w.getReal()));
+    Assert.assertTrue(Double.isNaN(w.getImaginary()));
 }
\ No newline at end of file
