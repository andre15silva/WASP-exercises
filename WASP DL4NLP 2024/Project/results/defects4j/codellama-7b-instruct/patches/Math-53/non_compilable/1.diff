diff --git a/tmp/4f673ccc-d70b-4352-9474-deacd240b81e_buggy.java b/tmp/10ad426b-869c-4fab-a341-1f823329540b_fixed.java
index 181b1ac..3824491 100644
--- a/tmp/4f673ccc-d70b-4352-9474-deacd240b81e_buggy.java
+++ b/tmp/10ad426b-869c-4fab-a341-1f823329540b_fixed.java
@@ -1,23 +1,29 @@
 /**
  * Return the sum of this complex number and the given complex number.
  * <p>
  * Uses the definitional formula
  * <pre>
  * (a + bi) + (c + di) = (a+c) + (b+d)i
  * </pre></p>
  * <p>
  * If either this or <code>rhs</code> has a NaN value in either part,
  * {@link #NaN} is returned; otherwise Infinite and NaN values are
  * returned in the parts of the result according to the rules for
  * {@link java.lang.Double} arithmetic.</p>
  *
  * @param rhs the other complex number
  * @return the complex number sum
  * @throws NullArgumentException if <code>rhs</code> is null
  */
-    public Complex add(Complex rhs)
-        throws NullArgumentException {
+public Complex add(Complex rhs) throws NullArgumentException {
     MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+    double real = Double.NaN;
+    double imaginary = Double.NaN;
+    if (this.isNaN() || rhs.isNaN()) {
+        return Complex.NaN;
+    } else {
+        real = this.real + rhs.real;
+        imaginary = this.imaginary + rhs.imaginary;
+    }
+    return Complex.createComplex(real, imaginary);
 }
