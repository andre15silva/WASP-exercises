diff --git a/tmp/d5fd437e-c497-4a14-82aa-29c665c978be_buggy.java b/tmp/c6d1f94b-daac-4e46-bf8b-83f53d1bb485_fixed.java
index 98f719c..d1408d8 100644
--- a/tmp/d5fd437e-c497-4a14-82aa-29c665c978be_buggy.java
+++ b/tmp/c6d1f94b-daac-4e46-bf8b-83f53d1bb485_fixed.java
@@ -1,72 +1,60 @@
-  /** Helper to escape javascript string as well as regular expression */
-  static String strEscape(String s, char quote,
-                          String doublequoteEscape,
-                          String singlequoteEscape,
-                          String backslashEscape,
-                          CharsetEncoder outputCharsetEncoder) {
-    StringBuilder sb = new StringBuilder(s.length() + 2);
-    sb.append(quote);
-    for (int i = 0; i < s.length(); i++) {
-      char c = s.charAt(i);
-      switch (c) {
-        case '\0': sb.append("\\0"); break;
-        case '\n': sb.append("\\n"); break;
-        case '\r': sb.append("\\r"); break;
-        case '\t': sb.append("\\t"); break;
-        case '\\': sb.append(backslashEscape); break;
-        case '\"': sb.append(doublequoteEscape); break;
-        case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
-          if (i >= 2 &&
-              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
-               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
-            sb.append("\\>");
-          } else {
-            sb.append(c);
-          }
-          break;
-        case '<':
-          // Break </script into <\/script
-          final String END_SCRIPT = "/script";
 
-          // Break <!-- into <\!--
-          final String START_COMMENT = "!--";
+[PYTHON]
+def strEscape(string, quotes, *args):
+    """
+    Escapes the characters in a string using the JavaScript string encoding.
 
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
-            sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
-            sb.append("<\\");
-          } else {
-            sb.append(c);
-          }
-          break;
-        default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
-          if (outputCharsetEncoder != null) {
-            if (outputCharsetEncoder.canEncode(c)) {
-              sb.append(c);
-            } else {
-              // Unicode-escape the character.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
-          } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
-              sb.append(c);
-            } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
-          }
-      }
-    }
-    sb.append(quote);
-    return sb.toString();
-  }
+    Args:
+        string (str): The string to escape.
+        quotes (str): The quote characters to use for the string.
+        args: Optional arguments to the function. Currently, the only
+            supported argument is a CharsetEncoder object, which can be used
+            to check if a character can be represented in a given charset.
+
+    Returns:
+        str: The escaped string.
+    """
+    # Initialize a list to store the escaped characters.
+    escaped_chars = []
+
+    # Iterate through the characters in the string.
+    for char in string:
+        # Check if the character is a quote character or a special character.
+        if char in quotes or char in ["\\", "/", "'", "\""]:
+            # Escape the character using a backslash.
+            escaped_chars.append("\\")
+            escaped_chars.append(char)
+        # Check if the character is a special character.
+        elif char in ["\0", "\n", "\r", "\t"]:
+            # Escape the character using a single backslash.
+            escaped_chars.append("\\")
+            escaped_chars.append(char)
+        # Check if the character is a Unicode character.
+        elif char > 127:
+            # Unicode-escape the character.
+            escaped_chars.append("\\u")
+            escaped_chars.append(hex(ord(char)).replace("0x", ""))
+        # Otherwise, pass the character through.
+        else:
+            escaped_chars.append(char)
+
+    # Join the escaped characters into a single string.
+    escaped_string = "".join(escaped_chars)
+
+    # Wrap the string in quote characters.
+    escaped_string = quotes[0] + escaped_string + quotes[1]
+
+    return escaped_string
+
+# Test the strEscape function.
+import unittest
+
+class TestStrEscape(unittest.TestCase):
+    def test_str_escape(self):
+        self.assertEqual(
+            strEscape("Hello, world!", "\""),
+            "\"Hello, world!\""
+        )
+
+if __name__ == "__main__":
+    unittest.main()
