diff --git a/tmp/b9606d28-efdb-4f2e-8dfa-b7b9481418e5_buggy.java b/tmp/286149be-96b2-4476-860d-c2d2f639bd00_fixed.java
index 42c5923..b6e5276 100644
--- a/tmp/b9606d28-efdb-4f2e-8dfa-b7b9481418e5_buggy.java
+++ b/tmp/286149be-96b2-4476-860d-c2d2f639bd00_fixed.java
@@ -1,89 +1,59 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
+    // try to parse proper fraction
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
         return ret;
     }
 
     int initialIndex = pos.getIndex();
 
     // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
+    StringUtils.parseAndIgnoreWhitespace(source, pos);
 
     // parse whole
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
     // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
+    StringUtils.parseAndIgnoreWhitespace(source, pos);
 
     // parse numerator
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
-        int startIndex = pos.getIndex();
-        char c = parseNextCharacter(source, pos);
-        switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
-        case '/' :
-            // found '/', continue parsing denominator
-            break;
-        default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
-            pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
-            return null;
-        }
-
     // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
+    StringUtils.parseAndIgnoreWhitespace(source, pos);
 
     // parse denominator
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
         // invalid integer number
         // set index back to initial, error index should already be set
         // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
-            // minus signs must be leading, invalid
+    // make sure minus signs are leading
+    if (whole.longValue() < 0 || num.longValue() < 0 || den.longValue() < 0) {
+        // invalid minus signs
+        // set index back to initial, error index should already be set
+        // character examined.
+        pos.setIndex(initialIndex);
+        return null;
+    }
 
-        int w = whole.intValue();
-        int n = num.intValue();
-        int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+    return new Fraction(num.longValue(), den.longValue());
 }
\ No newline at end of file
