diff --git a/tmp/8c33ebd5-04e0-4d61-9c08-e1c2e40d6e2a_buggy.java b/tmp/990d2fdd-b127-4582-ad4a-90545c0e719a_fixed.java
index e0ecec8..f29f7dc 100644
--- a/tmp/8c33ebd5-04e0-4d61-9c08-e1c2e40d6e2a_buggy.java
+++ b/tmp/990d2fdd-b127-4582-ad4a-90545c0e719a_fixed.java
@@ -1,35 +1 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
-    Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
-
-    Iterator<Node> parameters = functionType.getParameters().iterator();
-    int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
-      ordinal++;
-
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
-    }
-
-    int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
-      report(t, call, WRONG_ARGUMENT_COUNT,
-              validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
-    }
-  }
+ actual parameter 2 of g does not match formal parameter\n found   : boolean\n required : (number|undefined)
\ No newline at end of file
