diff --git a/tmp/8ccbc392-4020-4e7a-baa2-1f468bc64bca_buggy.java b/tmp/ecf68500-c1ca-4d9d-a97a-ae2cf522c4c7_fixed.java
index e0ecec8..cd9999a 100644
--- a/tmp/8ccbc392-4020-4e7a-baa2-1f468bc64bca_buggy.java
+++ b/tmp/ecf68500-c1ca-4d9d-a97a-ae2cf522c4c7_fixed.java
@@ -1,35 +1,36 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
+      // Check if argument is actually a SpreadElement node.
+      if (argument.isSpread() {
+        // If it is, then we need to check the type of the expression
+        // that it is spreading.
+        checkArgument(t, argument, getJSType(argument),
+            getJSType(parameter), call.getFirstChild(), ordinal, true);
+      } else {
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
       }
+    }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
