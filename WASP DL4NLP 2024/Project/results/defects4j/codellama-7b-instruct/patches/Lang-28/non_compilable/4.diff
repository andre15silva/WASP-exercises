diff --git a/tmp/95adef33-72f5-439c-8a2c-a53a682be4a6_buggy.java b/tmp/62b5f3ba-e1a7-495d-9936-64bbf1557c37_fixed.java
index 4bbd561..b55362c 100644
--- a/tmp/95adef33-72f5-439c-8a2c-a53a682be4a6_buggy.java
+++ b/tmp/62b5f3ba-e1a7-495d-9936-64bbf1557c37_fixed.java
@@ -1,37 +1,9 @@
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
-            int start = index + 2;
-            boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
-                isHex = true;
-            }
-
-            int end = start;
-            while(input.charAt(end) != ';') {
-                end++;
-            }
-
-            int entityValue;
-            try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
-            }
-
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+@Test
+public void testSupplementaryUnescaping() {
+    NumericEntityUnescaper neu = new NumericEntityUnescaper();
+    String input = "&#68642;";
+    String expected = "\uD803\uDC22";
+
+    String result = neu.translate(input);
+    assertEquals("Failed to unescape numeric entities supplementary characters", expected, result);
 }
