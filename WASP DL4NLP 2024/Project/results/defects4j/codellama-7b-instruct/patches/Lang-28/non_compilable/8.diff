diff --git a/tmp/28ff6e63-e6b8-43e0-bd73-0c908a2465df_buggy.java b/tmp/7c89345d-cf08-44a5-8a26-9c0cbca5d888_fixed.java
index 4bbd561..486c2d9 100644
--- a/tmp/28ff6e63-e6b8-43e0-bd73-0c908a2465df_buggy.java
+++ b/tmp/7c89345d-cf08-44a5-8a26-9c0cbca5d888_fixed.java
@@ -1,37 +1,38 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
-            int start = index + 2;
-            boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
-                isHex = true;
+        // Check boundaries
+        if (index < 0 || index + 1 >= input.length()) {
+            return 0;
         }
-
-            int end = start;
-            while(input.charAt(end) != ';') {
+        char c = input.charAt(index);
+        if (c != '&') {
+            return 0;
+        }
+        // Check if next character is '#'
+        if (input.charAt(index + 1) != '#') {
+            return 0;
+        }
+        // Skip the '&' and '#' characters
+        index += 2;
+        // Parse the entity value
+        int start = index;
+        int end = index;
+        for (int i = index; i < input.length() && input.charAt(i) != ';'; i++) {
             end++;
         }
-
+        String entity = input.subSequence(start, end).toString();
+        // Parse the entity value
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
+            entityValue = Integer.parseInt(entity, 10);
+        } catch (NumbersFormatException e) {
             return 0;
         }
-
+        // Write the entity value
         out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
+        // Return the number of characters consumed
+        return end - start + 1;
     }
