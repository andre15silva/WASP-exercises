diff --git a/tmp/d226b024-ff06-4376-b830-e77661a5b9a4_buggy.java b/tmp/e085a425-841d-4ac9-bc47-1b27cef28996_fixed.java
index b81eeca..2d175bb 100644
--- a/tmp/d226b024-ff06-4376-b830-e77661a5b9a4_buggy.java
+++ b/tmp/e085a425-841d-4ac9-bc47-1b27cef28996_fixed.java
@@ -1,78 +1,66 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         boolean allNUL = true;
-        for (int i = start; i < end; i++){
-            if (buffer[i] != 0){
+        for (int i = 0; i < length; i++){
+            if (buffer[offset + i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
+        while (offset < length){
+            if (buffer[offset] == ' '){
+                offset++;
             } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        byte trailer = buffer[offset + length - 1];
         if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
             // May have additional NUL or space
-        trailer = buffer[end-1];
+            trailer = buffer[offset + length - 2];
             if (trailer == 0 || trailer == ' '){
-            end--;
+                offset--;
+            }
         }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+        long result = 0;
+        for (;offset < length - 1; offset++) {
+            byte currentByte = buffer[offset];
             if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                throw new IllegalArgumentException("Invalid octal digit");
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
