diff --git a/tmp/83edb0d4-aa9c-402b-86b5-d30ef2a59f21_buggy.java b/tmp/cc56704f-851f-4555-98d8-b0bf9cd790e3_fixed.java
index aea175a..add1b44 100644
--- a/tmp/83edb0d4-aa9c-402b-86b5-d30ef2a59f21_buggy.java
+++ b/tmp/cc56704f-851f-4555-98d8-b0bf9cd790e3_fixed.java
@@ -1,76 +1,60 @@
-    /**
-     * <p>
-     * Encodes all of the provided data, starting at inPos, for inAvail bytes.
-     * Must be called at least twice:  once with the data to encode, and once
-     * with inAvail set to "-1" to alert encoder that EOF has been reached,
-     * so flush last remaining bytes (if not multiple of 3).
-     * </p><p>
-     * Thanks to "commons" project in ws.apache.org for the bitwise operations,
-     * and general approach.
-     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
-     * </p>
-     *
-     * @param in byte[] array of binary data to base64 encode.
-     * @param inPos Position to start reading data from.
-     * @param inAvail Amount of bytes available from input for encoding.
-     */
 void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
-            return;
-        }
-        // inAvail < 0 is how we're informed of EOF in the underlying data we're
-        // encoding.
     if (inAvail < 0) {
         eof = true;
-            if (buf == null || buf.length - pos < encodeSize) {
+        // no data left in the input, so return without modifying the buffer
+        return;
+    }
+
+    // if the buffer is null or has insufficient capacity, resize it
+    if (buf == null || buf.length < pos + encodeSize + 1) {
         resizeBuf();
     }
+
+    // check whether we need to append padding characters
+    if (inAvail == 0) {
         switch (modulus) {
             case 1:
                 buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                 buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                 // URL-SAFE skips the padding to further reduce size.
                 if (encodeTable == STANDARD_ENCODE_TABLE) {
                     buf[pos++] = PAD;
                     buf[pos++] = PAD;
                 }
                 break;
 
             case 2:
                 buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                 buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                 buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                 // URL-SAFE skips the padding to further reduce size.
                 if (encodeTable == STANDARD_ENCODE_TABLE) {
                     buf[pos++] = PAD;
                 }
                 break;
         }
-            if (lineLength > 0) {
-                System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+
+        // no input data left, so return without modifying the buffer
+        return;
     }
-        } else {
+
+    // encode the input data
     for (int i = 0; i < inAvail; i++) {
-                if (buf == null || buf.length - pos < encodeSize) {
-                    resizeBuf();
-                }
         modulus = (++modulus) % 3;
         int b = in[inPos++];
         if (b < 0) { b += 256; }
         x = (x << 8) + b;
         if (0 == modulus) {
             buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
             buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
             buf[pos++] = encodeTable[x & MASK_6BITS];
             currentLinePos += 4;
             if (lineLength > 0 && lineLength <= currentLinePos) {
                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                 pos += lineSeparator.length;
                 currentLinePos = 0;
             }
         }
     }
 }
\ No newline at end of file
-    }
