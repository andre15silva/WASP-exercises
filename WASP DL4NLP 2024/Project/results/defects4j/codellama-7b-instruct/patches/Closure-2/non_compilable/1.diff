diff --git a/tmp/c4f8e92e-4514-42d6-bce6-56eecff66de1_buggy.java b/tmp/67ff0cc1-6865-4651-afac-0d2667267d98_fixed.java
index 8ff679b..1be2eba 100644
--- a/tmp/c4f8e92e-4514-42d6-bce6-56eecff66de1_buggy.java
+++ b/tmp/67ff0cc1-6865-4651-afac-0d2667267d98_fixed.java
@@ -1,39 +1,31 @@
-  /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
-   * @param t The node traversal object that supplies context
-   * @param n The node being visited
-   * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
-   * @param interfaceType The super interface that is being visited
-   */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+
+    if (interfaceType.isProxy()) {
       ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
       // This can be the case if interfaceType is proxy to a non-existent
       // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+      if (implicitProto != null) {
+        Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
         for (String name : currentPropertyNames) {
           ObjectType oType = properties.get(name);
           if (oType != null) {
             if (!interfaceType.getPropertyType(name).isEquivalentTo(
                 oType.getPropertyType(name))) {
               compiler.report(
                   t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                       functionName, name, oType.toString(),
                       interfaceType.toString()));
             }
           }
           currentProperties.put(name, interfaceType);
         }
+      }
+    }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
