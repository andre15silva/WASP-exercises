diff --git a/tmp/a9f3bd28-a7e2-40c5-b5d2-c07b16f08b3a_buggy.java b/tmp/225dd98a-c43b-438a-8306-7f7aefae0d9b_fixed.java
index a6dab52..29e4314 100644
--- a/tmp/a9f3bd28-a7e2-40c5-b5d2-c07b16f08b3a_buggy.java
+++ b/tmp/225dd98a-c43b-438a-8306-7f7aefae0d9b_fixed.java
@@ -1,80 +1,71 @@
-    /**
-     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>
-     * 
-     * @param out write to receieve the escaped string
-     * @param str String to escape values in, may be null
-     * @param escapeSingleQuote escapes single quotes if <code>true</code>
-     * @throws IOException if an IOException occurs
-     */
     private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (str == null) {
             return;
         }
         int sz;
         sz = str.length();
         for (int i = 0; i < sz; i++) {
             char ch = str.charAt(i);
 
             // handle unicode
             if (ch > 0xfff) {
-                out.write("\\u" + hex(ch));
+                out.write("\\u" + toHexString(ch));
             } else if (ch > 0xff) {
-                out.write("\\u0" + hex(ch));
+                out.write("\\u0" + toHexString(ch));
             } else if (ch > 0x7f) {
-                out.write("\\u00" + hex(ch));
+                out.write("\\u00" + toHexString(ch));
             } else if (ch < 32) {
                 switch (ch) {
                     case '\b':
-                        out.write('\\');
-                        out.write('b');
+                        out.write("\\");
+                        out.write("b");
                         break;
                     case '\n':
-                        out.write('\\');
-                        out.write('n');
+                        out.write("\\");
+                        out.write("n");
                         break;
                     case '\t':
-                        out.write('\\');
-                        out.write('t');
+                        out.write("\\");
+                        out.write("t");
                         break;
                     case '\f':
-                        out.write('\\');
-                        out.write('f');
+                        out.write("\\");
+                        out.write("f");
                         break;
                     case '\r':
-                        out.write('\\');
-                        out.write('r');
+                        out.write("\\r");
                         break;
                     default :
                         if (ch > 0xf) {
-                            out.write("\\u00" + hex(ch));
+                            out.write("\\u00" + toHexString(ch));
                         } else {
-                            out.write("\\u000" + hex(ch));
+                            out.write("\\u000" + toHexString(ch));
                         }
                         break;
                 }
             } else {
                 switch (ch) {
                     case '\'':
                         if (escapeSingleQuote) {
-                          out.write('\\');
+                          out.write("\\");
                         }
-                        out.write('\'');
+                        out.write(ch);
                         break;
                     case '"':
-                        out.write('\\');
-                        out.write('"');
+                        out.write("\\");
+                        out.write(ch);
                         break;
                     case '\\':
-                        out.write('\\');
-                        out.write('\\');
+                        out.write("\\");
+                        out.write(ch);
                         break;
                     default :
                         out.write(ch);
                         break;
                 }
             }
         }
     }
