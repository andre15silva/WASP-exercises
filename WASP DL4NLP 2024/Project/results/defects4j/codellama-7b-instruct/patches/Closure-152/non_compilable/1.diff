diff --git a/tmp/4c9b812e-255c-4a3f-b086-c0e69141c9e0_buggy.java b/tmp/8ab6cd47-bc5b-4b81-a2f1-516e79a88a3a_fixed.java
index 58a1651..0518fdd 100644
--- a/tmp/4c9b812e-255c-4a3f-b086-c0e69141c9e0_buggy.java
+++ b/tmp/8ab6cd47-bc5b-4b81-a2f1-516e79a88a3a_fixed.java
@@ -1,32 +1 @@
-  @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
-    setResolvedTypeInternal(this);
-
-    call = (ArrowType) safeResolve(call, t, scope);
-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
-
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
       typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
\ No newline at end of file
-
-    boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
-    for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-      resolvedInterfaces.add(resolvedIface);
-      changed |= (resolvedIface != iface);
-    }
-    if (changed) {
-      implementedInterfaces = resolvedInterfaces.build();
-    }
-
-    if (subTypes != null) {
-      for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
-      }
-    }
-
-    return super.resolveInternal(t, scope);
-  }
