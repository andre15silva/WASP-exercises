diff --git a/tmp/e1df69ce-a671-4811-9187-740d502373e5_buggy.java b/tmp/8ad9eada-406c-46db-a66e-6cad80095061_fixed.java
index c4b260c..b9c8a90 100644
--- a/tmp/e1df69ce-a671-4811-9187-740d502373e5_buggy.java
+++ b/tmp/8ad9eada-406c-46db-a66e-6cad80095061_fixed.java
@@ -1,51 +1,15 @@
-    // todo - this is getting gnarly. needs a rewrite.
-    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
-                        try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
-                                foundCharset = meta.attr("charset");
+    static int findSubstring(char[] str1, char[] str2) {
+        int startIndex = 0;
+        int endIndex = str1.length - str2.length;
+        while (startIndex <= endIndex) {
+            int tempIndex = startIndex;
+            while (tempIndex < str2.length && str1[tempIndex] == str2[tempIndex]) {
+                tempIndex++;
             }
-                        } catch (IllegalCharsetNameException e) {
-                            foundCharset = null;
+            if (tempIndex == str2.length) {
+                return startIndex;
             }
+            startIndex++;
         }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
-        }
-        return doc;
+        return -1;
     }
\ No newline at end of file
