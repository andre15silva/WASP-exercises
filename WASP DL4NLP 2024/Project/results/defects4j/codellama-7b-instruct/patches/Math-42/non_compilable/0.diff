diff --git a/tmp/e7d718c4-6737-4a2c-b854-27080402526d_buggy.java b/tmp/d0aeb6b0-a995-4b23-b091-e3f77c2b5d0b_fixed.java
index efa499e..7463168 100644
--- a/tmp/e7d718c4-6737-4a2c-b854-27080402526d_buggy.java
+++ b/tmp/d0aeb6b0-a995-4b23-b091-e3f77c2b5d0b_fixed.java
@@ -1,35 +1,44 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
               coefficients[i] = 0;
               continue;
           }
           Integer basicRow = getBasicRow(colIndex);
           // if the basic row is found to be the objective function row
           // set the coefficient to 0 -> this case handles unconstrained 
           // variables that are still part of the objective function
           if (basicRows.contains(basicRow)) {
               // if multiple variables can take a given value
               // then we choose the first and set the rest equal to 0
               coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
           } else {
               basicRows.add(basicRow);
               coefficients[i] =
                   (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                   (restrictToNonNegative ? 0 : mostNegative);
           }
       }
+
+      // Additional loop to consider the non-basic rows
+      for (int i = 0; i < coefficients.length; i++) {
+          Integer nonBasicRowIndex = getNonBasicRow(i);
+          if (nonBasicRowIndex == null) {
+              // variable is infeasible
+              coefficients[i] = 1;
+              continue;
+          }
+          int nonBasicColIndex = getNonBasicCol(nonBasicRowIndex);
+          double nonBasicCoeff = getEntry(nonBasicRowIndex, nonBasicColIndex);
+          coefficients[i] += nonBasicCoeff;
+      }
+
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
