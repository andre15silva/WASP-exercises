diff --git a/tmp/38cc075f-c8a2-43f1-896b-5420ac03d0c1_buggy.java b/tmp/24aa1edc-405b-4131-8610-b2642a854079_fixed.java
index efa499e..8b49925 100644
--- a/tmp/38cc075f-c8a2-43f1-896b-5420ac03d0c1_buggy.java
+++ b/tmp/24aa1edc-405b-4131-8610-b2642a854079_fixed.java
@@ -1,35 +1,13 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
-    protected RealPointValuePair getSolution() {
-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+@Test
+public void testMath713NegativeVariable() {
+    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);
+    ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
+    constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));
 
-      Set<Integer> basicRows = new HashSet<Integer>();
-      double[] coefficients = new double[getOriginalNumDecisionVariables()];
-      for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
-          }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
-          }
-      }
-      return new RealPointValuePair(coefficients, f.getValue(coefficients));
+    double epsilon = 1e-6;
+    SimplexSolver solver = new SimplexSolver();
+    RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
+
+    Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);
+    Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);
 }
\ No newline at end of file
