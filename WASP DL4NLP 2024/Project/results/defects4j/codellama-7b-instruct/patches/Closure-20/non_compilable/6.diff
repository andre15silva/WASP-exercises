diff --git a/tmp/9491b5a4-7ca8-4115-8256-923bc7729d88_buggy.java b/tmp/c4d2f68f-721f-4384-bb59-ebecd0914a97_fixed.java
index d4e6d48..571c55d 100644
--- a/tmp/9491b5a4-7ca8-4115-8256-923bc7729d88_buggy.java
+++ b/tmp/c4d2f68f-721f-4384-bb59-ebecd0914a97_fixed.java
@@ -1,23 +1,26 @@
+
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
       if (value != null) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
-    }
+    } else {
+      // Not a string literal, return the original node
       return n;
     }
+  }
