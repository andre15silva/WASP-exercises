diff --git a/tmp/dab2c9c1-4f79-43c2-86c9-de8dd610e49b_buggy.java b/tmp/5ca2c262-c9fb-4846-9dd4-12e2d911d40c_fixed.java
index d4e6d48..598ad3a 100644
--- a/tmp/dab2c9c1-4f79-43c2-86c9-de8dd610e49b_buggy.java
+++ b/tmp/5ca2c262-c9fb-4846-9dd4-12e2d911d40c_fixed.java
@@ -1,23 +1,20 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
+      if (!callTarget.getNext().isLiteral()) {
+        return n;
+      }
+      // Fold String(a) to '' + () on immutable literals,
       // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+      Node value = callTarget.getNext().detachFromParent();
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
+          value);
+      n.replaceWith(addition);
       reportCodeChange();
       return addition;
     }
-    }
     return n;
   }
