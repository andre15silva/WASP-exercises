diff --git a/tmp/a011a9b9-c062-4a13-86e8-1b168bf0730c_buggy.java b/tmp/e7f69d53-1623-4095-bd0f-9bd2d734171c_fixed.java
index 904dba7..e65a063 100644
--- a/tmp/a011a9b9-c062-4a13-86e8-1b168bf0730c_buggy.java
+++ b/tmp/e7f69d53-1623-4095-bd0f-9bd2d734171c_fixed.java
@@ -1,46 +1,41 @@
 private String format(JSError error, boolean warning) {
     // extract source excerpt
     SourceExcerptProvider source = getSource();
     String sourceExcerpt = source == null ? null :
         excerpt.get(
             source, error.sourceName, error.lineNumber, excerptFormatter);
 
     // formatting the message
     StringBuilder b = new StringBuilder();
     if (error.sourceName != null) {
       b.append(error.sourceName);
       if (error.lineNumber > 0) {
         b.append(':');
         b.append(error.lineNumber);
       }
       b.append(": ");
     }
 
     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
     b.append(" - ");
 
     b.append(error.description);
     b.append('\n');
     if (sourceExcerpt != null) {
       b.append(sourceExcerpt);
-      b.append('\n');
       int charno = error.getCharno();
 
-      // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
-      // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
-        for (int i = 0; i < charno; i++) {
-          char c = sourceExcerpt.charAt(i);
-          if (Character.isWhitespace(c)) {
-            b.append(c);
-          } else {
-            b.append(' ');
-          }
-        }
+      // only include as much of the excerpt as necessary
+      int end = charno >= sourceExcerpt.length() ? sourceExcerpt.length() : charno;
+      String subExcerpt = sourceExcerpt.substring(0, end);
+      b.append(subExcerpt);
+
+      // display arrow only if the line ends with a missing character
+      if (charno == sourceExcerpt.length()) {
         b.append("^\n");
+      } else {
+        b.append('\n');
       }
     }
     return b.toString();
   }
