diff --git a/tmp/8c7a7235-ca08-48f5-b812-e035a00b0c5a_buggy.java b/tmp/c29f4c7b-4006-421b-a260-8768bd2d5319_fixed.java
index f674e52..1cd3f2a 100644
--- a/tmp/8c7a7235-ca08-48f5-b812-e035a00b0c5a_buggy.java
+++ b/tmp/c29f4c7b-4006-421b-a260-8768bd2d5319_fixed.java
@@ -1,41 +1,18 @@
-    /**
-     * Test for the equality of two Complex objects.
-     * <p>
-     * If both the real and imaginary parts of two Complex numbers
-     * are exactly the same, and neither is <code>Double.NaN</code>, the two
-     * Complex objects are considered to be equal.</p>
-     * <p>
-     * All <code>NaN</code> values are considered to be equal - i.e, if either
-     * (or both) real and imaginary parts of the complex number are equal
-     * to <code>Double.NaN</code>, the complex number is equal to 
-     * <code>Complex.NaN</code>.</p>
-     *
-     * @param other Object to test for equality to this
-     * @return true if two Complex objects are equal, false if
-     *         object is null, not an instance of Complex, or
-     *         not equal to this Complex instance
-     * 
-     */
     public boolean equals(Object other) {
-        boolean ret;
-        
         if (this == other) { 
-            ret = true;
+            return true;
         } else if (other == null) {
-            ret = false;
+            return false;
         } else  {
             try {
                 Complex rhs = (Complex)other;
                 if (rhs.isNaN()) {
-                    ret = this.isNaN();
-                } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                    return this.isNaN();
                 }
+                return (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
             } catch (ClassCastException ex) {
                 // ignore exception
-                ret = false;
+                return false;
             }
         }
-      
-        return ret;
     }
\ No newline at end of file
