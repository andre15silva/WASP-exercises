diff --git a/tmp/3ddb1ed5-86b2-41bd-8ea7-f80ba6aafd88_buggy.java b/tmp/0adc65d4-d51c-4f79-8dd5-4b0744e9c933_fixed.java
index fecb896..9c0882e 100644
--- a/tmp/3ddb1ed5-86b2-41bd-8ea7-f80ba6aafd88_buggy.java
+++ b/tmp/0adc65d4-d51c-4f79-8dd5-4b0744e9c933_fixed.java
@@ -1,34 +1,47 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
+ * and leave " four" on the queue. Unbalanced openers and closers can quoted (with '' or "") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    Stack<Character> delimiters = new Stack<>();
 
     do {
         if (isEmpty()) break;
         Character c = consume();
         if (last == 0 || last != ESC) {
             if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
+                delimiters.push(c);
             }
-                else if (c.equals(close))
+            else if (c.equals(close)) {
                 depth--;
+                if (depth == 0)
+                    end = pos;
+            }
+        }
+
+        if (c.equals(ESC)) {
+            last = peek();
+            c = consume();
+            if (c.equals(delimiters.peek())) {
+                delimiters.pop();
+                last = 0;
+            }
         }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
         last = c;
     } while (depth > 0);
+
     return (end >= 0) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
