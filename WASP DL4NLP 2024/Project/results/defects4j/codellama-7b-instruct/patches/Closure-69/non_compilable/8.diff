diff --git a/tmp/d0bd1b69-659c-4bb9-8cec-b55d2eaabd64_buggy.java b/tmp/3532db06-3cd4-4368-9534-4484ee2af63c_fixed.java
index bf9c086..5afa46a 100644
--- a/tmp/d0bd1b69-659c-4bb9-8cec-b55d2eaabd64_buggy.java
+++ b/tmp/3532db06-3cd4-4368-9534-4484ee2af63c_fixed.java
@@ -1,54 +1,45 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
-  private void visitCall(NodeTraversal t, Node n) {
-    Node child = n.getFirstChild();
-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();
+  class TypeCheckTest() {
+    private NodeTraversal traversal;
+    private ErrorReporter reporter;
+    private Compiler compiler;
 
-    if (!childType.canBeCalled()) {
-      report(t, n, NOT_CALLABLE, childType.toString());
-      ensureTyped(t, n);
-      return;
+    @Before
+    public void setUp() throws IOException {
+      compiler = new Compiler();
+      compiler.initOptions(new CompilerOptions());
+      compiler.getOptions().setWarningLevel(DiagnosticGroups.LINT_CHECKS, CheckLevel.WARNING, true);
+      compiler.getOptions().setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING, true);
+      compiler.getOptions().setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.ERROR, true);
+      compiler.setDevMode(true);
+      traversal = new NodeTraversal(compiler, new TypeCheckingCallback(compiler));
+      reporter = new ErrorReporter(compiler, compiler.getErrorManager());
     }
 
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
-    if (childType instanceof FunctionType) {
-      FunctionType functionType = (FunctionType) childType;
-
-      boolean isExtern = false;
-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
-      if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+    @Test
+    public void testThisTypeOfFunction2() throws Exception {
+      testTypes("/** @constructor */ function F() {}" +
+          "/** @type {function(this:F)} */ function f() {}" +
+          "f();");
     }
 
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
-          (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
+    public void testTypes(String source) throws Exception {
+      compiler.setAcceptedLanguage(LanguageMode.ECMASCRIPT_2018);
+      compiler.compile(
+          SourceFile.fromCode("testcode", source),
+          new CompilerOptions());
+      reporter.removeAll();
     }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
-      visitParameterList(t, n, functionType);
-      ensureTyped(t, n, functionType.getReturnType());
-    } else {
-      ensureTyped(t, n);
+    class TypeCheckingCallback extends NodeTraversal.AbstractPostOrderCallback {
+      TypeCheckingCallback(Compiler compiler) {
+        traversal = new NodeTraversal(compiler, this);
       }
 
-    // TODO: Add something to check for calls of RegExp objects, which is not
-    // supported by IE.  Either say something about the return type or warn
-    // about the non-portability of the call or both.
+      @Override
+      public void visit(NodeTraversal t, Node n, Node parent) {
+        if (n.isCall()) {
+          visitCall(t, n);
+        }
+      }
+    }
   }
\ No newline at end of file
