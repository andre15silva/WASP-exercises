diff --git a/tmp/6531a46a-97e6-42b9-91e2-ac24e19e0843_buggy.java b/tmp/8aecdce5-07d6-4d11-850b-cabb87dd52b7_fixed.java
index 2ff27ef..b117da3 100644
--- a/tmp/6531a46a-97e6-42b9-91e2-ac24e19e0843_buggy.java
+++ b/tmp/8aecdce5-07d6-4d11-850b-cabb87dd52b7_fixed.java
@@ -1,97 +1,57 @@
-  /**
-   * Computes the GEN and KILL set.
-   *
-   * @param n Root node.
-   * @param gen Local variables that are live because of the instruction at
-   *        {@code n} will be added to this set.
-   * @param kill Local variables that are killed because of the instruction at
-   *        {@code n} will be added to this set.
-   * @param conditional {@code true} if any assignments encountered are
-   *        conditionally executed. These assignments might not kill a variable.
-   */
-  private void computeGenKill(Node n, BitSet gen, BitSet kill,
-      boolean conditional) {
-
+  private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {
     switch (n.getType()) {
     case Token.SCRIPT:
     case Token.BLOCK:
     case Token.FUNCTION:
       return;
   
-      case Token.WHILE:
-      case Token.DO:
-      case Token.IF:
-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-            conditional);
-        return;
-
     case Token.FOR:
-        if (!NodeUtil.isForIn(n)) {
-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-              conditional);
-        } else {
-          // for(x in y) {...}
+      if (NodeUtil.isForIn(n)) {
         Node lhs = n.getFirstChild();
         Node rhs = lhs.getNext();
-          if (NodeUtil.isVar(lhs)) {
-            // for(var x in y) {...}
-            lhs = lhs.getLastChild();
+        if (!NodeUtil.isVar(lhs)) {
+          addToSet(lhs, gen);
+          addToSet(lhs, kill);
         }
-            addToSetIfLocal(lhs, kill);
-            addToSetIfLocal(lhs, gen);
         computeGenKill(rhs, gen, kill, conditional);
-        }
-        return;
-
-      case Token.VAR:
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (c.hasChildren()) {
-            computeGenKill(c.getFirstChild(), gen, kill, conditional);
-            if (!conditional) {
-              addToSetIfLocal(c, kill);
-            }
-          }
+      } else {
+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);
       }
       return;
   
     case Token.AND:
     case Token.OR:
       computeGenKill(n.getFirstChild(), gen, kill, conditional);
       // May short circuit.
       computeGenKill(n.getLastChild(), gen, kill, true);
       return;
   
     case Token.HOOK:
       computeGenKill(n.getFirstChild(), gen, kill, conditional);
       // Assume both sides are conditional.
       computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
       computeGenKill(n.getLastChild(), gen, kill, true);
       return;
   
     case Token.NAME:
       if (isArgumentsName(n)) {
         markAllParametersEscaped();
       } else {
         addToSetIfLocal(n, gen);
       }
       return;
   
     default:
       if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
         Node lhs = n.getFirstChild();
-          if (!conditional) {
-            addToSetIfLocal(lhs, kill);
-          }
-          if (!NodeUtil.isAssign(n)) {
-            // assignments such as a += 1 reads a.
         addToSetIfLocal(lhs, gen);
-          }
+        addToSetIfLocal(lhs, kill);
         computeGenKill(lhs.getNext(), gen, kill, conditional);
       } else {
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           computeGenKill(c, gen, kill, conditional);
         }
       }
       return;
     }
   }
