diff --git a/tmp/b78416a3-1cf4-4770-bd6d-cd134018330c_buggy.java b/tmp/13f03887-479a-4a98-8b4f-36063a932abb_fixed.java
index 72a422c..e84d050 100644
--- a/tmp/b78416a3-1cf4-4770-bd6d-cd134018330c_buggy.java
+++ b/tmp/13f03887-479a-4a98-8b4f-36063a932abb_fixed.java
@@ -1,51 +1,41 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        if(index + 2 > seqEnd) {
+            return 0;
+        }
+        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
+            if(input.charAt(start) == 'x' || input.charAt(start) == 'X') {
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                start++;
             }
-
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while(input.charAt(end) != ';') {
                 end++;
+                if(end > seqEnd) {
+                    return 0;
                 }
-
-            int entityValue;
+            }
+            end++; // Consume the final ;
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
-
+                int entityValue = isHex ? Integer.parseInt(input.subSequence(start, end).toString(), 16) : Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 if(entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            } catch (NumberFormatException nfe) {
+                System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "]["+ end +"]");
+                return 0;
+            }
+            return end - index + 1;
         }
         return 0;
     }
