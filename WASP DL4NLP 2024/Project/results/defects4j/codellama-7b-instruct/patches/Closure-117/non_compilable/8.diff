diff --git a/tmp/3b0deb46-41e4-4b1e-a883-26ce34d38c80_buggy.java b/tmp/93e077a1-8af4-4e42-a1c6-0ff9c3b9f190_fixed.java
index 39981f0..3fc5f25 100644
--- a/tmp/3b0deb46-41e4-4b1e-a883-26ce34d38c80_buggy.java
+++ b/tmp/93e077a1-8af4-4e42-a1c6-0ff9c3b9f190_fixed.java
@@ -1,65 +1,19 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
-  String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
-    if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
-        String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
-      }
-    }
-
-    JSType type = getJSType(n);
-    if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
-      }
-    }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
-    }
-    String qualifiedName = n.getQualifiedName();
-    if (qualifiedName != null) {
-      return qualifiedName;
-    } else if (type.isFunctionType()) {
-      // Don't show complex function names.
-      return "function";
-    } else {
-      return type.toString();
-    }
-  }
+  testTypes(
+      "/**\n" +
+      " * @constructor\n" +
+      " */\n" +
+      "function C2() {}\n" +
+      "\n" +
+      "/**\n" +
+      " * @constructor\n" +
+      " */\n" +
+      "function C3(c2) {\n" +
+      "  /**\n" +
+      "   * @type {C2} \n" +
+      "   * @private\n" +
+      "   */\n" +
+      "  this.c2_;\n" +
+      "\n" +
+      "  var x = this.c2_.prop;\n" +
+      "}",
+      "Property prop never defined on C2");
