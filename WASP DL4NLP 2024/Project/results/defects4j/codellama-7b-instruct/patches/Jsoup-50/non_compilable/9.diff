diff --git a/tmp/82cf14d6-9b12-4ec5-b4f6-daa405171820_buggy.java b/tmp/9a0751c4-cb39-42e9-93fa-cf1ef6e7dc1b_fixed.java
index 25ca093..63b1192 100644
--- a/tmp/82cf14d6-9b12-4ec5-b4f6-daa405171820_buggy.java
+++ b/tmp/9a0751c4-cb39-42e9-93fa-cf1ef6e7dc1b_fixed.java
@@ -1,52 +1,21 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
-        Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset = null;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                }
-                if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
-                            foundCharset = meta.attr("charset");
-                        }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
-                    }
+    // first, check for a BOM to determine the correct encoding
+    if (detectBOM(byteData)) {
+        charsetName = "UTF-8";
+        byteData = adjustDataBasedOnBOM(byteData);
     }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+    // next, check for a character set in the meta tag
+    List<String> metaTags = getMetaTags(baseUri); // get all meta tags in the page
+    String charsetFromMetaTag = getCharsetFromMetaTags(metaTags); // get the charset from the meta tag
+    if (charsetFromMetaTag != null) {
+        charsetName = charsetFromMetaTag;
     }
+
+    // finally, parse the data using the charset
+    Document doc = parser.parseInput(charsetName, byteData, baseUri);
+
     return doc;
+
 }
\ No newline at end of file
