diff --git a/tmp/7d9f59ad-390c-4dfc-b70f-799688d7470b_buggy.java b/tmp/eee2842d-d62d-4d91-a30f-8cdb2dd2dbeb_fixed.java
index d57736b..5c4c930 100644
--- a/tmp/7d9f59ad-390c-4dfc-b70f-799688d7470b_buggy.java
+++ b/tmp/eee2842d-d62d-4d91-a30f-8cdb2dd2dbeb_fixed.java
@@ -1,39 +1,10 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
-  private void inferPropertyTypesToMatchConstraint(
-      JSType type, JSType constraint) {
-    if (type == null || constraint == null) {
-      return;
-    }
-
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
-        for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
-            objType.defineInferredProperty(prop, typeToInfer, null);
-          }
-        }
-      }
-    }
+function f(a) {
+  var results;
+  if (a) {
+    results = {};
+    results.prop1 = {a: 3};
+  } else {
+    results = {prop2: 3};
+  }
+  return results;
 }
\ No newline at end of file
