diff --git a/tmp/38778692-f294-4dc2-93d6-da2524d117ac_buggy.java b/tmp/4b18ac0b-8233-472c-a908-1afcb4a8f2b9_fixed.java
index 3652aad..33ef5b1 100644
--- a/tmp/38778692-f294-4dc2-93d6-da2524d117ac_buggy.java
+++ b/tmp/4b18ac0b-8233-472c-a908-1afcb4a8f2b9_fixed.java
@@ -1,86 +1,81 @@
      /**
      * Defines a typed variable. The defining node will be annotated with the
      * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
      * inferred.
      *
      * Slots may be any variable or any qualified name in the global scope.
      *
      * @param n the defining NAME or GETPROP node.
      * @param parent the {@code n}'s parent.
      * @param type the variable's type. It may be {@code null} if
      *     {@code inferred} is {@code true}.
      */
     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
-      Preconditions.checkArgument(inferred || type != null);
 
       // Only allow declarations of NAMEs and qualfied names.
       boolean shouldDeclareOnGlobalThis = false;
-      if (n.getType() == Token.NAME) {
-        Preconditions.checkArgument(
-            parent.getType() == Token.FUNCTION ||
-            parent.getType() == Token.VAR ||
-            parent.getType() == Token.LP ||
-            parent.getType() == Token.CATCH);
+
+      if(null==parent || null == n) {
+        return;
+      } else if(parent.getType() == Token.NAME || parent.getType() == Token.GETPROP) // If n is a property, then we should really declare it in the
+        scope where the root object appears. This helps out people
+        who declare "global" names in an anonymous namespace.
+      {
+        if(n.getType() == Token.NAME && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION))
+        {
+          Node getParent = parent.getParent();
+          Preconditions.checkArgument(getParent.getType() == Token.NAME || getParent.getType() == Token.FUNCTION ||
+        getParent.getType() == Token.EXPR_RESULT);
           shouldDeclareOnGlobalThis = scope.isGlobal() &&
                                        (parent.getType() == Token.VAR ||
                                        parent.getType() == Token.FUNCTION);
-      } else {
-        Preconditions.checkArgument(
-            n.getType() == Token.GETPROP &&
-            (parent.getType() == Token.ASSIGN ||
-             parent.getType() == Token.EXPR_RESULT));
+        }  
+      }
+      
+      if (scope != null && scope.isDeclared(variableName, false)) {
+        compiler.report(JSError.make(n, VariableReferenceCheck.UNDECLARED_VARIABLE, variableName));
       }
       String variableName = n.getQualifiedName();
       Preconditions.checkArgument(!variableName.isEmpty());
 
       // If n is a property, then we should really declare it in the
       // scope where the root object appears. This helps out people
       // who declare "global" names in an anonymous namespace.
       Scope scopeToDeclareIn = scope;
 
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
-
       // declared in closest scope?
-      if (scopeToDeclareIn.isDeclared(variableName, false)) {
-        Var oldVar = scopeToDeclareIn.getVar(variableName);
+      if (scoppeToDeclareIn.isDeclared(variableName, false)) {
+        Var oldVar = scoppeToDeclareIn.getVar(variableName);
         validator.expectUndeclaredVariable(
             sourceName, n, parent, oldVar, variableName, type);
       } else {
-        if (!inferred) {
-          setDeferredType(n, type);
-        }
-        CompilerInput input = compiler.getInput(sourceName);
-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);
-
             if (shouldDeclareOnGlobalThis) {
               ObjectType globalThis =
                   typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
       boolean isExtern = input.isExtern();
       if (inferred) {
         globalThis.defineInferredProperty(variableName,
             type == null ?
                 getNativeType(JSTypeNative.NO_TYPE) :
                 type,
             isExtern);
       } else {
         globalThis.defineDeclaredProperty(variableName, type, isExtern);
       }
     }
 
       // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
       if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
         FunctionType fnType = (FunctionType) type;
         if (fnType.isConstructor() || fnType.isInterface()) {
           FunctionType superClassCtor = fnType.getSuperClassConstructor();
           scopeToDeclareIn.declare(variableName + ".prototype", n,
               fnType.getPrototype(), compiler.getInput(sourceName),
               /* declared iff there's an explicit supertype */
               superClassCtor == null ||
               superClassCtor.getInstanceType().equals(
                   getNativeType(OBJECT_TYPE)));
         }
       }
     }
   }
\ No newline at end of file
