diff --git a/tmp/9e129829-7a6f-4320-a7ec-c3c1f76922ca_buggy.java b/tmp/4042cbf0-edf8-4aaa-be3a-9b98a5a529ff_fixed.java
index f47d784..973c66f 100644
--- a/tmp/9e129829-7a6f-4320-a7ec-c3c1f76922ca_buggy.java
+++ b/tmp/4042cbf0-edf8-4aaa-be3a-9b98a5a529ff_fixed.java
@@ -1,12 +1,41 @@
+
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
+
+  private void test(String js, String expected) {
+    Compiler compiler = new Compiler();
+    CompilerInput input = new CompilerInput(SOURCE_MAP);
+    compiler.compile(
+        Compiler.newSourceFile(js, SourceOrigin.unknown()),
+        compiler.getOptions());
+    Node root = compiler.getAstRoot(SOURCE_MAP);
+    PrintPrettyPrinter pp = new PrintPrettyPrinter(compiler.getAstRoot(SOURCE_MAP));
+    System.out.println("actual: " + pp.printToString(root));
+    assertEquals(expected, pp.printToString(root));
+  }
+
+  public void testIssue115() {
+    CompilerRunner.FLAG_compilation_level.setForTest(
+        CompilationLevel.SIMPLE_OPTIMIZATIONS);
+    CompilerRunner.FLAG_warning_level.setForTest(
+        WarningLevel.VERBOSE);
+    test("function f() { " +
+         "  var arguments = Array.prototype.slice.call(arguments, 0);" +
+         "  return arguments[0]; " +
+         "}",
+         "function f() { " +
+         "  arguments = Array.prototype.slice.call(arguments, 0);" +
+         "  return arguments[0]; " +
+         "}");
+  }
+
