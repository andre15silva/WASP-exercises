diff --git a/tmp/ce9b5aaa-ccf9-4cbc-95f7-8f0ff672bdc4_buggy.java b/tmp/c21da5b7-127d-4034-ab07-a66ac8b1d29b_fixed.java
index f47d784..7c28cc1 100644
--- a/tmp/ce9b5aaa-ccf9-4cbc-95f7-8f0ff672bdc4_buggy.java
+++ b/tmp/c21da5b7-127d-4034-ab07-a66ac8b1d29b_fixed.java
@@ -1,12 +1,37 @@
+  class MakeDeclaredNamesUnique implements NodeTraversal.Callback {
+    private Set<String> assignedNames = new HashSet<>();
+
     @Override
-  public void process(Node externs, Node root) {
-    NodeTraversal.traverse(compiler, root, this);
-    if (MAKE_LOCAL_NAMES_UNIQUE) {
-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
-      NodeTraversal t = new NodeTraversal(compiler, renamer);
-      t.traverseRoots(externs, root);
-    }
-    removeDuplicateDeclarations(root);
-    new PropogateConstantAnnotations(compiler, assertOnChange)
-        .process(externs, root);
+    public void visit(NodeTraversal t, Node node, Node parent) {
+      if (!shouldRename(node, parent)) {
+        return;
+      }
+
+      String name = getValidName(node);
+      assignedNames.add(name);
+      node.setString(name);
+    }
+
+    private boolean shouldRename(Node node, Node parent) {
+      // Ignore `arguments` variable
+      if (NodeUtil.isName(node, "arguments") && parent.isFunction()) {
+        return false;
+      }
+
+      // Otherwise, check if the name is already assigned
+      String name = node.getString();
+      return !assignedNames.contains(name);
+    }
+
+    private String getValidName(Node node) {
+      String name = "_" + node.getNodeType().toString();
+      if (assignedNames.contains(name)) {
+        int i = 1;
+        while (assignedNames.contains(name + i)) {
+          i++;
+        }
+        name = name + i;
+      }
+      return name;
+    }
   }
\ No newline at end of file
