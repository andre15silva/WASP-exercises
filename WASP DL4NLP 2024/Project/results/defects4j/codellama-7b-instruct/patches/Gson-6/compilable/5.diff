diff --git a/tmp/71583410-e8c6-4cec-bc5c-9328801049b8_buggy.java b/tmp/77ac0efb-b1bc-4600-9d22-b6e8d5e818de_fixed.java
index 1c53d31..979b42d 100644
--- a/tmp/71583410-e8c6-4cec-bc5c-9328801049b8_buggy.java
+++ b/tmp/77ac0efb-b1bc-4600-9d22-b6e8d5e818de_fixed.java
@@ -1,20 +1,20 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
-  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
-      TypeToken<?> fieldType, JsonAdapter annotation) {
+  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor,
+      Gson gson, TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
       typeAdapter = typeAdapter.nullSafe();
     return typeAdapter;
   }
