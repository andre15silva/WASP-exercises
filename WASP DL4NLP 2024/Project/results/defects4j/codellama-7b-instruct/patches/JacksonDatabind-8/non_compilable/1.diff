diff --git a/tmp/fb177a69-0e9e-4236-9c6d-2b780b803394_buggy.java b/tmp/3a5051b6-8231-497d-b302-f2935f7f1713_fixed.java
index c9da1b7..1fb6469 100644
--- a/tmp/fb177a69-0e9e-4236-9c6d-2b780b803394_buggy.java
+++ b/tmp/3a5051b6-8231-497d-b302-f2935f7f1713_fixed.java
@@ -1,33 +1,31 @@
+
+    // [databind#667]: verify that we don't have conflicting set of creators
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
 
+                    // both explicitly annotated, choose most specific one
+                    if ((_explicitCreators & mask) != 0
+                            && newOne.getParameterClasses()[0] != oldOne.getParameterClasses()[0]) {
                         throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                                 +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                    }
+
+                    _creators[typeIndex] = _fixAccess(newOne);
+                    return;
+                }
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
