diff --git a/tmp/10ff3c8c-20e5-4e21-bab9-a5f940034d20_buggy.java b/tmp/808e8949-cfea-4ca5-86ea-a95199338037_fixed.java
index a3709ee..16dbb57 100644
--- a/tmp/10ff3c8c-20e5-4e21-bab9-a5f940034d20_buggy.java
+++ b/tmp/808e8949-cfea-4ca5-86ea-a95199338037_fixed.java
@@ -1,71 +1,99 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
-  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
+  private static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
-      case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
-      case Token.COMMA:
-        return evaluatesToLocalValue(value.getLastChild(), locals);
-      case Token.AND:
-      case Token.OR:
-        return evaluatesToLocalValue(value.getFirstChild(), locals)
-           && evaluatesToLocalValue(value.getLastChild(), locals);
-      case Token.HOOK:
-        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
-           && evaluatesToLocalValue(value.getLastChild(), locals);
-      case Token.INC:
-      case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
-        } else {
+      case Token.LITERAL:
         return true;
-        }
       case Token.THIS:
         return locals.apply(value);
-      case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
-      case Token.GETELEM:
-      case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
-      case Token.CALL:
-        return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
-      case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
-      case Token.FUNCTION:
-      case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Handle array and object literals
+        for (Node child : value.children()) {
+          if (!evaluatesToLocalValue(child, locals)) {
+            return false;
+          }
+        }
+        return true;
+      case Token.ASSIGN: {
+        // Handle assign operations
+        if (NodeUtil.isImmutableValue(value.getFirstChild())) {
+          return evaluatesToLocalValue(value.getFirstChild(), locals);
+        } else {
+          return locals.apply(value);
+        }
+      }
+      case Token.COMMA: {
+        // Handle "," operations
+        return evaluatesToLocalValue(value.getLastChild(), locals);
+      }
+      case Token.AND:
+      case Token.OR: {
+        // Handle "&&" and "||" operations
+        return evaluatesToLocalValue(value.getFirstChild(), locals) &&
+            evaluatesToLocalValue(value.getLastChild(), locals);
+      }
+      case Token.HOOK: {
+        // Handle "?" operation
+        return evaluatesToLocalValue(value.getFirstChild(), locals) &&
+            evaluatesToLocalValue(value.getLastChild(), locals);
+      }
+      case Token.IN: {
+        // Handle "in" operation
+        return evaluatesToLocalValue(value.getFirstChild(), locals);
+      }
+      case Token.NAME: {
+        // Handle "name" operation
+        if (value.isImmutable()) {
           return true;
-      case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+        } else {
+          return locals.apply(value);
+        }
+      }
+      case Token.CALL: {
+        // Handle call expression
+        if (callHasLocalResult(value)) {
           return true;
-      default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+        } else {
+          return evaluatesToLocalValue(value.getSecondChild(), locals);
+        }
+      }
+      case Token.FUNCTION: {
+        // Handle function literal
+        return true;
+      }
+      case Token.REGEXP: {
+        // Handle regex literal
+        return true;
+      }
+      case Token.INCRDECR: {
+        // Handle increment and decrement operations
+        return true;
+      }
+      case Token.GETELEM:
+      case Token.GETPROP: {
+        // Handle property access operations
+        return true;
+      }
+      case Token.STRING:
+      case Token.NUMBER:
+      case Token.NULL:
+      case Token.TRUE:
+      case Token.FALSE: {
+        // Handle literal values
+        return true;
+      }
+      default: {
+        /*
+         * Other cases force a value of local scope:
+         *  x = '' + g
+         *  x -= g
+         *  i++, i--
+         *      where g is a global variable
+         *  x = !y, x = ~y, x = y + z, ...
+         *  'a' in x
+         *  typeof x
+         *  x instanceof y
+         */
         return true;
       }
-
-        throw new IllegalStateException(
-            "Unexpected expression node" + value +
-            "\n parent:" + value.getParent());
     }
   }
