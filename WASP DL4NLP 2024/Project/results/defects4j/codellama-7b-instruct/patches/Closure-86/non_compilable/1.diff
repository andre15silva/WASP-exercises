diff --git a/tmp/4e4693c2-c45c-4826-81b4-8491b91eeda2_buggy.java b/tmp/a7ea12c6-c84d-45ca-adb6-d7e186b4f143_fixed.java
index a3709ee..861a501 100644
--- a/tmp/4e4693c2-c45c-4826-81b4-8491b91eeda2_buggy.java
+++ b/tmp/a7ea12c6-c84d-45ca-adb6-d7e186b4f143_fixed.java
@@ -1,71 +1,61 @@
-  /**
-   * @param locals A predicate to apply to unknown local values.
-   * @return Whether the node is known to be a value that is not a reference
-   *     outside the expression scope.
-   */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
         case Token.ASSIGN:
             // A result that is aliased by a non-local name, is the effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
             return NodeUtil.isImmutableValue(value.getLastChild())
                     || (locals.apply(value)
                         && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
         case Token.OR:
             return evaluatesToLocalValue(value.getFirstChild(), locals)
                     && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.HOOK:
             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
                     && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.INC:
         case Token.DEC:
             if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
             } else {
                return true;
             }
         case Token.THIS:
             return locals.apply(value);
         case Token.NAME:
             return isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
         case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+            return isImmutableValue(value) || locals.apply(value);
         case Token.CALL:
             return callHasLocalResult(value)
                     || isToStringMethodCall(value)
                     || locals.apply(value);
         case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+            return locals.apply(value);
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
             return true;
         case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
-        return true;
+            return locals.apply(value);
         default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                 return true;
             }
+            if (isObjectPropertyAssign(value)) {
+                return evaluatesToLocalValue(value.getFirstChild(), locals);
+            }
+            if (isObjectPropertyAccess(value)) {
+                return locals.apply(value);
+            }
 
             throw new IllegalStateException(
-            "Unexpected expression node" + value +
+                "Unexpected expression node: " + value +
                 "\n parent:" + value.getParent());
     }
 }
\ No newline at end of file
