diff --git a/tmp/97a98b91-0f79-472b-b080-156abf312fdd_buggy.java b/tmp/f325d951-2361-4011-a553-7d0fb006d084_fixed.java
index 21f64c6..3e1404f 100644
--- a/tmp/97a98b91-0f79-472b-b080-156abf312fdd_buggy.java
+++ b/tmp/f325d951-2361-4011-a553-7d0fb006d084_fixed.java
@@ -1,23 +1,20 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+        for (int offset = 0; offset < input.length; offset++) {
+            char c = input[offset];
+            if (Character.isSurrogatePair(c, input[offset + 1])) {
+                offset++;
+            }
             // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            if (c != seq.charAt(0))
+                while(++offset < input.length && c != seq.charAt(offset));
             int i = offset + 1;
             int last = i + seq.length()-1;
-            if (offset < length) {
+            if (offset < input.length) {
                 for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
