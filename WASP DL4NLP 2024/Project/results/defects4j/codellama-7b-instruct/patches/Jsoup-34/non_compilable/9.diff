diff --git a/tmp/20c96c26-d72b-4a49-958f-9f713145b8c5_buggy.java b/tmp/ab4e82a3-a196-4a97-9a3a-78aefc9936e1_fixed.java
index 21f64c6..ffa9986 100644
--- a/tmp/20c96c26-d72b-4a49-958f-9f713145b8c5_buggy.java
+++ b/tmp/ab4e82a3-a196-4a97-9a3a-78aefc9936e1_fixed.java
@@ -1,23 +1,27 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+        if (seq == null) {
+            return -1;
+        }
+
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
+            }
+
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+
+            if (i < last) {
+                for (do {
+                if (seq.charAt(j) == input[i]) i++; j++;
+                } while (i < last && j < seq.length());
+
+                if (i == last) {
                     return offset - pos;
                 }
             }
+        }
+
         return -1;
     }
