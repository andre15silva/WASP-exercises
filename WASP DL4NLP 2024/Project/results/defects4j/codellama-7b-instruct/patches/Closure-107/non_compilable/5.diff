diff --git a/tmp/5eccec8a-7461-4360-8f20-05e1b8babce6_buggy.java b/tmp/bf7d826a-4664-4973-bfd1-24fed475bf68_fixed.java
index fa9dfcc..e7000d8 100644
--- a/tmp/5eccec8a-7461-4360-8f20-05e1b8babce6_buggy.java
+++ b/tmp/bf7d826a-4664-4973-bfd1-24fed475bf68_fixed.java
@@ -1,61 +1,60 @@
-  @Override
-  protected CompilerOptions createOptions() {
+    protected CompilerOptions createOptions(List<String> args) {
+        // Parse flags
         CompilerOptions options = new CompilerOptions();
+        OptionParsingFlags flags = new OptionParsingFlags();
+        flags.parse(args, options);
+
+        // Set compiation level
+        CompilationLevel level = flags.compilationLevel;
+        level.setOptionsForCompilationLevel(options);
+
+        // Set extra annotation names
+        options.setExtraAnnotationNames(flags.extraAnnotationName);
+
+        // Set coding convention
         if (flags.processJqueryPrimitives) {
             options.setCodingConvention(new JqueryCodingConvention());
         } else {
             options.setCodingConvention(new ClosureCodingConvention());
         }
 
-    options.setExtraAnnotationNames(flags.extraAnnotationName);
-
-    CompilationLevel level = flags.compilationLevel;
-    level.setOptionsForCompilationLevel(options);
-
-    if (flags.debug) {
-      level.setDebugOptionsForCompilationLevel(options);
-    }
-
-    if (flags.useTypesForOptimization) {
-      level.setTypeBasedOptimizationOptions(options);
-    }
-
-    if (flags.generateExports) {
-      options.setGenerateExports(flags.generateExports);
-    }
-
+        // Set warning and formatting options
         WarningLevel wLevel = flags.warningLevel;
         wLevel.setOptionsForWarningLevel(options);
         for (FormattingOption formattingOption : flags.formatting) {
             formattingOption.applyToOptions(options);
         }
 
-    options.closurePass = flags.processClosurePrimitives;
+        // Set generate exports option
+        if (flags.generateExports) {
+            options.setGenerateExports(flags.generateExports);
+        }
 
+        // Set debug option
+        if (flags.debug) {
+            level.setDebugOptionsForCompilationLevel(options);
+        }
+
+        // Set type-based optimization option
+        if (flags.useTypesForOptimization) {
+            level.setTypeBasedOptimizationOptions(options);
+        }
+
+        // Override angularPass and jqueryPass
+        options.angularPass = flags.angularPass;
         options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
                 flags.processJqueryPrimitives;
 
-    options.angularPass = flags.angularPass;
-
+        // Override messageBundle if translations file is specified
         if (!flags.translationsFile.isEmpty()) {
             try {
                 options.messageBundle = new XtbMessageBundle(
                         new FileInputStream(flags.translationsFile),
                         flags.translationsProject);
             } catch (IOException e) {
                 throw new RuntimeException("Reading XTB file", e);
             }
-    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a
-      // translations file, they might reasonably try to write their own
-      // implementation of goog.getMsg that makes the substitution at
-      // run-time.
-      //
-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
-      // so we might as well inline it. But shut off the i18n warnings,
-      // because the user didn't really ask for i18n.
-      options.messageBundle = new EmptyMessageBundle();
         }
 
         return options;
     }
\ No newline at end of file
