diff --git a/tmp/e3788ad0-0afa-4b95-8872-b1ef86240992_buggy.java b/tmp/1805dbeb-61d4-4b66-826b-1b26ce056720_fixed.java
index b36c3f0..e86e571 100644
--- a/tmp/e3788ad0-0afa-4b95-8872-b1ef86240992_buggy.java
+++ b/tmp/1805dbeb-61d4-4b66-826b-1b26ce056720_fixed.java
@@ -1,58 +1,3 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
-    if (callNode.getType() != Token.CALL) {
-      throw new IllegalStateException(
-          "Expected CALL node, got " + Token.name(callNode.getType()));
-    }
-
-    if (callNode.isNoSideEffectsCall()) {
-      return false;
-    }
-
-    Node nameNode = callNode.getFirstChild();
-
-    // Built-in functions with no side effects.
-    if (nameNode.getType() == Token.NAME) {
-      String name = nameNode.getString();
-      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
-        return false;
-      }
-    } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
-        return false;
-      }
-
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
-      }
-
-      // Functions in the "Math" namespace have no side effects.
-
-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
-          return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
-          return false;
-        }
-      }
-    }
-
-    return true;
+public void testCall1() {
+  test("Math.sin(0);", "");
 }
