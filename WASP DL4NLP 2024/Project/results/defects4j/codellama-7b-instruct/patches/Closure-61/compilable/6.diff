diff --git a/tmp/ca244a0e-04bb-4ca0-8639-70c43e46baea_buggy.java b/tmp/41173f5a-d44c-453b-9a70-385d6203f849_fixed.java
index b36c3f0..4ef4aa6 100644
--- a/tmp/ca244a0e-04bb-4ca0-8639-70c43e46baea_buggy.java
+++ b/tmp/41173f5a-d44c-453b-9a70-385d6203f849_fixed.java
@@ -1,58 +1,44 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
+static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
-    // Built-in functions with no side effects.
-    if (nameNode.getType() == Token.NAME) {
+  switch (nameNode.getType()) {
+    case Token.NAME:
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
-    } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+      break;
+    case Token.GETPROP:
+      nameNode = nameNode.getLastChild();
+      if (nameNode.getType() == Token.STRING && BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())) {
         return false;
       }
-
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
+      break;
   }
 
-      // Functions in the "Math" namespace have no side effects.
+  if (nameNode.getType() == Token.NAME) {
+    return true;
+  }
 
   if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+    if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
       return false;
     } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+        && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
       Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+      if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP))
         return false;
     }
   }
-    }
 
   return true;
 }
\ No newline at end of file
