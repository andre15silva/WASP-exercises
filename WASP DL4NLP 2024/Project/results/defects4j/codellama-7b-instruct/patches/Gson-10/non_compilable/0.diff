diff --git a/tmp/86b5d59a-4ec1-4099-b9d6-dd25c3204701_buggy.java b/tmp/c850704f-546a-44a0-963c-c69a917dc542_fixed.java
index 9d42346..0b6aab0 100644
--- a/tmp/86b5d59a-4ec1-4099-b9d6-dd25c3204701_buggy.java
+++ b/tmp/c850704f-546a-44a0-963c-c69a917dc542_fixed.java
@@ -1,37 +1,68 @@
-  private ReflectiveTypeAdapterFactory.BoundField createBoundField(
-      final Gson context, final Field field, final String name,
-      final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
+  private static ReflectiveTypeAdapterFactory.BoundField createBoundField(
+      final Gson context, final Field field, final String name, TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
+    if (isPrimitive) {
+      return primtiveBoundField(field, name, serialize, deserialize);
+    } else {
+      return referenceBoundField(field, name, serialize, deserialize);
+    }
+  }
+
+  private static ReflectiveTypeAdapterFactory.BoundField primitiveBoundField(
+      Field field, String name, boolean serialize, boolean deserialize) {
+    TypeAdapter<?> typeAdapter =
+        new TypeAdapterRuntimeTypeWrapper(context, context.getAdapter(TypeToken.get(field.getType())), field.getType());
+    return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
+      @Override
+      void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException {
+        Object fieldValue = field.get(value);
+        typeAdapter.write(writer, fieldValue);
+      }
+      @Override
+      void read(JsonReader reader, Object value) throws IOException, IllegalAccessException {
+        Object fieldValue = typeAdapter.read(reader);
+        if (fieldValue != null || !Primitives.isPrimitive(field.getType())) {
+          field.set(value, fieldValue);
+        }
+      }
+      @Override
+      public boolean writeField(Object value) throws IOException, IllegalAccessException {
+        if (!serialized) return false;
+        Object fieldValue = field.get(value);
+        return fieldValue != value; // avoid recursion for example for Throwable.cause
+      }
+    };
+  }
+
+  private static ReflectiveTypeAdapterFactory.BoundField referenceBoundField(
+      Field field, String name, boolean serialize, boolean deserialize) {
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
-
-    final TypeAdapter<?> typeAdapter = mapped;
+    if (mapped == null) {
+      mapped = context.getAdapter(TypeToken.get(field.getType()));
+    }
+    TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
-      @Override void write(JsonWriter writer, Object value)
-          throws IOException, IllegalAccessException {
+      @Override
+      void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
+        typeAdapter.write(writer, fieldValue);
       }
-      @Override void read(JsonReader reader, Object value)
-          throws IOException, IllegalAccessException {
+      @Override
+      void read(JsonReader reader, Object value) throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
+        if (fieldValue != null || !Primitives.isPrimitive(field.getType())) {
           field.set(value, fieldValue);
         }
       }
-      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
+      @Override
+      public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
