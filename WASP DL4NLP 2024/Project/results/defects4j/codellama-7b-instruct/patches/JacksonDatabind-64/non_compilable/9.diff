diff --git a/tmp/8616285a-1376-4742-88db-bea6af6c99c7_buggy.java b/tmp/a6ae5a40-f967-405b-8928-1b3d6d2df4c0_fixed.java
index 48fe2c7..f74fee7 100644
--- a/tmp/8616285a-1376-4742-88db-bea6af6c99c7_buggy.java
+++ b/tmp/a6ae5a40-f967-405b-8928-1b3d6d2df4c0_fixed.java
@@ -1,133 +1,115 @@
 /**
      * @param contentTypeSer Optional explicit type information serializer
      *    to use for contained values (only used for properties that are
      *    of container type)
      */
     @SuppressWarnings("deprecation")
     protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,
             TypeSerializer typeSer, TypeSerializer contentTypeSer,
             AnnotatedMember am, boolean defaultUseStaticTyping)
         throws JsonMappingException
     {
         // do we have annotation that forces type to use (to declared type or its super type)?
         JavaType serializationType;
         try {
             serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
         } catch (JsonMappingException e) {
             return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());
         }
 
         // Container types can have separate type serializers for content (value / element) type
         if (contentTypeSer != null) {
             /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is
              *    type information for contents. Should work well (for JAXB case); can be
              *    revisited if this causes problems.
              */
             if (serializationType == null) {
-//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
-                serializationType = declaredType;
+                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());
             }
             JavaType ct = serializationType.getContentType();
             // Not exactly sure why, but this used to occur; better check explicitly:
             if (ct == null) {
                 prov.reportBadPropertyDefinition(_beanDesc, propDef,
                         "serialization type "+serializationType+" has no content");
             }
             serializationType = serializationType.withContentTypeHandler(contentTypeSer);
-            ct = serializationType.getContentType();
         }
 
         Object valueToSuppress = null;
         boolean suppressNulls = false;
-
         // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement
         JavaType actualType = (serializationType == null) ? declaredType : serializationType;
-        
-        // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well
-        //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)
-        //   for declared property type... and finally property annotation overrides
+        // default inclusion (overridable with per-type/property)
         JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),
                 _defaultInclusion);
-
-        // property annotation override
-        
+        // property annotation override (if any)
         inclV = inclV.withOverrides(propDef.findInclusion());
-        JsonInclude.Include inclusion = inclV.getValueInclusion();
+        // sanity check, should not occur for property with default value
+        assert inclV.getValueInclusion() != JsonInclude.Include.USE_DEFAULTS;
 
-        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...
-            inclusion = JsonInclude.Include.ALWAYS;
-        }
-        
-        switch (inclusion) {
-        case NON_DEFAULT:
-            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
+        switch (inclV.getValueInclusion()) {
+        case NON_DEFAULT: // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,
             // so that if enclosing class has this, we may need to access values of property,
             // whereas for global defaults OR per-property overrides, we have more
             // static definition. Sigh.
             // First: case of class/type specifying it; try to find POJO property defaults
-
-            // 16-Oct-2016, tatu: Note: if we can not for some reason create "default instance",
-            //    revert logic to the case of general/per-property handling, so both
-            //    type-default AND null are to be excluded.
-            //    (as per [databind#1417]
             if (_useRealPropertyDefaults) {
                 // 07-Sep-2016, tatu: may also need to front-load access forcing now
                 if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {
                     am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                 }
                 valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
             } else {
                 valueToSuppress = getDefaultValue(actualType);
                 suppressNulls = true;
             }
             if (valueToSuppress == null) {
                 suppressNulls = true;
             } else {
                 if (valueToSuppress.getClass().isArray()) {
                     valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);
                 }
             }
             break;
         case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals
             // always suppress nulls
             suppressNulls = true;
             // and for referential types, also "empty", which in their case means "absent"
             if (actualType.isReferenceType()) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         case NON_EMPTY:
             // always suppress nulls
             suppressNulls = true;
             // but possibly also 'empty' values:
             valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             break;
         case NON_NULL:
             suppressNulls = true;
             // fall through
         case ALWAYS: // default
         default:
             // we may still want to suppress empty collections, as per [JACKSON-254]:
             if (actualType.isContainerType()
                     && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;
         }
-        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,
-                am, _beanDesc.getClassAnnotations(), declaredType,
-                ser, typeSer, serializationType, suppressNulls, valueToSuppress);
 
         // How about custom null serializer?
         Object serDef = _annotationIntrospector.findNullSerializer(am);
         if (serDef != null) {
-            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));
+            throw new IllegalArgumentException("no default serializer found for property " + propDef.getName());
         }
         // And then, handling of unwrapping
         NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);
         if (unwrapper != null) {
-            bpw = bpw.unwrappingWriter(unwrapper);
+            throw new IllegalArgumentException("this property does not support unwrapping");
         }
-        return bpw;
+        return new BeanPropertyWriter(propDef,
+                am, _beanDesc.getClassAnnotations(), declaredType,
+                ser, typeSer, serializationType, suppressNulls, valueToSuppress);
     }
\ No newline at end of file
