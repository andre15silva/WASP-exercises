diff --git a/tmp/ee9018ff-62a7-41d4-abe7-dd2cfdb53330_buggy.java b/tmp/5ac01b2e-1bed-4eff-8527-99b1ccb73bde_fixed.java
index cce9d1e..1f6aa4a 100644
--- a/tmp/ee9018ff-62a7-41d4-abe7-dd2cfdb53330_buggy.java
+++ b/tmp/5ac01b2e-1bed-4eff-8527-99b1ccb73bde_fixed.java
@@ -1,14 +1,42 @@
-    /**
-     * <p>Stop the stopwatch.</p>
-     * 
-     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>
-     *
-     * @throws IllegalStateException if the StopWatch is not running.
-     */
+public class StopWatch {
+    private static final int STATE_STOPPED = 0;
+    private static final int STATE_RUNNING = 1;
+    private static final int STATE_SUSPENDED = 2;
+    private int runningState = STATE_STOPPED;
+    private long startTime = 0;
+    private long stopTime = 0;
+
+    public void start() {
+        if(this.runningState != STATE_STOPPED && this.runningState != STATE_SUSPENDED) {
+            throw new IllegalStateException("Stopwatch is not stopped. ");
+        }
+        this.startTime = System.currentTimeMillis();
+        this.runningState = STATE_RUNNING;
+    }
+
     public void stop() {
         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {
             throw new IllegalStateException("Stopwatch is not running. ");
         }
             stopTime = System.currentTimeMillis();
         this.runningState = STATE_STOPPED;
     }
+
+    public void suspend() {
+        if(this.runningState != STATE_RUNNING) {
+            throw new IllegalStateException("Stopwatch is not running. ");
+        }
+        stopTime = System.currentTimeMillis();
+        this.runningState = STATE_SUSPENDED;
+    }
+
+    public long getTime() {
+        long time = 0;
+        if(this.runningState == STATE_RUNNING) {
+            time = System.currentTimeMillis() - this.startTime;
+        } else if(this.runningState == STATE_SUSPENDED) {
+            time = this.stopTime - this.startTime;
+        }
+        return time;
+    }
+}
\ No newline at end of file
