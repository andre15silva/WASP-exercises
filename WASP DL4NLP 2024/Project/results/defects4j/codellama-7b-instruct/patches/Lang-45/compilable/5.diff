diff --git a/tmp/e0094d75-51a7-4614-abf9-cf39765e7de8_buggy.java b/tmp/1bc06c53-c991-436a-9f8c-fafa2a0dbfcc_fixed.java
index 1b36a4f..94bdf69 100644
--- a/tmp/e0094d75-51a7-4614-abf9-cf39765e7de8_buggy.java
+++ b/tmp/1bc06c53-c991-436a-9f8c-fafa2a0dbfcc_fixed.java
@@ -1,58 +1,74 @@
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
         // if the lower value is greater than the length of the string,
         // set to the length of the string
         // if the upper value is -1 (i.e. no limit) or is greater
         // than the length of the string, set to the length of the string
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
         // if upper is less than lower, raise it to lower
         if (upper < lower) {
             upper = lower;
         }
 
-        StringBuffer result = new StringBuffer();
+        // find the first space after the lower limit in the string
         int index = StringUtils.indexOf(str, " ", lower);
         if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
-            }
+            // no space found, so abbreviate the String until the upper limit
+            return abbreviate(str.substring(0, upper), appendToEnd);
         } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
+            // space found after the upper limit, so abbreviate
+            // the String until the space and append the appendToEnd value
+            return abbreviate(str.substring(0, upper), appendToEnd);
         } else {
-            result.append(str.substring(0, index));
-            result.append(StringUtils.defaultString(appendToEnd));
+            // a space was found before the upper limit, so return the
+            // substring from 0 to the index of the space + the appendToEnd value
+            return abbreviate(str.substring(0, index), appendToEnd);
+        }
+    }
+
+    // find the first occurrence of the given separator after the specified lower limit
+    private static int indexOf(String str, String separator, int lower) {
+        int separatorIndex = str.indexOf(separator, lower);
+        return separatorIndex;
+    }
+
+    // abbreviates the specified String
+    private static String abbreviate(String str, String appendToEnd) {
+        StringBuffer result = new StringBuffer();
+        if (str != null) {
+            result.append(str.substring(0, Math.min(str.length(), 500)));
+        }
+        if (appendToEnd != null) {
+            result.append(appendToEnd);
         }
         return result.toString();
     }
\ No newline at end of file
