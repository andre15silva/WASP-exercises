diff --git a/tmp/690350a2-8d52-45ce-ab6a-de39d79cbe67_buggy.java b/tmp/11724ce7-41a0-41a2-8204-ffe054e33ea8_fixed.java
index c18eb8b..b924c0e 100644
--- a/tmp/690350a2-8d52-45ce-ab6a-de39d79cbe67_buggy.java
+++ b/tmp/11724ce7-41a0-41a2-8204-ffe054e33ea8_fixed.java
@@ -1,30 +1,19 @@
-    /**
-     * <p>Compares two CharSequences, returning {@code true} if they represent
-     * equal sequences of characters.</p>
-     *
-     * <p>{@code null}s are handled without exceptions. Two {@code null}
-     * references are considered to be equal. The comparison is case sensitive.</p>
-     *
-     * <pre>
-     * StringUtils.equals(null, null)   = true
-     * StringUtils.equals(null, "abc")  = false
-     * StringUtils.equals("abc", null)  = false
-     * StringUtils.equals("abc", "abc") = true
-     * StringUtils.equals("abc", "ABC") = false
-     * </pre>
-     *
-     * @see java.lang.CharSequence#equals(Object)
-     * @param cs1  the first CharSequence, may be {@code null}
-     * @param cs2  the second CharSequence, may be {@code null}
-     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
-     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
-     */
-    public static boolean equals(CharSequence cs1, CharSequence cs2) {
-        if (cs1 == cs2) {
+    public static boolean equals(CharSequence str1, CharSequence str2) {
+        if (str1 == str2) {
             return true;
         }
-        if (cs1 == null || cs2 == null) {
+        if (str1 == null || str2 == null) {
             return false;
         }
-            return cs1.equals(cs2);
+        int length1 = str1.length();
+        int length2 = str2.length();
+        if (length1 != length2) {
+            return false;
+        }
+        for (int i = 0; i < length1; i++) {
+            if (str1.charAt(i) != str2.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
     }
\ No newline at end of file
