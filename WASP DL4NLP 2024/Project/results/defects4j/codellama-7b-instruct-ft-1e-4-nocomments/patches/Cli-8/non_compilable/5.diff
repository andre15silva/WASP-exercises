diff --git a/tmp/ddab82b1-22cf-4f7b-80da-6bc9d614a537_buggy.java b/tmp/b50b77d4-c33e-4d00-99e0-57b1defa139f_fixed.java
index 8e93a5e..843301c 100644
--- a/tmp/ddab82b1-22cf-4f7b-80da-6bc9d614a537_buggy.java
+++ b/tmp/b50b77d4-c33e-4d00-99e0-57b1defa139f_fixed.java
@@ -1,43 +1,21 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
-
         if (pos == -1)
         {
-            sb.append(rtrim(text));
-
+            padLine(sb, width, nextLineTabStop, text);
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
+            pos = findWrapPos(text, width, pos+nextLineTabStop);
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            padLine(sb, width, nextLineTabStop, text.substring(0, pos));
+            text = text.substring(pos);
         }
     }
\ No newline at end of file
