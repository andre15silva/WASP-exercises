diff --git a/tmp/34de7643-48fb-48da-b379-c7be05d238c2_buggy.java b/tmp/9c2a1fbf-d695-4c13-aa13-dc133ec36d96_fixed.java
index 61ffdbf..2cba898 100644
--- a/tmp/34de7643-48fb-48da-b379-c7be05d238c2_buggy.java
+++ b/tmp/9c2a1fbf-d695-4c13-aa13-dc133ec36d96_fixed.java
@@ -1,44 +1,32 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
       return;
     }
-
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
+    Var[] argsToRemove = new Var[argList.getChildCount()];
+    int unusedCount = 0;
+    for (int i = 0; i < argsToRemove.length; i++) {
+      Node arg = argList.getChildAtIndex(i);
+      Var var = fnScope.getVar(arg.getString());
+      argsToRemove[i] = var;
+      unusedCount += referenced.contains(var) ? 0 : 1;
+    }
+    if (!modifyCallers && (!compiler.getOptions().supportDebugFlag()
+        || unusedCount <= 0)) {
+      int offset = 0;
+      for (int i = argsToRemove.length - 1; i >= 0; i--) {
+        Var var = argsToRemove[i];
         if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
+          argList.removeChild(offset);
           compiler.reportCodeChange();
-        } else {
-          break;
         }
+        offset += 1;
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
