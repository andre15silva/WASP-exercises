diff --git a/tmp/f4182755-a3a1-42c8-aefa-92b7698b41c6_buggy.java b/tmp/5ed2d5e2-9f67-4127-a59a-5b63916b49af_fixed.java
index 61ffdbf..d2e059c 100644
--- a/tmp/f4182755-a3a1-42c8-aefa-92b7698b41c6_buggy.java
+++ b/tmp/5ed2d5e2-9f67-4127-a59a-5b63916b49af_fixed.java
@@ -1,44 +1,20 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
       return;
     }
-
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+    if (!modifyCallers &&
+        compiler.getOptions().getStrictModeInput() != CompilerOptions.STRICT) {
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
+        NodeUtil.removeChild(argList, lastArg);
         compiler.reportCodeChange();
-        } else {
-          break;
-        }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
