diff --git a/tmp/018cda99-c306-424d-816e-ef53eea9ac01_buggy.java b/tmp/75e06e18-4f5e-47d7-a070-67716ed1d4ca_fixed.java
index 61ffdbf..d008a41 100644
--- a/tmp/018cda99-c306-424d-816e-ef53eea9ac01_buggy.java
+++ b/tmp/75e06e18-4f5e-47d7-a070-67716ed1d4ca_fixed.java
@@ -1,44 +1,26 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
       return;
     }
-
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
+      Node lastArg = argList.getLastChild();
+      while (lastArg != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
+          if (compileMode == CompilationLevel.SIMPLE_OPTIMIZATIONS) {
+            return;
+          }
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
-        } else {
-          break;
         }
+        lastArg = lastArg.getPrev();
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
