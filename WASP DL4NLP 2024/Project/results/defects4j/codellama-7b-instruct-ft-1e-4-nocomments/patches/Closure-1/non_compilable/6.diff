diff --git a/tmp/bdedaa1c-f682-4a1f-9e0c-9e6960f8d7ef_buggy.java b/tmp/3864118f-0a06-4b14-b224-1b95464b8588_fixed.java
index 61ffdbf..75f5965 100644
--- a/tmp/bdedaa1c-f682-4a1f-9e0c-9e6960f8d7ef_buggy.java
+++ b/tmp/3864118f-0a06-4b14-b224-1b95464b8588_fixed.java
@@ -1,44 +1,27 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
       return;
     }
-
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+    if (!modifyCallers && compiler.getOptions().compilationLevel.compareTo(
+        CompilationLevel.SIMPLE_OPTIMIZATIONS) == 0) {
+      return;
+    }
     Node lastArg;
     while ((lastArg = argList.getLastChild()) != null) {
       Var var = fnScope.getVar(lastArg.getString());
       if (!referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
-    } else {
+    if (modifyCallers) {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
