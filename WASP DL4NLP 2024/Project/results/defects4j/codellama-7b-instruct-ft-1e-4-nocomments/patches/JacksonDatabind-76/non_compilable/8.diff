diff --git a/tmp/3e0fe191-7c49-4e05-8488-349a2be84e49_buggy.java b/tmp/ae4b1a29-a34d-4191-b45f-ee04009cb2b7_fixed.java
index 3effef5..405e49a 100644
--- a/tmp/3e0fe191-7c49-4e05-8488-349a2be84e49_buggy.java
+++ b/tmp/ae4b1a29-a34d-4191-b45f-ee04009cb2b7_fixed.java
@@ -1,73 +1,98 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
-
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
-
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+            p.nextToken(); 
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
+                t = p.getCurrentToken();
+                if (t == JsonToken.START_ARRAY && creatorProp.getType().getContentType().getRawClass() == String.class) {
+                    Object bean;
+                    try {
+                        bean = creator.build(ctxt, buffer);
+                    } catch (Exception e) {
+                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                        continue;
+                    }
+                    tokens.writeValue(bean);
+                    buffer = creator.startBuilding(p, ctxt, _objectIdReader);
+                    tokens.writeStartObject();
+                } else {
                     if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                        t = p.getCurrentToken();
                         Object bean;
                         try {
+                            t = p.nextToken();
                             bean = creator.build(ctxt, buffer);
                         } catch (Exception e) {
                             wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                             continue;
                         }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
                         tokens.writeEndObject();
                         if (bean.getClass() != _beanType.getRawClass()) {
                             ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                             return null;
                         }
                         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                     }
+                }
                 continue;
             }
-            // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
-            // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
-            // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
-
-        // We hit END_OBJECT, so:
+        boolean hasProperty = false;
+        for (; JsonToken.FIELD_NAME == t; t = p.nextToken()) {
+            String propName = p.getCurrentName();
+            p.nextToken();
+            hasProperty = true;
+            SettableBeanProperty prop = _beanProperties.find(propName);
+            if (prop != null) {
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
+                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+                continue;
+            }
+            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                handleIgnoredProperty(p, ctxt, handledType(), propName);
+                continue;
+            }
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
+            if (_anySetter != null) {
+                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            }
+        }
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
-            return wrapInstantiationProblem(e, ctxt);
+            throw wrapInstantiationProblem(e, ctxt);
+        } finally {
+            buffer = null;
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
