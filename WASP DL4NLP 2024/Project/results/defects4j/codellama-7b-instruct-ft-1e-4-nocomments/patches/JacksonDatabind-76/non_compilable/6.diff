diff --git a/tmp/d84ab81a-51ea-4d99-8524-e0993f2f00b2_buggy.java b/tmp/126610ee-87d9-4c22-a5c4-fec3c8225fa2_fixed.java
index 3effef5..bd474fe 100644
--- a/tmp/d84ab81a-51ea-4d99-8524-e0993f2f00b2_buggy.java
+++ b/tmp/126610ee-87d9-4c22-a5c4-fec3c8225fa2_fixed.java
@@ -1,73 +1,55 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
-
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
-
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
-            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
-            if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+            boolean creatorProp = false;
+            SettableBeanProperty idProperty = null;
             t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
+            for (;; t = p.nextToken()) {
+                if (p.currentTokenId() != JsonTokenId.ID_FIELD_NAME || !propName.equals(p.currentName())) {
+                    break;
                 }
-                    while (t == JsonToken.FIELD_NAME) {
                 p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                if (creatorProp) {
+                    buffer.assignParameter(idProperty, idProperty.deserialize(p, ctxt));
+                } else if (idProperty == null) {
+                    idProperty = creator.findCreatorProperty(propName);
+                    if (idProperty == null) {
+                        ctxt.reportInputMismatch(creator, "Unexpected JSON field: %s", propName);
                         return null;
                     }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                    creatorProp = true;
+                } else if (buffer.assignParameter(idProperty, idProperty.deserialize(p, ctxt))) {
+                    creatorProp = true;
                 }
-                continue;
             }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
-            }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
+            if (idProperty != null) {
+                Object id;
+                if (!creatorProp && idProperty.isRequired()) {
+                    id = idProperty.deserialize(p, ctxt);
+                    buffer.assignParameter(idProperty, id);
+                } else {
+                    id = p.getCurrentToken() == JsonToken.VALUE_NULL ? null : idProperty.deserialize(p, ctxt);
                 }
+                if (buffer.bufferIdProperty(id, propName)) {
                     tokens.writeFieldName(propName);
                     tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
                 }
             }
-
-        // We hit END_OBJECT, so:
+        }
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
