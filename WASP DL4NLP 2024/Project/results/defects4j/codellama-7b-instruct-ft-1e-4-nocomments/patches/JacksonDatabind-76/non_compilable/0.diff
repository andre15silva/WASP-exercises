diff --git a/tmp/70de33f6-e971-47bc-9587-c2e72bcced23_buggy.java b/tmp/d5c86028-beb6-4dfc-a86b-0e3bcd138715_fixed.java
index 3effef5..cad0f96 100644
--- a/tmp/70de33f6-e971-47bc-9587-c2e72bcced23_buggy.java
+++ b/tmp/d5c86028-beb6-4dfc-a86b-0e3bcd138715_fixed.java
@@ -1,73 +1,114 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
+        final int creatorPropCount = creator.getParameterCount();
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
-
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
-
         JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
-            String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
-            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
-            if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                        continue;
-                    }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-                }
-                continue;
-            }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
-            }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
-            }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
-                continue;
-            }
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
-            }
-        }
         
-        // We hit END_OBJECT, so:
+        if (creatorPropCount != 1 || t == JsonToken.FIELD_NAME) {
+            for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+                String propName = p.getCurrentName();
+                p.nextToken(); 
+                SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
+                if (creatorProp != null) {
+                    if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                        t = p.nextToken();
+                        Object bean;
+                        try {
+                            bean = creator.build(ctxt, buffer);
+                        } catch (Exception e) {
+                            wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                            continue;
+                        }
+                        while (t == JsonToken.FIELD_NAME) {
+                            p.nextToken();
+                            tokens.copyCurrentStructure(p);
+                            t = p.nextToken();
+                        }
+                        tokens.writeEndObject();
+                        if (bean.getClass() != _beanType.getRawClass()) {
+                            ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                            return null;
+                        }
+                        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                    }
+                    continue;
+                }
+                if (buffer.readIdProperty(propName)) {
+                    continue;
+                }
+                SettableBeanProperty prop = _beanProperties.find(propName);
+                if (prop != null) {
+                    buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+                    continue;
+                }
+                if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                    handleIgnoredProperty(p, ctxt, handledType(), propName);
+                    continue;
+                }
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
+                if (_anySetter != null) {
+                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+                }
+            }
+        }
+        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
+            String propName = p.getCurrentName();
+            p.nextToken(); 
+            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
+            if (creatorProp != null) {
+                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                    t = p.nextToken();
+                    Object bean;
+                    try {
+                        bean = creator.build(ctxt, buffer);
+                    } catch (Exception e) {
+                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+                        continue;
+                    }
+                    while (t == JsonToken.FIELD_NAME) {
+                        p.nextToken();
+                        tokens.copyCurrentStructure(p);
+                        t = p.nextToken();
+                    }
+                    tokens.writeEndObject();
+                    if (bean.getClass() != _beanType.getRawClass()) {
+                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                        return null;
+                    }
+                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                }
+                continue;
+            }
+            if (buffer.readIdProperty(propName)) {
+                continue;
+            }
+            SettableBeanProperty prop = _beanProperties.find(propName);
+            if (prop != null) {
+                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+                continue;
+            }
+            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                handleIgnoredProperty(p, ctxt, handledType(), propName);
+                continue;
+            }
+            tokens.writeFieldName(propName);
+            tokens.copyCurrentStructure(p);
+            if (_anySetter != null) {
+                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
+            }
+        }
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
