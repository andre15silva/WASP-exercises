diff --git a/tmp/b065ec18-1465-4834-9db5-ed8a78eef60d_buggy.java b/tmp/47766ecd-7499-4562-b29d-1429f9c9503d_fixed.java
index bf9c086..f5dd8a0 100644
--- a/tmp/b065ec18-1465-4834-9db5-ed8a78eef60d_buggy.java
+++ b/tmp/47766ecd-7499-4562-b29d-1429f9c9503d_fixed.java
@@ -1,54 +1,43 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
-
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
-
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
-
-      boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
-        String sourceName = functionJSDocInfo.getSourceName();
-        CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+        FunctionType dt = functionJSDocInfo.getType();
+        if (dt != null && dt.hasLiteralType()) {
+          if (dt.isConstructor() &&
+              !dt.isNativeObjectType() &&
+              (dt.getReturnType().isUnknownType() ||
+               dt.getReturnType().isVoidType())) {
+            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
           }
-
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
-      if (functionType.isConstructor() &&
-          !functionType.isNativeObjectType() &&
-          (functionType.getReturnType().isUnknownType() ||
-           functionType.getReturnType().isVoidType() ||
-           !isExtern)) {
+          visitParameterList(t, n, dt);
+        } else {
+          FunctionType cdt = dt.toMaybeFunctionType();
+          if (cdt != null && cdt.hasLiteralType()) {
+            if (cdt.isConstructor() &&
+                !cdt.isNativeObjectType() &&
+                (cdt.getReturnType().isUnknownType() ||
+                 cdt.getReturnType().isVoidType())) {
               report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
             }
-
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
+            visitParameterList(t, n, cdt);
+          } else {
             visitParameterList(t, n, functionType);
+          }
+        }
+      } else {
+        visitParameterList(t, n, functionType);
+      }
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
-
-    // TODO: Add something to check for calls of RegExp objects, which is not
-    // supported by IE.  Either say something about the return type or warn
-    // about the non-portability of the call or both.
   }
\ No newline at end of file
