diff --git a/tmp/ddfaab25-d9ee-4416-8078-88eabd7f529e_buggy.java b/tmp/e58b280a-c102-433b-b10f-a280cbe8635d_fixed.java
index bf9c086..80e324d 100644
--- a/tmp/ddfaab25-d9ee-4416-8078-88eabd7f529e_buggy.java
+++ b/tmp/e58b280a-c102-433b-b10f-a280cbe8635d_fixed.java
@@ -1,54 +1,53 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
-
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
-
-    // A couple of types can be called as if they were functions.
-    // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
-
+      if (functionType.isCallableFromType(t.getScope())) {
         boolean isExtern = false;
         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
         if(functionJSDocInfo != null) {
           String sourceName = functionJSDocInfo.getSourceName();
           CompilerInput functionSource = compiler.getInput(sourceName);
           isExtern = functionSource.isExtern();
         }
-
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
         if (functionType.isConstructor() &&
             !functionType.isNativeObjectType() &&
             (functionType.getReturnType().isUnknownType() ||
              functionType.getReturnType().isVoidType() ||
              !isExtern)) {
           report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
         }
-
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-
+      } else {
+        JSType thisType = functionType.getTypeOfThis();
+        if (thisType != null) {
+            report(t, n, FUNCTION_WITH_THIS_TYPE,
+                    thisType.toString(),
+                    functionType.toString());
+        } else if (NodeUtil.isGet(n.getParent())) {
+          report(t, n, GETPROP_THIS_TYPE_VIOLATION, childType.toString());
+        } else if (NodeUtil.isGetElem(n.getParent())) {
+          report(t, n, GETELEM_THIS_TYPE_VIOLATION, childType.toString());
+        } else {
+          report(t, n, FUNCTION_CALL_FROM_THIS_TYPE_VIOLATION,
+                  childType.toString());
+        }
+      }
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
-
-    // TODO: Add something to check for calls of RegExp objects, which is not
-    // supported by IE.  Either say something about the return type or warn
-    // about the non-portability of the call or both.
   }
\ No newline at end of file
