diff --git a/tmp/3ee655f9-f3ee-4cae-b695-d358a0bf589b_buggy.java b/tmp/e6fc1c06-1803-475f-b729-a9eceb53060c_fixed.java
index 5abdeb5..343a44b 100644
--- a/tmp/3ee655f9-f3ee-4cae-b695-d358a0bf589b_buggy.java
+++ b/tmp/e6fc1c06-1803-475f-b729-a9eceb53060c_fixed.java
@@ -1,29 +1,17 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName()
+              && n.getString().equals(varName)
+              && !(parent.isAssign()
+                  && !parent.getParent().isHook()
+                  && (parent.getParent().getFirstChild() == n))) {
             numUsesWithinCfgNode++;
           }
         }
-
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
