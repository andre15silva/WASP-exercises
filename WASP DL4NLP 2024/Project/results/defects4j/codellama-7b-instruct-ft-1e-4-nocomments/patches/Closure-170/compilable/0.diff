diff --git a/tmp/2f7f8f04-bf6a-461c-92a8-e01fc977a4ca_buggy.java b/tmp/fbcde248-02ef-434f-bb45-3176765cbf62_fixed.java
index 5abdeb5..56a2de3 100644
--- a/tmp/2f7f8f04-bf6a-461c-92a8-e01fc977a4ca_buggy.java
+++ b/tmp/fbcde248-02ef-434f-bb45-3176765cbf62_fixed.java
@@ -1,29 +1,15 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            !(parent.isAssign() && (parent.getFirstChild() == n) &&
+             parent.getLastChild() == n)) {
               numUsesWithinCfgNode++;
           }
         }
-
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
