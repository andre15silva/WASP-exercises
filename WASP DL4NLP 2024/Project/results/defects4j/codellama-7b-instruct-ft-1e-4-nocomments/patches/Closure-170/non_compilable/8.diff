diff --git a/tmp/1c4f772e-f444-4a19-b82d-9eaacf6a6581_buggy.java b/tmp/c84d0df4-0c9c-4ea9-9110-365a5f05b41a_fixed.java
index 5abdeb5..5c19739 100644
--- a/tmp/1c4f772e-f444-4a19-b82d-9eaacf6a6581_buggy.java
+++ b/tmp/c84d0df4-0c9c-4ea9-9110-365a5f05b41a_fixed.java
@@ -1,29 +1,20 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (parent.isHook() && parent.getUseBeforeCfgNode().isName() &&
+              n.isName() && n.getString().equals(varName) &&
+              !(parent.getFirstChild() == n ||
+               (parent.getFirstChild() == null &&
+                parent.getParent().isAssign() &&
+                (parent.getParent().getFirstChild() == n)))) {
+              numUsesWithinCfgNode++;
+          } else if (new SIDE_EFFECT_PREDICATE().eval(n)) {
               numUsesWithinCfgNode++;
           }
         }
-
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
