diff --git a/tmp/6c1109b9-87da-43c5-957c-aea0dd384d03_buggy.java b/tmp/f3dc25c0-3f95-464d-95eb-e5b5aa3dbd4d_fixed.java
index 5abdeb5..f60c3dc 100644
--- a/tmp/6c1109b9-87da-43c5-957c-aea0dd384d03_buggy.java
+++ b/tmp/f3dc25c0-3f95-464d-95eb-e5b5aa3dbd4d_fixed.java
@@ -1,29 +1,23 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            if (parent.isHook()) {
+              return;
+            }
+            int grandparentType = parent.getParent().getType();
+            if (GrandparentType.isIncOrDec(grandparentType)) {
+              // In pre-inc or pre-dec, LHS may be used before RHS, so ignore.
+              if (GrandparentType.preIncDec(grandparentType)) {
+                return;
+              }
+            }
             numUsesWithinCfgNode++;
           }
         }
-
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
