diff --git a/tmp/1a5a46a8-8735-4626-af05-3e0306abf4bf_buggy.java b/tmp/5486c829-6a8d-407c-9452-59c4454da0d4_fixed.java
index a7d0787..734bdb7 100644
--- a/tmp/1a5a46a8-8735-4626-af05-3e0306abf4bf_buggy.java
+++ b/tmp/5486c829-6a8d-407c-9452-59c4454da0d4_fixed.java
@@ -1,54 +1,79 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
+    @SuppressWarnings("unchecked") 
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         } 
+        else if (Integer.class.equals(clazz))
+        {
+            return (T) Integer.valueOf(str);
+        }
+        else if (Short.class.equals(clazz))
+        {
+            return (T) Short.valueOf(str);
+        }
+        else if (Byte.class.equals(clazz))
+        {
+            return (T) Short.valueOf(str);
+        }
+        else if (Double.class.equals(clazz))
+        {
+            return (T) Short.valueOf(str);
+        }
+        else if (Float.class.equals(clazz))
+        {
+            return (T) Short.valueOf(str);
+        }
+        else if (Boolean.class.equals(clazz))
+        {
+            return (T) Short.valueOf(str);
+        }
         else
         {
-            return null;
+            throw new ParseException("Value [" + str
+                    + "] couldn't be converted to type [" + clazz.getClass().getName() + "]",-1);
         }
     }
\ No newline at end of file
