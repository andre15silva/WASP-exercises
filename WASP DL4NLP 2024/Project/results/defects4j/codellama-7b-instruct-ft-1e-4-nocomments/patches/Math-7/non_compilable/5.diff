diff --git a/tmp/f6fabc2f-12ef-4410-9543-a942903d6d34_buggy.java b/tmp/b09bf68c-7c19-4098-95ff-38ce34e3ee3d_fixed.java
index b4d4f38..30dc1f2 100644
--- a/tmp/f6fabc2f-12ef-4410-9543-a942903d6d34_buggy.java
+++ b/tmp/b09bf68c-7c19-4098-95ff-38ce34e3ee3d_fixed.java
@@ -1,123 +1,86 @@
-    /** Accept a step, triggering events and step handlers.
-     * @param interpolator step interpolator
-     * @param y state vector at step end time, must be reset if an event
-     * asks for resetting or if an events stops integration during the step
-     * @param yDot placeholder array where to put the time derivative of the state vector
-     * @param tEnd final integration time
-     * @return time at end of step
-     * @exception MaxCountExceededException if the interpolator throws one because
-     * the number of functions evaluations is exceeded
-     * @exception NoBracketingException if the location of an event cannot be bracketed
-     * @exception DimensionMismatchException if arrays dimensions do not match equations settings
-     * @since 2.2
-     */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {
-
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
-
-            // initialize the events states if needed
+            boolean statesInitialized    = false;
+            boolean resetOccurred        = false;
+            boolean isLastStep           = false;
+            int      numberOfEvaluations = 0;
+            boolean  stop                = false;
+            int      i;
+            int      nbFired = 0;
+            while (! isLastStep) {
                 if (!statesInitialized) {
                     for (EventState state : eventsStates) {
                         state.reinitializeBegin(interpolator);
                     }
                     statesInitialized = true;
                 }
-
-            // search for next events that may occur during the step
-            final int orderingSign = interpolator.isForward() ? +1 : -1;
-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
+                final double  stepSize    = FixedStepHandler.getFixedStepSize(interpolator, tEnd);
+                final boolean isLastStep  = (FastMath.abs(tEnd - currentT) <
+                                            Utils.SAFE_MIN);
+                final boolean isNewStep   = (FastMath.abs(previousT - interpolator.getCurrentTime()) >
+                                            MathUtils.EPSILON);
+                final boolean isHonorTolerance = isNewStep && ! isLastStep &&
+                (FastMath.abs((currentT - previousT) - stepSize) > (0.1 * stepSize));
+                if (isLastStep) {
+                    break;
+                }
+                if (!isHonorTolerance) {
+                    previousT = interpolator.getCurrentTime();
+                    interpolator.forward();
+                    resetOccurred = true;
+                    System.arraycopy(interpolator.getInterpolatedState().clone(), 1, y, 0,
+                                     y.length - 1);
+                    System.arraycopy(interpolator.getInterpolatedDerivatives(), 0, yDot, 0,
+                                     y.length - 1);
+                    --numberOfEvaluations;
+                }
+                i = 0;
+                if ((numberOfEvaluations < 0) || isHonorTolerance || resetOccurred) {
+                    System.arraycopy(y, 0, yDot, 0, yDot.length);
+                    computeDerivatives(currentT, y, yDot);
+                    ++numberOfEvaluations;
+                    final SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
                         public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+                            if (es0.getEventTime() < 0 && es1.getEventTime() < 0) {
+                                return 0;
+                            } else if (es0.getEventTime() < 0) {
+                                return 1;
+                            } else {
+                                return -1;
+                            }
                         }
-
                     });
-
                     for (final EventState state : eventsStates) {
                         if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
                             occuringEvents.add(state);
                         }
+                        if (state.g(currentT, y)) {
+                            System.out.println("step: " + ++i + " at " + currentT);
                         }
-
-            while (!occuringEvents.isEmpty()) {
-
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
-                final EventState currentEvent = iterator.next();
-                iterator.remove();
-
-                // restrict the interpolator to the first part of the step, up to the event
-                final double eventT = currentEvent.getEventTime();
-                interpolator.setSoftPreviousTime(previousT);
-                interpolator.setSoftCurrentTime(eventT);
-
-                // get state at event time
-                interpolator.setInterpolatedTime(eventT);
-                final double[] eventY = interpolator.getInterpolatedState().clone();
-
-                // advance all event states to current time
-                currentEvent.stepAccepted(eventT, eventY);
-                isLastStep = currentEvent.stop();
-
-                // handle the first part of the step, up to the event
-                for (final StepHandler handler : stepHandlers) {
-                    handler.handleStep(interpolator, isLastStep);
                     }
-
-                if (isLastStep) {
-                    // the event asked to stop integration
-                    System.arraycopy(eventY, 0, y, 0, y.length);
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
+                    for (final EventState state : occuringEvents) {
+                        state.stepAccepted(currentT, y);
+                        final double tEvent = state.getEventTime();
+                        if (FastMath.abs(tEvent - currentT) <
+                                            MathUtils.EPSILON) {
+                            System.out.println("stopping at " + tEvent);
+                            stop = state.stop();
                         }
-                    return eventT;
+                        nbFired++;
                     }
-
-                boolean needReset = currentEvent.reset(eventT, eventY);
-                if (needReset) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
-                    System.arraycopy(eventY, 0, y, 0, y.length);
-                    computeDerivatives(eventT, y, yDot);
-                    resetOccurred = true;
-                    for (final EventState remaining : occuringEvents) {
-                        remaining.stepAccepted(eventT, eventY);
                 }
-                    return eventT;
+                if (stop) {
+                    double[] newY = new double[y.length];
+                    System.arraycopy(y, 0, newY, 0, y.length);
+                    return currentT;
                 }
-
-                // prepare handling of the remaining part of the step
-                previousT = eventT;
-                interpolator.setSoftPreviousTime(eventT);
-                interpolator.setSoftCurrentTime(currentT);
-
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+                previousT = currentT;
             }
-
-            }
-
-            // last part of the step, after the last event
-            interpolator.setInterpolatedTime(currentT);
-            final double[] currentY = interpolator.getInterpolatedState();
-            for (final EventState state : eventsStates) {
-                state.stepAccepted(currentT, currentY);
-                isLastStep = isLastStep || state.stop();
-            }
-            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
-
-            // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
-
             return currentT;
-
     }
\ No newline at end of file
