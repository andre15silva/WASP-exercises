diff --git a/tmp/000f6dd7-c410-4389-8ac3-f43cdd26a247_buggy.java b/tmp/51983fa4-e263-4d71-bb40-0d04553b56a7_fixed.java
index d80b7d0..15aa7a0 100644
--- a/tmp/000f6dd7-c410-4389-8ac3-f43cdd26a247_buggy.java
+++ b/tmp/51983fa4-e263-4d71-bb40-0d04553b56a7_fixed.java
@@ -1,61 +1,52 @@
-    /**
-     * Checks dimensions and values of boundaries and inputSigma if defined.
-     */
     private void checkParameters() {
         final double[] init = getStartPoint();
         final double[] lB = getLowerBound();
         final double[] uB = getUpperBound();
-
-        // Checks whether there is at least one finite bound value.
         boolean hasFiniteBounds = false;
         for (int i = 0; i < lB.length; i++) {
             if (!Double.isInfinite(lB[i]) ||
                 !Double.isInfinite(uB[i])) {
                 hasFiniteBounds = true;
                 break;
             }
         }
-        // Checks whether there is at least one infinite bound value.
         boolean hasInfiniteBounds = false;
         if (hasFiniteBounds) {
             for (int i = 0; i < lB.length; i++) {
                 if (Double.isInfinite(lB[i]) ||
                     Double.isInfinite(uB[i])) {
                     hasInfiniteBounds = true;
                     break;
                 }
             }
-
             if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
                 throw new MathUnsupportedOperationException();
             } else {
-                // Convert API to internal handling of boundaries.
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
-
-                // Abort early if the normalization will overflow (cf. "encode" method).
             }
         } else {
-            // Convert API to internal handling of boundaries.
             boundaries = null;
         }
-
         if (inputSigma != null) {
             if (inputSigma.length != init.length) {
                 throw new DimensionMismatchException(inputSigma.length, init.length);
             }
             for (int i = 0; i < init.length; i++) {
                 if (inputSigma[i] < 0) {
                     throw new NotPositiveException(inputSigma[i]);
                 }
                 if (boundaries != null) {
                     if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
+                        final double diff = boundaries[1][i] - boundaries[0][i];
+                        double tol = FastMath.nextDown(diff);
+                        if (diff != tol) {
+                            throw new NumberIsTooLargeException(inputSigma[i], 0, tol, true);
+                        }
+                        throw new OutOfRangeException(inputSigma[i], 0, diff);
                     }
                 }
             }
         }
     }
\ No newline at end of file
