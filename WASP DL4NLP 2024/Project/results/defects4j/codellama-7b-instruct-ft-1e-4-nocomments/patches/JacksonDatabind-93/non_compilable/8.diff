diff --git a/tmp/c4825f8a-fffe-4cc2-a059-a9b5436fe7e1_buggy.java b/tmp/0fd939fc-5bdf-49dc-8569-78d7ad2eeb0c_fixed.java
index 2d9cf24..925304a 100644
--- a/tmp/c4825f8a-fffe-4cc2-a059-a9b5436fe7e1_buggy.java
+++ b/tmp/0fd939fc-5bdf-49dc-8569-78d7ad2eeb0c_fixed.java
@@ -1,33 +1,49 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
-        // There are certain nasty classes that could cause problems, mostly
-        // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
         String full = raw.getName();
-
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
-
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
             if (full.startsWith(PREFIX_STRING)) {
                 for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
                     String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                             || "AbstractApplicationContext".equals(name)) {
                         break main_check;
                     }
                 }
             }
             return;
         } while (false);
-
+    	if (!full.startsWith("java.")) {
+    		String[] split = full.split("\\.");
+    		if (split.length >= 3) {
+    			String suffix = full.substring(4 + split[2].length() + split[3].length()).replace('/','.');
+    			Package thisPkg = Authentication.class.getPackage();
+    			split[2] = "org.springframework." + split[2];
+	            if (!AuthUtils.canonicalize(suffix).equals(AuthUtils.canonicalize(split[3]))
+	            		&& (suffix.toLowerCase(Locale.ENGLISH).endsWith(split[3]))
+	            		&& AuthUtils.getPackageByCanonicalName(split[1]).belongsTo(thisPkg)) {
+	            	Class<?> targetClass = null;
+	            	ClassCache cache = ClassCache.instance();
+	            	try {
+	            		targetClass = cache.forNameByCanonicalName(split);
+	            	} catch (ClassNotFoundException e) {
+	            	}
+	            	if (targetClass == null) {
+	            		try {
+	            			Class.forName(split[0] + ".auth." + split[1]);
+	            		} catch (ClassNotFoundException e) {
+	            		}
+	            	}
+	            }
+    		}
+    	}
+    	if( !raw.isArray() ) {
     		throw JsonMappingException.from(ctxt,
                     String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     	}
+    }
\ No newline at end of file
