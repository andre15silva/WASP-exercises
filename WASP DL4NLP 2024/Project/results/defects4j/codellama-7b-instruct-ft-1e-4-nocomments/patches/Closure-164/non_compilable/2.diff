diff --git a/tmp/2b29380f-f448-4f57-bedf-9306a5411502_buggy.java b/tmp/89a9dfdb-9626-4638-96a7-103094b10111_fixed.java
index 9976e43..3186058 100644
--- a/tmp/2b29380f-f448-4f57-bedf-9306a5411502_buggy.java
+++ b/tmp/89a9dfdb-9626-4638-96a7-103094b10111_fixed.java
@@ -1,76 +1,102 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
-
     ArrowType that = (ArrowType) other;
-
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
-    // this.returnType <: that.returnType (covariant)
+    if (parameters.getFirstChild() == null) {
+      return true;
+    }
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
-
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
-    Node thisParam = parameters.getFirstChild();
-    Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+    int paramsCount = 0;
+    if (this.typeOfThis == TypeOfThis.OBJECTLIT_PROTOTYPE_PROPERTY) {
+      paramsCount++;
+    }
+    Node thisParam = parameters.getFirstChild().getNext();
+    Node thatParam = that.parameters.getFirstChild().getNext();
+    Node thisParamFromSub = thisParam;
+    int minRequiredArity = 0;
+    while (thisParam != null) {
+      paramsCount++;
       JSType thisParamType = thisParam.getJSType();
+      if (thisParam.isOptionalArg()) {
+        minRequiredArity++;
+      }
+      thisParamFromSub = thisParamFromSub.getNext();
+      if (thisParamFromSub == null) {
+        break;
+      }
+      thisParam = thisParamFromSub.getNext();
+    }
+    int totalRequiredArgs = paramsCount - minRequiredArity;
+    if (that.parameters.getFirstChild().isOptionalArg()) {
+      totalRequiredArgs--;
+    }
+    if (parameters.getFirstChild().isOptionalArg()) {
+      totalRequiredArgs--;
+    }
+    if (thisParamFromSub == null) {
+      paramsCount--;
+    }
+    int thatParamCount = 0;
+    while (thatParam != null) {
       JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
-          return false;
+      if (thatParam.isOptionalArg()) {
+        totalRequiredArgs ++;
       }
-      }
-
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
-      }
-      if (!thatIsVarArgs) {
+      thatParamCount++;
       thatParam = thatParam.getNext();
     }
-
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+    if (thatParamCount < totalRequiredArgs) {
+      if (!this.typeOfThis.isUnknown() && !this.typeOfThis.isTopObject()) {
+        this.appendTo(other.toMaybeFunctionType().typeOfThis);
       }
+      return false;
+    }
+    for (int i = 0; i < paramsCount; i++) {
+      JSType thisParamType = thisParamFromSub.getJSType();
+      if (thisParamFromSub.isOptionalArg()) {
+        continue;
+      }
+      if (this.parameters.getFirstChild().isOptionalArg()) {
+        if (thisParamType.isUnknown()) {
+          continue;
+        }
+      }
+      if (!thisParamType.isSubtype(thatParamType)) {
+        JSType paramType = thatParamType;
+        JSType paramTypeFromOther = other.toMaybeFunctionType().parameters.getFirstChild().getJSType();
+        for (int j = i + 1; j < paramsCount; j++) {
+          if (!((FunctionTypeI) paramType).getParameters().getFirstChild().isOptionalArg()) {
+            break;
+          }
+          paramType = ((FunctionTypeI) paramType).getParameters().getFirstChild().getNext().getJSType();
+        }
+        if (paramTypeFromOther.isSubtype(paramType)) {
+          other.appendTo(this.typeOfThis);
+        }
+        return false;
+      }
+      thisParam = thisParam.getNext();
+      thisParamFromSub = thisParamFromSub.getNext();
+      if (thisParamFromSub == null) {
+        break;
+      }
+      thatParamType = thatParamTypeFromSuperfunction.getNext().getJSType();
+      thatParamTypeFromSuperfunction =
+          ((FunctionTypeI) thatParamTypeFromSuperfunction).getParameters().getFirstChild().getNext();
+    }
+    if (thatParamTypeFromSuperfunction != null) {
+      if (!thatParamTypeFromSuperfunction.getJSType().isUnknown()) {
+        appendTo(other.toMaybeFunctionType().typeOfThis);
+      }
+      return false;
+    }
+    if (other.toMaybeFunctionType().parameters.getFirstChild()
+          .isOptionalArg()) {
+      other.appendTo(this.typeOfThis);
     }
-
-    // "that" can't be a supertype, because it's missing a required arguement.
-
     return true;
   }
\ No newline at end of file
