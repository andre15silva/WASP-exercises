diff --git a/tmp/f7bde37d-639a-48a8-9543-3a874628df30_buggy.java b/tmp/09464a34-ba6e-434f-b8ae-1cd340072943_fixed.java
index db19f52..e5a3b47 100644
--- a/tmp/f7bde37d-639a-48a8-9543-3a874628df30_buggy.java
+++ b/tmp/09464a34-ba6e-434f-b8ae-1cd340072943_fixed.java
@@ -1,32 +1,32 @@
-    // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if (charsetName == null) { 
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) { 
                 String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { 
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+        } else { 
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
         if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
+            byte[] bom = docData.getBytes(Charset.forName("UTF-8"));
+            boolean bomFound = (bom.length == 3 && bom[0] == (byte)239 && bom[1] == (byte)187 && bom[2] == (byte)191) ||
+                                (bom.length == 4 && bom[0] == (byte)254 && bom[1] == (byte)255);
+            if (bomFound) {
+                docData = docData.substring(bom.length);
+            }
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
