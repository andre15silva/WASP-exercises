diff --git a/tmp/5dab3944-0fad-4888-86c7-00ce10cfc6db_buggy.java b/tmp/4819004a-bf26-4776-9214-8b7d4e05900a_fixed.java
index 2c4ed06..1ccee3f 100644
--- a/tmp/5dab3944-0fad-4888-86c7-00ce10cfc6db_buggy.java
+++ b/tmp/4819004a-bf26-4776-9214-8b7d4e05900a_fixed.java
@@ -1,111 +1,102 @@
     /** Accept a step, triggering events and step handlers.
      * @param interpolator step interpolator
      * @param y state vector at step end time, must be reset if an event
      * asks for resetting or if an events stops integration during the step
      * @param yDot placeholder array where to put the time derivative of the state vector
      * @param tEnd final integration time
      * @return time at end of step
      * @exception MathIllegalStateException if the value of one event state cannot be evaluated
      * @since 2.2
      */
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MathIllegalStateException {
-
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
             resetOccurred = false;
-
-            // initialize the events states if needed
             if (! statesInitialized) {
                 for (EventState state : eventsStates) {
                     state.reinitializeBegin(interpolator);
                 }
                 statesInitialized = true;
             }
-
-            // search for next events that may occur during the step
             final int orderingSign = interpolator.isForward() ? +1 : -1;
-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
+            SortedSet<EventState> orderedEvents = new TreeSet<EventState>(new Comparator<EventState>() {
                 public int compare(EventState es0, EventState es1) {
                     return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
                 }
-
             });
-
             for (final EventState state : eventsStates) {
                 if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(state);
+                    orderedEvents.add(state);
                 }
             }
-
-            while (!occuringEvents.isEmpty()) {
-
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
+            final SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
+                public int compare(EventState es0, EventState es1) {
+                    return Double.compare(es0.getEventTime(), es1.getEventTime());
+                }
+            });
+            while (!occurringEvents.contains(orderedEvents.first()) && !orderedEvents.isEmpty()) {
+                final Iterator<EventState> iterator = orderedEvents.iterator();
                 final EventState currentEvent = iterator.next();
                 iterator.remove();
-
-                // restrict the interpolator to the first part of the step, up to the event
+                final double[] yCopy = Arrays.copyOf(y, y.length);
                 final double eventT = currentEvent.getEventTime();
                 interpolator.setSoftPreviousTime(previousT);
                 interpolator.setSoftCurrentTime(eventT);
-
-                // trigger the event
                 interpolator.setInterpolatedTime(eventT);
                 final double[] eventY = interpolator.getInterpolatedState();
                 currentEvent.stepAccepted(eventT, eventY);
                 isLastStep = currentEvent.stop();
-
-                // handle the first part of the step, up to the event
-                for (final StepHandler handler : stepHandlers) {
-                    handler.handleStep(interpolator, isLastStep);
-                }
-
                 if (isLastStep) {
-                    // the event asked to stop integration
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     return eventT;
                 }
-
                 if (currentEvent.reset(eventT, eventY)) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
                     System.arraycopy(eventY, 0, y, 0, y.length);
                     computeDerivatives(eventT, y, yDot);
                     resetOccurred = true;
-                    return eventT;
-                }
-
-                // prepare handling of the remaining part of the step
+                    orderedEvents.add(currentEvent);
                     previousT = eventT;
                     interpolator.setSoftPreviousTime(eventT);
                     interpolator.setSoftCurrentTime(currentT);
-
-                // check if the same event occurs again in the remaining part of the step
+                    continue;
+                }
+                final double[] derivativeInCurrentState;
+                try {
+                    derivativeInCurrentState = computeDerivatives(currentT, y, yDot);
+                } catch (MathIllegalStateException e) {
+                    throw new MathIllegalStateException(localErrorMessage("computeDerivatives", interpolator), e);
+                }
+                final double error = Math.max(Math.abs(yDot[0]), derivativeInCurrentState[0]) * interpolator.getEpsfcn();
+                final double diffT = eventT - currentT;
+                if (Math.abs(diffT) > error) {
+                    interpolator.setInterpolatedTime(currentT + orderingSign * error);
+                } else {
+                    interpolator.setInterpolatedTime(eventT);
+                }
+                final double[] currentY = interpolator.getInterpolatedState();
+                currentEvent.stepAccepted(currentT, currentY);
+                isLastStep = currentEvent.stop();
+                if (currentEvent.reset(currentT, currentY)) {
+                    resetOccurred = true;
+                    if (!eventsStates.isEmpty()) {
+                        eventsStates.get(0).reinitializeBegin(currentT, currentY.clone());
+                    }
+                }
+                orderedEvents.add(currentEvent);
+                previousT = currentT;
+                interpolator.setSoftPreviousTime(eventT);
+                interpolator.setSoftCurrentTime(currentT);
                 if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
-
             }
-
             interpolator.setInterpolatedTime(currentT);
-            final double[] currentY = interpolator.getInterpolatedState();
-            for (final EventState state : eventsStates) {
-                state.stepAccepted(currentT, currentY);
-                isLastStep = isLastStep || state.stop();
-            }
-            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
-
-            // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
+                final double[] yCopy = Arrays.copyOf(y, y.length);
+                final double[] yDotCopy = Arrays.copyOf(yDot, yDot.length);
                 handler.handleStep(interpolator, isLastStep);
             }
-
             return currentT;
-
     }
\ No newline at end of file
