diff --git a/tmp/a2bd9c41-9e5e-482b-a1b6-4437b70075f0_buggy.java b/tmp/7cd75454-69e2-497c-b71c-6e3a3639a4dc_fixed.java
index 0eef537..54985ad 100644
--- a/tmp/a2bd9c41-9e5e-482b-a1b6-4437b70075f0_buggy.java
+++ b/tmp/7cd75454-69e2-497c-b71c-6e3a3639a4dc_fixed.java
@@ -1,74 +1,58 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
-     * elements are considered too different and matrix not symmetric
+     * elements are considered too different and matrix not symmetric.
      * @param absolutePositivityThreshold threshold below which diagonal
-     * elements are considered null and matrix not positive definite
-     * @exception NonSquareMatrixException if matrix is not square
-     * @exception NotSymmetricMatrixException if matrix is not symmetric
+     * elements are considered null and matrix not positive definite.
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
+     * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
-        throws NonSquareMatrixException,
-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
-
+        throws NotPositiveDefiniteMatrixException,
+               NotSymmetricMatrixException {
         if (!matrix.isSquare()) {
-            throw new NonSquareMatrixException(matrix.getRowDimension(),
+            throw new NotPositiveDefiniteMatrixException(matrix.getRowDimension(),
                                                          matrix.getColumnDimension());
         }
-
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
-
-        // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
             if (lTData[i][i] < absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
-            // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
+                    relativeSymmetryThreshold
+    * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
                 lJ[i] = 0;
            }
         }
-
-        // transform the matrix
         for (int i = 0; i < order; ++i) {
-
             final double[] ltI = lTData[i];
-
-            // check diagonal element
-
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
-
             for (int q = order - 1; q > i; --q) {
                 ltI[q] *= inverse;
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
\ No newline at end of file
