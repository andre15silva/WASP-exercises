diff --git a/tmp/12cee104-9c8b-48cb-a232-6a0e6b9fdd75_buggy.java b/tmp/b44350ae-2039-490c-b5a3-e4dffb5a0e93_fixed.java
index 29a9d2f..9a24dd1 100644
--- a/tmp/12cee104-9c8b-48cb-a232-6a0e6b9fdd75_buggy.java
+++ b/tmp/b44350ae-2039-490c-b5a3-e4dffb5a0e93_fixed.java
@@ -1,43 +1,42 @@
-  /**
-   * Handles a goog.require call.
-   */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
       if (provided == null || !provided.isExplicitlyProvided()) {
+        if (!compiler.hasClosurePass() && compiler.getOptions().getUseOnlyClosureExterns()) {
+          // This happens only in ClosureScript when we don't have
+          // the correct externs (like jscomp.jar) in place.
+          return;
+        }
+        if (!googIsModuleFile && t.getCurrentScript() != null) {
+          JSSourceFile source =
+              JSSourceFile.fromFile(t.getCurrentScript().getName());
+          if (source != null && isGoogModule(source)) {
+            return;
+          }
+        }
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
         JSModule providedModule = provided.explicitModule;
-
-        // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
-
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
-
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
-
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
       if (provided != null) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
     }
   }
\ No newline at end of file
