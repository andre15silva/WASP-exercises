diff --git a/tmp/3124a1a8-3f08-4908-8134-50fc617a9c1d_buggy.java b/tmp/074bc0e2-71d5-4f3a-89dd-da84cf75b615_fixed.java
index 3652aad..38e4808 100644
--- a/tmp/3124a1a8-3f08-4908-8134-50fc617a9c1d_buggy.java
+++ b/tmp/074bc0e2-71d5-4f3a-89dd-da84cf75b615_fixed.java
@@ -1,86 +1,62 @@
-    /**
-     * Defines a typed variable. The defining node will be annotated with the
-     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
-     * inferred.
-     *
-     * Slots may be any variable or any qualified name in the global scope.
-     *
-     * @param n the defining NAME or GETPROP node.
-     * @param parent the {@code n}'s parent.
-     * @param type the variable's type. It may be {@code null} if
-     *     {@code inferred} is {@code true}.
-     */
     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
       Preconditions.checkArgument(inferred || type != null);
-
-      // Only allow declarations of NAMEs and qualfied names.
       boolean shouldDeclareOnGlobalThis = false;
       if (n.getType() == Token.NAME) {
         Preconditions.checkArgument(
             parent.getType() == Token.FUNCTION ||
             parent.getType() == Token.VAR ||
             parent.getType() == Token.LP ||
             parent.getType() == Token.CATCH);
         shouldDeclareOnGlobalThis = scope.isGlobal() &&
             (parent.getType() == Token.VAR ||
              parent.getType() == Token.FUNCTION);
       } else {
         Preconditions.checkArgument(
             n.getType() == Token.GETPROP &&
             (parent.getType() == Token.ASSIGN ||
              parent.getType() == Token.EXPR_RESULT));
       }
-      String variableName = n.getQualifiedName();
-      Preconditions.checkArgument(!variableName.isEmpty());
-
-      // If n is a property, then we should really declare it in the
-      // scope where the root object appears. This helps out people
-      // who declare "global" names in an anonymous namespace.
+      String qualifiedName = n.getQualifiedName();
+      Preconditions.checkArgument(!qualifiedName.isEmpty());
       Scope scopeToDeclareIn = scope;
-
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
-
-      // declared in closest scope?
-      if (scopeToDeclareIn.isDeclared(variableName, false)) {
-        Var oldVar = scopeToDeclareIn.getVar(variableName);
+      if (scopeToDeclareIn.isDeclared(qualifiedName, false)) {
+        Var oldVar = scopeToDeclareIn.getVar(qualifiedName);
         validator.expectUndeclaredVariable(
-            sourceName, n, parent, oldVar, variableName, type);
+            sourceName, n, parent, oldVar, qualifiedName, type);
       } else {
         if (!inferred) {
           setDeferredType(n, type);
         }
         CompilerInput input = compiler.getInput(sourceName);
-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);
-
+        scopeToDeclareIn.declare(
+            qualifiedName, n, type, input, inferred);
         if (shouldDeclareOnGlobalThis) {
           ObjectType globalThis =
               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
           boolean isExtern = input.isExtern();
           if (inferred) {
-            globalThis.defineInferredProperty(variableName,
+            globalThis.defineInferredProperty(
+                qualifiedName,
                 type == null ?
                     getNativeType(JSTypeNative.NO_TYPE) :
                     type,
                 isExtern);
           } else {
-            globalThis.defineDeclaredProperty(variableName, type, isExtern);
+            globalThis.defineDeclaredProperty(
+                qualifiedName, type, isExtern);
           }
         }
-
-        // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
         if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
           FunctionType fnType = (FunctionType) type;
           if (fnType.isConstructor() || fnType.isInterface()) {
             FunctionType superClassCtor = fnType.getSuperClassConstructor();
-            scopeToDeclareIn.declare(variableName + ".prototype", n,
+            scopeToDeclareIn.declare(
+                qualifiedName + ".prototype", n,
                 fnType.getPrototype(), compiler.getInput(sourceName),
-                /* declared iff there's an explicit supertype */
                 superClassCtor == null ||
                 superClassCtor.getInstanceType().equals(
                     getNativeType(OBJECT_TYPE)));
           }
         }
       }
     }
\ No newline at end of file
