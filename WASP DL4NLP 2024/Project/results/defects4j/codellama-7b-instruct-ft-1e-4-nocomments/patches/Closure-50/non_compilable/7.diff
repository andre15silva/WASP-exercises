diff --git a/tmp/ae928532-f673-4d1d-86ed-9409cf440e2e_buggy.java b/tmp/2b7111aa-1b32-4a53-ad5e-6d8cf3707286_fixed.java
index d8b0158..7c71516 100644
--- a/tmp/ae928532-f673-4d1d-86ed-9409cf440e2e_buggy.java
+++ b/tmp/2b7111aa-1b32-4a53-ad5e-6d8cf3707286_fixed.java
@@ -1,113 +1,105 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
-
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
-
     Node right = callTarget.getNext();
     if (right != null) {
       if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
-
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
-
-      // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
-        } else {
-          sb.append(joinString);
-        }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
-      } else {
-        if (sb != null) {
+      boolean isImmutable = NodeUtil.isImmutableValue(elem);
+      if (sb == null && isImmutable) {
+        String arrayElementStringValue =
+            NodeUtil.getArrayElementStringValue(elem);
+        if (arrayElementStringValue.length() == 1) {
+          if (arrayNode.getChildCount() == 2) {
+            if (arrayElementStringValue.equals(joinString)) {
+              return n;
+            }
+          }
+          sb = new StringBuilder(arrayElementStringValue);
+        }
+      }
+      if (sb == null && isImmutable) {
+        if (prev != null) {
+          sb = new StringBuilder(2);
+          sb.append(NodeUtil.getArrayElementStringValue(prev));
+          prev = null;
+        }
+        sb.append(arrayElementStringValue);
+      }
+      if (sb != null && !isImmutable) {
         Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(
             Node.newString(sb.toString()).copyInformationFrom(prev));
         sb = null;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
-      }
       prev = elem;
       elem = elem.getNext();
     }
-
     if (sb != null) {
       Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
-        // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return n;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         reportCodeChange();
         break;
     }
-
     return n;
   }
\ No newline at end of file
