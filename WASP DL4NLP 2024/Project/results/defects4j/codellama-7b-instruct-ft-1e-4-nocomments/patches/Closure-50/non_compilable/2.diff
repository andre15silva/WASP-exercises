diff --git a/tmp/5d51546f-248d-4695-9408-7c2b2a4a49a4_buggy.java b/tmp/9bfa3b9f-f8d7-47fb-b709-c7c618a1dda9_fixed.java
index d8b0158..f8ecb29 100644
--- a/tmp/5d51546f-248d-4695-9408-7c2b2a4a49a4_buggy.java
+++ b/tmp/9bfa3b9f-f8d7-47fb-b709-c7c618a1dda9_fixed.java
@@ -1,113 +1,107 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
-
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
-
     Node right = callTarget.getNext();
     if (right != null) {
       if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
-
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
-
-      // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    boolean stringNode = false;
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
+          stringNode = true;
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
+        stringNode = false;
       } else {
         if (sb != null) {
           Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
-
     if (sb != null) {
       Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
+          Node replacement;
+          if (stringNode) {
+            replacement = new Node(Token.ADD,
                 Node.newString("").copyInformationFrom(n),
                 foldedStringNode);
+          } else {
+            replacement = new Node(Token.JOIN, foldedStringNode);
+          }
+          replacement.copyInformationFrom(n);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
-        // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return n;
         }
+        Node arrayLiteral = arrayNode.removeChildren();
+        Node joinCall = new Node(Token.JOIN, arrayLiteral);
+        if (stringNode) {
+          joinCall.addChildToFront(Node.newString(""));
+        }
+        if (right != null) {
+          joinCall.addChildToFront(right);
+        }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
         if (foldedSize > originalSize) {
           return n;
         }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
+        arrayNode.addChildToFront(joinCall);
         reportCodeChange();
         break;
     }
-
     return n;
   }
\ No newline at end of file
