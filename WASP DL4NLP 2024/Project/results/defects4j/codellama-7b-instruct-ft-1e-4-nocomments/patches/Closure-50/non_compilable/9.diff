diff --git a/tmp/3bfe8be6-dc90-467e-a71b-684244773fe2_buggy.java b/tmp/caf0d47a-3b8b-4b9f-bff6-a55e1e651488_fixed.java
index d8b0158..a73e775 100644
--- a/tmp/3bfe8be6-dc90-467e-a71b-684244773fe2_buggy.java
+++ b/tmp/caf0d47a-3b8b-4b9f-bff6-a55e1e651488_fixed.java
@@ -1,113 +1,77 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
-
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
-
     Node right = callTarget.getNext();
     if (right != null) {
       if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
-
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
-
-      // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
+    List<String> newChildren = Lists.newLinkedList();
+    StringBuilder stringBuilder = null;
+    int newStringAdditionalSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    int additionalSize = 0;
+    int prevCost = 1;
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
+        if (stringBuilder == null) {
+          stringBuilder = new StringBuilder();
         } else {
-          sb.append(joinString);
+          stringBuilder.append(joinString);
+          additionalSize++;
+        }
+        stringBuilder.append(NodeUtil.getArrayElementStringValue(elem));
+        newChildren.add(stringBuilder.toString());
+        if (stringBuilder.length() > 50) {
+          if (prev != null) {
+            additionalSize += newChildren.size();
+          }
+          newChildren.clear();
+          newChildren.add(NodeUtil.getArrayElementStringValue(elem));
+          stringBuilder = null;
         }
-        sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+        if (stringBuilder != null) {
+          newChildren.add(stringBuilder.toString());
+          newStringAdditionalSize += stringBuilder.length() + 2;
+          additionalSize += prevCost + 1;
+          stringBuilder = null;
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
+        additionalSize += InlineCostEstimator.getCost(elem);
+        newChildren.add(elem.getString());
+        prevCost = InlineCostEstimator.getCost(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
-
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+    if (stringBuilder != null) {
+      newChildren.add(stringBuilder.toString());
+      newStringAdditionalSize += stringBuilder.length() + 2;
+      additionalSize += prevCost + 1;
+      stringBuilder = null;
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        n.getParent().replaceChild(n, foldedStringNode);
-        reportCodeChange();
-        return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+    int joinedSize = newChildren.size() - 1;
+    if (additionalSize > originalSize) {
       return n;
     }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
+    Node replacement =
+        new Node(Node.newString(Joiner.on(",").join(newChildren)),
+                 n.getSourceFileName(),
+                 n.getLineno(),
+                 newNode.getCharno()).copyInformationFrom(n);
+    n.getParent().replaceChild(n, replacement);
     reportCodeChange();
-        break;
-    }
-
-    return n;
+    return replacement;
   }
\ No newline at end of file
