diff --git a/tmp/cc0de5e7-072a-4b31-bc39-105cc4453af8_buggy.java b/tmp/142c0c51-d698-470c-8f5f-a2a63160368a_fixed.java
index 388771b..65cf865 100644
--- a/tmp/cc0de5e7-072a-4b31-bc39-105cc4453af8_buggy.java
+++ b/tmp/142c0c51-d698-470c-8f5f-a2a63160368a_fixed.java
@@ -1,37 +1,55 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
+        if (end - start > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
+                if (this.dataType != null && clone.getY() != Series.nullValue) {
+                    if (this.minY == null) {
+                        this.minY = new Double(clone.getY());
+                    }
+                    else {
+                        if (clone.getY() < this.minY.doubleValue()) {
+                            this.minY = new Double(clone.getY());
+                        }
+                    }
+                    if (this.maxY == null) {
+                        this.maxY = new Double(clone.getY());
+                    }
+                    else {
+                        if (clone.getY() > this.maxY.doubleValue()) {
+                            this.maxY = new Double(clone.getY());
+                        }
+                    }
+                }
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
\ No newline at end of file
