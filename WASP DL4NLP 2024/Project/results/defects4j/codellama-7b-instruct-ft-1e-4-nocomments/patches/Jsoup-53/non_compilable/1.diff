diff --git a/tmp/ebf6be3b-0980-4eb9-85b9-a48fd8ec898e_buggy.java b/tmp/54583c2a-e3ae-4602-ac0b-fe72706f987d_fixed.java
index fecb896..8d51b1a 100644
--- a/tmp/ebf6be3b-0980-4eb9-85b9-a48fd8ec898e_buggy.java
+++ b/tmp/54583c2a-e3ae-4602-ac0b-fe72706f987d_fixed.java
@@ -1,34 +1,48 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
-
+        boolean inSingle = false;
+        boolean inDouble = false;
+        int startIndex = pos;
         do {
             if (isEmpty()) break;
             Character c = consume();
             if (last == 0 || last != ESC) {
                 if (c.equals(open)) {
                     depth++;
                     if (start == -1)
                         start = pos;
                 }
                 else if (c.equals(close))
                     depth--;
             }
-
+            if (DepthSearch.ATTR_VALUE.equals(last.toString()) && c.equals(open))
+                inSingle = true;
+            if (inSingle && !inDouble) {
+                depth--;
+                if (last != open) {
+                	if (c.equals(open) && DepthSearch.ATTR_VALUE.equals(last))
+                		depth++;
+                    if (searchForwards(DepthSearch.ATTR_VALUE + ']', open, DepthSearch.ATTR_VALUE))
+                        inSingle = false;
+                }
+            }
+            else if (DepthSearch.ATTR_VALUE.equals(last.toString()) && c.equals("["))
+                inDouble = true;
+            else if (inDouble && !inSingle) {
+                depth--;
+                if (last != '['){
+                	if (DepthSearch.ATTR_VALUE.equals(last) && c.equals(']'))
+                		depth++;
+                    if (searchForwards("]" + DepthSearch.ATTR_VALUE, ']', DepthSearch.ATTR_VALUE))
+                        inDouble = false;
+                }
+            }            
             if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+                end = pos; 
             last = c;
         } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        return (end >= 0) ? queue.substring(start, end + 1) : "";
     }
\ No newline at end of file
