diff --git a/tmp/614b3457-85ea-413f-8456-9af50945a7d4_buggy.java b/tmp/90693b96-223d-4902-aeb5-eb5757340cd9_fixed.java
index 55b319a..7afc4d1 100644
--- a/tmp/614b3457-85ea-413f-8456-9af50945a7d4_buggy.java
+++ b/tmp/90693b96-223d-4902-aeb5-eb5757340cd9_fixed.java
@@ -1,77 +1,113 @@
     /**
      * <p>Converts a String to a boolean (optimised for performance).</p>
      * 
      * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
      * (case insensitive) will return <code>true</code>. Otherwise,
      * <code>false</code> is returned.</p>
      * 
      * <p>This method performs 4 times faster (JDK1.4) than
      * <code>Boolean.valueOf(String)</code>. However, this method accepts
      * 'on' and 'yes' as true values.
      *
      * <pre>
      *   BooleanUtils.toBoolean(null)    = false
      *   BooleanUtils.toBoolean("true")  = true
      *   BooleanUtils.toBoolean("TRUE")  = true
      *   BooleanUtils.toBoolean("tRUe")  = true
      *   BooleanUtils.toBoolean("on")    = true
      *   BooleanUtils.toBoolean("yes")   = true
      *   BooleanUtils.toBoolean("false") = false
      *   BooleanUtils.toBoolean("x gti") = false
      * </pre>
      *
      * @param str  the String to check
      * @return the boolean value of the string, <code>false</code> if no match
      */
     public static boolean toBoolean(String str) {
-        // Previously used equalsIgnoreCase, which was fast for interned 'true'.
-        // Non interned 'true' matched 15 times slower.
-        // 
-        // Optimisation provides same performance as before for interned 'true'.
-        // Similar performance for null, 'false', and other strings not length 2/3/4.
-        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
-        if (str == "true") {
-            return true;
-        }
         if (str == null) {
             return false;
         }
-        switch (str.length()) {
+        final int len = str.length();
+        if (len < 1) {
+            return false;
+        }
+        switch (len) {
+            case 1: {
+                char ch0 = str.charAt(0);
+                return
+                    ch0 == 'y' ||
+                    ch0 == 'Y' ||
+                    ch0 == 't' ||
+                    ch0 == 'T' ||
+                    ch0 == '1';
+            }
             case 2: {
                 char ch0 = str.charAt(0);
                 char ch1 = str.charAt(1);
                 return 
-                    (ch0 == 'o' || ch0 == 'O') &&
-                    (ch1 == 'n' || ch1 == 'N');
+                    ch0 == 'o' &&
+                    ch1 == 'n'     || 
+                    ch0 == 't' &&
+                    ch1 == 'r'     || 
+                    ch0 == 'y' &&
+                    ch1 == 'e'     ||
+                    ch0 == 'O' &&
+                    ch1 == 'N'     || 
+                    ch0 == 'T' &&
+                    ch1 == 'R'     || 
+                    ch0 == 'Y' &&
+                    ch1 == 'E'      ;
             }
             case 3: {
-                char ch = str.charAt(0);
-                if (ch == 'y') {
+                char ch0 = str.charAt(0);
+                char ch1 = str.charAt(1);
+                char ch2 = str.charAt(2);
                 return 
-                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&
-                        (str.charAt(2) == 's' || str.charAt(2) == 'S');
-                }
-                if (ch == 'Y') {
-                    return 
-                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
-                        (str.charAt(2) == 'S' || str.charAt(2) == 's');
-                }
+                    ch0 == 'o' &&
+                    ch1 == 'n' &&
+                    ch2 == 'e'     || 
+                    ch0 == 'o' &&
+                    ch1 == 'T' &&
+                    ch2 == 'R'     || 
+                    ch0 == 't' &&
+                    ch1 == 'r' &&
+                    ch2 == 'u'     || 
+                    ch0 == 'y' &&
+                    ch1 == 'e' &&
+                    ch2 == 's'      ;
             }
             case 4: {
-                char ch = str.charAt(0);
-                if (ch == 't') {
+                char ch0 = str.charAt(0);
+                char ch1 = str.charAt(1);
+                char ch2 = str.charAt(2);
+                char ch3 = str.charAt(3);
                 return 
-                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&
-                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&
-                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');
+                    ch0 == 'f' &&
+                    ch1 == 'a' &&
+                    ch2 == 'l' &&
+                    ch3 == 's'  || 
+                    ch0 == 'f' &&
+                    ch1 == 'A' &&
+                    ch2 == 'L' &&
+                    ch3 == 'S'  || 
+                    ch0 == 'o' &&
+                    ch1 == 'n' &&
+                    ch2 == 'e' &&
+                    ch3 == 's'   ;
             }
-                if (ch == 'T') {
+            case 5: {
+                char ch0 = str.charAt(0);
+                char ch1 = str.charAt(1);
+                char ch2 = str.charAt(2);
+                char ch3 = str.charAt(3);
+                char ch4 = str.charAt(4);
                 return 
-                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&
-                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&
-                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');
-                }
+                    ch0 == 'o' &&
+                    ch1 == 'f' &&
+                    ch2 == 'f' &&
+                    ch3 == 'e' &&
+                    ch4 == 's'   ;
             }
         }
         return false;
     }
\ No newline at end of file
