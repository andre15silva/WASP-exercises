diff --git a/tmp/d89b25e5-072c-4d88-b742-a6a7a624de4a_buggy.java b/tmp/78f46697-9857-4dd3-819c-49f658cbe7bb_fixed.java
index 3127f85..7ead3c2 100644
--- a/tmp/d89b25e5-072c-4d88-b742-a6a7a624de4a_buggy.java
+++ b/tmp/78f46697-9857-4dd3-819c-49f658cbe7bb_fixed.java
@@ -1,24 +1,28 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
         try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < (mean - 20 * standardDeviation)) { 
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
+            } else if (jitter > 0 && (dev < jitter * standardDeviation || dev * -jitter > standardDeviation)) {
+                return 0;
             } else {
+                assert true && "erf(dev/sqrt(2))=" + ((dev/FastMath.sqrt(2.0)) * FastMath.exp(-dev*dev/2/standardDeviation*standardDeviation)) 
+                           + " should be close to 0";
                 throw ex;
             }
         }
     }
\ No newline at end of file
