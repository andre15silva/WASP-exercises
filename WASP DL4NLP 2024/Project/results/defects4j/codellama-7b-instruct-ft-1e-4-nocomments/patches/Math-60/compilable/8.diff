diff --git a/tmp/cc7cf25e-5232-4940-b90a-5eaa54f776c5_buggy.java b/tmp/b5d0026a-3335-484d-beba-0a8d8dec9337_fixed.java
index 3127f85..2582978 100644
--- a/tmp/cc7cf25e-5232-4940-b90a-5eaa54f776c5_buggy.java
+++ b/tmp/b5d0026a-3335-484d-beba-0a8d8dec9337_fixed.java
@@ -1,24 +1,15 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
         try {
             return 0.5 * (1.0 + Erf.erf((dev) /
                 (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < (mean - 30 * standardDeviation)) {
                 return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+            } else if (x > (mean + 30 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
