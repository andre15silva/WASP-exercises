diff --git a/tmp/7af2a68b-83e1-430d-af1f-7ee48f1dde88_buggy.java b/tmp/70db42ad-cf90-41a0-af60-ebd5229a4c7e_fixed.java
index 904dba7..1972fd1 100644
--- a/tmp/7af2a68b-83e1-430d-af1f-7ee48f1dde88_buggy.java
+++ b/tmp/70db42ad-cf90-41a0-af60-ebd5229a4c7e_fixed.java
@@ -1,46 +1,55 @@
   private String format(JSError error, boolean warning) {
-    // extract source excerpt
     SourceExcerptProvider source = getSource();
     String sourceExcerpt = source == null ? null :
         excerpt.get(
             source, error.sourceName, error.lineNumber, excerptFormatter);
-
-    // formatting the message
     StringBuilder b = new StringBuilder();
     if (error.sourceName != null) {
       b.append(error.sourceName);
       if (error.lineNumber > 0) {
         b.append(':');
         b.append(error.lineNumber);
       }
       b.append(": ");
     }
-
     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
     b.append(" - ");
-
     b.append(error.description);
     b.append('\n');
     if (sourceExcerpt != null) {
       b.append(sourceExcerpt);
-      b.append('\n');
       int charno = error.getCharno();
-
-      // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
-      // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
-        for (int i = 0; i < charno; i++) {
-          char c = sourceExcerpt.charAt(i);
-          if (Character.isWhitespace(c)) {
-            b.append(c);
-          } else {
+      if (linebreaker.equals(LINE) && 0 <= charno && charno < sourceExcerpt.length()) {
+        char c = sourceExcerpt.charAt(charno);
+        if (c == '\r' || c == '\n' || c == '\f') {
+          if (charno < sourceExcerpt.length() - 1
+              && (sourceExcerpt.charAt(charno + 1) == '\r'
+                  || sourceExcerpt.charAt(charno + 1) == '\n'
+                  || sourceExcerpt.charAt(charno + 1) == '\f')) {
+            charno++;
+          }
+        }
+        b.append('\n');
+        int i = 0;
+        while (0 <= charno - i - 1) {
+          switch (sourceExcerpt.charAt(charno - i - 1)) {
+            case '\t':
+              do {
                 b.append(' ');
+                i++;
+              } while (i % 8 != 0);
+              break;
+            case '\r':
+            case '\n':
+            case '\f':
+              break;
+            default:
+              b.append(" ");
+              i++;
           }
         }
         b.append("^\n");
       }
     }
     return b.toString();
   }
\ No newline at end of file
