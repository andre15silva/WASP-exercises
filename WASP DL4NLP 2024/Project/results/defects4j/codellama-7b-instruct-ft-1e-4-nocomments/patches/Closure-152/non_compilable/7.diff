diff --git a/tmp/2577f305-9048-4c6e-85b8-f0b5879b7da3_buggy.java b/tmp/f3dfba7d-b9be-4346-829f-80fde423ea7a_fixed.java
index 58a1651..8a492e8 100644
--- a/tmp/2577f305-9048-4c6e-85b8-f0b5879b7da3_buggy.java
+++ b/tmp/f3dfba7d-b9be-4346-829f-80fde423ea7a_fixed.java
@@ -1,32 +1,11 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
-
-    call = (ArrowType) safeResolve(call, t, scope);
-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
-
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
-
-    boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
-    for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-      resolvedInterfaces.add(resolvedIface);
-      changed |= (resolvedIface != iface);
-    }
-    if (changed) {
-      implementedInterfaces = resolvedInterfaces.build();
-    }
-
-    if (subTypes != null) {
-      for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
-      }
+    JSType returnType = call.getReturnType();
+    if (!(returnType instanceof NamedType)
+        || ((NamedType) returnType).getRef() instanceof FunctionType) {
+      return super.resolveInternal(t, scope);
     }
-
+    setReturnType((FunctionType) safeResolve(returnType, t, scope));
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
