diff --git a/tmp/d169dd66-a7e9-4af7-9be3-51b2be869f0c_buggy.java b/tmp/71db1224-ed40-4d4a-995a-5bdec5a63797_fixed.java
index 58a1651..75927ca 100644
--- a/tmp/d169dd66-a7e9-4af7-9be3-51b2be869f0c_buggy.java
+++ b/tmp/71db1224-ed40-4d4a-995a-5bdec5a63797_fixed.java
@@ -1,32 +1,30 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
-
+    boolean haveBackwardTypedef = call.getJSType() instanceof TypedefType;
+    if (haveBackwardTypedef)
+      call.toObjectType();
     call = (ArrowType) safeResolve(call, t, scope);
+    if (haveBackwardTypedef)
+      call.fromObjectType();
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
-
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
     typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
-
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
-
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
+        subTypes.set(
+            i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
-
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
