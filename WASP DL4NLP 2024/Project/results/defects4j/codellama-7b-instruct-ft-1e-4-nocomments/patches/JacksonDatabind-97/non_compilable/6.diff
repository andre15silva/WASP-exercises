diff --git a/tmp/ae73c79d-9739-4369-9bb2-b17c14e32536_buggy.java b/tmp/f449e388-ef30-4f5f-96ef-158ee4bc49f4_fixed.java
index dda9103..f290b1c 100644
--- a/tmp/ae73c79d-9739-4369-9bb2-b17c14e32536_buggy.java
+++ b/tmp/f449e388-ef30-4f5f-96ef-158ee4bc49f4_fixed.java
@@ -1,13 +1,30 @@
     @Override
     public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException
     {
         if (_value == null) {
             ctxt.defaultSerializeNull(gen);
-        } else if (_value instanceof JsonSerializable) {
-            ((JsonSerializable) _value).serialize(gen, ctxt);
         } else {
-            // 25-May-2018, tatu: [databind#1991] do not call via generator but through context;
-            //    this to preserve contextual information
+            if (_value instanceof POJONode) {
+                MapperFeature.Std app = ctxt.getSerializerProvider().findPOJOMapper((POJONode) _value);
+                if (app != null) {
+                    POJONode pojo = (POJONode) _value;
+                    Object object = pojo.getWrappedObject();
+                    if (object instanceof JsonSerializable) {
+                        JsonSerializer<?> ser = ctxt.findContextualValueSerializer((JsonSerializable) object,
+                                _value);
+                        ((JsonSerializable) object).serialize(gen, ctxt);
+                    } else if (object instanceof CharSequence) {
+                        gen.writeString(String.valueOf(object));
+                    } else if (object instanceof Number) {
+                        gen.writeNumber(((Number) object).doubleValue());
+                    } else if (object instanceof Boolean) {
+                        gen.writeBoolean(((Boolean) object).booleanValue());
+                    } else {
+                        gen.writeObject(object);
+                    }
+                }
+            } else {
                 gen.writeObject(_value);
             }
         }
+    }
\ No newline at end of file
