diff --git a/tmp/99d90537-49f4-4c3f-8463-6c7025de1ac7_buggy.java b/tmp/1a90d7fd-15c1-4ce9-9caa-dd7c1383c5fd_fixed.java
index d27c40c..443a034 100644
--- a/tmp/99d90537-49f4-4c3f-8463-6c7025de1ac7_buggy.java
+++ b/tmp/1a90d7fd-15c1-4ce9-9caa-dd7c1383c5fd_fixed.java
@@ -1,49 +1,74 @@
     /** Compute two arguments arc tangent of a derivative structure.
      * @param y array holding the first operand
      * @param yOffset offset of the first operand in its array
      * @param x array holding the second operand
      * @param xOffset offset of the second operand in its array
      * @param result array where result must be stored (for
      * two arguments arc tangent the result array <em>cannot</em>
      * be the input array)
      * @param resultOffset offset of the result in its array
      */
     public void atan2(final double[] y, final int yOffset,
                       final double[] x, final int xOffset,
                       final double[] result, final int resultOffset) {
-
-        // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
+        multiply(x, xOffset, x, xOffset, tmp1, 0);      
         double[] tmp2 = new double[getSize()];
-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
-
+        multiply(y, yOffset, y, yOffset, tmp2, 0);     
+        add(tmp1, 0, tmp2, 0, tmp2, 0);                 
+        rootN(tmp2, 0, 2, tmp1, 0);                     
         if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
+            add(tmp1, 0, x, xOffset, tmp2, 0);          
+            divide(y, yOffset, tmp2, 0, tmp1, 0);       
+            atan(tmp1, 0, tmp2, 0);                     
             for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+                result[resultOffset + i] = 2 * tmp2[i];  
+            }
+        } else if (x[xOffset] + y[yOffset] > 0) {
+            add(tmp1, 0, x, xOffset, tmp2, 0);          
+            divide(y, yOffset, tmp2, 0, tmp1, 0);       
+            atan(tmp1, 0, tmp2, 0);                     
+            result[resultOffset] = FastMath.PI;
+            for (int i = 1; i < tmp2.length; ++i) {
+                result[resultOffset + i] = 0;
+            }
+        } else if (x[xOffset] + y[yOffset] < 0) {
+            subtract(tmp1, 0, x, xOffset, tmp2, 0);     
+            divide(y, yOffset, tmp2, 0, tmp1, 0);       
+            atan(tmp1, 0, tmp2, 0);                     
+            result[resultOffset] = -FastMath.PI;
+            for (int i = 1; i < tmp2.length; ++i) {
+                result[resultOffset + i] = 0;
+            }
+        } else if (x[xOffset] > 0) {
+            add(tmp1, 0, x, xOffset, tmp2, 0);          
+            divide(y, yOffset, tmp2, 0, tmp1, 0);       
+            atan(tmp1, 0, tmp2, 0);                     
+            result[resultOffset] =
+                    FastMath.copySign(FastMath.PI, y[yOffset]);
+            for (int i = 1; i < tmp2.length; ++i) {
+                result[resultOffset + i] = 0;
+            }
+        } else if (x[xOffset] < 0) {
+            subtract(tmp1, 0, x, xOffset, tmp2, 0);     
+            divide(y, yOffset, tmp2, 0, tmp1, 0);       
+            atan(tmp1, 0, tmp2, 0);                     
+            result[resultOffset] =
+                    FastMath.copySign(-FastMath.PI, y[yOffset]);
+            for (int i = 1; i < tmp2.length; ++i) {
+                result[resultOffset + i] = 0;
+            }
+        } else if (FastMath.abs(y[yOffset]) > Double.MIN_VALUE) {
+            divide(y, yOffset, tmp1, 0, tmp2, 0);        
+            result[resultOffset] = FastMath.copySign(FastMath.PI / 2, y[yOffset]);
+            for (int i = 1; i < tmp2.length; ++i) {
+                result[resultOffset + i] = FastMath.copySign(0, y[yOffset]);
             }
-
         } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
-            result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+            divide(y, yOffset, tmp1, 0, tmp2, 0);         
+            result[resultOffset] = FastMath.copySign(FastMath.PI, y[yOffset]);
             for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+                result[resultOffset + i] = FastMath.copySign(0, y[yOffset]);
             }
-
         }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
     }
\ No newline at end of file
