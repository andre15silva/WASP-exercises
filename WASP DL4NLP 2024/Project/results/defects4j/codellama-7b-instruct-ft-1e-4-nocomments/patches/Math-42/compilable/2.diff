diff --git a/tmp/02e361dc-9e26-42e6-bf87-650b848e30c0_buggy.java b/tmp/72d461a0-f75b-4174-ad86-aef1855b5528_fixed.java
index efa499e..b9a2962 100644
--- a/tmp/02e361dc-9e26-42e6-bf87-650b848e30c0_buggy.java
+++ b/tmp/72d461a0-f75b-4174-ad86-aef1855b5528_fixed.java
@@ -1,35 +1,27 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
-
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
+          if (basicRow != null) {
               if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
                   coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
               } else {
                   basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                  coefficients[i] = getEntry(getBasicRow(colIndex), getRhsOffset());
               }
+          } else {
+              coefficients[i] = 0;
           }
-      return new RealPointValuePair(coefficients, f.getValue(coefficients));
+      }
+      return new RealPointValuePair(coefficients,
+          f.getValue(coefficients) - (restrictToNonNegative ? 0 : mostNegative));
     }
\ No newline at end of file
