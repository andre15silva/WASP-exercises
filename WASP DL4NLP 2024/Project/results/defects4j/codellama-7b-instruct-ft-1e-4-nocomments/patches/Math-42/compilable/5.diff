diff --git a/tmp/d0701c68-1eb3-4f39-9e2a-e20cd11dd797_buggy.java b/tmp/300ad68d-279b-4cf5-a36d-dc3063882f19_fixed.java
index efa499e..a9da854 100644
--- a/tmp/d0701c68-1eb3-4f39-9e2a-e20cd11dd797_buggy.java
+++ b/tmp/300ad68d-279b-4cf5-a36d-dc3063882f19_fixed.java
@@ -1,35 +1,30 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
-
+      double mostNegative = restrictToNonNegative ? 0 : Integer.MIN_VALUE;
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
+          if (null != basicRow) {
             if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+                  coefficients[i] = 0 - mostNegative;
             } else {
-              basicRows.add(basicRow);
               coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                    getEntry(basicRow, getRhsOffset()) + mostNegative;
+              basicRows.add(basicRow);
+            }
+          } else {
+              coefficients[i] = 0 - mostNegative;
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
