diff --git a/tmp/551e3144-23b5-490e-9b2e-b1bcc953210b_buggy.java b/tmp/83745840-610a-4228-b4be-ca2b78963aeb_fixed.java
index efa499e..d73ff28 100644
--- a/tmp/551e3144-23b5-490e-9b2e-b1bcc953210b_buggy.java
+++ b/tmp/83745840-610a-4228-b4be-ca2b78963aeb_fixed.java
@@ -1,35 +1,28 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
-
       Set<Integer> basicRows = new HashSet<Integer>();
+      double mathConstant = double.MIN_VALUE;
+      if ((double.MIN_VALUE < 0) == restrictToNonNegative) {
+        mathConstant = -(double.MIN_VALUE + 1);
+      }
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
           }
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
           if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+              coefficients[i] = 0 - mostNegative + mathConstant;
           } else {
               basicRows.add(basicRow);
               coefficients[i] =
                   (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                  mostNegative + mathConstant;
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
