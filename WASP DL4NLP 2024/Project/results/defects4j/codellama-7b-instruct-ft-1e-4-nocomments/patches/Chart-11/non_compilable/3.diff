diff --git a/tmp/04c6da69-ebf9-4fde-b3ea-d0ae3a7c43aa_buggy.java b/tmp/e38b7a74-9368-4c22-b955-676c3dfc5b77_fixed.java
index ad7255c..a58d3d5 100644
--- a/tmp/04c6da69-ebf9-4fde-b3ea-d0ae3a7c43aa_buggy.java
+++ b/tmp/e38b7a74-9368-4c22-b955-676c3dfc5b77_fixed.java
@@ -1,42 +1,32 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
-        if (p1.getWindingRule() != p2.getWindingRule()) {
+        PathIterator itr1 = p1.getPathIterator(null);
+        PathIterator itr2 = p2.getPathIterator(new AffineTransform());
+        double prevx1 = Double.NaN;
+        while ( !itr1.isDone() ) {
+            itr1.currentSegment(new double[] { 1, 2, 3, 4, 5, 6 });
+            if( ! Double.isNaN(prevx1) ){
+                if( Math.abs(prevx1 - itr1.getCoordinate().getX()) > 0.0000000001 ) {
+                    System.out.println("failed at index: " + (itr1.getIndex()-1));
                     return false;
                 }
-        PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
-        double[] d1 = new double[6];
+            }
+            prevx1 = itr1.getCoordinate().getX();
             double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
+            int seg2 = itr2.currentSegment(d2);
+            if (seg2 != itr1.currentSegment(new double[] { 1, 2, 3, 4, 5, 6 })) {
                 return false;
             }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
+            if (!Arrays.equals(d2, new double[] { 1, 2, 3, 4, 5, 6 })) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
-                return false;
-            }
-            iterator1.next();
-            iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
+            itr1.next();
+            itr2.next();
         }
-        return true;
+        return itr2.isDone();
     }
\ No newline at end of file
