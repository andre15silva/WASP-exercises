diff --git a/tmp/5cab3975-60f6-4705-b662-de9abcea93d8_buggy.java b/tmp/e123d6d5-45e3-4fb3-bc2d-1cbf2b57351d_fixed.java
index ad7255c..8d39287 100644
--- a/tmp/5cab3975-60f6-4705-b662-de9abcea93d8_buggy.java
+++ b/tmp/e123d6d5-45e3-4fb3-bc2d-1cbf2b57351d_fixed.java
@@ -1,42 +1,67 @@
     /**
      * Tests two polygons for equality.  If both are <code>null</code> this
      * method returns <code>true</code>.
      *
      * @param p1  path 1 (<code>null</code> permitted).
      * @param p2  path 2 (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
         PathIterator iterator2 = p1.getPathIterator(null);
-        double[] d1 = new double[6];
-        double[] d2 = new double[6];
         boolean done = iterator1.isDone() && iterator2.isDone();
         while (!done) {
             if (iterator1.isDone() != iterator2.isDone()) {
                 return false;
             }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
+            int seg1 = iterator1.currentSegment(pts1);
+            int seg2 = iterator2.currentSegment(pts2);
             if (seg1 != seg2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            switch (seg1) {
+                case PathIterator.SEG_MOVETO :
+                case PathIterator.SEG_CLOSE :
+                    if (!equal(pts1, pts2)) {
                         return false;
                     }
+                    break;
+                case PathIterator.SEG_LINETO :
+                    if (!equal(pts1, pts2)) {
+                        return false;
+                    }
+                    break;
+                case PathIterator.SEG_QUADTO :
+                    if (!equal(pts1, pts2)) {
+                        return false;
+                    }
+                    break;
+                case PathIterator.SEG_CUBICTO :
+                    if (!equal(pts1, pts2)) {
+                        return false;
+                    }
+                    break;
+                case PathIterator.SEG_ARCTO :
+                    if (!equal(pts1, pts2)) {
+                        return false;
+                    }
+                    break;
+                default:
+                    throw new RuntimeException("Unrecognized segment type.");
+            }
             iterator1.next();
             iterator2.next();
             done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
\ No newline at end of file
