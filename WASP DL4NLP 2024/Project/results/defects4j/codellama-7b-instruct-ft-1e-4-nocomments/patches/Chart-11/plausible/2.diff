diff --git a/tmp/e9813176-89a9-4855-93e1-a6cc75a98a83_buggy.java b/tmp/7500d429-04a2-4f38-b695-d45320cc90df_fixed.java
index ad7255c..af245b4 100644
--- a/tmp/e9813176-89a9-4855-93e1-a6cc75a98a83_buggy.java
+++ b/tmp/7500d429-04a2-4f38-b695-d45320cc90df_fixed.java
@@ -1,42 +1,43 @@
     /**
      * Tests two polygons for equality.  If both are <code>null</code> this
      * method returns <code>true</code>.
      *
      * @param p1  path 1 (<code>null</code> permitted).
      * @param p2  path 2 (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
-        PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
-        double[] d1 = new double[6];
-        double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
+        PathIterator p1pi = p1.getPathIterator(null);
+        PathIterator p2pi = p2.getPathIterator(null);
+        double[] p1d = new double[6];
+        double[] p2d = new double[6];
+        boolean more1 = p1pi.isDone() && p2pi.isDone();
+        while (!more1) {
+            if (p1pi.isDone() != p2pi.isDone()) {
                 return false;
             }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
+            int curr1 = p1pi.currentSegment(p1d);
+            int curr2 = p2pi.currentSegment(p2d);
+            if (curr1 != curr2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            curr1 = p1pi.currentSegment(p1d);
+            if (!Arrays.equals(p1d, p2d)) {
                 return false;
             }
-            iterator1.next();
-            iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
+            p1pi.next();
+            p2pi.next();
+            more1 = p1pi.isDone() && p2pi.isDone();
         }
         return true;
     }
\ No newline at end of file
