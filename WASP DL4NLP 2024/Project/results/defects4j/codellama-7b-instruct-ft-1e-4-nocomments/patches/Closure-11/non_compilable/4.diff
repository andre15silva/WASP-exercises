diff --git a/tmp/9c3a75c1-98cd-43ce-973e-e0bbb4ecb09c_buggy.java b/tmp/54687f32-c232-4f5f-9b47-53811b30b367_fixed.java
index 57c40b2..b8664a0 100644
--- a/tmp/9c3a75c1-98cd-43ce-973e-e0bbb4ecb09c_buggy.java
+++ b/tmp/54687f32-c232-4f5f-9b47-53811b30b367_fixed.java
@@ -1,27 +1,27 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
-
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
       return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
-        "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    } else {
+      String propDefSite = "No properties on this expression";
+      if (childType.isUndefinedType()) {
+        report(t, objNode, propDefSite, childType);
+      } else if (childType.isNullType()) {
+        report(t, objNode, propDefSite, childType,
+            getNativeType(OBJECT_TYPE));
+      } else if (!validator.expectNotNullOrUndefined(
+          t, n, childType, propDefSite, getNativeType(OBJECT_TYPE))) {
+        reportWarning(t, objNode,
+            propDefSite + "\n" +
+            "found   : " + getJSType(objNode) + "\n" +
+            "required: Object");
+      } else {
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
     ensureTyped(t, n);
   }
\ No newline at end of file
