diff --git a/tmp/58b2b236-4cd5-4cdf-b6b9-0faabe3d0ba1_buggy.java b/tmp/1f033d0d-1344-4525-be92-12a232b21232_fixed.java
index 57c40b2..c2fe24d 100644
--- a/tmp/58b2b236-4cd5-4cdf-b6b9-0faabe3d0ba1_buggy.java
+++ b/tmp/1f033d0d-1344-4525-be92-12a232b21232_fixed.java
@@ -1,27 +1,34 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
-    // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
-
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
       return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+    } else if (objNode.isGetProp()) {
+      report(t, n, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "object");
+    } else if (objNode.isForIn() || objNode.isForInVar()) {
+      report(t, n, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "Object or Array");
+    } else if (objNode.isObjectLit() || objNode.isNull()) {
+      if (validator.expectNotNullOrUndefined(
+          t, n, childType, "No properties on this expression",
+          getNativeType(OBJECT_TYPE))) {
+        checkPropertyAccess(childType, property.getString(), t, n);
+      }
+    } else if (objNode.isHook() ||
+        objNode.isCall()) {
+      report(t, n, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "Object or Array");
+    } else if (!validator.expectNotNullOrUndefined(
+        t, objNode, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      report(t, n, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'",
+          new JSType[] {
+            getNativeType(OBJECT_TYPE),
+            getNativeType(ARRAY_TYPE)
+          });
+    } else {
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
