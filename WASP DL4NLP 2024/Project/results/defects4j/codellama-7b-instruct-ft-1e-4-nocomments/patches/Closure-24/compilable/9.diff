diff --git a/tmp/04bd7c58-d505-4e43-b760-1050521acd35_buggy.java b/tmp/899846f8-7e12-4ab9-9785-9486d391fb51_fixed.java
index 602226b..28f5595 100644
--- a/tmp/04bd7c58-d505-4e43-b760-1050521acd35_buggy.java
+++ b/tmp/899846f8-7e12-4ab9-9785-9486d391fb51_fixed.java
@@ -1,26 +1,22 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
-
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          if (!n.getString().equals("goog") && !n.getFirstChild().getString().equals("goog")) {
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
         }
       }
+    }
\ No newline at end of file
