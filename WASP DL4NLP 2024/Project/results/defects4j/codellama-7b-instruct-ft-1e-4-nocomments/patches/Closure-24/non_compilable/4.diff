diff --git a/tmp/32f84d06-d29a-4521-bb0f-5e2f31add328_buggy.java b/tmp/21e729c1-b391-4d40-a59f-e9cce3dd8947_fixed.java
index 602226b..0dec732 100644
--- a/tmp/32f84d06-d29a-4521-bb0f-5e2f31add328_buggy.java
+++ b/tmp/21e729c1-b391-4d40-a59f-e9cce3dd8947_fixed.java
@@ -1,26 +1,25 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
-
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+        } else if (JSDocInfo.GOOG_SCOPE_FUNCTION.equals(v.getDeclaredType())
+            || v.getScope().getParent() instanceof FunctionScope) {
+        } else if (n.isAdd() &&
+            (!n.hasFirstChild() ||
+                !n.getFirstChild().isQualifiedName())) {
         } else {
-          // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
         }
       }
     }
\ No newline at end of file
