diff --git a/tmp/07b25a9b-17a6-4f90-beee-29aece51b7c4_buggy.java b/tmp/e6d1480e-0ba8-4497-ae8d-88e7031d947d_fixed.java
index 602226b..7b363b8 100644
--- a/tmp/07b25a9b-17a6-4f90-beee-29aece51b7c4_buggy.java
+++ b/tmp/e6d1480e-0ba8-4497-ae8d-88e7031d947d_fixed.java
@@ -1,26 +1,24 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
-
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+        } else if (n.getType() == Token.NAME) {
+          if (n.isFromExterns() ||
+              NodeUtil.isLocalVarDeclaration(n) ||
+              n.getParent().isFunction()) {
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
         }
       }
+    }
\ No newline at end of file
