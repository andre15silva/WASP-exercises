diff --git a/tmp/2fe4d999-8b31-45ca-8536-c80679b91ac9_buggy.java b/tmp/0fe3fce6-0e8c-4c0c-9c66-daa47b8b71b9_fixed.java
index 602226b..8a2ba65 100644
--- a/tmp/2fe4d999-8b31-45ca-8536-c80679b91ac9_buggy.java
+++ b/tmp/0fe3fce6-0e8c-4c0c-9c66-daa47b8b71b9_fixed.java
@@ -1,26 +1,24 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
-
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          if (type == Token.VAR &&
+              (n.getFirstChild().getType() != Token.GOTO &&
+               n.getFirstChild().getType() != Token.LABEL)) {
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
         }
       }
+    }
\ No newline at end of file
