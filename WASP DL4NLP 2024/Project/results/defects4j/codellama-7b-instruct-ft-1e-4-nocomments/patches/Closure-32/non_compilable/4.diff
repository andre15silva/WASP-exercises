diff --git a/tmp/8e07243c-ad63-4892-b5e5-ea71e55aa0d9_buggy.java b/tmp/e28f3816-a2df-4f99-ab3c-b348a5f81898_fixed.java
index 4be01ab..80db8cd 100644
--- a/tmp/8e07243c-ad63-4892-b5e5-ea71e55aa0d9_buggy.java
+++ b/tmp/e28f3816-a2df-4f99-ab3c-b348a5f81898_fixed.java
@@ -1,115 +1,93 @@
   /**
    * Extracts the text found on the current line and all subsequent
    * until either an annotation, end of comment or end of file is reached.
    * Note that if this method detects an end of line as the first token, it
    * will quit immediately (indicating that there is no text where it was
    * expected).  Note that token = info.token; should be called after this
    * method is used to update the token properly in the parser.
    *
    * @param token The start token.
    * @param option How to handle whitespace.
    *
    * @return The extraction information.
    */
   @SuppressWarnings("fallthrough")
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
-
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
-
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
-
     StringBuilder builder = new StringBuilder();
+    boolean hadStartOfLine = true;
+    boolean hadStar;
+    boolean ignoreStar;
     builder.append(line);
-
     state = State.SEARCHING_ANNOTATION;
     token = next();
-
-    boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
     do {
       switch (token) {
         case STAR:
+          hadStar = true;
           if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
           } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
+            if (hadStartOfLine) {
+              hadStartOfLine = false;
+            } else {
               builder.append(' ');
             }
-
             builder.append('*');
           }
-
           token = next();
           continue;
-
         case EOL:
+          ignoreStar = !hadStar;
+          hadStar = false;
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
-          ignoreStar = true;
+          state = State.SEARCHING_ANNOTATION;
           token = next();
           continue;
-
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
-
             if (option != WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
             }
-
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
-
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
-
             return new ExtractionInfo(multilineText, token);
           }
-
+          if (!hadStar) {
             if (builder.length() > 0) {
               builder.append(' ');
             }
+          }
           builder.append(toString(token));
-
           line = stream.getRemainingJSDocLine();
-
           if (option != WhitespaceOption.PRESERVE) {
             line = trimEnd(line);
           }
-
           builder.append(line);
           token = next();
+          hadStar = false;
       }
     } while (true);
   }
\ No newline at end of file
