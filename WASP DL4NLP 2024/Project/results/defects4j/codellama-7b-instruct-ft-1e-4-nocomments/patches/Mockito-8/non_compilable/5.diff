diff --git a/tmp/aab697da-3e37-4b8d-a5cf-4b7de6b09a17_buggy.java b/tmp/314a0068-463a-4097-bb95-edac2e704eea_fixed.java
index 42b58d0..59675b4 100644
--- a/tmp/aab697da-3e37-4b8d-a5cf-4b7de6b09a17_buggy.java
+++ b/tmp/314a0068-463a-4097-bb95-edac2e704eea_fixed.java
@@ -1,19 +1,22 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
         TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         for (int i = 0; i < actualTypeArguments.length; i++) {
             TypeVariable typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
-
-            if (actualTypeArgument instanceof WildcardType) {
+            if (typeParameter.equals(typeParameters[0]) && typeParameter.getGenericDeclaration() == typeParameters[0].getGenericDeclaration() && (actualTypeArgument instanceof WildcardType)) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+            } else if(actualTypeArgument instanceof TypeVariable) {
+                contextualActualTypeParameters.put(typeParameter, boundsOf(((TypeVariable<?>)actualTypeArgument).getBounds()));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+            if (typeParameter.equals(typeParameters[0]) && typeParameter.getGenericDeclaration() == typeParameters[0].getGenericDeclaration() && actualTypeArgument instanceof WildcardType) {
+                contextualActualTypeParameters.put(typeParameter, boundsOf(((WildcardType)actualTypeArgument).getUpperBounds()));
+            }
         }
     }
\ No newline at end of file
