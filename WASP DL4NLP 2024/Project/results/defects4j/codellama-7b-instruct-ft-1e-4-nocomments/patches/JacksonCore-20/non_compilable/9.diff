diff --git a/tmp/b40918d8-6b4d-4f41-9c56-b81448464a1b_buggy.java b/tmp/018bd1ac-68b8-4e11-8b2b-cac21a4afe81_fixed.java
index a6f008f..7be860e 100644
--- a/tmp/b40918d8-6b4d-4f41-9c56-b81448464a1b_buggy.java
+++ b/tmp/018bd1ac-68b8-4e11-8b2b-cac21a4afe81_fixed.java
@@ -1,11 +1,29 @@
-    /**
-     * Method that can be called on backends that support passing opaque datatypes of
-     * non-JSON formats
-     *
-     * @since 2.8
-     */
     public void writeEmbeddedObject(Object object) throws IOException {
-        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases
-        throw new JsonGenerationException("No native support for writing embedded objects",
-                this);
+        if (object == null) {
+            writer.writeNull();
+            return;
+        }
+        int type = mapper.getConfig().getNodeFactory().typeForValue(object);
+        if (type == JsonParser.NumberType.LONG || type == JsonParser.NumberType.BIG_INTEGER
+                || type == JsonParser.NumberType.BIG_DECIMAL
+                || type == JsonParser.NumberType.INT) {
+            writer.writeNumber(String.valueOf(object));
+        } else {
+            if (object instanceof byte[]) {
+                writer.writeBinary((byte[])object);
+            } else {
+                if (object instanceof BinaryNodeWithLength){
+                    writer.setBinaryLength(0);
+                    writer.writeBinary(((BinaryNodeWithLength) object).getBinary());
+                }
+                else {
+                    String str = String.valueOf(object);
+                    if (!str.equals(JSON_NODE_FACTORY.textNode(str).toString())) {
+                        throw new JsonGenerationException("No native support for writing embedded "
+                                + "objects of type "+object.getClass().getSimpleName(), this);
+                    }
+                    writer.writeRawWithQuotes(str);
+                }
+            }
+        }
     }
\ No newline at end of file
