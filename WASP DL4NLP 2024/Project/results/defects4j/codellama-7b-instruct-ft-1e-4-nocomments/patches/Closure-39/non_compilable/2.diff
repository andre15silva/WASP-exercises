diff --git a/tmp/9308696d-982b-4127-9494-65a1fa25b816_buggy.java b/tmp/1fff5d0e-828d-4345-8749-5a0cdcbb58f8_fixed.java
index e4d90e7..841a4fe 100644
--- a/tmp/9308696d-982b-4127-9494-65a1fa25b816_buggy.java
+++ b/tmp/1fff5d0e-828d-4345-8749-5a0cdcbb58f8_fixed.java
@@ -1,45 +1,59 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
       prettyPrint = false;
-
-      // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
+        if (current.isRecordType()) {
+          if (current.hasReferenceName()) {
+            propertyNames.add(current.getReferenceName());
+          } else {
+            return current.toStringHelper(forAnnotations);
+          }
+        }
         propertyNames.addAll(current.getOwnPropertyNames());
       }
-
       StringBuilder sb = new StringBuilder();
       sb.append("{");
-
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
-
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
+        JSType type = getPropertyType(property);
+        if (type.isRecordType()) {
+          type = type.toMaybeAsSubtype(ObjectType.class);
+          if (type instanceof ProxyObjectType) {
+            ProxyObjectType proxyType = (ProxyObjectType) type;
+            ObjectType targetType = proxyType.getReferencedType();
+            if (proxyType.isCircular().isOverridableBy(targetType)) {
+              sb.append("{...}");
+            } else {
+              sb.append(targetType.toStringHelper(forAnnotations));
+            }
+          } else {
+            sb.append(type.toString());
+          }
+        } else {
+          sb.append(type.toString());
+        }
         ++i;
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
-
       sb.append("}");
-
       prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
\ No newline at end of file
