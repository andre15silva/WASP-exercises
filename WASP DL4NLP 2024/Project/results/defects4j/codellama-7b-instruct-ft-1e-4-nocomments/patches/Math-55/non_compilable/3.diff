diff --git a/tmp/e831d4f0-f1d8-47f1-825d-2da96a5a7567_buggy.java b/tmp/fb722091-9554-4f12-94dc-6d57f85ab891_fixed.java
index 1478ee1..9c02501 100644
--- a/tmp/e831d4f0-f1d8-47f1-825d-2da96a5a7567_buggy.java
+++ b/tmp/fb722091-9554-4f12-94dc-6d57f85ab891_fixed.java
@@ -1,24 +1,15 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+      double denom = FastMath.max(0.0, Double.POSITIVE_INFINITY, FastMath.abs(v2.z), FastMath.abs(v1.x));
+      double ρ = FastMath.scalb(v1.dotProduct(v2) / v2.dotProduct(v2), 30);
+      Vector3D v3 = new Vector3D(v1.x - FastMath.scalb(ρ * v2.y, 60),
+                                 v1.y + FastMath.scalb(ρ * v2.z, 60),
+                                 v1.z + FastMath.scalb(ρ * v2.x, 60));
+      return new Vector3D(v3.z * v2.x - v3.x * v2.z,
+                          v3.z * v2.y - v3.y * v2.z,
+                          v3.x * v2.y - v3.y * v2.x);
   }
\ No newline at end of file
