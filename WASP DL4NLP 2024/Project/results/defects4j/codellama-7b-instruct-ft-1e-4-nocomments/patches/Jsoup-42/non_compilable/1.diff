diff --git a/tmp/6f26fe55-f0a2-40ad-b257-8c64baec4d57_buggy.java b/tmp/d92dced8-2189-4902-ab0e-38de1a2e5db4_fixed.java
index 442a001..6db3cfc 100644
--- a/tmp/6f26fe55-f0a2-40ad-b257-8c64baec4d57_buggy.java
+++ b/tmp/d92dced8-2189-4902-ab0e-38de1a2e5db4_fixed.java
@@ -1,39 +1,50 @@
-    /**
-     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
-     * list will not be reflected in the DOM.
-     * @return a list of key vals
-     */
     public List<Connection.KeyVal> formData() {
         ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();
-
-        // iterate the form control elements and accumulate their values
         for (Element el: elements) {
-            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
-            String name = el.attr("name");
-            if (name.length() == 0) continue;
+            if (!el.tag().isFormSubmittable()) continue; 
+            String elName = el.attr("name");
+            if (elName.length() == 0) continue;
             String type = el.attr("type");
-
-            if ("select".equals(el.tagName())) {
+            if (el.tag().isInputLike()) {
+                String elVal = el.val();
+                if (elVal != null && !"".equals(elVal))
+                    data.add(Connection.KeyVal.create(elName, elVal));
+            } else if ("select".equals(el.tagName()) && el.hasAttr("multiple")) {
+                Elements options = el.select("option[selected]");
+                for (Element option: options) {
+                    Connection.KeyVal keyval = HttpConnection.KeyVal.create(elName, option.val());
+                    if (keyval != null) data.add(keyval);
+                }
+                if (data.isEmpty() && options.isEmpty()) {
+                    Element option = el.select("option").first();
+                    if (option != null)
+                        data.add(HttpConnection.KeyVal.create(elName, option.val()));
+                }
+            } else if ("textarea".equals(el.tagName())) {
+                String val = el.val();
+                data.add(HttpConnection.KeyVal.create(elName, val));
+            } else if ("select".equals(el.tagName()) && !hasEmptyValue(el)) {
+                String val = el.val();
+                data.add(HttpConnection.KeyVal.create(elName, val));
+            } else if ("select".equals(el.tagName()) && !el.hasAttr("multiple")) {
                 Elements options = el.select("option[selected]");
                 boolean set = false;
                 for (Element option: options) {
-                    data.add(HttpConnection.KeyVal.create(name, option.val()));
+                    Connection.KeyVal keyval = HttpConnection.KeyVal.create(elName, option.val());
+                    if (keyval != null) data.add(keyval);
                     set = true;
                 }
                 if (!set) {
                     Element option = el.select("option").first();
                     if (option != null)
-                        data.add(HttpConnection.KeyVal.create(name, option.val()));
+                        data.add(HttpConnection.KeyVal.create(elName, option.val()));
                 }
             } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
-                // only add checkbox or radio if they have the checked attribute
                 if (el.hasAttr("checked")) {
                     final String val = el.val();
-                    data.add(HttpConnection.KeyVal.create(name, val));
+                    data.add(HttpConnection.KeyVal.create(elName, val));
                 }
-            } else {
-                data.add(HttpConnection.KeyVal.create(name, el.val()));
             }
         }
         return data;
     }
\ No newline at end of file
