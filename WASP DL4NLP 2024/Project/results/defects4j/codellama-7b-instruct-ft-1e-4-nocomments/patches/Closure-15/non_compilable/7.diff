diff --git a/tmp/7c6ba072-5bd9-4a9d-9550-7b1b997d4d7f_buggy.java b/tmp/e25fb341-f30e-4885-bd45-a21c61d47789_fixed.java
index b56897c..3a4f1f7 100644
--- a/tmp/7c6ba072-5bd9-4a9d-9550-7b1b997d4d7f_buggy.java
+++ b/tmp/e25fb341-f30e-4885-bd45-a21c61d47789_fixed.java
@@ -1,27 +1,30 @@
       @Override
       public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
-
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
-
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
-
-
+        if (n.isForIn()) {
+          Node source = n.getFirstChild().getNext();
+          if (NodeUtil.isVanillaForIn(n)) {
+            n.replaceChild(source, source.removeFirstChild());
+          } else {
+            Node tmp = Node.newString(Token.NAME, "tmp");
+            tmp.copyInformationFrom(source);
+            n.getFirstChild().addChildToFront(tmp);
+            n.replaceChild(source, source.removeFirstChild());
+          }
+          return true;
+        }
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
