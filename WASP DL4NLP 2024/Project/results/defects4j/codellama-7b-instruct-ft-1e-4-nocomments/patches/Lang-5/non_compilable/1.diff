diff --git a/tmp/01bdaaf9-bd56-400b-a47d-f5420e3df00e_buggy.java b/tmp/9433a393-bd69-421c-b31c-11650e563015_fixed.java
index f843d29..027c6ab 100644
--- a/tmp/01bdaaf9-bd56-400b-a47d-f5420e3df00e_buggy.java
+++ b/tmp/9433a393-bd69-421c-b31c-11650e563015_fixed.java
@@ -1,68 +1,125 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        final char ch = str.charAt(0);
+        if (ch == '_') {
+	    if (str.length() < 3) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+	    final char countryCh = str.charAt(1);
+	    if (countryCh == '_') {
+		if (str.length() < 5) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                final char varCh = str.charAt(2);
+                if (str.length() < 6) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                if (varCh == '_') {
+                    final String language = str.substring(1, 3);
+                    final String country = str.substring(4, 5);
+                    final String var = str.substring(6);
+                    return new Locale(language, country, var);
+                } else {
+                    final String var = str.substring(2);
+                    return new Locale(language, var);
+                }
+	    } else {
+		if (!Character.isUpperCase(countryCh)) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                if (str.length() == 3) {
+		    if (ch == '_') {
+			if (str.length() < 4) {
+			    throw new IllegalArgumentException("Invalid locale format: " + str);
+			}
+                        final char varCh1 = str.charAt(2);
+                        if (!Character.isLetter(varCh1)) {
+                            throw new IllegalArgumentException("Invalid locale format: " + str);
+                        }
+                        final String language = str.substring(1, 3);
+                        final String var = str.substring(3);
+                        return new Locale(language, var);
+                    } else {
+                        final String country = str.substring(1);
+                        return new Locale("", country);
+                    }
+                } else if (str.length() == 4) {
+                    if (ch == '_') {
+			if (str.length() < 5) {
+			    throw new IllegalArgumentException("Invalid locale format: " + str);
+			}
+                        final char varCh2 = str.charAt(3);
+                        if (!Character.isLetter(varCh2)) {
+                            throw new IllegalArgumentException("Invalid locale format: " + str);
+                        }
+                        final String language = str.substring(1, 3);
+                        final String country = str.substring(3, 4);
+                        final String var = str.substring(4);
+                        return new Locale(language, country, var);
+                    } else {
+                        final String country = str.substring(1, 3);
+                        return new Locale("", country);
+                    }
+                } else if (str.length() > 4) {
+                    if (str.charAt(3) != '_') {
+                        throw new IllegalArgumentException("Invalid locale format: " + str);
+                    }
+		    if (str.length() == (3)) {
+                        final String country = str.substring(1, 3);
+                        return new Locale("", country);
+                    } else {
+			if (str.length() < 5) {
+			    throw new IllegalArgumentException("Invalid locale format: " + str);
+			}
+                        final String var = str.substring(4);
+                        final String country = str.substring(1, 3);
+                        return new Locale(str.substring(1, 3), country, var);
+                    }
+                } else {
+                    final String var = str.substring(3);
+                    final String country = str.substring(1, 3);
+                    return new Locale(str.substring(1, 3), country);
+                }
+	    }
+	}
+        } else {
             final char ch0 = str.charAt(0);
             final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+            if (!(Character.isLowerCase(ch0) && Character.isLowerCase(ch1)) && !Character.isLowerCase(ch0) && ch1 == '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (len == 2) {
                 return new Locale(str);
             }
             if (len < 5) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             final char ch3 = str.charAt(3);
             if (ch3 == '_') {
                 return new Locale(str.substring(0, 2), "", str.substring(4));
             }
             final char ch4 = str.charAt(4);
             if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (len == 5) {
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             }
             if (len < 7) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (str.charAt(5) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
         }
+    }
\ No newline at end of file
