diff --git a/tmp/50f31447-b42f-4dfa-8e3a-e37e9898206a_buggy.java b/tmp/912824bb-b7df-4f56-a955-2ba247fc8545_fixed.java
index 57d43b9..9b1a360 100644
--- a/tmp/50f31447-b42f-4dfa-8e3a-e37e9898206a_buggy.java
+++ b/tmp/912824bb-b7df-4f56-a955-2ba247fc8545_fixed.java
@@ -1,102 +1,117 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
+     * <li>
+     *   F. N. Martin and M. Lentz, "Algorithms for Continued Fraction Expansion."
+     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Martin-Lentz-CGA.pdf">
+     *   http://www.fresco.org.uk/papers/Martin-Lentz-CGA.pdf</a>
+     * </li>
+     * <li>
+     *   John D. Kelley,  "A Continued Fraction Representation for the Gaussian Distribution"
+     *   <a target="_blank" href="http://www.jstor.org/stable/1390238">
+     *   http://www.jstor.org/stable/1390238</a>
+     * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
         final double small = 1e-50;
         double hPrev = getA(0, x);
-
-        // use the value of small as epsilon criteria for zero checks
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
-
         int n = 1;
         double dPrev = 0.0;
         double p0 = 1.0;
         double q1 = 1.0;
         double cPrev = hPrev;
         double hN = hPrev;
-
+        final int largeTrials = 2500000;
+        final int smallTrials = 5000;
+        final double tolA = 10d * FastMath.ulp(1d);
+        boolean largeTrialsNeeded = maxIterations > largeTrials;
+        boolean smallTrialsNeeded = n < smallTrials;
+        double previousRelativeError = Double.POSITIVE_INFINITY;
         while (n < maxIterations) {
             final double a = getA(n, x);
             final double b = getB(n, x);
-
             double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
+            if (Double.isInfinite(cN) || Double.isInfinite(p0)) {
                 double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
+                final double oldScaleFactor = scaleFactor;
                 final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
+                if (scale <= 0) {  
                     throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                 }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
+                final int maxPower = 20;
+                for (int i = 0; i < maxPower && scaleFactor > tolA; i++) {
+                    oldScaleFactor = scaleFactor;
                     scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
+                    cN = a * hPrev / oldScaleFactor + b * p0 / scaleFactor;
+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q1))) {
                         break;
                     }
                 }
             }
-
-            final double deltaN = cN / q2 / cPrev;
+	    double a2 = a * a;
+	    double b2 = b * b;
+	    double c2 = cN * cN;
+	    double tol = FastMath.max(10d * a2 * FastMath.ulp(c2), 
+	    		         FastMath.max(10d * b2 * FastMath.ulp(p0), 
+	    			      FastMath.max(FastMath.abs(a2),
+	    			       FastMath.abs(b2)) *
+	    			      FastMath.ulp(c2) / FastMath.abs(p0)));
+            final double deltaN = cN / Factorial.binomialCoefficientDouble(n, largeTrialsNeeded ? 1 : 0.5) / ++q1 * cPrev;
+            final double error = c2 / p0 - cN / q1;
             hN = cPrev * deltaN;
-
             if (Double.isInfinite(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                x);
             }
             if (Double.isNaN(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                x);
             }
-
+	    final double  relativeError = FastMath.abs(error/(a2 + b2)) / (a2 + b2 +c2);
+            if (relativeError > previousRelativeError) {
+		tol = Math.min(relativeError*tol,(tol + previousRelativeError) /2);		
+	    }
+	    if (n > smallTrials &&   relativeError > tol) {
+		break;
+	    }
             if (FastMath.abs(deltaN - 1.0) < epsilon) {
                 break;
             }
-
             dPrev = q1;
-            cPrev = cN / q2;
+            cPrev = cN / q1;
             p0 = hPrev;
             hPrev = cN;
             q1 = q2;
             n++;
+            previousRelativeError = relativeError;
         }
-
         if (n >= maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
-
         return hN;
     }
\ No newline at end of file
