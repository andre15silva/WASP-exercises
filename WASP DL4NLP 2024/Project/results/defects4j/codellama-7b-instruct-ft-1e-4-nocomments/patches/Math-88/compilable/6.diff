diff --git a/tmp/e6e68e78-3bca-4f1f-86a9-763dc20feb2a_buggy.java b/tmp/ffacbffe-9f77-45f8-b203-b8a576ecd813_fixed.java
index 544303b..3f2acdb 100644
--- a/tmp/e6e68e78-3bca-4f1f-86a9-763dc20feb2a_buggy.java
+++ b/tmp/ffacbffe-9f77-45f8-b203-b8a576ecd813_fixed.java
@@ -1,29 +1,27 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        double mostNegative = 0;
+        int rhsOffset = getRhsOffset();
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            int row = getBasicRow(i);
+            coefficients[i] = row == -1 ? 0 : (row == -2 ? 1 : -getEntry(row, rhsOffset));
+            if (coefficients[i] < mostNegative && row != -2) {
+                mostNegative = coefficients[i];
+            }
+        }
+        double sum = mostNegative;
+        for (int i = 0; i < coefficients.length; i++) {
+            int row = getBasicRow(getNumObjectiveFunctions() + i);
+            if (row != -2) {
+                if (restrictToNonNegative) {
+                    coefficients[i] -= sum;
+                } else if (coefficients[i] > mostNegative) {
+                    sum += coefficients[i] - mostNegative;
+                    coefficients[i] = mostNegative;
+                } else {
                     coefficients[i] = 0;
                 }
             }
         }
-        }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
