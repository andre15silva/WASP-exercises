diff --git a/tmp/ac0a7edb-0f28-4247-9f21-3295ac866687_buggy.java b/tmp/35536cc7-0821-42a6-ad34-0b59dfefd007_fixed.java
index 544303b..c2b07c7 100644
--- a/tmp/ac0a7edb-0f28-4247-9f21-3295ac866687_buggy.java
+++ b/tmp/35536cc7-0821-42a6-ad34-0b59dfefd007_fixed.java
@@ -1,29 +1,31 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        if (tableau.getNumIterations() > 0) {
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions()+getOriginalNumDecisionVariables());
+            double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()) * Tableau.SCALE_DOWN;
             for (int i = 0; i < coefficients.length; i++) {
                 basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()) * Tableau.SCALE_DOWN)
+                        - (restrictToNonNegative ? 0 : mostNegative);
                 if (basicRow != null) {
                     for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                         if (tableau.getEntry(basicRow, j) == 1) {
                             coefficients[i] = 0;
                         }
                     }
                 }
             }
+        } else {
+            for (int i = 0; i < coefficients.length; i++) {
+                coefficients[i] = 0.0;
+            }
+        }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
