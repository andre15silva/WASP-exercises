diff --git a/tmp/53c081e2-d3ca-4aa0-8b36-7b31f01bf33c_buggy.java b/tmp/568bb789-dd78-4760-b0b3-ca3ed1a97e11_fixed.java
index 544303b..494ed89 100644
--- a/tmp/53c081e2-d3ca-4aa0-8b36-7b31f01bf33c_buggy.java
+++ b/tmp/568bb789-dd78-4760-b0b3-ca3ed1a97e11_fixed.java
@@ -1,29 +1,22 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() +
+            getOriginalNumDecisionVariables());
+        double mostNegative =
+            (basicRow == null ? 0 :
+             getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : Double.POSITIVE_INFINITY);
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
             coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+                (basicRow == null ? 0 :
+                 getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                         coefficients[i] = 0;
                     }
                 }
             }
         }
-        return new RealPointValuePair(coefficients, f.getValue(coefficients));
+        return new RealPointValuePair(coefficients, getValue(coefficients));
     }
\ No newline at end of file
