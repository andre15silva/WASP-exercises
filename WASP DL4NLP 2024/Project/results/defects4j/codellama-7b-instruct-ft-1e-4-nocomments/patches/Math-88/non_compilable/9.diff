diff --git a/tmp/9b4195df-eb3c-470f-b4da-3f7d4f3236e6_buggy.java b/tmp/6af66120-5653-43c0-a371-80b0bd8abdba_fixed.java
index 544303b..4ae2dfe 100644
--- a/tmp/9b4195df-eb3c-470f-b4da-3f7d4f3236e6_buggy.java
+++ b/tmp/6af66120-5653-43c0-a371-80b0bd8abdba_fixed.java
@@ -1,29 +1,33 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
-        for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
+        int mostNegativeIndex = 0;
+        double mostNegative = Double.POSITIVE_INFINITY;
+        boolean isInteger = getNumObjectiveFunctions() + getOriginalNumDecisionVariables() - 1 + getRhsOffset() == getNumConstraints() ? true : false; 
+        for (int i = getNumObjectiveFunctions(); i < coefficients.length; i++) {
+            int basicRow = getBasicRow(i);
+            double entry =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
+            if (isInteger && entry != 0) {
+                coefficients[i] = 0;
+            } else {
+                coefficients[i] = entry;
+            }
+            if (entry < mostNegative) {
+                mostNegative = entry;
+                mostNegativeIndex = i;
+            }
             if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
+                for (int j = getNumObjectiveFunctions(); j < i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
                          coefficients[i] = 0;
                     }
                 }
             }
         }
+        if (coefficients[mostNegativeIndex] == 0) {
+            Integer basicRow = getBasicRow(mostNegativeIndex);
+            coefficients[mostNegativeIndex] = getEntry(basicRow, getRhsOffset());
+        }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
