diff --git a/tmp/441cbfd9-91b4-411e-a082-a6d7034adbd7_buggy.java b/tmp/05727c39-3ba8-4f5e-8c61-9144710ea8b9_fixed.java
index 39dd8e7..4529ef7 100644
--- a/tmp/441cbfd9-91b4-411e-a082-a6d7034adbd7_buggy.java
+++ b/tmp/05727c39-3ba8-4f5e-8c61-9144710ea8b9_fixed.java
@@ -1,30 +1,31 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
+        if (tq.matchesAny("/>", ">") || tq.isEmpty()) {
+            return null;
+        }
         String key = tq.consumeAttributeKey();
-        String value = "";
+        int keyStart = tq.matchedEndOffset;
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
-
-            if (tq.matchChomp(SQ)) {
-                value = tq.chompTo(SQ);
-            } else if (tq.matchChomp(DQ)) {
-                value = tq.chompTo(DQ);
+            String value = "";
+            if ((tq.matchChomp(SQ)) || (tq.matchChomp(DQ))) {
+                value = tq.chompTo(tq.quote);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
+            return Attribute.createFromEncoded(key, value, keyStart);
         }
-        if (key.length() != 0)
-            return Attribute.createFromEncoded(key, value);
-        else {
+        if (key.length() != 0) {
+            tq.consume();
+            return Attribute.createFromDeclaration(key, keyStart);
+        } else {
             tq.consume();
-                
             return null;
         }
     }
\ No newline at end of file
