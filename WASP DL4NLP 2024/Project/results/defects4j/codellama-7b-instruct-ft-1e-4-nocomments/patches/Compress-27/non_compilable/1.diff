diff --git a/tmp/7cc6ffdd-dbb5-4111-954c-5fc85e7e0dff_buggy.java b/tmp/6865cd36-0098-48e4-a823-3e54a2147c52_fixed.java
index 81872ca..d54a1a7 100644
--- a/tmp/7cc6ffdd-dbb5-4111-954c-5fc85e7e0dff_buggy.java
+++ b/tmp/6865cd36-0098-48e4-a823-3e54a2147c52_fixed.java
@@ -1,70 +1,69 @@
     /**
      * Parse an octal string from a buffer.
+     * The ustar and POSIX tar specs require a trailing NUL or
+     * space but some implementations use the extra digit for big
+     * sizes/uids/gids so in addition to trimming we also enforce a
+     * maximum octal value.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
+     * <p>The method returns {@code Long.MAX_VALUE} on overflow.</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
-
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
-
         if (buffer[start] == 0) {
             return 0L;
         }
-
-        // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
-
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
         byte trailer = buffer[end - 1];
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
             trailer = buffer[end - 1];
         }
         if (start == end) {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, trailer));
         }
-
+        if (trailer == ' ' || trailer == 0) {
+            trailer = '0';
+        }
+        if (trailer != ' ' && trailer != 0) {
+            throw new IllegalArgumentException(
+                    "Invalid byte " + String.valueOf((char) trailer)
+                    + " at offset " + String.valueOf(end) + " in '"
+                    + String.valueOf(buffer, start, length) + "' len=" + String.valueOf(length)
+            );
+        }
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); 
         }
-
         return result;
     }
\ No newline at end of file
