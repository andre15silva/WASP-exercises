diff --git a/tmp/aa8b59d0-2079-40ec-a37c-231e88e53a27_buggy.java b/tmp/a2ee3571-d82c-48b3-b2e6-9fa4d8213eda_fixed.java
index 81872ca..86603df 100644
--- a/tmp/aa8b59d0-2079-40ec-a37c-231e88e53a27_buggy.java
+++ b/tmp/a2ee3571-d82c-48b3-b2e6-9fa4d8213eda_fixed.java
@@ -1,70 +1,36 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
-    public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    public static long parseOctal(final byte[] array, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
-
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
-
-        if (buffer[start] == 0) {
+        if (array[start] == 0) {
             return 0L;
         }
-
-        // Skip leading spaces
         while (start < end){
-            if (buffer[start] == ' '){
+            if (array[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
-
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
+        byte trailer = array[end - 1];
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
-            trailer = buffer[end - 1];
+            trailer = array[end - 1];
         }
         if (start == end) {
             throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, start, trailer));
+                    exceptionMessage(array, offset, length, start, trailer));
         }
-
         for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+            final byte currentByte = array[start];
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(array, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); 
         }
-
         return result;
     }
\ No newline at end of file
