diff --git a/tmp/45ff88d6-8803-4291-bc48-40decb0aebf4_buggy.java b/tmp/2b152ddb-19f7-46e8-b6bd-f8dd7c11ae7e_fixed.java
index 032fa8e..e91c185 100644
--- a/tmp/45ff88d6-8803-4291-bc48-40decb0aebf4_buggy.java
+++ b/tmp/2b152ddb-19f7-46e8-b6bd-f8dd7c11ae7e_fixed.java
@@ -1,108 +1,112 @@
-    /** Evaluate the impact of the proposed step on the event handler.
-     * @param interpolator step interpolator for the proposed step
-     * @return true if the event handler triggers an event before
-     * the end of the proposed step (this implies the step should be
-     * rejected)
-     * @exception DerivativeException if the interpolator fails to
-     * compute the switching function somewhere within the step
-     * @exception EventException if the switching function
-     * cannot be evaluated
-     * @exception ConvergenceException if an event cannot be located
-     */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
-
         try {
-
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
-
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
-
-                // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
-
-                // check events occurrence
                 if (g0Positive ^ (gb >= 0)) {
-                    // there is a sign change: an event is expected during this step
-
-                        // this is a corner case:
-                        // - there was an event near ta,
-                        // - there is another event between ta and tb
-                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
-                        // this implies that the real sign of ga is the same as gb, so we need to slightly
-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
-                        // about bracketing
-                            // this should never happen
-                         
-                    // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
-                        // we have either found nothing or found (again ?) a past event, we simply ignore it
-                        ta = tb;
-                        ga = gb;
-                    } else if (Double.isNaN(previousEventTime) ||
-                               (Math.abs(previousEventTime - root) > convergence)) {
-                        pendingEventTime = root;
-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
-                            // we were already waiting for this event which was
-                            // found during a previous call for a step that was
-                            // rejected, this step must now be accepted since it
-                            // properly ends exactly at the event occurrence
+                    final double root = Math.copySign(convergence, h);
+                    try {
+                        final double s = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                        if ((Math.abs(s - ta) <= convergence) &&
+                             (Math.abs(s - previousEventTime) <= convergence)) {
+                            ta = tb = s;
+                            ga = gb = s != 0.0 ? f.value(s) : gb;
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
+                    } catch (FunctionEvaluationException fe) {
+                    }
+                    final double a = ta, b = tb, f1 = ga, f2 = gb;
+                    if ((f1 * f2 < 0) ||
+                        (i == (n - 1)) ||
+                        (Math.abs(b - a) <= (2 * convergence))) {
+                        if (f1 == 0 && ga * gb < 0) {
+                            pendingEventTime = 0.5 * (a + b);
+                            if (pendingEvent && 
+                                 Math.abs(Math.abs(pendingEventTime) - Math.abs(rEvent)) < convergence) {
                                 return true;
                             }
-
+                        } else if (Math.abs(f1) < Math.abs(f2)) {
+                            ta = (Math.abs(f1) < convergence) ? b : a;
+                            ga = f1;
+                            tb = b;
+                            gb = f2;
+                        } else {
+                            ta = (Math.abs(f2) < convergence) ? a : b;
+                            ga = f2;
+                            tb = a;
+                            gb = f1;
+                        }
+                    } else {
+                        final UnivariateRealFunction f = new UnivariateRealFunction() {
+                            public double value(final double t) throws FunctionEvaluationException {
+                                try {
+                                    interpolator.setInterpolatedTime(t);
+                                    return handler.g(t, interpolator.getInterpolatedState());
+                                } catch (DerivativeException e) {
+                                    throw new FunctionEvaluationException(e, t);
+                                } catch (EventException e) {
+                                    throw new FunctionEvaluationException(e, t);
+                                }
+                            }
+                        };
+                        final BrentSolver s = new BrentSolver();
+                        s.setAbsoluteAccuracy(convergence * 2.0);
+                        s.setMaximalIterationCount(20);
+                        final double f1 = f.value(a);
+                        final double f2 = f.value(b);
+                        if (Math.signum(f1) == Math.signum(f2)) {
+                            final double root = tb - a * (tb - b) / (tb - ta);
+                            final double f3 = f.value(root);
+                            if (f3 * f2 >= 0) {
+                                if (f1 == 0) {
+                                    ta = b;
+                                    ta = 0.5 * (a + b);
+                                }
+                            } else {
+                                ta = root;
+                            }
+                        }
+                    }
                 } else {
-                    // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
-
             }
-
-            // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
-
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
             throw new EventException(e);
         }
-
     }
\ No newline at end of file
