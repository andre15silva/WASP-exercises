diff --git a/tmp/18c29336-8a85-4ce3-9c72-886950603454_buggy.java b/tmp/0212e241-26cd-416d-bcd6-1cad414f5aa5_fixed.java
index a9a5e27..2c89421 100644
--- a/tmp/18c29336-8a85-4ce3-9c72-886950603454_buggy.java
+++ b/tmp/0212e241-26cd-416d-bcd6-1cad414f5aa5_fixed.java
@@ -1,24 +1,35 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
+        if (val2 == 0) {
             return 0L;
-            case 1:
-                return val1;
         }
         long total = val1 * val2;
+        if (val2 < 0) {
+            long vabs = -val1;
+            if (vabs < (total / val2) || vabs > (total / val2) + 1) {
+              throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
+            if (total < 0 && (val2 < Integer.MIN_VALUE || val2 > Integer.MAX_VALUE)) {
+                total = -Integer.MIN_VALUE;
+            }
+        } else {
             if (total / val2 != val1) {
               throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
             }
+            if (val2 > Integer.MAX_VALUE || val1 > Long.MAX_VALUE / val2) {
+                total = Long.MAX_VALUE;
+            }
+            if (val1 < 0 && val2 == Integer.MIN_VALUE) {
+                total = -Integer.MIN_VALUE;
+            }
+        }
         return total;
     }
\ No newline at end of file
