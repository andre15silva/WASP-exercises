diff --git a/tmp/258e64e5-7ec1-487c-9ac8-6bd307b128c0_buggy.java b/tmp/fd552cc5-54e6-412c-badd-dce66e116a84_fixed.java
index 0f439b3..39575c6 100644
--- a/tmp/258e64e5-7ec1-487c-9ac8-6bd307b128c0_buggy.java
+++ b/tmp/fd552cc5-54e6-412c-badd-dce66e116a84_fixed.java
@@ -1,38 +1,26 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
-
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
-
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
-
+        if (currEntry.isDirectory() && currEntry.getName().contains("/")) {
+        	return -1;
+        }
         numToRead = Math.min(numToRead, available());
-        
         totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
-        if (totalRead == -1) {
+        if (totalRead < 0) {
+            if (currEntry instanceof TarArchiveEntry && TAR_HEADER_SIZE > entrySize) {
+                throw new IOException("Unexpected EOF: entry truncated or too small"), null;
+            } else {
                 hasHitEOF = true;
+            }
         } else {
             entryOffset += totalRead;
         }
-
+        count(totalRead);
         return totalRead;
     }
\ No newline at end of file
