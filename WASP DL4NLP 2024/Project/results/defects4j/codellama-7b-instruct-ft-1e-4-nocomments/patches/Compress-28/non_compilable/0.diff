diff --git a/tmp/591df051-99b0-4c95-8f6b-dee988ff4dc5_buggy.java b/tmp/7c80220e-da9c-452e-87f8-c876240e6e05_fixed.java
index 0f439b3..8b02940 100644
--- a/tmp/591df051-99b0-4c95-8f6b-dee988ff4dc5_buggy.java
+++ b/tmp/7c80220e-da9c-452e-87f8-c876240e6e05_fixed.java
@@ -1,38 +1,22 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
-
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
-
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
-
         numToRead = Math.min(numToRead, available());
-        
         totalRead = is.read(buf, offset, numToRead);
         count(totalRead);
-        
         if (totalRead == -1) {
             hasHitEOF = true;
+            if(-1 == is.available() && TarConstants.LF_SIZ != (entrySize % TarConstants.LF_SIZ)) {
+                throw new IOException("Premature EOF: " + entrySize);
+            }
         } else {
             entryOffset += totalRead;
         }
-
         return totalRead;
     }
\ No newline at end of file
