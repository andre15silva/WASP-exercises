diff --git a/tmp/74fc888d-8c5a-4bab-b6ac-a5cdfaaba7af_buggy.java b/tmp/faed6f22-677a-4d94-968f-18a405f4dba1_fixed.java
index 4b7e1e4..efa5adf 100644
--- a/tmp/74fc888d-8c5a-4bab-b6ac-a5cdfaaba7af_buggy.java
+++ b/tmp/faed6f22-677a-4d94-968f-18a405f4dba1_fixed.java
@@ -1,52 +1,52 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
-            int ch;
+        while(true) { 
             int len = 0;
             int read = 0;
-            while((ch = i.read()) != -1) {
+            for(int ch = i.read(); ch != -1 && ch != 0; ch = i.read()) { 
                 read++;
                 if (ch == ' '){
-                    // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
                         read++;
-                        if (ch == '='){ // end of keyword
+                        if (ch == '='){ 
                             final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
                             final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                            if (restLen == 1) { 
                                 headers.remove(keyword);
                             } else {
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
-                                // Drop trailing NL
                                 final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
+                        if (ch != ' ') { 
                             coll.write((byte) ch);
                         }
-                    break; // Processed single header
                     }
-                len *= 10;
-                len += ch - '0';
+                    if (ch == -1 || read == 0) { 
+                        throw new IOException("Bad Paxheader \""
+                                              + new String(coll.toByteArray(),
+                                                           CharsetNames.UTF_8)
+                                              + "\" starting at position " + len);
                     }
-            if (ch == -1){ // EOF
+                    break; 
+                }
+            }
+            if (ch == -1){ 
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
