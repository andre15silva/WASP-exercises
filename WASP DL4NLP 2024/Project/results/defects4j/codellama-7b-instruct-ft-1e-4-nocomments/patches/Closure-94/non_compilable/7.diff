diff --git a/tmp/1225ba90-daf9-4714-84c3-9e26bf2605df_buggy.java b/tmp/008fe140-73a4-4b16-a8a9-dd128fd50671_fixed.java
index 66e3d01..64a411e 100644
--- a/tmp/1225ba90-daf9-4714-84c3-9e26bf2605df_buggy.java
+++ b/tmp/008fe140-73a4-4b16-a8a9-dd128fd50671_fixed.java
@@ -1,34 +1,46 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
-
-      // Binary operators are only valid if both children are valid.
+      case Token.NAME:
+        return defines.contains(val.getString());
+      case Token.GETPROP:
+        return isValidDefineValue(val.getFirstChild(), defines);
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
+      case Token.ADD:
         return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
-      case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
+      case Token.SUB:
+      case Token.MUL:
+      case Token.DIV:
+      case Token.MOD:
+      case Token.BITLSH:
+      case Token.BITRSH:
+      case Token.URSH:
+        return isValidDefineValue(val.getFirstChild(), defines) &&
+            isValidDefineValue(val.getLastChild(), defines);
+      case Token.AND:
+      case Token.OR:
+      case Token.EQ:
+      case Token.NE:
+      case Token.GE:
+      case Token.GT:
+      case Token.LE:
+      case Token.LT:
+      case Token.INSTANCEOF:
+      case Token.IN:
+        return isValidDefineValue(val.getFirstChild(), defines) &&
+            isValidDefineValue(val.getLastChild(), defines);
+      case Token.ASSIGN:
+        return isValidDefineValue(val.getFirstFirstChild(), defines) &&
+            isValidDefineValue(val.getLastChild(), defines);
     }
     return false;
   }
\ No newline at end of file
