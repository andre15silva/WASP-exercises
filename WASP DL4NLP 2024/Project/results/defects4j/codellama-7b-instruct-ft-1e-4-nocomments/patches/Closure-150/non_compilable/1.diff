diff --git a/tmp/1c0665b7-923f-488c-861e-a9caa292d366_buggy.java b/tmp/a8b34c34-4fc6-4b4e-afde-0fa2c87ea068_fixed.java
index 800e6e1..1e979df 100644
--- a/tmp/1c0665b7-923f-488c-861e-a9caa292d366_buggy.java
+++ b/tmp/a8b34c34-4fc6-4b4e-afde-0fa2c87ea068_fixed.java
@@ -1,32 +1,42 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
-
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
-
+      if (NodeUtil.isFunction(n)) {
+        if (parent.getType() == Token.NAME) {
+          return;
+        }
+        defineDeclaredFunction(n, parent);
+        if (!NodeUtil.isFunctionDeclaration(n.getParent())) {
+          defineStubDeclaration(n.cloneTree());
+          return;
+        }
+      }
+      if (n.getType() != Token.FUNCTION && n.getType() != Token.VAR) {
         attachLiteralTypes(n);
+      }
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
\ No newline at end of file
