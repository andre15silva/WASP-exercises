diff --git a/tmp/e27b8089-5fea-4a67-b2eb-37decce440a1_buggy.java b/tmp/c70bd396-5cb7-44ea-b262-0f63ca1d14bc_fixed.java
index 800e6e1..e8d2a64 100644
--- a/tmp/e27b8089-5fea-4a67-b2eb-37decce440a1_buggy.java
+++ b/tmp/c70bd396-5cb7-44ea-b262-0f63ca1d14bc_fixed.java
@@ -1,32 +1,67 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
-
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
-
+      if (n.getType() == Token.NAME && parent.getType() == Token.GETPROP &&
+          parent.getFirstChild().getType() == Token.NAME &&
+          parent.getFirstFirstChild().getString()
+              .equals(Compiler.DICTIONARY_DEF_NAMESPACE)) {
+        ObjectType namespace =
+            (ObjectType) findNameType(parent.getFirstChild().getString(),
+                parent);
+        if (n.getNext() != null && n.getNext().getType() == Token.GETPROP) {
+              namespace =
+                  (ObjectType) namespace.getPropertyType(
+                      n.getNext().getFirstChild().getString());
+        }
+        defineNamespaceStubProperty(n, namespace);
+        return;
+      }
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
-        case Token.VAR:
-          defineVar(n, parent);
+        case Token.NAME:
+          switch (parent.getType()) {
+            case Token.GETPROP: {
+              Node grandparent = parent.getParent();
+              ObjectType namespace =
+                  (ObjectType) findNameType(
+                      parent.getFirstChild().getString(), parent);
+              if (namespace != null && grandparent.getType() ==
+                  Token.CALL) {
+                ObjectType propertyType = (ObjectType) namespace.getPropertyType(
+                    parent.getLastChild().getString());
+                if (propertyType != null
+                    && propertyType.getReferenceName() == null) {
+                  defineFunctionStub(n, propertyType);
+                  return;
+                }
+              }
+              break;
+            }
+            case Token.VAR: {
+              break;
+            }
+            default: {
+              defineName(n, parent);
+              break;
+            }
+          }
           break;
       }
     }
\ No newline at end of file
