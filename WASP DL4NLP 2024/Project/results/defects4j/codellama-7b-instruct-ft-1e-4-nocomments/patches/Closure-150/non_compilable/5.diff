diff --git a/tmp/abfd1f51-3df7-492e-ac59-831ec93b23c9_buggy.java b/tmp/a5e8f9ad-e1be-4245-a701-4d3bc69ba858_fixed.java
index 800e6e1..7733d9a 100644
--- a/tmp/abfd1f51-3df7-492e-ac59-831ec93b23c9_buggy.java
+++ b/tmp/a5e8f9ad-e1be-4245-a701-4d3bc69ba858_fixed.java
@@ -1,32 +1,38 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
-
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
-
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.NAME:
+          if (NodeUtil.isLValue(n) &&
+              NodeUtil.isFunctionDeclaration(JSCompiler.getEnclosingFunction(n))) {
+            if (parent.getType() == Token.RC) {
+              declareLocal(n, scope.getRootNode());
+            } else {
+              defineLocal(n, scope.getRootNode());
+            }
+          }
+          break;
+        case Token.ASSIGN:
+          declareLhs(NodeUtil.getRootOfQualifiedName(n.getFirstChild()), scope);
+          break;
+        case Token.CALL:
+          declareRoot();
+          break;
       }
     }
\ No newline at end of file
