diff --git a/tmp/a98d3e96-3a6b-41e4-858d-299ca46b65d8_buggy.java b/tmp/4f1409dd-59a8-4969-a816-4168ee724e3e_fixed.java
index 800e6e1..9095d9c 100644
--- a/tmp/a98d3e96-3a6b-41e4-858d-299ca46b65d8_buggy.java
+++ b/tmp/4f1409dd-59a8-4969-a816-4168ee724e3e_fixed.java
@@ -1,32 +1,38 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
-
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
-
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
+          if (parent.getType() != Token.NAME) {
+            defineDeclaredFunction(n, parent);
+          } else if (!parent.hasChildren() || !(n.getFirstChild().getType() != Token.NAME ||
+              !scope.declaredVarMatchesNode(t, n.getFirstChild()))) {
+            defineDeclaredFunction(n, parent);
           }
-          defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.NAME:
+          if (parent.getType() == Token.GETPROP && parent.hasOneChild()) {
+            ObjectType stub = ObjectType.fromNode(n);
+            defineLocalType(stub, n.getParent().getParent());
+            defineCalledFunction(stub, n.getParent());
+            stubFunCache.put((Node) n.getParent().getParent(), stub);
+          }
+          break;
+        case Token.CALL:
+          maybeAddNativeCatchFunction(n, parent, Token.CALL);
+          break;
+        case Token.NEW:
+          maybeAddNativeCatchFunction(n, parent, Token.NEW);
+          break;
       }
     }
\ No newline at end of file
