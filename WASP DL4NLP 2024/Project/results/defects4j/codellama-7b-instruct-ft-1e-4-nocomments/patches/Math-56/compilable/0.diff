diff --git a/tmp/2f8aea33-f31d-454e-bbb9-6a4737362813_buggy.java b/tmp/6845c12f-2da9-4144-b842-42ea8539a870_fixed.java
index 2608424..b77021f 100644
--- a/tmp/2f8aea33-f31d-454e-bbb9-6a4737362813_buggy.java
+++ b/tmp/6845c12f-2da9-4144-b842-42ea8539a870_fixed.java
@@ -1,39 +1,36 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
-
         final int[] indices = new int[dimension];
-
         int count = 0;
-        for (int i = 0; i < last; i++) {
+        int lastOffset = 0;
+        for (int i = dimension - 1; i >= 0; i--, lastOffset *= uniCounterOffset[i]) {
             int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
+            final int offset = uniCounterOffset[i] * lastOffset;
+            while (count < index) {
+                ++idx;
                 count += offset;
-                ++idx;
             }
             --idx;
             count -= offset;
             indices[i] = idx;
         }
-
         int idx = 1;
         while (count < index) {
+            ++idx;
             count += idx;
-            ++idx;
         }
         --idx;
-        indices[last] = idx;
-
+        indices[dimension - 1] = idx;
         return indices;
     }
\ No newline at end of file
