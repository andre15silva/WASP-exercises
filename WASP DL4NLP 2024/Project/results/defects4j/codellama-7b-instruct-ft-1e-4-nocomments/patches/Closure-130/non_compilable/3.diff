diff --git a/tmp/f58bfb69-46e6-4fa7-b874-94d1d7f5b216_buggy.java b/tmp/265c809f-279e-4231-8393-b5de2dcc27a7_fixed.java
index bb3193c..032d9a7 100644
--- a/tmp/f58bfb69-46e6-4fa7-b874-94d1d7f5b216_buggy.java
+++ b/tmp/265c809f-279e-4231-8393-b5de2dcc27a7_fixed.java
@@ -1,52 +1,29 @@
-  /**
-   * For each qualified name N in the global scope, we check if:
-   * (a) No ancestor of N is ever aliased or assigned an unknown value type.
-   *     (If N = "a.b.c", "a" and "a.b" are never aliased).
-   * (b) N has exactly one write, and it lives in the global scope.
-   * (c) N is aliased in a local scope.
-   *
-   * If (a) is true, then GlobalNamespace must know all the writes to N.
-   * If (a) and (b) are true, then N cannot change during the execution of
-   *    a local scope.
-   * If (a) and (b) and (c) are true, then the alias can be inlined if the
-   *    alias obeys the usual rules for how we decide whether a variable is
-   *    inlineable.
-   * @see InlineVariables
-   */
   private void inlineAliases(GlobalNamespace namespace) {
-    // Invariant: All the names in the worklist meet condition (a).
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
     while (!workList.isEmpty()) {
       Name name = workList.pop();
-
-      // Don't attempt to inline a getter or setter property as a variable.
       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
         continue;
       }
-
-      if (name.globalSets == 1 && name.localSets == 0 &&
-          name.aliasingGets > 0) {
-        // {@code name} meets condition (b). Find all of its local aliases
-        // and try to inline them.
-        List<Ref> refs = Lists.newArrayList(name.getRefs());
-        for (Ref ref : refs) {
-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
-            if (inlineAliasIfPossible(ref, namespace)) {
-              name.removeRef(ref);
+      Ref r = name.getOnlyRef();
+      if (r == null) {
+        if (collapsePropertiesOnExternTypes) {
+          continue;
+        } else {
+          r = name.getTypedRef();
         }
       }
+      if (r != null && (r.type == Type.ALIASING_GET ||
+                        r.type == Type.WRITTEN_ALIASING_GET)) {
+        Ref r2 = CollapseProperties.maybeInline(r, namespace);
+        if (!name.isLocal()) {
+          name.updateRefs(Lists.newArrayList(r2));
         }
       }
-
-      // Check if {@code name} has any aliases left after the
-      // local-alias-inlining above.
       if ((name.type == Name.Type.OBJECTLIT ||
            name.type == Name.Type.FUNCTION) &&
-          name.aliasingGets == 0 && name.props != null) {
-        // All of {@code name}'s children meet condition (a), so they can be
-        // added to the worklist.
+          name.aliasingGets == 0 && name.externallyDefined) {
         workList.addAll(name.props);
       }
     }
   }
\ No newline at end of file
