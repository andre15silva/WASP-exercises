diff --git a/tmp/31a94d26-8f37-4ee8-93e9-22645b6dfd1b_buggy.java b/tmp/de03414f-fbcf-4cef-8ba0-81b46d52af49_fixed.java
index 114ff20..f33b96d 100644
--- a/tmp/31a94d26-8f37-4ee8-93e9-22645b6dfd1b_buggy.java
+++ b/tmp/de03414f-fbcf-4cef-8ba0-81b46d52af49_fixed.java
@@ -1,41 +1,36 @@
-    /**
-     * Returns a (possibly empty) collection of legend items for the series
-     * that this renderer is responsible for drawing.
-     *
-     * @return The legend item collection (never <code>null</code>).
-     *
-     * @see #getLegendItem(int, int)
-     */
     public LegendItemCollection getLegendItems() {
         LegendItemCollection result = new LegendItemCollection();
         if (this.plot == null) {
             return result;
         }
         int index = this.plot.getIndexOf(this);
+        if (index < 0) {
+            return result;
+        }
         CategoryDataset dataset = this.plot.getDataset(index);
-        if (dataset != null) {
+        if (dataset == null) {
             return result;
         }
         int seriesCount = dataset.getRowCount();
         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {
             for (int i = 0; i < seriesCount; i++) {
                 if (isSeriesVisibleInLegend(i)) {
                     LegendItem item = getLegendItem(index, i);
                     if (item != null) {
                         result.add(item);
                     }
                 }
             }
         }
         else {
             for (int i = seriesCount - 1; i >= 0; i--) {
                 if (isSeriesVisibleInLegend(i)) {
                     LegendItem item = getLegendItem(index, i);
                     if (item != null) {
                         result.add(item);
                     }
                 }
             }
         }
         return result;
     }
\ No newline at end of file
