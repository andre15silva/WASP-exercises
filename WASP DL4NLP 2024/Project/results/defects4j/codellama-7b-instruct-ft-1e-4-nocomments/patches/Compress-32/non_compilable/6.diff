diff --git a/tmp/f591a318-3e0d-4c39-adc6-d0cd11bba2b9_buggy.java b/tmp/7f534b47-269b-44b6-a176-1d816a38cede_fixed.java
index 711e87d..5a78ee0 100644
--- a/tmp/f591a318-3e0d-4c39-adc6-d0cd11bba2b9_buggy.java
+++ b/tmp/7f534b47-269b-44b6-a176-1d816a38cede_fixed.java
@@ -1,38 +1,53 @@
     private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
-        /*
-         * The following headers are defined for Pax.
-         * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields
-         * mtime
-         * comment
-         * gid, gname
-         * linkpath
-         * size
-         * uid,uname
-         * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those
-         */
         for (Entry<String, String> ent : headers.entrySet()){
             String key = ent.getKey();
             String val = ent.getValue();
             if ("path".equals(key)){
                 currEntry.setName(val);
             } else if ("linkpath".equals(key)){
                 currEntry.setLinkName(val);
             } else if ("gid".equals(key)){
                 currEntry.setGroupId(Integer.parseInt(val));
             } else if ("gname".equals(key)){
                 currEntry.setGroupName(val);
             } else if ("uid".equals(key)){
                 currEntry.setUserId(Integer.parseInt(val));
             } else if ("uname".equals(key)){
                 currEntry.setUserName(val);
             } else if ("size".equals(key)){
                 currEntry.setSize(Long.parseLong(val));
+                if (!TarArchiveOutputStream.HAS_BIGNUMBERS) {
+                    throw new IllegalArgumentException("Invalid input: not supported on big number mode TarArchiveEntry");
+                }
             } else if ("mtime".equals(key)){
                 currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
             } else if ("SCHILY.devminor".equals(key)){
                 currEntry.setDevMinor(Integer.parseInt(val));
             } else if ("SCHILY.devmajor".equals(key)){
                 currEntry.setDevMajor(Integer.parseInt(val));
+            } else if ("_POSIX.acls".equals(key)){
+                currEntry.setUserId(Integer.parseInt(val));
+            } else if ("_POSIX.gid".equals(key)){
+                currEntry.setGroupId(Integer.parseInt(val));
+            } else if ("_POSIX.gname".equals(key)){
+                currEntry.setGroupName(val);
+            } else if ("_POSIX.atime".equals(key)){
+                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
+            } else if ("_POSIX.ctime".equals(key)){
+                currEntry.setCreateTime((long) (Double.parseDouble(val) * 1000));
+            } else if ("_POSIX.atime ".equals(key)){
+                currEntry.setAccessTime((long) (Double.parseDouble(val) * 1000));
+            } else if ("_POSIX.ctime ".equals(key)){
+                currEntry.setCreateTime((long) (Double.parseDouble(val) * 1000));
+            } else if ("_POSIX.uname ".equals(key)){
+                currEntry.setUserName(val);
+            } else if (key.matches("^_POSIX.dev.+") && TarArchiveOutputStream.HAS_BIGNUMBERS){    
+                Pattern p = Pattern.compile("^_POSIX.dev(.+)\\.(\\w+)$");
+                Matcher m = p.matcher(key);
+                if (m.find()) {
+                    currEntry.setDevMajor(new Integer(m.group(1)));
+                    currEntry.setDevMinor(new Integer(m.group(2)));
+                }
             }                
         }
     }
\ No newline at end of file
