diff --git a/tmp/f3dc15b7-c529-434a-b14b-89be73eee4e2_buggy.java b/tmp/24804e67-f384-4614-b45d-7ec2fbbb93b7_fixed.java
index bfa2423..244f43e 100644
--- a/tmp/f3dc15b7-c529-434a-b14b-89be73eee4e2_buggy.java
+++ b/tmp/24804e67-f384-4614-b45d-7ec2fbbb93b7_fixed.java
@@ -1,23 +1,28 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
-
+        final List<Pair<Double,T>> p = Lists.newArrayList();
+        for (int i = 0; i < sampleSize; ++i) {
+            p.add(new Pair<Double,T>(Math.random(),sample()));
+        }
+        Collections.sort(p,new Comparator<Pair<Double,T>>() {
+            public int compare(final Pair<Double,T> o1, final Pair<Double,T> o2) {
+                return o1.getFirst().compareTo(o2.getFirst());
+            }
+        });
         final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
-
         for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
+            out[i] = p.get(i).getSecond();
         }
-
         return out;
-
     }
\ No newline at end of file
