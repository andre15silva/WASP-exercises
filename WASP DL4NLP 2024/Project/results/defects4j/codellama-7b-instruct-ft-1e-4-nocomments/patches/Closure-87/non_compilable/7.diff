diff --git a/tmp/02a24b47-eb56-424f-8332-6fdd12a1362b_buggy.java b/tmp/ad3c80eb-8744-43fc-b093-3c76c23b704a_fixed.java
index 19fd63e..d922b3a 100644
--- a/tmp/02a24b47-eb56-424f-8332-6fdd12a1362b_buggy.java
+++ b/tmp/ad3c80eb-8744-43fc-b093-3c76c23b704a_fixed.java
@@ -1,24 +1,15 @@
-  /**
-   * @return Whether the node is a block with a single statement that is
-   *     an expression.
-   */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          return true;
+        } else if (maybeExpr.isIf() && maybeExpr.getFirstChild().isVar()) {
+          Node maybeSub = maybeExpr.getLastChild();
+          return !maybeSub.getParent().isFunction()
+              || maybeSub.getParent().getParent().isExprResult();
+        }
       }
     }
-
     return false;
   }
\ No newline at end of file
