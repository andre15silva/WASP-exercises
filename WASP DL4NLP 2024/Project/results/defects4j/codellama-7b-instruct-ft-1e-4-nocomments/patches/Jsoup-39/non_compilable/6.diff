diff --git a/tmp/65b59acb-5dd5-4e6c-b6e1-5ffc018c40fd_buggy.java b/tmp/b2f76afe-d0e2-4741-a0f0-e04753f43944_fixed.java
index c4b260c..7948b97 100644
--- a/tmp/65b59acb-5dd5-4e6c-b6e1-5ffc018c40fd_buggy.java
+++ b/tmp/b2f76afe-d0e2-4741-a0f0-e04753f43944_fixed.java
@@ -1,51 +1,57 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        byte[] bom = null;
+        if (byteData.hasArray()) {
+            byte[] data = byteData.array();
+            if (data.length > 0) {
+                if (data[0] == 65279 || data[0] == -17 || data[0] == -65277) {
                     docData = Charset.forName(defaultCharset).decode(byteData).toString();
                     doc = parser.parseInput(docData, baseUri);
                     Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+                    if (meta != null) { 
                         String foundCharset;
                         if (meta.hasAttr("http-equiv")) {
                             foundCharset = getCharsetFromContentType(meta.attr("content"));
                             if (foundCharset == null && meta.hasAttr("charset")) {
                                 try {
                                     if (Charset.isSupported(meta.attr("charset"))) {
                                         foundCharset = meta.attr("charset");
                                     }
                                 } catch (IllegalCharsetNameException e) {
                                     foundCharset = null;
                                 }
                             }
                         } else {
                             foundCharset = meta.attr("charset");
                         }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                        if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { 
                             foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                             charsetName = foundCharset;
                             byteData.rewind();
                             docData = Charset.forName(foundCharset).decode(byteData).toString();
                             doc = null;
                         }
                     }
-        } else { // specified by content type header (or by user on file load)
+                    bom = new byte[] {data[0], 0};
+                }
+            }
+        }
+        if (charsetName == null) { 
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        }
+        if (docData == null || bom != null) {
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+        if (bom != null) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+            bom = null;
         }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            if (bom != null) doc.outputSettings().charset(defaultCharset);
+            else doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
