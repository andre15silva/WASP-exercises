diff --git a/tmp/cc5023b1-44e0-4be4-b3d3-825a5a15bc99_buggy.java b/tmp/eaeac460-59c4-40d2-b50a-51a6436c163e_fixed.java
index 88647d1..c737f29 100644
--- a/tmp/cc5023b1-44e0-4be4-b3d3-825a5a15bc99_buggy.java
+++ b/tmp/eaeac460-59c4-40d2-b50a-51a6436c163e_fixed.java
@@ -1,44 +1,49 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
-     * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
-        
         clearResult();
         verifyInterval(min, max);
-        
         double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
-        
-        // Verify bracketing
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+        if (sign == 0) {
+            ret = min;
+        } else if (sign < 0) {
+            ret = solve(min, yMin, max, yMax, min, yMin);
+            if (Double.isFinite(ret)) {
+                if (max - ret > solverControl.getAbsoluteAccuracy() || 
+                        Math.abs(f.value(ret)) < solverControl.getRelativeAccuracy() * max) {
+                    ret = max;
+                }
+            }
+        } else if (sign > 0) {
+            ret = solve(min, yMin, max, yMax, max, yMax);
+            if (Double.isFinite(ret)) {
+                if (ret - min > solverControl.getAbsoluteAccuracy() || 
+                         Math.abs(f.value(ret)) < solverControl.getRelativeAccuracy() * min) {
+                    ret = min;
+                }
+            }
+        } else {
             throw new IllegalArgumentException
                 ("Function values at endpoints do not have different signs." +
                         "  Endpoints: [" + min + "," + max + "]" + 
                         "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
         }
-
         return ret;
     }
\ No newline at end of file
