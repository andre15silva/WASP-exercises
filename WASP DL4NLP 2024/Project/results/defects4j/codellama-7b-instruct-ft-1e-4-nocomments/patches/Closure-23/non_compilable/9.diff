diff --git a/tmp/d2a88776-9d33-400b-a7f3-d1363b463da6_buggy.java b/tmp/8c3142c2-3a8a-4980-82e8-c919282c175c_fixed.java
index cfdcd9c..199d084 100644
--- a/tmp/d2a88776-9d33-400b-a7f3-d1363b463da6_buggy.java
+++ b/tmp/8c3142c2-3a8a-4980-82e8-c919282c175c_fixed.java
@@ -1,51 +1,47 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
-
-    if (!right.isNumber()) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
-      return n;
-    }
-
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
-
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
-
-    Node current = left.getFirstChild();
+    String lit = left.getNext().toStringTree().trim();
+    if (!lit.startsWith("[") || !lit.endsWith("]")) {
+      return n;
+    }
+    Node arr = left.getFirstChild();
+    JSType type = arr.getJSType();
+    if (type == null || !type.isArrayType()) {
+      return n;
+    }
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
+    Node el = arr;
+    boolean folded = true;
+    for (int i = 0; i < intIndex && el != null; ++i) {
+      if (el.getType() == Token.COMMA) {
+        elem = el.getFirstChild();
+      } else if (el.getFirstChild() != null &&
+          el.getFirstChild().getType() == Token.STRING) {
+        folded = false;
+      }
+      el = el.getNext();
     }
-
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
-
-    if (elem.isEmpty()) {
-      elem = NodeUtil.newUndefinedNode(elem);
-    } else {
-      left.removeChild(elem);
+    if (folded) {
+      arr.removeChild(elem);
+      n.replaceChild(n.getFirstChild(), elem.cloneTree().removeProp(Node.ORIGINAL));
     }
-
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
