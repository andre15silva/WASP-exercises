diff --git a/tmp/7b52e507-7de0-44a8-b939-ccd8b0b3c72c_buggy.java b/tmp/5570345e-90c9-46b2-8a6b-802a1144594d_fixed.java
index 780fa1a..34619d3 100644
--- a/tmp/7b52e507-7de0-44a8-b939-ccd8b0b3c72c_buggy.java
+++ b/tmp/5570345e-90c9-46b2-8a6b-802a1144594d_fixed.java
@@ -1,15 +1,131 @@
+    /**
+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-8 encoding.
+     *
+     * @param bytes
+     *            The bytes to be decoded into characters, may be <code>null</code>
+     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-8 encoding, or
+     *         <code>null</code> if the input byte array was <code>null</code>.
+     * @throws NullPointerException
+     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is
+     *             required by the Java platform specification.
+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException
+     */
+    public static String newStringUtf8(final byte[] bytes) {
+        return new String(bytes, Charsets.UTF_8);
+    }
+    /**
+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the US-ASCII charset.
+     *
+     * @param bytes
+     *            The bytes to be decoded into characters, may be <code>null</code>
+     * @return A new <code>String</code> decoded from the specified array of bytes using the US-ASCII charset, or
+     *         <code>null</code> if the input byte array was <code>null</code>.
+     * @throws NullPointerException
+     *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is
+     *             required by the Java platform specification.
+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException
+     */
+    public static String newStringUsAscii(final byte[] bytes) {
+        return new String(bytes, Charsets.US_ASCII);
+    }
+    /**
+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16 charset.
+     *
+     * @param bytes
+     *            The bytes to be decoded into characters, may be <code>null</code>
+     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16 charset, or
+     *         <code>null</code> if the input byte array was <code>null</code>.
+     * @throws NullPointerException
+     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is
+     *             required by the Java platform specification.
+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException
+     */
+    public static String newStringUtf16(final byte[] bytes) {
+        return new String(bytes, Charsets.UTF_16);
+    }
+    /**
+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16 charset with the
+     * specified {@link java.nio.charset.CharsetDecoder.MalformedInputAction} action.
+     *
+     * @param bytes
+     *            The bytes to be decoded into characters, may be <code>null</code>
+     * @param action
+     *            The malformed input action, not <code>null</code>
+     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16 charset, or
+     *         <code>null</code> if the input byte array was <code>null</code>.
+     * @throws NullPointerException
+     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is
+     *             required by the Java platform specification.
+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException
+     */
+    public static String newStringUtf16(final byte[] bytes, final CharsetDecoder.MalformedInputAction action) {
+        final CharsetDecoder decoder = Charsets.UTF_16.newDecoder();
+        decoder.onMalformedInput(action);
+        final ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);
+        final CharBuffer charBuffer = decoder.decode(byteBuffer);
+        return charBuffer.toString();
+    }
+    /**
+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16BE charset.
+     *
+     * @param bytes
+     *            The bytes to be decoded into characters, may be <code>null</code>
+     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16BE charset, or
+     *         <code>null</code> if the input byte array was <code>null</code>.
+     * @throws NullPointerException
+     *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is
+     *             required by the Java platform specification.
+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException
+     */
+    public static String newStringUtf16Be(final byte[] bytes) {
+        return new String(bytes, Charsets.UTF_16BE);
+    }
+    /**
+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16LE charset.
+     *
+     * @param bytes
+     *            The bytes to be decoded into characters, may be <code>null</code>
+     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16LE charset, or
+     *         <code>null</code> if the input byte array was <code>null</code>.
+     * @throws NullPointerException
+     *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is
+     *             required by the Java platform specification.
+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException
+     */
+    public static String newStringUtf16Le(final byte[] bytes) {
+        return new String(bytes, Charsets.UTF_16LE);
+    }
     /**
      * Constructs a new <code>String</code> by decoding the specified array of bytes using the ISO-8859-1 charset.
      *
      * @param bytes
      *            The bytes to be decoded into characters, may be <code>null</code>
      * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset, or
      *         <code>null</code> if the input byte array was <code>null</code>.
      * @throws NullPointerException
      *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is
      *             required by the Java platform specification.
      * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException
      */
     public static String newStringIso8859_1(final byte[] bytes) {
         return newString(bytes, Charsets.ISO_8859_1);
     }
+    /**
+     * Constructs a new <code>String</code> by decoding the specified array of UTF-8 encoded bytes.
+     * <p>
+     * This method is provided for compatibility with <code>byte[]</code> based web services.
+     * 
+     * @param value
+     *            The bytes to be decoded into characters
+     * @return A new <code>String</code> decoded from the specified array of UTF-8 encoded bytes, or
+     *         <code>null</code> if the input byte array was <code>null</code>.
+     */
+    public static String newStringUtf8(final byte[] value) {
+        return newString(value, Charsets.UTF_8);
+    }
+    private static String newString(final byte[] bytes, final Charset charset) {
+        if (bytes == null) {
+            return null;
+        }
+        return new String(bytes, charset);
+    }
\ No newline at end of file
