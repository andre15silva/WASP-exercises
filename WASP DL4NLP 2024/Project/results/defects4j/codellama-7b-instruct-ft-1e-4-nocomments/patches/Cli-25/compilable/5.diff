diff --git a/tmp/8424b382-c0da-4c03-84b9-ede207e08203_buggy.java b/tmp/7c4095c8-2117-4be4-800d-cbb063fb1f16_fixed.java
index 875b31b..649e090 100644
--- a/tmp/8424b382-c0da-4c03-84b9-ede207e08203_buggy.java
+++ b/tmp/7c4095c8-2117-4be4-800d-cbb063fb1f16_fixed.java
@@ -1,54 +1,32 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
-
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
+        final String prePadding = createPadding(nextLineTabStop);
+        sb.append(prePadding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
         final String padding = createPadding(nextLineTabStop);
-
-        while (true)
+        text = text.substring(pos);
+        final int chunkSize = Math.min(width, defaultNewLine.length() + padding.length() + 5);
+        while (text.length() > chunkSize)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
+            pos = Math.max(0, text.lastIndexOf(' ')) + 1;
+            final String chunk = text.substring(0, pos);
+            if (pos > 0)
             {
+                sb.append(createPadding(padding.length() + chunkSize - chunk.length()));
+            }
+            sb.append(chunk);
+            text = text.substring(pos);
+        }
         sb.append(text);
-
         return sb;
     }
\ No newline at end of file
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
