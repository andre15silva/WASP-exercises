diff --git a/tmp/537312ad-ef73-4b9e-9735-f5e72f8252af_buggy.java b/tmp/d7079121-1a46-46c5-ab37-a95d6b6b3f68_fixed.java
index 875b31b..ef33e38 100644
--- a/tmp/537312ad-ef73-4b9e-9735-f5e72f8252af_buggy.java
+++ b/tmp/d7079121-1a46-46c5-ab37-a95d6b6b3f68_fixed.java
@@ -1,54 +1,64 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
-
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
         final String padding = createPadding(nextLineTabStop);
-
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
+            pos = findWrapPos(text, width, pos);
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
             }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            if (pos == 0)
             {
-                pos = width;
+                pos = 1;
+            }
+            sb.append(padding);
+            if (text.length() > (pos + width))
+            {
+                int length;
+                int index;
+                length = text.length() - pos;
+                index = findWrapPos(text, 
+                                    width, 
+                                    index = lineIndexOf(text, width, pos) + length);
+                if (index == -1)
+                {
+                    index = length;
+                }
+                if (index == 0)
+                {
+                    sb.append(text.substring(0, length));
+                }
+                else
+                {
+                    index = findWrapPos(text, length, index);
+                    sb.append(text.substring(length));
+                    sb.append(defaultNewLine);
+                    sb.append(text.substring(0, index));
+                }
+            }
+            else
+            {
+                sb.append(text.substring(0, text.length()));
+            }
+            text = text.substring(pos).trim();
+            while (text.startsWith(" "))
+            {
+                text = text.substring(1).trim();
+                sb.append(" ");
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
