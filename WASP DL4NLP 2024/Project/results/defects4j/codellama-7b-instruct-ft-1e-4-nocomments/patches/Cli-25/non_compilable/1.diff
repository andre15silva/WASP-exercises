diff --git a/tmp/8b19b975-0c73-41c3-96f8-915da1732c8d_buggy.java b/tmp/367170a7-b7f9-4ac0-9a33-3c973491eb20_fixed.java
index 875b31b..33aed53 100644
--- a/tmp/8b19b975-0c73-41c3-96f8-915da1732c8d_buggy.java
+++ b/tmp/367170a7-b7f9-4ac0-9a33-3c973491eb20_fixed.java
@@ -1,54 +1,32 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
-
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
+        sb.append(rtrim(this.getLeftPadding(width)));
+        sb.append(text.substring(0, pos)).append(defaultNewLine);
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
+        final String padding = this.getLeftPadding(nextLineTabStop) + this.getPadding(nextLineTabStop) + this.getPadding(nextLineTabStop-1) + " ";
         while (true)
         {
+            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+            {
+                pos = width;
+            }
+            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, 0);
-
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
             }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
