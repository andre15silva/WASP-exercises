diff --git a/tmp/ca35cf91-e126-431b-8ed7-20f9afc43dd8_buggy.java b/tmp/c871344c-62e9-4595-a138-a832c618f875_fixed.java
index 875b31b..b086cea 100644
--- a/tmp/ca35cf91-e126-431b-8ed7-20f9afc43dd8_buggy.java
+++ b/tmp/c871344c-62e9-4595-a138-a832c618f875_fixed.java
@@ -1,54 +1,57 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
-
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
+        setChunkedLongArg(isChunkBetweenPadding(text));
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
         final String padding = createPadding(nextLineTabStop);
-
         while (true)
         {
+            final boolean isChunkedLongArg = isChunkedLongArg();
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
+            pos = findWrapPos(text, width, isChunkedLongArg ? 0 : text.length() - (isChunkBetweenPadding() ? text.length()/2 : text.length()/3) );
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
             }
-            
             if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
             {
                 pos = width;
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            boolean needNewLine = (pos < text.length());
+            if (!isChunkedLongArg && needNewLine)
+            {
+                final int indent = getDescrLeftBlank()-getLeftPadding();
+                final boolean needLineNumber = getAlignLongOptDescription(true) >= width-indent || getAlignLongOptDescription(false) >= width-indent;
+                final String newLine = needLineNumber ? createPadding(indent) + formatLongOptDesc(longOptionWithLargestDescription(), width, false) + defaultNewLine : "";
+                sb.append(newLine);
+            }
+            sb.append(rtrim(text.substring(0, pos)));
+            if (needNewLine)
+            {
+                int pos2 = findWrapPos(text.substring(sb.toString().lastIndexOf(defaultNewLine)).trim(), width, text.substring(sbt.length()).length());
+                pos = (sb.length() < text.length()-1) ? pos2 : -1;
+            }
+            if (pos == -1)
+            {
+                sb.append(text.substring(sb.toString().lastIndexOf(defaultNewLine)).trim());
+                return sb;
+            }
+            sb.append(defaultNewLine);
+            if (nextLineTabStop >= width)
+            {
+                nextLineTabStop = width - 1;
+            }
+            setChunkedLongArg(isChunkBetweenPadding());
         }
     }
\ No newline at end of file
