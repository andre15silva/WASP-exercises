diff --git a/tmp/3bea50fd-8796-4a47-a590-df07106c4e80_buggy.java b/tmp/11789a26-479c-4082-8a13-690afebb96ec_fixed.java
index dbda381..8745605 100644
--- a/tmp/3bea50fd-8796-4a47-a590-df07106c4e80_buggy.java
+++ b/tmp/11789a26-479c-4082-8a13-690afebb96ec_fixed.java
@@ -1,54 +1,89 @@
     /**
      * Normalizes this period using standard rules, assuming a 12 month year,
      * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
      * providing control over how the result is split into fields.
      * <p>
      * This method allows you to normalize a period.
      * However to achieve this it makes the assumption that all years are
      * 12 months, all weeks are 7 days, all days are 24 hours,
      * all hours are 60 minutes and all minutes are 60 seconds. This is not
      * true when daylight savings time is considered, and may also not be true
      * for some chronologies. However, it is included as it is a useful operation
      * for many applications and business rules.
      * <p>
      * If the period contains years or months, then the months will be
      * normalized to be between 0 and 11. The days field and below will be
      * normalized as necessary, however this will not overflow into the months
      * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
      * But a period of 1 month 40 days will remain as 1 month 40 days.
      * <p>
      * The PeriodType parameter controls how the result is created. It allows
      * you to omit certain fields from the result if desired. For example,
      * you may not want the result to include weeks, in which case you pass
      * in <code>PeriodType.yearMonthDayTime()</code>.
      * 
      * @param type  the period type of the new period, null means standard type
      * @return a normalized period equivalent to this period
      * @throws ArithmeticException if any field is too large to be represented
      * @throws UnsupportedOperationException if this period contains non-zero
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
+        PeriodType gcd = PeriodType.yearMonthDayTime();
+        int index = 0;
+        while (index < iTypes.length && gcd.equals(iTypes[index])) {
+            index++;
+        }
+        if (index == iTypes.length) {
+            return this;
+        }
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        long millis = getMillis();  
+        int[] values = iValues;
+        int[] otherFields = new int[iTypes.length];
+        System.arraycopy(values, 0, otherFields, 0, index);
+        millis += (((long) values[index]) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        millis += (((long) values[index + 1]) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        millis += (((long) values[index + 2]) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        millis += (((long) values[index + 3]) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+        millis += (((long) values[index + 4]) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        int extraYears = 0;
+        if (index > 0 && getYears() != 0) {
+            extraYears = FieldUtils.safeAdd(extraYears, getYears());
+            millis += (((long) getYears()) * ((long) DateTimeConstants.MILLIS_PER_YEAR));
+        }
+        if (index > 1 && getMonths() != 0) {
+            extraYears = FieldUtils.safeAdd(extraYears, getMonths() / 12);
+            millis += (((long) getMonths()) * ((long) DateTimeConstants.MILLIS_PER_MONTH));
+        }
+        if (index > 2 && getDays() != 0) {
             millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        }
+        if (index > 3 && getHours() != 0) {
+            millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        }
+        if (index > 4 && getMinutes() != 0) {
+            millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        }
+        if (index > 5 && getSeconds() != 0) {
+            millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        }
+        if (extraYears != 0) {
+            millis += (((long) extraYears) * ((long) DateTimeConstants.MILLIS_PER_YEAR));
+        }
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
+        int years = getYears() + (extraYears * 12);
         int months = getMonths();
         if (years != 0 || months != 0) {
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
             if (years != 0) {
                 result = result.withYears(years);
             }
             if (months != 0) {
                 result = result.withMonths(months);
             }
         }
         return result;
     }
\ No newline at end of file
