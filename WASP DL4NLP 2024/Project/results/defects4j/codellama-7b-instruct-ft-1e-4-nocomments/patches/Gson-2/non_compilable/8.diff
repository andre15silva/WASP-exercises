diff --git a/tmp/92276143-8078-47c2-861d-47f4b60cebde_buggy.java b/tmp/d0de63a1-20d2-45ea-8312-b537ff26a83a_fixed.java
index 6e45f80..8ecffd5 100644
--- a/tmp/92276143-8078-47c2-861d-47f4b60cebde_buggy.java
+++ b/tmp/d0de63a1-20d2-45ea-8312-b537ff26a83a_fixed.java
@@ -1,21 +1,32 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
-
+        final TypeAdapter<T2> delegate = gson.getDelegateAdapter(this, typeToken);
+        if (JsonElement.class.isAssignableFrom(requestedType)) {
+          return new TypeAdapter<T2>() {
+            @Override
+            public T2 read(JsonReader reader) throws IOException {
+              final T2 result = delegate.read(reader);
+              return (T2) ((JsonElement) result).isJsonArray()
+                  || ((JsonElement) result).isJsonObject() ? result
+                  : result == null ? null : typeAdapter.fromJsonTree((JsonElement) result);
+            }
+            @Override
+            public void write(JsonWriter writer, T2 value) throws IOException {
+              delegate.write(writer, value);
+            }
+          };
+        }
+        return delegate;
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
