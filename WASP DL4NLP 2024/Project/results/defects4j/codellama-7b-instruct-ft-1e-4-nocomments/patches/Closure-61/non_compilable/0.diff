diff --git a/tmp/b4c819a0-cb0f-4440-8b7e-0dd0099b485d_buggy.java b/tmp/c043c592-e18c-4a81-a222-2d440cc62c36_fixed.java
index b36c3f0..d62fb84 100644
--- a/tmp/b4c819a0-cb0f-4440-8b7e-0dd0099b485d_buggy.java
+++ b/tmp/c043c592-e18c-4a81-a222-2d440cc62c36_fixed.java
@@ -1,58 +1,69 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
+  static boolean functionCallHasSideEffects(Node callNode,
+      @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
-
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
-
     Node nameNode = callNode.getFirstChild();
-
-    // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
       if (callNode.hasOneChild()
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
               nameNode.getLastChild().getString())) {
         return false;
       }
-
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
-
-      // Functions in the "Math" namespace have no side effects.
-
-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
+      if (compiler != null) {
+        Node left = nameNode.getFirstChild();
+        if (left.getType() == Token.REGEXP) {
+          if (left.getJSType() != null) {
+            return false;
+          }
+        } else if (left.getType() == Token.STRING) {
+          if (nameNode.getLastChild().getString()
+              .equals("substring") ||
+              nameNode.getLastChild().getString()
+              .equals("substringMatch")) {
+            Node param = nameNode.getNext();
+            if (param != null) {
+              if (param.getType() == Token.NUMBER) {
+                return false;
+              }
+            }
+          }
+        } else if (nameNode.getFirstChild().getType() == Token.GETPROP &&
+            nameNode.getLastChild().getString().equals("call")) {
+          Node objectNode = left.getFirstChild();
+          JSType type = objectNode.getJSType();
+          if (type != null && type.isUnoptimizableFunctionType() &&
+              "Math".equals(
+                  type.toMaybeFunctionType().getConstructor().getQualifiedName())) {
+            return false;
+          }
+        }
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
-
     return true;
   }
\ No newline at end of file
