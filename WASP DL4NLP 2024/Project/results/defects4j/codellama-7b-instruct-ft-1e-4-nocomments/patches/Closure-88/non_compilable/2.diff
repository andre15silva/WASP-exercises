diff --git a/tmp/3db83e9a-f551-4184-bf0d-49d12acb12db_buggy.java b/tmp/8342b3a7-3acf-4ab7-9b31-d67488ef3155_fixed.java
index 9353941..e05346e 100644
--- a/tmp/3db83e9a-f551-4184-bf0d-49d12acb12db_buggy.java
+++ b/tmp/8342b3a7-3acf-4ab7-9b31-d67488ef3155_fixed.java
@@ -1,30 +1,25 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
-
-    // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { 
+        if (child.getBooleanProp(Node.FREE_RESULT)) {
+          if (NodeUtil.isExprAssign(child.getParent())) {
+            return VariableLiveness.MAYBE_LIVE;
+          }
+        }
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
