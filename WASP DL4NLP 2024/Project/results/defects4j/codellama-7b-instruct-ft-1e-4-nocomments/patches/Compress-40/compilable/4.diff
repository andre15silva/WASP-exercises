diff --git a/tmp/1c7f49e8-e0ab-4880-9615-fe425d4db719_buggy.java b/tmp/5ff3142f-3d6c-4c45-ac36-e934290ddbf2_fixed.java
index 7116384..b36a621 100644
--- a/tmp/1c7f49e8-e0ab-4880-9615-fe425d4db719_buggy.java
+++ b/tmp/5ff3142f-3d6c-4c45-ac36-e934290ddbf2_fixed.java
@@ -1,39 +1,38 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+            bitsOut = bitsCached >> (bitsCachedSize - count);
+            bitsCached <<= count;
+        } else {
+            bitsOut = bitsCached & MASKS[count];
             bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
