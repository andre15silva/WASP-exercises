diff --git a/tmp/47ad7051-ac79-4057-9954-c1cf367c644d_buggy.java b/tmp/900e65f7-6bf9-4615-bbfa-6aa913cea89b_fixed.java
index 51ebfca..a45960d 100644
--- a/tmp/47ad7051-ac79-4057-9954-c1cf367c644d_buggy.java
+++ b/tmp/900e65f7-6bf9-4615-bbfa-6aa913cea89b_fixed.java
@@ -1,32 +1,38 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      * 
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
-
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        boolean sizeOk = true;
+        int b2Size = isChunked ? MIME_CHUNK_SIZE : binaryData.length;
+        long len = (binaryData.length + (b2Size - 1)) / b2Size * 4;
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
+        } else if (!isChunked && len < maxResultSize) {
+            sizeOk = false;
+        } else {
+            long chunking = len / 76;
+            len += ((chunking * 2) + 2) << 5;
         }
-                
-        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
+        Base64 b64 = sizeOk ? isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe)
+                              : new Base64(0, 0, urlSafe, true);
         return b64.encode(binaryData);
     }
\ No newline at end of file
