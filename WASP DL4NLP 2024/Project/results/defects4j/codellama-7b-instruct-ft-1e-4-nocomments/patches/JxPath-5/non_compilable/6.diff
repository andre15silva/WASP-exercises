diff --git a/tmp/0d134d16-efa3-4bd2-a58a-01b8e88783e1_buggy.java b/tmp/c12d7233-e2f6-4819-9157-6352b875c4eb_fixed.java
index 5f8ac1a..e845b26 100644
--- a/tmp/0d134d16-efa3-4bd2-a58a-01b8e88783e1_buggy.java
+++ b/tmp/c12d7233-e2f6-4819-9157-6352b875c4eb_fixed.java
@@ -1,34 +1,49 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
-
+        if (p1 == null) {
+            NodePointer parent = p2.parent;
+            if (parent instanceof VariableNodePointer) {
+                NodePointer variable = ((VariableNodePointer) parent).getVariable();
+                if (variable instanceof Node) {
+                    return compareNodePointers(p1, -1, variable, 0);
+                }
+            }
+        }
+        if (p2 == null) {
+            NodePointer parent = p1.parent;
+            if (parent instanceof VariableNodePointer) {
+                NodePointer variable = ((VariableNodePointer) parent).getVariable();
+                if (variable instanceof Node) {
+                    return compareNodePointers(variable, -1, p2, 0);
+                }
+            }
+        }
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
-
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
-
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
