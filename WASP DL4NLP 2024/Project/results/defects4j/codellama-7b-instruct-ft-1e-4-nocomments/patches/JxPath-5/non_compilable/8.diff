diff --git a/tmp/5ed43c4a-9191-459f-a69f-05f9a466a9ba_buggy.java b/tmp/d7af8789-d7b6-485c-bf0b-7686691a3e9c_fixed.java
index 5f8ac1a..6385b67 100644
--- a/tmp/5ed43c4a-9191-459f-a69f-05f9a466a9ba_buggy.java
+++ b/tmp/d7af8789-d7b6-485c-bf0b-7686691a3e9c_fixed.java
@@ -1,34 +1,57 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
-
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
-
         if (depth1 == 1) {
+            if (p1.isVariable()) {
                 throw new JXPathException(
                         "Cannot compare pointers that do not belong to the same tree: '"
                                 + p1 + "' and '" + p2 + "'");
             }
+            if (p2.isVariable()) {
+                throw new JXPathException(
+                        "Cannot compare pointers that do not belong to the same tree: '"
+                                + p2 + "' and '" + p1 + "'");
+            }
+            return p1.parent.compareChildNodePointers(p1, p2);
+        }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
-
-        return p1.parent.compareChildNodePointers(p1, p2);
+        NodePointer p12 = p1.context.resolveVariables(p1);
+        if (p12 == null) {
+            if (p1.isVariable()) {
+                throw new JXPathException(
+                    "Cannot compare pointers that do not belong to the same tree: '"
+                        + p1 + "' and '" + p2 + "'");
+            }
+            return -1;
+        }
+        NodePointer p22 = p2.context.resolveVariables(p2);
+        if (p22 == null) {
+            if (p2.isVariable()) {
+                throw new JXPathException(
+                    "Cannot compare pointers that do not belong to the same tree: '"
+                        + p2 + "' and '" + p1 + "'");
+            }
+            return 1;
+        }
+        return p12.compareChildNodePointers(p12, p22);
     }
\ No newline at end of file
