diff --git a/tmp/53f25fba-c745-40b0-8833-1736077bcf41_buggy.java b/tmp/4d3d9510-d045-4d82-968e-970110f2d1d0_fixed.java
index fb2b020..e1c8d93 100644
--- a/tmp/53f25fba-c745-40b0-8833-1736077bcf41_buggy.java
+++ b/tmp/4d3d9510-d045-4d82-968e-970110f2d1d0_fixed.java
@@ -1,27 +1,13 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+        if (propType.isTop() && !isPropertyTypeDeclared(prop)) {
+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
-          }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
