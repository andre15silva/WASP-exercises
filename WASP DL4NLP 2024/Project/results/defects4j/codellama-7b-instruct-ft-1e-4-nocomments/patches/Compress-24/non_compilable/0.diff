diff --git a/tmp/c0abedf4-f0d0-40cf-9584-e9ba3b87236b_buggy.java b/tmp/eca23c7f-b1fc-4911-93c7-f3784a8fe770_fixed.java
index d9d2789..2c058d2 100644
--- a/tmp/c0abedf4-f0d0-40cf-9584-e9ba3b87236b_buggy.java
+++ b/tmp/eca23c7f-b1fc-4911-93c7-f3784a8fe770_fixed.java
@@ -1,73 +1,74 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
-
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
-
         if (buffer[start] == 0) {
             return 0L;
         }
-
-        // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
-
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
         byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' '){
             end--;
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
         trailer = buffer[end - 1];
         while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
             end--;
             trailer = buffer[end - 1];
         }
-
+        final int max = end-start;
+        long limit = MAX_OCTAL;
+        if (max > 11){
+            if (max == 12){
+                limit= MAX_OCTAL_OVERFLOW;
+            } else {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, end-1, trailer));
+            }
+        }
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0');                 
+        }
+        if (result > limit){
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, length, (byte) 31));
         }
-
         return result;
     }
\ No newline at end of file
