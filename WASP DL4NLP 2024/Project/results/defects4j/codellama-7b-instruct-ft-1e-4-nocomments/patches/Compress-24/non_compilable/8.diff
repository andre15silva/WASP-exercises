diff --git a/tmp/6c83a603-650b-4648-9d11-43c645e32c69_buggy.java b/tmp/8b737ce0-3f71-4665-aaaa-b8d3b7e3ed90_fixed.java
index d9d2789..87028bb 100644
--- a/tmp/6c83a603-650b-4648-9d11-43c645e32c69_buggy.java
+++ b/tmp/8b737ce0-3f71-4665-aaaa-b8d3b7e3ed90_fixed.java
@@ -1,73 +1,86 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
-
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
-
         if (buffer[start] == 0) {
             return 0L;
         }
-
-        // Skip leading spaces
         while (start < end){
             if (buffer[start] == ' '){
                 start++;
             } else {
                 break;
             }
         }
-
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
+        final long maxValue = maxOctal();
         byte trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' '){
             end--;
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
         trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
+        while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
             trailer = buffer[end - 1];
         }
-
+        if (end > offset + 12 && end > start + 11){
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, end-1, trailer));
+        }
+        start = start + 12 - end;
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); 
+        }
+        if (end != offset){
+            result = result << 3 * (end - start) + ((length > 13)?(buffer[length - 2] - '0')*Math.pow(8,length-2-(length<12?2:1)):0);
+        }
+        if (result > maxValue){
+            throw new IllegalArgumentException(
+                    "Invalid byte "+(end != offset ? buffer[end - 1] :' ')+" at offset " + (offset + end-length)+" in '"
+                    + new String(buffer) + "' len="+length);
         }
-
         return result;
     }
+    /**
+     * Return the maximum valid octal value for the current platform.
+     *
+     * <p>The maximum value is currently <code>0x7FFFFFFFFFFFFFFF<code>
+     * although the maximum valid octal values for POSIX (13 bytes format)
+     * is <code>0777777777777</code>, hence <code>2^58-1</code>.
+     * For now it's easier to not worry about 64bit systems and not include
+     * the extra digits.
+     */
+    private static long maxOctal(){
+        return 0x7FFFFFFFFFFFFFFFL;
+    }
\ No newline at end of file
