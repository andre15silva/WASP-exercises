diff --git a/tmp/89ec9d6c-8595-4aec-ac7d-7972cc996138_buggy.java b/tmp/b98ae9c3-24e7-4e49-83ed-9a0e06824877_fixed.java
index d6a560a..5327da1 100644
--- a/tmp/89ec9d6c-8595-4aec-ac7d-7972cc996138_buggy.java
+++ b/tmp/b98ae9c3-24e7-4e49-83ed-9a0e06824877_fixed.java
@@ -1,33 +1,24 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+    boolean resolved = resolveViaRegistry(t, scope);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
-
     if (resolved) {
-      super.resolveInternal(t, enclosing);
+      super.resolveInternal(t, scope);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
-
-    resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+    resolveViaProperties(t, scope);
+    if (detectInheritClassCycle()) {
+    } else if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
-
-    super.resolveInternal(t, enclosing);
+    super.resolveInternal(t, scope);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
