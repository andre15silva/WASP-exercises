diff --git a/tmp/0c67ce6c-46fb-4e87-ae36-72d9251783bb_buggy.java b/tmp/583f371c-d2bd-4cae-810f-eb98b171622a_fixed.java
index b98f0a7..d2bd8ad 100644
--- a/tmp/0c67ce6c-46fb-4e87-ae36-72d9251783bb_buggy.java
+++ b/tmp/583f371c-d2bd-4cae-810f-eb98b171622a_fixed.java
@@ -1,29 +1,46 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
+      if (type != null) {
+        Node arg = constructor.getNext();
+        if (arg == null) {
+          return scope;
+        }
+        for (; arg != null; arg = arg.getNext()) {
+          JSType type1 = arg.getJSType();
+          if (type1 != null && !type1.isUnknownType()) {
+            type1 = type1.restrictByNotNullOrUndefined();
+            if (type != type1) {
+              type = null;
+              break;
+            }
+          }
+        }
+        if (type != null) {
+          for (; arg != null; arg = arg.getNext()) {
+            arg.setJSType(type);
+          }
+        }
+      }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
