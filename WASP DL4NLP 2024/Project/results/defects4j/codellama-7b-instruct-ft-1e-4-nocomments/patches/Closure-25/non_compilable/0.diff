diff --git a/tmp/3adfa0b2-50cc-40b2-b702-9ab240abbd92_buggy.java b/tmp/14276cc0-7cf3-4337-a110-b6e0c11839ed_fixed.java
index b98f0a7..dd1f5b2 100644
--- a/tmp/3adfa0b2-50cc-40b2-b702-9ab240abbd92_buggy.java
+++ b/tmp/14276cc0-7cf3-4337-a110-b6e0c11839ed_fixed.java
@@ -1,29 +1,26 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
-    JSType constructorType = constructor.getJSType();
-    JSType type = null;
-    if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
-      } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
+    JSType result = getNativeType(NO_OBJECT_TYPE);
+    for (Node arg = constructor.getFirstChild(); arg != null; arg = arg.getNext()) {
+      if (arg.isSpread()) {
+        FlowScope spreadScope = scope.inferFromContext(result);
+        arg = arg.getFirstChild();
+        if (arg != null) {
+          spreadScope = traverse(arg, spreadScope);
+          result = scope.inferExpandingDataStructure(
+              arg.getJSType(), result, SpreadType.OBJECT_LIKE);
+          arg = arg.getNext();
         }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+        scope = scope.inferFromContext(result);
+        if (arg != null) {
+          arg = arg.getFirstChild();
         }
       }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      if (arg != null) {
         scope = traverse(arg, scope);
       }
+    }
+    scope = scope.inferFromContext(result);
+    n.setJSType(result);
     return scope;
   }
\ No newline at end of file
