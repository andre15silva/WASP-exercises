diff --git a/tmp/5306575d-6721-4d50-b2a2-1119d95f25c3_buggy.java b/tmp/e374d601-b608-4f96-aad3-67032bca4f2f_fixed.java
index 1c875ad..35d341f 100644
--- a/tmp/5306575d-6721-4d50-b2a2-1119d95f25c3_buggy.java
+++ b/tmp/e374d601-b608-4f96-aad3-67032bca4f2f_fixed.java
@@ -1,31 +1,15 @@
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
             throw new UnsupportedOperationException();
-
         } else {
+            if(invocation.getRawArguments().length == matchers.size()) {
                 for (int position = 0; position < matchers.size(); position++) {
                     Matcher m = matchers.get(position);
                     if (m instanceof CapturesArguments) {
                         ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                     }
                 }
             }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+        }
     }
\ No newline at end of file
