diff --git a/tmp/255b2fe9-8a99-4012-a227-0d0ad4349b57_buggy.java b/tmp/0327861f-41d6-409f-a46f-ae14c911f1a3_fixed.java
index 3b9a3c0..e076741 100644
--- a/tmp/255b2fe9-8a99-4012-a227-0d0ad4349b57_buggy.java
+++ b/tmp/0327861f-41d6-409f-a46f-ae14c911f1a3_fixed.java
@@ -1,71 +1,50 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
+     * The buffer must contain a trailing ASCII 7(NUL)
+     * or SPACE, and may contain an additional trailing ASCII 7(NUL)
+     * or SPACE.</p>
      *
-     * <p>The input buffer is allowed to contain all NULs,
+     * <p>The input buffer is allowed to contain all SPACE,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
+     * leading SPACE this method returns 0 if it detects a leading SPACE
+     * since Commons Compress 1.9.7.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
-
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
-
-        if (buffer[start] == 0) {
-            return 0L;
-        }
-
-        // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
-                start++;
-            } else {
-                break;
-            }
-        }
-
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
+        byte trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
             end--;
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
-        // May have additional NULs or spaces
         trailer = buffer[end - 1];
         if (trailer == 0 || trailer == ' '){
             end--;
         }
-
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); 
         }
-
         return result;
     }
\ No newline at end of file
