diff --git a/tmp/21c5c3ca-2e4f-49b2-b840-fa514c3650a8_buggy.java b/tmp/4541b385-950e-440d-8887-b018fedd600a_fixed.java
index 9033e1c..87aa84e 100644
--- a/tmp/21c5c3ca-2e4f-49b2-b840-fa514c3650a8_buggy.java
+++ b/tmp/4541b385-950e-440d-8887-b018fedd600a_fixed.java
@@ -1,11 +1,79 @@
     /**
      * Returns true iff they are equal as defined by
      * {@link #equals(double,double,int) equals(x, y, 1)}.
      *
      * @param x first value
      * @param y second value
      * @return {@code true} if the values are equal.
      */
     public static boolean equals(double x, double y) {
         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
     }
+    public static boolean equals(double x, double y, int maxUlps) {
+        if (Double.isInfinite(x) || Double.isNaN(x) ||
+            Double.isInfinite(y) || Double.isNaN(y)) {
+            return x == y;
+        }
+        long longX = Double.doubleToLongBits(x);
+        long longY = Double.doubleToLongBits(y);
+        long diff = Math.abs(longX - longY);
+        double ulps = Math.ulp(x) + Math.ulp(y);
+        if (ulps >= 2) {
+            return Math.abs(diff) <= Math.abs(ulps - 2);
+        }
+        return x == y;
+    }
+    public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {
+        if (x == y) {
+            return true;
+        }
+        if (Double.isNaN(x) && Double.isNaN(y)) {
+            return true;
+        }
+        if (Double.isInfinite(x) || Double.isInfinite(y)) {
+            return false;
+        }
+        long longX = Double.doubleToLongBits(x);
+        long longY = Double.doubleToLongBits(y);
+        return Math.abs(longX - longY) <= (maxUlps + 1);
+    }
+    public static boolean equalsWithinUlps(double x, double y, int maxUlps) {
+        if (Double.isNaN(x) || Double.isNaN(y)) {
+            return false;
+        }
+        return equalsIncludingNaN(x, y, maxUlps);
+    }
+    public static boolean equals(double[] arr1, double[] arr2) {
+        if (arr1 == arr2) {
+            return true;
+        }
+        if ((arr1 == null) || (arr2 == null)) {
+            return false;
+        }
+        if (arr1.length != arr2.length) {
+            return false;
+        }
+        for (int i = 0; i < arr1.length; i++) {
+            if (arr1[i] != arr2[i]) {
+                return false;
+            }
+        }
+        return true;
+    }
+    public static boolean equals(Object[] arr1, Object[] arr2) {
+        if (arr1 == arr2) {
+            return true;
+        }
+        if ((arr1 == null) || (arr2 == null)) {
+            return false;
+        }
+        if (arr1.length != arr2.length) {
+            return false;
+        }
+        for (int i = 0; i < arr1.length; i++) {
+            if ((arr1[i] != null) && (!arr1[i].equals(arr2[i]))) {
+                return false;
+            }
+        }
+        return true;
+    }
\ No newline at end of file
