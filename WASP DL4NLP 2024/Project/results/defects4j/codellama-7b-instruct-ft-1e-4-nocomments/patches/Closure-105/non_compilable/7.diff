diff --git a/tmp/5b35eaa7-68d1-4438-b9fa-b739e49309fa_buggy.java b/tmp/c308b5a1-225a-4571-9d03-fb71d770028a_fixed.java
index ef65dd9..12310e2 100644
--- a/tmp/5b35eaa7-68d1-4438-b9fa-b739e49309fa_buggy.java
+++ b/tmp/c308b5a1-225a-4571-9d03-fb71d770028a_fixed.java
@@ -1,92 +1,182 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
-
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
-
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
+    int jSize = joinString.length();
+    boolean allSizeKnown = true;
+    int jCost = 0;
+    if (joinString.contains("'")) {
+      jSize = -jCost;
+      allSizeKnown = false;
+    } else {
+      jCost = (jSize == 0) ? 1 : jSize + (jSize / 2);
+      jSize *= 1;
+      if (joinString.contains("\"")) {
+        jSize = -jSize;
+        jCost = -jCost;
+        allSizeKnown = false;
+      }
+    }
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
+        allSizeKnown &= NodeUtil.getJSOpputCostSizeKnown(sb, elem);
         sb.append(NodeUtil.getStringValue(elem));
       } else {
+        allSizeKnown &= false;
         if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
+          foldedSize += sb.length();
+          if (jCost > 0) {
+            foldedSize += jCost;
+          }
           sb = new StringBuilder();
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
+        int foldedStringCost = InlineCostEstimator.getCost(elem);
+        allSizeKnown &= NodeUtil.getJSOpputCostSizeKnown(sb, elem);
+        foldedSize += foldedStringCost;
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
-
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+      if (jSize > 0) {
+        foldedSize += sb.length();
+      } else if (sb.length() > 0) {
+        foldedSize += sb.length();
+        jSize = sb.length();
+      }
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
+    int jCostPlus = -1;
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
-
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
+          Node replacement = new Node(
+              Token.ADD, Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
-
       default:
-        // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
+        if (jSize > 0) {
+          jCostPlus = jSize;
+        }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
+        if (allSizeKnown || foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
+    if (NodeUtil.getJSOpputCostSizeKnown(sb, right)) {
+      int estimatedCost = foldedSize + kJoinOverhead +
+        1 + InlineCostEstimator.getCost(right);
+      arrayNode.maybeReplaceChild(right, NodeUtil.newFoldedJSOppersNode(right, false));
+      if (right.getType() == Token.ARRAYLIT) {
+        for (Node child : right.children()) {
+          estimatedCost -= InlineCostEstimator.getCost(child);
+        }
+        foldedSize -= arrayFoldedChildren.size() - 1;
+      }
+      if (estimatedCost >= originalSize) {
+        return;
+      }
+    }
+    int jCostMult = jCost + (jCost > 0 ? jSize * jCost : -jSize * jCost);
+    List<String> opJJoins = new ArrayList<String>();
+    for (Node child : arrayFoldedChildren) {
+      if (child.getType() == Token.STRING) {
+        allSizeKnown &= NodeUtil.getJSOpputCostSizeKnown(sb, child);
+      } else {
+        allSizeKnown &= false;
+      }
+      opJJoins.add(child.toString());
+    }
+    String[] joinedArray = new String[opJJoins.size()];
+    String joinStringValue = left.getNext().getChildCount() > 0 ? joinString : "";
+    int originalSizeAddJ = originalSize + kJoinOverhead + joinStringValue.length() + 1;
+    int originalSizeConcat = originalSize + kJoinOverhead;
+    int i = 0;
+    for (Node node : arrayFoldedChildren) {
+      int opJCost = NodeUtil.getJSOpputCostSizeKnown(sb, node) ? jCost : jCost * jSize;
+      if (i > 0 && i < opJJoins.size() - 1 && allSizeKnown) {
+        originalSize += joinString.length();
+      }
+      if (i == 0 && allSizeKnown && opJCost == jCostMult) {
+        String joined = opJJoins.get(0);
+        joined = joined.replace("\"", "\\\"");
+        joined = joined.replace("'", "\\'");
+        if (joined.length() < originalSizeAddJ) {
+          parent.replaceChild(n, new Node(
+              Token.ADD,
+              new Node(Token.STRING, joined),
+              new Node(Token.STRING, "\"" + joinString + "\"")));
+        } else if (joined.length() < originalSizeConcat) {
+          Node replacement = node.cloneTree().detachFromParent();
+          replacement.setType(Token.ADD);
+          parent.replaceChild(n, replacement);
+        }
+      }
+      if (opJCost > 0) {
+        originalSize += opJCost;
+      }
+      joinedArray[i++] = opJJoins.get(i);
+    }
+    if (!allSizeKnown || jCostMult < 0 || opJJoins.size() == 0) {
+      return;
+    }
+    Node replacement = new Node(Token.ARRAYLIT);
+    int arraySize = i;
+    if (i == 0) {
+      t.report(n, PEEPHOLER_ARRAY_SIZE, "");
+      arraySize = 1;
+    }
+    for (int i1 = 0; i1 < arraySize; i1++) {
+      replacement.addChildToBack(arrayFoldedChildren.remove(0));
+    }
+    for ( ; i < joinedArray.length; i++) {
+      String joinString = i == joinedArray.length - 1 ? "" : "\"" + this.joinString + "\"";
+      Node operand = new Node(Token.ADD,
+          new Node(Token.STRING, joinedArray[i]), new Node(Token.STRING, joinString));
+      replacement.addChildToBack(operand);
+    }
+    if (i > 1) {
+      replacement.addChildToBack(new Node(Token.STRING));
+    }
+    arrayNode.maybeReplaceChild(right, replacement);
+    parent.replaceChild(n, arrayNode);
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
