diff --git a/tmp/dbae3303-d414-4cd6-b3b7-d33fa6f5563e_buggy.java b/tmp/d27e94e5-9b2f-415b-931f-2d344fffe3ea_fixed.java
index ef65dd9..2c9f271 100644
--- a/tmp/dbae3303-d414-4cd6-b3b7-d33fa6f5563e_buggy.java
+++ b/tmp/d27e94e5-9b2f-415b-931f-2d344fffe3ea_fixed.java
@@ -1,92 +1,61 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
-
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
-
     String joinString = NodeUtil.getStringValue(right);
+    int foldSize = 0;
+    int currentSize = 0;
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
-    int foldedSize = 0;
+    int originalSize = InlineCostEstimator.getCost(n);
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    Node replacement = null;
+    int nbChildren = arrayNode.getChildCount();
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
+        foldSize += InlineCostEstimator.getCost(elem) - 2;
       } else {
+        foldSize += 4;
+        currentSize = elem.getLastChild().getNext().getNext() == null ?
+            InlineCostEstimator.getCost(elem) : 5;
           if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          if (sb.length() < 100 || sb.length() + currentSize < nbChildren) {
+            foldSize += sb.length() + 2;
             arrayFoldedChildren.add(Node.newString(sb.toString()));
             sb = new StringBuilder();
+          } else {
+            Node.addChildrenToFront(replacement.getLastChild().getNext(), elem);
+          }
+          currentSize = 0;
         }
-        foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
-
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+      foldSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
-
-    int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
-
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
-        parent.replaceChild(n, foldedStringNode);
-        break;
-
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
-        }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
+    foldSize += arrayFoldedChildren.size() - 1;
+    if (foldSize < originalSize) {
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
-        break;
+    } else if (sb.length() > 0) {
+      return;
     }
+    parent.replaceChild(n, arrayNode);
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
