diff --git a/tmp/7ea2766a-bc39-48dc-bc23-fb5063c7503b_buggy.java b/tmp/0d26e4cc-978e-44c7-a5e8-3f3e2e114bf3_fixed.java
index ef65dd9..c5434d1 100644
--- a/tmp/7ea2766a-bc39-48dc-bc23-fb5063c7503b_buggy.java
+++ b/tmp/0d26e4cc-978e-44c7-a5e8-3f3e2e114bf3_fixed.java
@@ -1,92 +1,77 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
-
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
-
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
+    int originalSize = InlineCostEstimator.getCost(n);
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          int cost = sb.length() + 2;
+          if (cost + foldedSize >= originalSize) {
             arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+            sb = new StringBuilder("");
+            foldedSize += cost;
+          }
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
-
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+      int cost = sb.length() + 2;
+      if (cost + foldedSize < originalSize) {
         arrayFoldedChildren.add(Node.newString(sb.toString()));
+        foldedSize += cost;
+      }
     }
-    // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
-
-    int originalSize = InlineCostEstimator.getCost(n);
+    int kJoinOverhead = "[].join()".length();
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
-
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
         parent.replaceChild(n, foldedStringNode);
         break;
-
       default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+        if (arrayNode.getChildCount() == arrayFoldedChildren.size()) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
