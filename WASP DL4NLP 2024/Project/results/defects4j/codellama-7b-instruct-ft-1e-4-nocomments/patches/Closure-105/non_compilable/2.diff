diff --git a/tmp/fc5d0f51-4f4f-4c99-a608-5e7905ff0c98_buggy.java b/tmp/9f402bca-a541-47ca-8600-a1332262cf78_fixed.java
index ef65dd9..5cc9bf0 100644
--- a/tmp/fc5d0f51-4f4f-4c99-a608-5e7905ff0c98_buggy.java
+++ b/tmp/9f402bca-a541-47ca-8600-a1332262cf78_fixed.java
@@ -1,92 +1,87 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
-
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
-
     String joinString = NodeUtil.getStringValue(right);
+    int joinStringSize = joinString.length();
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
+    Node elem = arrayNode.getFirstChild();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
-    Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
+          foldedSize += joinStringSize;
+        }
+        foldedSize += InlineCostEstimator.getCost(elem);
+        String elemStringValue = NodeUtil.getStringValue(elem);
+        if (sb.length() + elemStringValue.length() > InlineCostEstimator.kCostHalfNode) {
+          if (sb.length() > 0) {
+            arrayFoldedChildren.add(Node.newString(sb.toString()));
+            sb = null;
+          }
+        }
+        if (sb != null) {
+          sb.append(elemStringValue);
         }
-        sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
-          // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
+          sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
-
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
+    if (sb != null && sb.length() > 0) {
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
-
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
-
       default:
-        // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
