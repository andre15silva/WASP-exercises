diff --git a/tmp/7ff55316-eeb1-4fe0-9c3c-8d98fd9235ea_buggy.java b/tmp/97d78563-2bfc-4891-a252-fb61457fccf8_fixed.java
index ef65dd9..defc75c 100644
--- a/tmp/7ff55316-eeb1-4fe0-9c3c-8d98fd9235ea_buggy.java
+++ b/tmp/97d78563-2bfc-4891-a252-fb61457fccf8_fixed.java
@@ -1,92 +1,89 @@
-  /**
-   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
-   */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
-
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
-
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
+    boolean haveJoinString = !joinString.equals("");
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
-          // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
+          haveJoinString = true;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
-
     if (sb.length() > 0) {
-      // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
+    Node arrayFolded = n;
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
-
       case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+        Node foldedStringNode =
+            new Node(arrayFoldedChildren.remove(0));
+        foldedSize = InlineCostEstimator.getCost(foldedStringNode);
+        if (foldedStringNode.getType() != Token.STRING || haveJoinString) {
           if (foldedSize > originalSize) {
             return;
           }
           arrayNode.detachChildren();
           if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
             Node replacement = new Node(Token.ADD,
                 Node.newString(""), foldedStringNode);
             foldedStringNode = replacement;
+          } else if (haveJoinString) { 
+            for (Node child : arrayFoldedChildren) {
+              foldedStringNode.getLastChild().addChildToBack(child);
             } 
-        parent.replaceChild(n, foldedStringNode);
+            foldedStringNode.putBooleanProp(Node.FOLDABLE_OPERAND, true);
+          }
+          arrayFolded = foldedStringNode;
+        }
+        parent.replaceChild(n, arrayFolded);
         break;
-
       default:
-        // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
+        if (foldedSize < originalSize) {
           arrayNode.detachChildren();
+          arrayFolded = new Node(Token.ARRAYLIT, arrayNode);
+          arrayFolded.srcref(n);
           for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+            arrayFolded.addChildToBack(node);
+          }
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
