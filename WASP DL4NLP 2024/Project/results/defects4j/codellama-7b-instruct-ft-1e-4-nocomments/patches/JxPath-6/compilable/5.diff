diff --git a/tmp/8f19e9ea-9109-4c35-8a7b-3af74c1d99cf_buggy.java b/tmp/d2101749-c329-44a0-94f4-72b69189b23f_fixed.java
index f650982..83342b4 100644
--- a/tmp/8f19e9ea-9109-4c35-8a7b-3af74c1d99cf_buggy.java
+++ b/tmp/d2101749-c329-44a0-94f4-72b69189b23f_fixed.java
@@ -1,42 +1,30 @@
-    /**
-     * Compares two values
-     */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
-
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
-
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
-
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
-
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
-
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+        if ((l instanceof Iterator) && l != context && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+        if (!(l instanceof Iterator) && r != context && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
+        if (l instanceof Iterator && l != context && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
\ No newline at end of file
