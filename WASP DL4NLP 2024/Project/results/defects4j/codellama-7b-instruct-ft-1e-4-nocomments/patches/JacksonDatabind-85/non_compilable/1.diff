diff --git a/tmp/d5a02f02-93e7-46ec-aca9-a95b1558d808_buggy.java b/tmp/e365f5a3-e291-470d-aae2-94df08310730_fixed.java
index d926eea..3f3d66d 100644
--- a/tmp/d5a02f02-93e7-46ec-aca9-a95b1558d808_buggy.java
+++ b/tmp/e365f5a3-e291-470d-aae2-94df08310730_fixed.java
@@ -1,48 +1,26 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
-        // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
-
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
-                    TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
-                    if (tz == null) {
-                        tz = serializers.getTimeZone();
+                if ((shape == JsonFormat.Shape.STRING)  || fmt.hasPattern()
+                                || fmt.hasLocale() || fmt.hasTimeZone()) {
+                    TimeZone tz = fmt.hasTimeZone() ? TimeZone.getTimeZone(fmt.getTimeZone()) : null;
+            final Locale locale = fmt.hasLocale() ? fmt.getLocale() : format.hasTimeZoneAsString() ? format.getLocale() : serializers.getLocale();
+            final String pattern = fmt.hasPattern() ? fmt.getPattern() : format.hasPatternAsString() ? fmt.getPatternAsString() : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+            SimpleDateFormat formatter = new SimpleDateFormat(pattern, locale);
+                    formatter.setTimeZone(tz);
+            return withFormat(Boolean.FALSE, formatter);
         }
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
-        }
-
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
         return this;
     }
\ No newline at end of file
