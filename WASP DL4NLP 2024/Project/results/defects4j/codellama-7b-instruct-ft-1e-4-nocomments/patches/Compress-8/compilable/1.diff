diff --git a/tmp/63cc3fdb-9c17-4ffd-a9d3-ef5772f41988_buggy.java b/tmp/affc3c18-006d-4eda-98ba-06eee78efd3b_fixed.java
index e087f95..3ad67f8 100644
--- a/tmp/63cc3fdb-9c17-4ffd-a9d3-ef5772f41988_buggy.java
+++ b/tmp/affc3c18-006d-4eda-98ba-06eee78efd3b_fixed.java
@@ -1,53 +1,35 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
+     * @param length The maximum number of bytes to parse.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
         int     start = offset;
-
+        int     end = offset + length;
         for (int i = start; i < end; i++){
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
-
-        // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
+          	if ( (i + 1) == end){
+                return result;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); 
         }
-
         return result;
     }
\ No newline at end of file
