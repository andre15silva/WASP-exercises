diff --git a/tmp/8faaa747-069c-4e6b-b38e-73bb763d057c_buggy.java b/tmp/cd7dd436-d64a-484e-9188-1d65da72b510_fixed.java
index e087f95..762a6a6 100644
--- a/tmp/8faaa747-069c-4e6b-b38e-73bb763d057c_buggy.java
+++ b/tmp/cd7dd436-d64a-484e-9188-1d65da72b510_fixed.java
@@ -1,53 +1,48 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
+     * @param length The number of bytes to parse.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
-
-        for (int i = start; i < end; i++){
+        int     i = 0;
+        for (i = start; i < end; i++){
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
-
-        // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
                    continue;
             }            
                 if (currentByte == (byte) ' ') {
                 break;
                 }
             }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); 
+        }
+        if (end > i) {
+            throw new IllegalArgumentException(
+                    "Invalid octal number: not all NULs, no trailer, or with embedded space or NUL");
         }
-
         return result; 
     }
\ No newline at end of file
