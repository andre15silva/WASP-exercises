diff --git a/tmp/b5c6987e-eb72-418d-a641-783a74a9d356_buggy.java b/tmp/02de504b-73b6-45f0-8ae3-6e57c96341ec_fixed.java
index 0fe7b81..1c65e8c 100644
--- a/tmp/b5c6987e-eb72-418d-a641-783a74a9d356_buggy.java
+++ b/tmp/02de504b-73b6-45f0-8ae3-6e57c96341ec_fixed.java
@@ -1,67 +1,63 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-
         clearResult();
         verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
-        double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
+        if (MathUtils.equalByUlps(f.value(initial), 0) ||
+            MathUtils.equalByUlps(MathUtils.TWO_PI - f.value(initial), 0)) {
             setResult(initial, 0);
             return result;
         }
-
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (MathUtils.equalByUlps(f.value(min), 0) ||
+            MathUtils.equalByUlps(MathUtils.TWO_PI - f.value(min), 0)) {
+            setResult(min, 0);
             return result;
         }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        if (MathUtils.equalByUlps(f.value(max), 0) ||
+            MathUtils.equalByUlps(MathUtils.TWO_PI - f.value(max), 0)) {
+            setResult(max, 0);
+            return result;
+        }
+        if (MathUtils.equalByUlps(f.value(initial), MathUtils.TWO_PI - f.value(initial), functionValueAccuracy)) {
+            setResult(initial, 0);
+            return result;
+        }
+        if (MathUtils.equalByUlps(f.value(min), MathUtils.TWO_PI - f.value(min), functionValueAccuracy) &&
+            min == initial) {
+            setResult(min, 0);
+            return result;
         }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+        if (MathUtils.equalByUlps(f.value(max), MathUtils.TWO_PI - f.value(max), functionValueAccuracy) &&
+            max == initial) {
+            setResult(max, 0);
             return result;
         }
-
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        if (MathUtils.equalByUlps(f.value(initial), 0) && f.value(initial) * f.value(max) > 0) {
+            return solve(f, max, f.value(max), initial, f.value(initial), min, f.value(min));
         }
-
-        if (yMin * yMax > 0) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
+        if (MathUtils.equalByUlps(f.value(initial), MathUtils.TWO_PI - f.value(initial), functionValueAccuracy) &&
+            f.value(initial) * f.value(max) > 0) {
+            return solve(f, max, f.value(max), initial, f.value(initial), min, f.value(min));
         }
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        return solve(f, min, f.value(min), max, f.value(max), initial, f.value(initial));
     }
\ No newline at end of file
