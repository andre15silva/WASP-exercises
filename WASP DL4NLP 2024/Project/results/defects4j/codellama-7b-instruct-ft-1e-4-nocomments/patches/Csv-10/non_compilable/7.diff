diff --git a/tmp/4d92db76-af11-45de-817e-3bbb4e87c70b_buggy.java b/tmp/e6f1f4b7-6800-401d-8dc9-cac2546e2145_fixed.java
index 97f28e5..b3b5a3c 100644
--- a/tmp/4d92db76-af11-45de-817e-3bbb4e87c70b_buggy.java
+++ b/tmp/e6f1f4b7-6800-401d-8dc9-cac2546e2145_fixed.java
@@ -1,26 +1,30 @@
     /**
      * Creates a printer that will print values to the given stream following the CSVFormat.
      * <p>
      * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation
      * and escaping with a different character) are not supported.
      * </p>
-     * 
      * @param out
      *        stream to which to print. Must not be null.
      * @param format
      *        the CSV format. Must not be null.
      * @throws IOException
      *         thrown if the optional header cannot be printed.
      * @throws IllegalArgumentException
      *         thrown if the parameters of the format are inconsistent or if either out or format are null.
      */
     public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {
         Assertions.notNull(out, "out");
         Assertions.notNull(format, "format");
-
-        this.out = out;
         this.format = format;
+        this.out = out;
         this.format.validate();
-        // TODO: Is it a good idea to do this here instead of on the first call to a print method?
-        // It seems a pain to have to track whether the header has already been printed or not.
+        final List<String> header = format.getHeader();
+        if (!header.isEmpty()) {
+            printComment(
+                    MessageFormat.format(Messages.getInstance().getString("CSVPrinter.headerComment"),
+                            format.getLineSeparator())
+                    ,format.getLineSeparator());
+            printRecord(header);
+        }
     }
\ No newline at end of file
