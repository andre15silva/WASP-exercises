diff --git a/tmp/50b6de22-cc3c-4460-ae39-c8b7c6a579cd_buggy.java b/tmp/2ffeefee-b676-44a4-bc9d-d6849b122317_fixed.java
index 757067a..915b909 100644
--- a/tmp/50b6de22-cc3c-4460-ae39-c8b7c6a579cd_buggy.java
+++ b/tmp/2ffeefee-b676-44a4-bc9d-d6849b122317_fixed.java
@@ -1,63 +1,53 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
-     *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * @throws IllegalArgumentException if the interval boundaries are equal
+     *  or does not bracket at least one zero (the function must locally be
+     *  monotonic in some interval) or is not defined for the minimum or
+     *  maximum endpoints
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-
         clearResult();
+	if (Double.isNaN(f.value(min)) || Double.isNaN(f.value(max)))  {
+	    throw new IllegalArgumentException("endpoints not defined");
+        } else {
             verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
+        }
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
-
-        // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
         }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
         }
-
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
+        if (yInitial * yMin < 0) {
+            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        } else if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-
-        // full Brent algorithm starting with provided initial guess
+        } else {
             return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        }
     }
\ No newline at end of file
