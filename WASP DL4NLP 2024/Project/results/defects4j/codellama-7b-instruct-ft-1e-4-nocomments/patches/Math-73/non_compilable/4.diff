diff --git a/tmp/1c9bd198-e90c-4b9b-ba80-84b430a9c480_buggy.java b/tmp/9ea033e0-b619-4095-a3fb-17649b7c0994_fixed.java
index 757067a..e9942bf 100644
--- a/tmp/1c9bd198-e90c-4b9b-ba80-84b430a9c480_buggy.java
+++ b/tmp/9ea033e0-b619-4095-a3fb-17649b7c0994_fixed.java
@@ -1,63 +1,57 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-
         clearResult();
+        final UnivariateRealSolver solver = new BrentSolver();
         verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
-
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
+        Verify.check: {
+            final double xMin = solver.solve(f, min, max);
+            if (Double.isNaN(xMin)) {
+                break Verify.check;
+            }
+            final double yMin = f.value(xMin);
             if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+                break Verify.check;
             }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+            final double xMax = solver.solve(f, xMin, max);
+            if (Double.isNaN(xMax)) {
+                break Verify.check;
             }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
+            final double yMax = f.value(xMax);
             if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+                break Verify.check;
+            }
+            if (yInitial * yMin < 0) {
+                break Verify.check;
             }
-
-        // reduce interval if initial and max bracket the root
             if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+                break Verify.check;
             }
-
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        }
+        throw new IllegalArgumentException("Bad endpoints or bracketing");
     }
\ No newline at end of file
