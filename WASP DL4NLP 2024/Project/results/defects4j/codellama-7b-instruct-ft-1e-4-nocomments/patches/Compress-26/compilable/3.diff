diff --git a/tmp/692b7717-053a-4034-b145-b4aa481a359a_buggy.java b/tmp/2257b022-e5ac-45a7-a27b-737494d9da6e_fixed.java
index 4b163f6..8877bb6 100644
--- a/tmp/692b7717-053a-4034-b145-b4aa481a359a_buggy.java
+++ b/tmp/2257b022-e5ac-45a7-a27b-737494d9da6e_fixed.java
@@ -1,28 +1,36 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long numSkipped = 0;
+        int readSize = 1024;
+        if ( numToSkip >= readSize ) {
+            numSkipped = input.skip(numToSkip);
+            if ( numSkipped > 0 ) {
+                numToSkip -= numSkipped;
+            }
+        }
+        while ( numToSkip > 0 && numToSkip < readSize ) {
+            long skipped = input.read(new byte[(int)numToSkip]);
+            if ( skipped == -1 ) {
+                break;
+            } else if ( skipped == 0 ) {
                 break;
             }
             numToSkip -= skipped;
         }
-            
-        return available - numToSkip;
+        return numSkipped + numToSkip;
     }
\ No newline at end of file
