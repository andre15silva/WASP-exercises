diff --git a/tmp/0ad6c49e-9b22-44a2-8ec3-249577f8c803_buggy.java b/tmp/b5f08758-584b-4ace-80f2-acfad1ee7f71_fixed.java
index 4b163f6..b6b6c41 100644
--- a/tmp/0ad6c49e-9b22-44a2-8ec3-249577f8c803_buggy.java
+++ b/tmp/b5f08758-584b-4ace-80f2-acfad1ee7f71_fixed.java
@@ -1,28 +1,30 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
+        int read = 0;
+        do {
+            read = input.read(SKIP_BUF);
+            available -= read;
+            if (read == SKIP_BUF.length) {
+                continue;
+            } else {
+                return available - numToSkip + read;
             }
-            numToSkip -= skipped;
-        }
-            
+        } while (read != -1);
         return available - numToSkip;
     }
\ No newline at end of file
