diff --git a/tmp/886f6be1-9faf-44f7-a55b-c28c990bcada_buggy.java b/tmp/08ed6197-1636-44ae-bd3e-182c45f5aa22_fixed.java
index 6e05e4b..6dc634b 100644
--- a/tmp/886f6be1-9faf-44f7-a55b-c28c990bcada_buggy.java
+++ b/tmp/08ed6197-1636-44ae-bd3e-182c45f5aa22_fixed.java
@@ -1,51 +1,45 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
+      Boolean unnamedFunctionStatement = false;
       if (name == null) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
+        unnamedFunctionStatement = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
-
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
+      if (unnamedFunctionStatement) {
         if (fnName != null) {
           lp.setLineno(fnName.getLineno());
         } else {
           lp.setLineno(functionNode.getLineno());
         }
+      } else {
+        if (fnName != null && fnName.getLineno() != null) {
+          lp.setLineno(fnName.getLineno());
+        }
+      }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
-
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
-
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
\ No newline at end of file
