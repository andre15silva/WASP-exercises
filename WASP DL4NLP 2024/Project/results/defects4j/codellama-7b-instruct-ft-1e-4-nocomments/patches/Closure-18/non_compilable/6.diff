diff --git a/tmp/6d9db4c3-2ab9-4dd8-94d6-93779f19c720_buggy.java b/tmp/c4904ea3-b97b-4c55-a489-5d08dfde41d6_fixed.java
index 20123a4..6d0e817 100644
--- a/tmp/6d9db4c3-2ab9-4dd8-94d6-93779f19c720_buggy.java
+++ b/tmp/c4904ea3-b97b-4c55-a489-5d08dfde41d6_fixed.java
@@ -1,129 +1,102 @@
-  /**
-   * Parses the externs and main inputs.
-   *
-   * @return A synthetic root node whose two children are the externs root
-   *     and the main root
-   */
   Node parseInputs() {
     boolean devMode = options.devMode != DevMode.OFF;
-
-    // If old roots exist (we are parsing a second time), detach each of the
-    // individual file parse trees.
     if (externsRoot != null) {
       externsRoot.detachChildren();
     }
     if (jsRoot != null) {
       jsRoot.detachChildren();
     }
-
-    // Parse main JS sources.
     jsRoot = IR.block();
     jsRoot.setIsSyntheticBlock(true);
-
     externsRoot = IR.block();
     externsRoot.setIsSyntheticBlock(true);
-
     externAndJsRoot = IR.block(externsRoot, jsRoot);
     externAndJsRoot.setIsSyntheticBlock(true);
-
     if (options.tracer.isOn()) {
       tracker = new PerformanceTracker(jsRoot, options.tracer);
       addChangeHandler(tracker.getCodeChangeHandler());
     }
-
     Tracer tracer = newTracer("parseInputs");
-
     try {
-      // Parse externs sources.
       for (CompilerInput input : externs) {
         Node n = input.getAstRoot(this);
         if (hasErrors()) {
           return null;
         }
+        if (input.getName() != null) {
+          String name = input.getName();
+          if (name.startsWith("module$") || name.startsWith("goog$")) {
+            name =
+              name.charAt(0) + name.charAt(1) + name.substring(6) + "$";
+          }
+          SourceCode info = input.getSource();
+          if (info.isFromExterns()) {
+            jsRoot.addChildToFront(info.getAstRoot());
+          } else {
+            externAndJsRoot.addChildToFront(info.getAstRoot());
+          }
+        } else {
           externsRoot.addChildToBack(n);
         }
-
-      // Modules inferred in ProcessCommonJS pass.
+      }
       if (options.transformAMDToCJSModules || options.processCommonJSModules) {
         processAMDAndCommonJSModules();
       }
-
       hoistExterns(externsRoot);
-
-      // Check if the sources need to be re-ordered.
+      boolean dependencySorting =
+          options.dependencyOptions != null
+              && options.dependencyOptions.dependencySorting;
+      boolean closurePass = options.closurePass;
+      if (options.dependencyOptions != null
+          && (!closurePass || dependencySorting)) {
         boolean staleInputs = false;
-      if (options.dependencyOptions.needsManagement() && options.closurePass) {
-        for (CompilerInput input : inputs) {
-          // Forward-declare all the provided types, so that they
-          // are not flagged even if they are dropped from the process.
-          for (String provide : input.getProvides()) {
-            getTypeRegistry().forwardDeclareType(provide);
-          }
-        }
-
         try {
           inputs =
               (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
               .manageDependencies(options.dependencyOptions, inputs);
           staleInputs = true;
         } catch (CircularDependencyException e) {
           report(JSError.make(
               JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
         } catch (MissingProvideException e) {
           report(JSError.make(
               MISSING_ENTRY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
           if (hasErrors()) {
             return null;
           }
         }
-      }
-
         hoistNoCompileFiles();
-
         if (staleInputs) {
           repartitionInputs();
         }
-
-      // Build the AST.
+      }
       for (CompilerInput input : inputs) {
         Node n = input.getAstRoot(this);
         if (n == null) {
           continue;
         }
-
         if (devMode) {
           runSanityCheck();
           if (hasErrors()) {
             return null;
           }
         }
-
         if (options.sourceMapOutputPath != null ||
             options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
           SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(
-                  input.getName(), options.devMode != DevMode.OFF);
+              new SourceInformationAnnotator(input.getName(), true);
           NodeTraversal.traverse(this, n, sia);
         }
-
         jsRoot.addChildToBack(n);
       }
-
       if (hasErrors()) {
         return null;
       }
       return externAndJsRoot;
     } finally {
       stopTracer(tracer, "parseInputs");
     }
   }
\ No newline at end of file
