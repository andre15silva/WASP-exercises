diff --git a/tmp/6957c000-54da-443f-adb9-f84f2d4b27c9_buggy.java b/tmp/8e63d23d-892b-475a-bbf5-6b7bd2b9c0e2_fixed.java
index be2af16..3852001 100644
--- a/tmp/6957c000-54da-443f-adb9-f84f2d4b27c9_buggy.java
+++ b/tmp/8e63d23d-892b-475a-bbf5-6b7bd2b9c0e2_fixed.java
@@ -1,29 +1,57 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
-
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        long instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            boolean leap;
+            if (year >= 1582 || (year == 1500 && monthOfYear == 10 && dayOfMonth == 14)) {
+                leap = iGregorianChronology.isLeapYear(year);
+            } else {
+                leap = iJulianChronology.isLeapYear(year);
+            }
+            instant = ((year-1900)*365+(year-1600)/4-(year-1600)/100+(year-1600)/400)*MILLIS_PER_DAY;
+            if (monthOfYear <= 2) {
+                if ((monthOfYear == 2 && !leap) || (monthOfYear < 2)) {
+                    instant -= LEAP_YEAR_LENGTH;
+                }
+                if (dayOfMonth > 29) {
+                    throw new IllegalFieldValueException
+                        (DateTimeFieldType.dayOfMonth(), dayOfMonth, null);
+                }
+                monthOfYear = 1;
+                dayOfMonth = dayOfMonth - 1;
+            }
+            if (monthOfYear > 2) {
+                if (leap && monthOfYear == 3) {
+                    monthOfYear = 2;
+                    dayOfMonth += LEAP_YEAR_LENGTH;
+                } else {
+                    monthOfYear -= 1;
+                }
+            }
+            instant += ((monthOfYear * 31L) + dayOfMonth) * MILLIS_PER_DAY;
+            instant += (((long) hourOfDay * MILLIS_PER_HOUR) +
+                        ((long) minuteOfHour * MILLIS_PER_MINUTE) +
+                        millisOfSecond);
+            if (instant < iCutoverMillis) {
+                instant = iJulianChronology.getDateTime
+                    (instant, year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, (int)millisOfSecond,
+                     DateTimeZone.UTC).getLocalMillis();
                 if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
                     throw new IllegalArgumentException("Specified date does not exist");
                 }
             }
+        }
         return instant;
     }
\ No newline at end of file
