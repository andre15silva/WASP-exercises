diff --git a/tmp/cb9d7486-6192-4568-8f1c-b585c2918103_buggy.java b/tmp/0fcd6e8f-947f-48d6-bb33-21c6e0b3b7e1_fixed.java
index 210695a..fcbacb8 100644
--- a/tmp/cb9d7486-6192-4568-8f1c-b585c2918103_buggy.java
+++ b/tmp/0fcd6e8f-947f-48d6-bb33-21c6e0b3b7e1_fixed.java
@@ -1,32 +1,18 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
   public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
-
-    // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
-
       case FALSE:
       case UNKNOWN:
         return new TypePair(this, that);
-    }
-
-    // switch case is exhaustive
+      case NOT_COMPILABLE:
+      case BOTTOM:
+        return TypePair.of(NO_TYPE, NO_TYPE);
+      default:
         throw new IllegalStateException();
     }
+  }
\ No newline at end of file
