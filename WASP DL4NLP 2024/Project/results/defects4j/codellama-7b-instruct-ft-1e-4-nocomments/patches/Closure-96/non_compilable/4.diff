diff --git a/tmp/a3762334-ddff-40dd-9650-9ec58740ec4a_buggy.java b/tmp/9cf3c090-4e36-47e6-a425-415f787a6f35_fixed.java
index e0ecec8..6a1325a 100644
--- a/tmp/a3762334-ddff-40dd-9650-9ec58740ec4a_buggy.java
+++ b/tmp/9cf3c090-4e36-47e6-a425-415f787a6f35_fixed.java
@@ -1,35 +1,35 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
-
+    arguments.next(); 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
+    int parameterCount = 0;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
         parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
+      JSType paramType = getJSType(parameter);
+      JSType argType = getJSType(argument);
+      if (!paramType.equivalentTo(argType)) {
+        if (parameterCount + 1 == functionType
+            .getMaxArguments()
+            && functionType.isVarArgs()) {
+          if (parameter.isVarArgs()) {
+            for (int i = 1; i < argument.getChildCount(); i++) {
               validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
-    }
-
-    int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
-      report(t, call, WRONG_ARGUMENT_COUNT,
-              validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+                  JSType.findType(argument.getTypeAt(i)),
+                  paramType, call, ordinal + i - 1);
+            }
+          }
+        } else {
+          validator.expectArgumentMatchesParameter(t, argument, argType,
+              paramType, call, ordinal);
+        }
+      }
+      parameterCount++;
     }
   }
\ No newline at end of file
