diff --git a/tmp/3a3fb22f-b2c3-46a8-875b-934166484cbb_buggy.java b/tmp/80883011-05c8-43bc-aff9-9749b5bd6118_fixed.java
index e0ecec8..874d0ed 100644
--- a/tmp/3a3fb22f-b2c3-46a8-875b-934166484cbb_buggy.java
+++ b/tmp/80883011-05c8-43bc-aff9-9749b5bd6118_fixed.java
@@ -1,35 +1,29 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
-
+    arguments.next(); 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
         parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
-
-    int numArgs = call.getChildCount() - 1;
+    int numArgs = functionType.isVarArgs() ?  Integer.MAX_VALUE :
+        call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
+      String msg = (maxArgs == Integer.MAX_VALUE) ?
+          String.valueOf(numArgs) :
+          String.valueOf(numArgs) + " and no more than " + maxArgs + " argument(s)";
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+              msg);
     }
   }
\ No newline at end of file
