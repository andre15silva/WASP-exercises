diff --git a/tmp/44a8d242-dfdc-4ffd-84c8-c2738c49df40_buggy.java b/tmp/32bb8406-8fce-43c7-8ffe-c47c64b69ac3_fixed.java
index e0ecec8..ffa4e03 100644
--- a/tmp/44a8d242-dfdc-4ffd-84c8-c2738c49df40_buggy.java
+++ b/tmp/32bb8406-8fce-43c7-8ffe-c47c64b69ac3_fixed.java
@@ -1,35 +1,40 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
-
+    arguments.next(); 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
         parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
-
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
+
+    if (!parameters.hasNext()) {
+      return;
+    }
+
+    while (parameters.hasNext()) {
+      parameter = parameters.next();
+      int idx = NodeUtil.getFunctionParameters(call).getChildCount() + ordinal;  
+      argument = arguments.next();
+      validator.expectArgumentMatchesParameter(
+          t, argument, getJSType(argument), getJSType(parameter), call, idx);
+      ordinal++;
+    }
   }
\ No newline at end of file
