diff --git a/tmp/be2f3813-2fce-44ac-997f-88314f495fa2_buggy.java b/tmp/32da2a94-9007-40a8-9132-8328bb2da91f_fixed.java
index e0ecec8..d19243f 100644
--- a/tmp/be2f3813-2fce-44ac-997f-88314f495fa2_buggy.java
+++ b/tmp/32da2a94-9007-40a8-9132-8328bb2da91f_fixed.java
@@ -1,35 +1,35 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
-
+    arguments.next(); 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
-
+    if (call.getChildCount() - 1 > functionType.getMaxArguments() &&
+        functionType.isVarArgs()) {
+      validator.report(
+          t, call, FUNCTION_ARGUMENTS_DONT_MATCH_PARAMETERS,
+          validator.getReadableJSTypeName(call.getFirstChild(), false),
+          functionType.getMinArguments(), functionType.getMaxArguments(),
+          functionType.isVarArgs());
+    } else {
       int numArgs = call.getChildCount() - 1;
       int minArgs = functionType.getMinArguments();
       int maxArgs = functionType.getMaxArguments();
       if (minArgs > numArgs || maxArgs < numArgs) {
         report(t, call, WRONG_ARGUMENT_COUNT,
                 validator.getReadableJSTypeName(call.getFirstChild(), false),
                 String.valueOf(numArgs), String.valueOf(minArgs),
                 maxArgs != Integer.MAX_VALUE ?
                 " and no more than " + maxArgs + " argument(s)" : "");
       }
     }
+  }
\ No newline at end of file
