diff --git a/tmp/6dd2d64c-9bd1-4728-a3b2-e0f275f2f4bc_buggy.java b/tmp/45c1a5a2-9b61-4717-b7af-9571526a63e7_fixed.java
index 1530b34..ac4b4b2 100644
--- a/tmp/6dd2d64c-9bd1-4728-a3b2-e0f275f2f4bc_buggy.java
+++ b/tmp/45c1a5a2-9b61-4717-b7af-9571526a63e7_fixed.java
@@ -1,23 +1,75 @@
-    /**
-     * Declares all of a function's arguments.
-     */
     private void declareArguments(Node functionNode) {
       Node astParameters = functionNode.getFirstChild().getNext();
       Node body = astParameters.getNext();
       FunctionType functionType = (FunctionType) functionNode.getJSType();
       if (functionType != null) {
         Node jsDocParameters = functionType.getParametersNode();
         if (jsDocParameters != null) {
           Node jsDocParameter = jsDocParameters.getFirstChild();
           for (Node astParameter : astParameters.children()) {
             if (jsDocParameter != null) {
               defineSlot(astParameter, functionNode,
                   jsDocParameter.getJSType(), true);
               jsDocParameter = jsDocParameter.getNext();
             } else {
               defineSlot(astParameter, functionNode, null, true);
             }
           }
         }
       }
-    } // end declareArguments
+      for (Node argNode = astParameters.getFirstChild();
+           argNode != null; argNode = argNode.getNext()) {
+        Var var = args[argNode.getIndex()];
+        boolean hasAnnotatedJsDoc =
+            NodeUtil.isFunctionDeclaration(functionNode)
+            && var.getAnnotation() != null;
+        boolean hasJsDoc = false;
+        String declaredType;
+        if (var.isTypeInferred()) {
+          var.setTypeInferred(false);
+        } else if (!hasAnnotatedJsDoc) {
+          declaredType = var.getType().toString();
+          if (declaredType.length() > 0) {
+            if (!hasJsDoc) {
+              var.setType(
+                  JSType.fromObjectType(
+                      OBJECT_FUNCTION_TYPE));
+              compiler.reportCodeChange();
+            }
+          }
+        } else {
+          JSDocInfo docInfo = var.getJSDocInfo();
+          declaredType = docInfo.getType();
+        }
+        Node jsDocNode = var.getInitialValue();
+        boolean hasValue = false;
+        if (jsDocNode != null && jsDocNode.getBooleanProp(Node.MODIFIED)) {
+          jsDocNode = jsDocNode.getFirstChild();
+          hasValue = true;
+        }
+        if (jsDocNode != null && jsDocNode.isVar() &&
+            declaredType != null && declaredType.length() > 0) {
+          SubtypesProcessor subtypes = new SubtypesProcessor();
+          if (subtypes.isSubtype((JSType) jsDocNode.getJSType(),
+              functionType.getTypeOfThis())) {
+            jsDocNode.addChildToFront(IR.string(declaredType).srcref(astNode));
+            compiler.reportCodeChange();
+          } else if (subtypes.isSupertype((JSType) jsDocNode.getJSType(),
+              functionType.getTypeOfThis())) {
+            compiler.report(
+                    JSError.make(jsDocNode, FUNCTION_PARAMS_VAR_ARGS_CANT_BE_SUBTYPE_STRING));
+          } else if (!hasAnnotatedJsDoc) {
+            compiler.report(
+                    JSError.make(jsDocNode, FUNCTION_PARAMS_VAR_ARGS_MISSING_TYPE_INFO));
+          }
+        } else {
+          if (hasValue || !hasAnnotatedJsDoc) {
+            Node initNode = jsDocNode == null ? body : jsDocNode;
+            JSDocInfoBuilder jsDocInfoBuilder = new JSDocInfoBuilder(false);
+            jsDocInfoBuilder.recordType(declaredType);
+            compiler.report(JSError.make(initNode, MISSING_RETURN, "return"));
+            compiler.reportCodeChange();
+          }
+        }
+      }
+    }
\ No newline at end of file
