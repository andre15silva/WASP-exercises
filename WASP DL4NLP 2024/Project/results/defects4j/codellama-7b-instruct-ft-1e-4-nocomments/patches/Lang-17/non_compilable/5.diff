diff --git a/tmp/dc0377cf-97bf-4a8d-bc9e-a552338135fe_buggy.java b/tmp/753a5186-2d28-4bdb-bf06-aaa7b9fb97b4_fixed.java
index b86c1ea..8ebee11 100644
--- a/tmp/dc0377cf-97bf-4a8d-bc9e-a552338135fe_buggy.java
+++ b/tmp/753a5186-2d28-4bdb-bf06-aaa7b9fb97b4_fixed.java
@@ -1,38 +1,20 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
-                }
-                pos--;
-            }
-            pos++;
-        }
+        char[] cbuf = new char[Character.codePointCount(input, 0, input.length())];
+        int bufPos = 0;
+        for (Iterator iter = iterator(input); iter.hasNext();) {
+            int ch = iter.next(cbuf, bufPos, cbuf.length - bufPos); 
+            if (ch < 0) {
+                ch = Character.codePointAt(input, bufPos);
+            } else if (ch == 0x2028) {
+                cbuf[bufPos] = '?';
+            }
+            bufPos += Character.charCount(ch);
+        }
+        out.append(String.valueOf(cbuf, 0, bufPos));
     }
\ No newline at end of file
