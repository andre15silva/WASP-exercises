diff --git a/tmp/d49fe9d0-621a-445e-a248-38d45c314d77_buggy.java b/tmp/22ff4d4c-9366-4750-aa2b-e94dc376bc82_fixed.java
index b86c1ea..7467bb0 100644
--- a/tmp/d49fe9d0-621a-445e-a248-38d45c314d77_buggy.java
+++ b/tmp/22ff4d4c-9366-4750-aa2b-e94dc376bc82_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
-            int consumed = translate(input, pos, out);
+            int codePoint = Character.codePointAt(input, pos);
+            int consumed = translate(codePoint, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                out.write(input, pos, Character.charCount(codePoint));
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
                 for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
+                    if (pos < len - 1) {
                     pos += Character.charCount(Character.codePointAt(input, pos));
                     } else {
                         pos++;
                     }
                 }
                 pos--;
             }
             pos++;
         }
     }
\ No newline at end of file
