diff --git a/tmp/c8e9d715-f6be-4d76-ae2d-83d352125c17_buggy.java b/tmp/4bfe96d1-6489-4fe1-ab08-4efdb018b1a4_fixed.java
index b86c1ea..07408d1 100644
--- a/tmp/c8e9d715-f6be-4d76-ae2d-83d352125c17_buggy.java
+++ b/tmp/4bfe96d1-6489-4fe1-ab08-4efdb018b1a4_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
                 if (pos < len - 2) {
                     pos += Character.charCount(Character.codePointAt(input, pos));
                 } else {
                     pos++;
                 }
             }
             pos--;
             }
             pos++;
         }
     }
\ No newline at end of file
