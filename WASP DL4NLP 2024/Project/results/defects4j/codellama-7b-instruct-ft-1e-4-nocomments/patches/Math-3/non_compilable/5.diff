diff --git a/tmp/102c0c87-953d-4ac0-b2aa-355c031dd49b_buggy.java b/tmp/1baa2c09-07d1-406d-b9b3-cf15071b78c2_fixed.java
index aab19c0..9e05463 100644
--- a/tmp/102c0c87-953d-4ac0-b2aa-355c031dd49b_buggy.java
+++ b/tmp/1baa2c09-07d1-406d-b9b3-cf15071b78c2_fixed.java
@@ -1,76 +1,81 @@
     /**
      * Compute a linear combination accurately.
      * This method computes the sum of the products
      * <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
      * It does so by using specific multiplication and addition algorithms to
      * preserve accuracy and reduce cancellation effects.
      * <br/>
      * It is based on the 2005 paper
      * <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547">
      * Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,
      * and Shin'ichi Oishi published in SIAM J. Sci. Comput.
      *
      * @param a Factors.
      * @param b Factors.
      * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
      * @throws DimensionMismatchException if arrays dimensions don't match
      */
     public static double linearCombination(final double[] a, final double[] b)
         throws DimensionMismatchException {
-        final int len = a.length;
-        if (len != b.length) {
-            throw new DimensionMismatchException(len, b.length);
+        final int aLength = a.length;
+        if (aLength != b.length) {
+            throw new DimensionMismatchException(aLength, b.length);
         }
-
-            // Revert to scalar multiplication.
-
-        final double[] prodHigh = new double[len];
+        final int minLenght = Math.min(aLength, 2);
+        final double prodHighSum = linearCombinationImpl(a, b, 0, minLenght);
+        for (int i = minLenght; i < aLength;) {
+            final int nextMinLength = Math.min(i+2, aLength);
+            prodHighSum += linearCombinationImpl(a, b, i, nextMinLength);
+            i = nextMinLength;
+        }
+        return prodHighSum;
+    }
+    private static double linearCombinationImpl(final double[] a, final double[] b,
+                                                final int i, final int maxI) {
+        final double[] prodHigh = new double[maxI - i]; 
         double prodLowSum = 0;
-
-        for (int i = 0; i < len; i++) {
-            final double ai = a[i];
+        for (int k=0; k < maxI - i; k++) {
+            final double ai = a[i + k];
             final double ca = SPLIT_FACTOR * ai;
             final double aHigh = ca - (ca - ai);
             final double aLow = ai - aHigh;
-
-            final double bi = b[i];
+            final double bi = b[i + k];
             final double cb = SPLIT_FACTOR * bi;
             final double bHigh = cb - (cb - bi);
             final double bLow = bi - bHigh;
-            prodHigh[i] = ai * bi;
-            final double prodLow = aLow * bLow - (((prodHigh[i] -
+            prodHigh[k] = ai * bi;
+            final double prodLow = aLow * bLow - (((prodHigh[k] -
                                                     aHigh * bHigh) -
                                                    aLow * bHigh) -
                                                   aHigh * bLow);
             prodLowSum += prodLow;
         }
-
-
-        final double prodHighCur = prodHigh[0];
-        double prodHighNext = prodHigh[1];
-        double sHighPrev = prodHighCur + prodHighNext;
-        double sPrime = sHighPrev - prodHighNext;
-        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-
-        final int lenMinusOne = len - 1;
-        for (int i = 1; i < lenMinusOne; i++) {
-            prodHighNext = prodHigh[i + 1];
-            final double sHighCur = sHighPrev + prodHighNext;
-            sPrime = sHighCur - prodHighNext;
-            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
+        double result = 0;
+        double resultHigh = 0;
+        for (int k = 0; k < maxI - i; k++) {
+             result += prodHigh[k];
+             resultHigh += prodHigh[k];
+        }
+        final double prodHighSum2 = resultHigh + result; 
+        final double sHighPrev = prodHighSum2 + prodHigh[k];
+        double sPrime = sHighPrev - prodHigh[k];
+        double sLowSum = 0;
+        int k = 1;
+        for (; k < maxI - i && Double.isNaN(sLowSum) ; k++){ 
+            final double sHighCur = sHighPrev + prodHigh[k];
+            sPrime = sHighCur - prodHigh[k];
+            sLowSum += (prodHigh[k] - (sHighCur - sPrime)) + (sHighPrev - sPrime);
             sHighPrev = sHighCur;
         }
-
-        double result = sHighPrev + (prodLowSum + sLowSum);
-
-        if (Double.isNaN(result)) {
-            // either we have split infinite numbers or some coefficients were NaNs,
-            // just rely on the naive implementation and let IEEE754 handle this
-            result = 0;
-            for (int i = 0; i < len; ++i) {
-                result += a[i] * b[i];
+        if (Double.isNaN(sLowSum)) {
+            sLowSum = 0;
+            for (; k < maxI - i; k++) {
+                final double sHighCur = sHighPrev + prodHigh[k];
+                sPrime = sHighCur - prodHigh[k];
+                sLowSum += (prodHigh[k] - (sHighCur - sPrime)) + (sHighPrev - sPrime);
+                sHighPrev = sHighCur;
             }
         }
-
+        result += sHighPrev + (prodLowSum + sLowSum);
         return result;
     }
\ No newline at end of file
