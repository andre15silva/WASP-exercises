diff --git a/tmp/4920f7c6-47e7-4de8-88ca-93c6ecd48b1a_buggy.java b/tmp/dbe8a464-3dc8-4b9c-a22c-d3022388064b_fixed.java
index 9d42346..d771dfe 100644
--- a/tmp/4920f7c6-47e7-4de8-88ca-93c6ecd48b1a_buggy.java
+++ b/tmp/dbe8a464-3dc8-4b9c-a22c-d3022388064b_fixed.java
@@ -1,37 +1,41 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
-    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
+    boolean jsonAdapterPresent = false;
     TypeAdapter<?> mapped = null;
+    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
+      jsonAdapterPresent = true;
     }
-    final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
-
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+      @SuppressWarnings({"unchecked", "rawtypes"}) 
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
+        if (jsonAdapterPresent) {
           TypeAdapter t =
             new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
           t.write(writer, fieldValue);
+        } else {
+          TypeAdapter t = context.getAdapter(fieldType);
+          t.write(writer, fieldValue);
+        }
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
+        if (!isPrimitive || fieldValue != null) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
+        return fieldValue != value; 
       }
     };
   }
\ No newline at end of file
