diff --git a/tmp/393d2a17-8afd-4f29-8e6e-b8dba35bd672_buggy.java b/tmp/c5a16264-876f-4602-af76-d86ba3eca35f_fixed.java
index 9d42346..e8f7f7b 100644
--- a/tmp/393d2a17-8afd-4f29-8e6e-b8dba35bd672_buggy.java
+++ b/tmp/c5a16264-876f-4602-af76-d86ba3eca35f_fixed.java
@@ -1,37 +1,83 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
+    boolean isComplex = !isPrimitive || getBinding(fieldType.getRawType()).isComplex();
+    Gadget gadget;
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
-    final boolean jsonAdapterPresent = mapped != null;
-    if (mapped == null) mapped = context.getAdapter(fieldType);
-
-    final TypeAdapter<?> typeAdapter = mapped;
+    if (mapped != null) {
       return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+        MethodTypeAdapter methodAdapter;
+        TypeAdapter<?> typeAdapter;
         @Override void write(JsonWriter writer, Object value)
             throws IOException, IllegalAccessException {
           Object fieldValue = field.get(value);
           TypeAdapter t =
             new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
           t.write(writer, fieldValue);
         }
         @Override void read(JsonReader reader, Object value)
             throws IOException, IllegalAccessException {
           Object fieldValue = typeAdapter.read(reader);
           if (fieldValue != null || !isPrimitive) {
             field.set(value, fieldValue);
           }
         }
         @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
           if (!serialized) return false;
           Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
+          return fieldValue != value; 
+        }
+      };
+    }
+    if (mapped == null && isComplex) {
+      return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
+        MethodTypeAdapter methodAdapter;
+        TypeAdapter<?> typeAdapter;
+        @Override void write(JsonWriter writer, Object value)
+            throws IOException, IllegalAccessException {
+          Object fieldValue = field.get(value);
+          TypeAdapter t =
+            new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+          t.write(writer, fieldValue);
+        }
+        @Override void read(JsonReader reader, Object value)
+            throws IOException, IllegalAccessException {
+          Object fieldValue = typeAdapter.read(reader);
+          field.set(value, fieldValue);
+        }
+        @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
+          if (!serialized) return false;
+          Object fieldValue = field.get(value);
+          return fieldValue != value; 
+        }
+      };
+    } 
+    return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
+      MethodTypeAdapter methodAdapter;
+      TypeAdapter<?> typeAdapter;
+      @Override void write(JsonWriter writer, Object value)
+          throws IOException, IllegalAccessException {
+        Object fieldValue = field.get(value);
+        TypeAdapter t =
+            new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        t.write(writer, fieldValue);
+      }
+      @Override void read(JsonReader reader, Object value)
+          throws IOException, IllegalAccessException {
+        Object fieldValue = typeAdapter.read(reader);
+        if (fieldValue != null || !isPrimitive) {
+          field.set(value, fieldValue);
+        }
+      }
+      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
+        if (!serialized) return false;
+        Object fieldValue = field.get(value);
+        return fieldValue != value; 
       }
     };
   }
\ No newline at end of file
