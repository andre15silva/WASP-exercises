diff --git a/tmp/78eabd28-17e5-4ff6-980e-988969107a6f_buggy.java b/tmp/6a287cea-8f25-4359-963c-d6ff06b7fb17_fixed.java
index 82bdfd4..b85efa5 100644
--- a/tmp/78eabd28-17e5-4ff6-980e-988969107a6f_buggy.java
+++ b/tmp/6a287cea-8f25-4359-963c-d6ff06b7fb17_fixed.java
@@ -1,51 +1,44 @@
-    /**
-     * <p>Test if two <code>Object</code>s are equal using their
-     * <code>equals</code> method.</p>
-     *
-     * @param lhs  the left hand object
-     * @param rhs  the right hand object
-     * @return EqualsBuilder - used to chain calls.
-     */
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
         Class lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
-                // The simple case, not an array, just test the element
                 isEquals = lhs.equals(rhs);
         } else if (lhs.getClass() != rhs.getClass()) {
-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
             this.setEquals(false);
         }
-        // 'Switch' on type of array, to dispatch to the correct handler
-        // This handles multi dimensional arrays of the same depth
         else if (lhs instanceof long[]) {
             append((long[]) lhs, (long[]) rhs);
         } else if (lhs instanceof int[]) {
             append((int[]) lhs, (int[]) rhs);
         } else if (lhs instanceof short[]) {
             append((short[]) lhs, (short[]) rhs);
         } else if (lhs instanceof char[]) {
             append((char[]) lhs, (char[]) rhs);
         } else if (lhs instanceof byte[]) {
             append((byte[]) lhs, (byte[]) rhs);
         } else if (lhs instanceof double[]) {
             append((double[]) lhs, (double[]) rhs);
         } else if (lhs instanceof float[]) {
             append((float[]) lhs, (float[]) rhs);
         } else if (lhs instanceof boolean[]) {
             append((boolean[]) lhs, (boolean[]) rhs);
+        } else if (lhs instanceof BigDecimal[]) {
+            append((BigDecimal[]) lhs, (BigDecimal[]) rhs);
+        } else if (lhs instanceof Long[]) {
+            append((Long[]) lhs, (Long[]) rhs);
+        } else if (lhs instanceof BigInteger[]) {
+            append((BigInteger[]) lhs, (BigInteger[]) rhs);
         } else {
-            // Not an array of primitives
             append((Object[]) lhs, (Object[]) rhs);
         }
         return this;
     }
\ No newline at end of file
