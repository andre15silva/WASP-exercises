diff --git a/tmp/c48f2a45-4ba5-4b00-a6f0-2d9905738f49_buggy.java b/tmp/ccd69add-39f2-4613-ab4b-e0cdf9ce0a4b_fixed.java
index b4e6f03..3897f9b 100644
--- a/tmp/c48f2a45-4ba5-4b00-a6f0-2d9905738f49_buggy.java
+++ b/tmp/ccd69add-39f2-4613-ab4b-e0cdf9ce0a4b_fixed.java
@@ -1,44 +1,28 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
-
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
-            return ""; // nothing to make absolute with
+            return ""; 
         } else {
             URL base;
             try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
-                    // the base is unsuitable, but the attribute may be abs on its own, so try that
                     URL abs = new URL(relUrl);
                     return abs.toExternalForm();
                 }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+		int q = relUrl.indexOf('?');
+	        if (q > 0)
+			relUrl = relUrl.substring(0, q);
                 URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
+                String protocol = abs.getProtocol();
+                int i = abs.getRef().indexOf("?");
+                if (i > 0)
+                    abs.setRef(abs.getRef().substring(0, i));
+                return protocol + "://" + abs.getHost() + TextUtil.cleanPath(abs.getPath()) + (abs.getRef().length() > 0 ? "#" + abs.getRef() : "");
             } catch (MalformedURLException e) {
                 return "";
             }
         }
     }
\ No newline at end of file
