diff --git a/tmp/c0f3eaae-9f19-4dfc-822b-f47cad02e7ff_buggy.java b/tmp/f7aeb365-6e76-49f3-96e2-0b74117f9f4c_fixed.java
index 86d77b0..24df903 100644
--- a/tmp/c0f3eaae-9f19-4dfc-822b-f47cad02e7ff_buggy.java
+++ b/tmp/f7aeb365-6e76-49f3-96e2-0b74117f9f4c_fixed.java
@@ -1,72 +1,66 @@
-  /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
                           String doublequoteEscape,
                           String singlequoteEscape,
                           String backslashEscape,
                           CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
-        case '\0': sb.append("\\0"); break;
+        case '\u0000': sb.append("\\u0000"); break;
+        case '\u0001': sb.append("\\u0001"); break;
+        case '\u0002': sb.append("\\u0002"); break;
+        case '\u0003': sb.append("\\u0003"); break;
+        case '\u0004': sb.append("\\u0004"); break;
+        case '\u0005': sb.append("\\u0005"); break;
+        case '\u0006': sb.append("\\u0006"); break;
+        case '\u0007': sb.append("\\u0007"); break;
+        case '\b': sb.append("\\b"); break;
+        case '\t': sb.append("\\t"); break;
         case '\n': sb.append("\\n"); break;
         case '\r': sb.append("\\r"); break;
-        case '\t': sb.append("\\t"); break;
+        case '\'': sb.append("\\'"); break;
         case '\\': sb.append(backslashEscape); break;
         case '\"': sb.append(doublequoteEscape); break;
-        case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
+        case '>':                       
           if (i >= 2 &&
               ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
             sb.append("\\>");
           } else {
             sb.append(c);
           }
           break;
         case '<':
-          // Break </script into <\/script
           final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
           final String START_COMMENT = "!--";
-
           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                               END_SCRIPT.length())) {
             sb.append("<\\");
           } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                      START_COMMENT.length())) {
             sb.append("<\\");
           } else {
             sb.append(c);
           }
           break;
         default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
           if (outputCharsetEncoder != null) {
             if (outputCharsetEncoder.canEncode(c)) {
               sb.append(c);
             } else {
-              // Unicode-escape the character.
               appendHexJavaScriptRepresentation(sb, c);
             }
           } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
             if (c > 0x1f && c < 0x7f) {
               sb.append(c);
             } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
               appendHexJavaScriptRepresentation(sb, c);
             }
           }
       }
     }
     sb.append(quote);
     return sb.toString();
   }
\ No newline at end of file
