diff --git a/tmp/50202a89-26c9-4fef-9b97-7717818cd399_buggy.java b/tmp/13cecc9c-32be-467a-bf0b-6f70f2ebd74a_fixed.java
index 63641d0..e71824a 100644
--- a/tmp/50202a89-26c9-4fef-9b97-7717818cd399_buggy.java
+++ b/tmp/13cecc9c-32be-467a-bf0b-6f70f2ebd74a_fixed.java
@@ -1,33 +1,25 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
-
-    // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
-
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    boolean madeChanges = false;
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, inferred) {
+          @Override public JSType caseTEMPLATELITERAL(Node n) {
+            JSType type = super.caseTEMPLATELITERAL(n);
+            madeChanges = true;
+            return type;
+          }
+        };
     Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
-
-    return replacer.madeChanges;
+    return madeChanges;
   }
\ No newline at end of file
