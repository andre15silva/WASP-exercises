diff --git a/tmp/417cfc48-f345-49f0-8358-0eb652158de8_buggy.java b/tmp/dccc439d-ca17-414c-a4f9-847336380d02_fixed.java
index cae5e03..3722bae 100644
--- a/tmp/417cfc48-f345-49f0-8358-0eb652158de8_buggy.java
+++ b/tmp/dccc439d-ca17-414c-a4f9-847336380d02_fixed.java
@@ -1,33 +1,32 @@
-    /*
-     * (non-Javadoc)
-     * 
-     * @see java.io.InputStream#read(byte[], int, int)
-     */
     @Override
     public int read(final byte[] dest, final int offs, final int len)
         throws IOException {
         if (offs < 0) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") < 0.");
         }
         if (len < 0) {
             throw new IndexOutOfBoundsException("len(" + len + ") < 0.");
         }
         if (offs + len > dest.length) {
             throw new IndexOutOfBoundsException("offs(" + offs + ") + len("
                                                 + len + ") > dest.length(" + dest.length + ").");
         }
         if (this.in == null) {
             throw new IOException("stream closed");
         }
-
-        final int hi = offs + len;
+        if (len == 0) {
+            return 0;
+        }
         int destOffs = offs;
         int b;
-        while (destOffs < hi && ((b = read0()) >= 0)) {
+        while (destOffs < dest.length && ((b = read0()) >= 0)) {
             dest[destOffs++] = (byte) b;
             count(1);
         }
-
-        int c = (destOffs == offs) ? -1 : (destOffs - offs);
-        return c;
+        int returnVal = (destOffs == offs) ? -1 : (destOffs - offs);
+        if(destOffs == dest.length && returnVal != 0) {
+            LOG.warn ("len=0, but we return "+(destOffs - offs)+ " bytes!?");
+            returnVal = 0;
+        }
+        return returnVal;
     }
\ No newline at end of file
