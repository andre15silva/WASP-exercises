diff --git a/tmp/b1197414-c62f-4ce2-b3a3-65b7b860b12d_buggy.java b/tmp/fc756187-2395-4fb7-99af-c977d14a69a6_fixed.java
index 2ce28b5..fcefc5f 100644
--- a/tmp/b1197414-c62f-4ce2-b3a3-65b7b860b12d_buggy.java
+++ b/tmp/fc756187-2395-4fb7-99af-c977d14a69a6_fixed.java
@@ -1,72 +1,57 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
-     * 
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
-
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
-
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+            } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {
                 return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
+            } else if (signatureLength == 0 && in.available() > 512) {
                 final byte[] tarheader = new byte[512];
                 in.mark(tarheader.length);
                 signatureLength = in.read(tarheader);
-            in.reset();
                 if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                     return new TarArchiveInputStream(in);
                 }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+            } else if (AiffArchiveInputStream.matches(signature, signatureLength)) {
+                return new AiffArchiveInputStream(in);
+            }
+            final byte[] dumpsig = new byte[32];
+            in.mark(dumpsig.length);
+            signatureLength = in.read(dumpsig);
+            in.reset();
+            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+                return new DumpArchiveInputStream(in);
+            }
+            if (signatureLength >= 512 && TarArchiveInputStream.matches(signature, signatureLength)) {
                 return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
-                }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
-
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
