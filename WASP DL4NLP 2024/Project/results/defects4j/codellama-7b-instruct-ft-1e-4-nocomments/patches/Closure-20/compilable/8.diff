diff --git a/tmp/660b2c2a-c02a-4580-b7f2-bb5a3494292d_buggy.java b/tmp/df55bd08-58a7-43ee-be9d-1b48e6c1f947_fixed.java
index d4e6d48..8028b93 100644
--- a/tmp/660b2c2a-c02a-4580-b7f2-bb5a3494292d_buggy.java
+++ b/tmp/df55bd08-58a7-43ee-be9d-1b48e6c1f947_fixed.java
@@ -1,23 +1,16 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
+    if (callTarget != null &&
+          callTarget.isName() && callTarget.getString().equals("String") &&
+          n.getChildCount() == 2) {
+      Node value = IR.string("").srcref(n);
+      value.addChildToBack(n.removeFirstChild());
+      value.useSourceInfoIfMissingFromForTree(n);
+      Node addition = IR.add(value, IR.string("").srcref(callTarget));
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
-    }
     return n;
   }
\ No newline at end of file
