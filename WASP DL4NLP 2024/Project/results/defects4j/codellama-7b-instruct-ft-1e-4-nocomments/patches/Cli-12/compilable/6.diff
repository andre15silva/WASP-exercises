diff --git a/tmp/22b3562a-d8e1-414c-9978-c892a13ba8eb_buggy.java b/tmp/9fddc2d1-495c-474f-a427-6169f6eccf7c_fixed.java
index 7e64f1d..e9415bd 100644
--- a/tmp/22b3562a-d8e1-414c-9978-c892a13ba8eb_buggy.java
+++ b/tmp/9fddc2d1-495c-474f-a427-6169f6eccf7c_fixed.java
@@ -1,78 +1,93 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
-
         boolean eatTheRest = false;
-
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
-
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
-            else if (arg.startsWith("-"))
+            else if (arg.startsWith("--"))
             {
                 String opt = Util.stripLeadingHyphens(arg);
-
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    if (options.hasOption(opt.substring(2)))
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        tokens.add(arg.substring(0,2)); 
+                        tokens.add(arg.substring(2)); 
                     }
                     else
                     {
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
+            else if (arg.startsWith("-D"))
+            {
+                tokens.add(arg);
+            }
+            else if (arg.startsWith("-D") || arg.startsWith("-"))
+            {
+                int firstEqualsPosition = arg.indexOf('=');
+                if (firstEqualsPosition < 0)
+                {
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(arg);
+                }
+                else
+                {
+                    String opt = arg.substring(0, firstEqualsPosition + 1);
+                    String value = arg.substring(firstEqualsPosition + 1);
+                    if (options.hasOption(opt))
+                    {
+                        tokens.add(opt);
+                        tokens.add(value);
+                    }
+                    else
+                    {
+                        tokens.add(arg);
+                    }
+                }
+            }
+            else if (arg.startsWith("-f="))
+            {
+                int firstEqualsPosition = arg.indexOf('=');
+                String opt = arg.substring(0, firstEqualsPosition + 1);
+                String value = arg.substring(firstEqualsPosition + 1);
+                if (options.hasOption(opt))
+                {
+                    tokens.add(opt);
+                    tokens.add(value);
+                }
+                else
+                {
+                    tokens.add(arg);
+                }
+            }
             else
             {
                 tokens.add(arg);
             }
-
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
-
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
