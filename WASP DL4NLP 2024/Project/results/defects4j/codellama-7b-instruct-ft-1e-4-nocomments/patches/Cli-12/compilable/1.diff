diff --git a/tmp/c82d79a0-9974-4b17-aabf-d7776e145c77_buggy.java b/tmp/0e0372a1-6b5b-4163-8fbb-41770813aabc_fixed.java
index 7e64f1d..84bf515 100644
--- a/tmp/c82d79a0-9974-4b17-aabf-d7776e145c77_buggy.java
+++ b/tmp/0e0372a1-6b5b-4163-8fbb-41770813aabc_fixed.java
@@ -1,78 +1,84 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
-     *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
-
         boolean eatTheRest = false;
-
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
-
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
                 String opt = Util.stripLeadingHyphens(arg);
-
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
+                {
+                    String[] tmp = null;
+                    if ((arg.length() > 2) && arg.charAt(2) == '=')
+                    {
+                        tmp = new String[] { opt, arg.substring(2) };
+                    }
+                    else
                     {
                         if (options.hasOption(arg.substring(0, 2)))
                         {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                            tokens.add(arg.substring(0, 2)); 
+                            tokens.add(arg.substring(2)); 
                         }
                         else
                         {
                             eatTheRest = stopAtNonOption;
                             tokens.add(arg);
                         }
                     }
+                    if (tmp != null)
+                    {
+                        for (int j = 0; j < tmp.length; j++)
+                        {
+                            tokens.add(tmp[j]);
+                        }
+                    }
+                }
             }
             else
             {
                 tokens.add(arg);
             }
-
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
-
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
