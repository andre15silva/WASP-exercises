diff --git a/tmp/85d0713e-9390-410f-846b-4a18b6a6347e_buggy.java b/tmp/719060f3-f38f-4539-bb0e-eadacf78eaa4_fixed.java
index 5bc9804..9059c4f 100644
--- a/tmp/85d0713e-9390-410f-846b-4a18b6a6347e_buggy.java
+++ b/tmp/719060f3-f38f-4539-bb0e-eadacf78eaa4_fixed.java
@@ -1,85 +1,86 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         final ExternalTypeHandler ext = _externalTypeIdHandler.start();
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
-
         TokenBuffer tokens = new TokenBuffer(p);
         tokens.writeStartObject();
-
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
+            t = p.nextToken(); 
+            if ("class".equals(propName)) {
+                Class<?> cls = ctxt.findClass(p.getText());
+                if (cls != null) {
+                    if (_defaultImpl != null) {
+                        StringBuilder sb = new StringBuilder();
+                        sb.append("default implementation (by class id '");
+                        sb.append(cls.getName());
+                        sb.append("') did not match with actual Class '");
+                        sb.append(cls.getName());
+                        sb.append("' (or name)");
+                        throw new IllegalArgumentException(sb.toString());
+                    }
+                    continue;
+                }
+            }
+            Object oldJson = p.getCurrentLocation();
+            JsonLocation start = p.getCurrentLocation();
+            try {
                 SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
                 if (creatorProp != null) {
-                // first: let's check to see if this might be part of value with external type id:
-                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
-                //   since it is not the bean
                     if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
-                    ;
                     } else {
-                    // Last creator property to set?
                         if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
+                            t = p.nextToken(); 
                             Object bean;
                             try {
                                 bean = creator.build(ctxt, buffer);
                             } catch (Exception e) {
                                 wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
-                            continue; // never gets here
+                                continue;
                             }
-                        // if so, need to copy all remaining tokens into buffer
                             while (t == JsonToken.FIELD_NAME) {
-                            p.nextToken(); // to skip name
+                                p.nextToken(); 
                                 tokens.copyCurrentStructure(p);
                                 t = p.nextToken();
                             }
                             if (bean.getClass() != _beanType.getRawClass()) {
-                            // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
-                            //   it's too complicated, so bail out
                                 throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
                             }
                             return ext.complete(p, ctxt, bean);
                         }
                     }
-                continue;
                 }
-            // Object Id property?
+            } finally {
+                p.setCurrentValue(oldJson);
+                p.setCurrentLocation(start);
+            }
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
-            // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
-            // external type id (or property that depends on it)?
             if (ext.handlePropertyValue(p, ctxt, propName, null)) {
                 continue;
             }
-            /* As per [JACKSON-313], things marked as ignorable should not be
-             * passed to any setter
-             */
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
-            // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
-
-        // We hit END_OBJECT; resolve the pieces:
         try {
             return ext.complete(p, ctxt, buffer, creator);
         } catch (Exception e) {
             wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+            return null; 
         }
     }
\ No newline at end of file
