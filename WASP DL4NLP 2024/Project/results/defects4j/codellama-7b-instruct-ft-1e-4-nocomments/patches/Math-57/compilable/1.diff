diff --git a/tmp/9b01ebc9-a4e0-417b-a5c6-ca9561430a28_buggy.java b/tmp/e2b04769-1568-458a-ba90-784a8f7332a6_fixed.java
index ad4b0d8..f25ec5e 100644
--- a/tmp/9b01ebc9-a4e0-417b-a5c6-ca9561430a28_buggy.java
+++ b/tmp/e2b04769-1568-458a-ba90-784a8f7332a6_fixed.java
@@ -1,47 +1,29 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
-
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
-
-        // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
-
-        final double[] dx2 = new double[pointSet.size()];
-        while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+        final double[] pown = new double[pointSet.size()];
+        double sumpow = 1.0;
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
-                final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+            final double frac = random.nextDouble();
+            sumpow *= frac;
+            pown[i] = sumpow;
         }
-
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+        while (resultSet.size() < k) {
+            final double rnrt = random.nextDouble() * sumpow;
+            int maxind = 0;
+            for (int i = 0; i < pointSet.size(); i++) {
+                if (pown[i] > rnrt) {
+                    maxind = i;
                     break;
                 }
             }
+            pown[maxind] = sumpow;
+            final T p = pointSet.remove(maxind);
+            resultSet.add(new Cluster<T>(p));
         }
-
         return resultSet;
-
     }
\ No newline at end of file
