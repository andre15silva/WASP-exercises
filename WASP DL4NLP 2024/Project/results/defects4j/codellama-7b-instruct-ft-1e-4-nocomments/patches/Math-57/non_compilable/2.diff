diff --git a/tmp/7e5df187-9fbd-4a85-b316-0f2eb9cc71ea_buggy.java b/tmp/ccb72fb9-7c5e-4d29-8689-7b0dde8b4ec7_fixed.java
index ad4b0d8..8b21f5f 100644
--- a/tmp/7e5df187-9fbd-4a85-b316-0f2eb9cc71ea_buggy.java
+++ b/tmp/ccb72fb9-7c5e-4d29-8689-7b0dde8b4ec7_fixed.java
@@ -1,47 +1,24 @@
-    /**
-     * Use K-means++ to choose the initial centers.
-     *
-     * @param <T> type of the points to cluster
-     * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
-     * @param random random generator to use
-     * @return the initial centers
-     */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
-
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
-
-        // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
-
         final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
             int sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
+                double d = p.distanceFrom(nearest.getCenter());
+                d = Math.pow(d, 2);
+                sum += d;
                 dx2[i] = sum;
             }
-
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
             final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
+            final int ix = sampleFromProbability(r, dx2);
+            final T p = pointSet.remove(ix);
             resultSet.add(new Cluster<T>(p));
-                    break;
         }
-            }
-        }
-
         return resultSet;
-
     }
\ No newline at end of file
