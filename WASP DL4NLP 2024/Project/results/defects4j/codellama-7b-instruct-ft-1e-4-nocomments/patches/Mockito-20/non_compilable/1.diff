diff --git a/tmp/bdc188e2-1731-486d-a73b-52a0eda0cb82_buggy.java b/tmp/909d2cb4-02b3-4470-a646-899830b114a7_fixed.java
index f9a9b5b..6799fe2 100644
--- a/tmp/bdc188e2-1731-486d-a73b-52a0eda0cb82_buggy.java
+++ b/tmp/909d2cb4-02b3-4470-a646-899830b114a7_fixed.java
@@ -1,30 +1,32 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
         try {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
+            String targetName = "class to mock : ";
+            if (settings.getTypeToMock().getName().endsWith("$Proxy")) {
+                targetName = "proxy instance class : ";
+            }
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    targetName + describeClass(settings.getTypeToMock()),
                     "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
+                    "This problem might be related to classloaders. " +
+                    "See the documentation for more information : " + DOC_URL,
+                    "If the problem persists, please report it.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
         }
     }
\ No newline at end of file
