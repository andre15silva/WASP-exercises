diff --git a/tmp/810c468e-9095-4997-8a9f-e6e2543b04ba_buggy.java b/tmp/20fcdb78-e4a5-4cb1-a5f0-e8a078a51eb7_fixed.java
index b12de99..78426a6 100644
--- a/tmp/810c468e-9095-4997-8a9f-e6e2543b04ba_buggy.java
+++ b/tmp/20fcdb78-e4a5-4cb1-a5f0-e8a078a51eb7_fixed.java
@@ -1,52 +1,82 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
-
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
-
       if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
         return;
       }
-
       if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
-
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
+      } else if (n.isParamList()) {
+        Node f = NodeUtil.getEnclosingFunction(n);
+        if (f == null || !f.isFunction()) {
+          return;
+        }
+        Node paramList = f.getFirstChild();
+        for (Node parameter = n.getFirstChild();
+             parameter != null;
+             parameter = parameter.getNext()) {
+          if (parameter.isName()) {
+            String paramName = parameter.getString();
+            Var paramVar = t.getScope().getVar(paramName);
+            if (paramVar != null) {
+              Var functionParam = null;
+              if (paramVar.getParentNode().isFunction()) {
+                Node fnFn = paramVar.getParentNode();
+                functionParam = fnFn.getFirstChild().getFirstChild();
+              } else {
+                Node getprop = parameter.getFirstChild();
+                Node qname = getprop.getFirstChild();
+                Node fnFn = qname.getNext();
+                functionParam =
+                    fnFn.getFirstChild().getFirstChild().getFirstChild();
+              }
+              if (!paramVar.isGlobal()) {
+                if (functionParam != null &&
+                    functionParam.getStaticSourceFile().equals(
+                        file.getOriginalFile())) {
+                  int params = -1;
+                  for (Node p = f.getFirstChild();
+                       p != null && p != paramList; p = p.getNext()) {
+                    params++;
+                  }
+                  if (params != -1 &&
+                      paramName.equals(functionParam.getName())) {
+                    String qualifiedName =
+                        getFullQualifiedName(f) + ":" + params + ":" + paramName;
+                    data.get(getScopeRoot(f)).recordNamedParam(qualifiedName);
+                  }
+                }
+              }
+            }
+          }
+        }
       }
     }
\ No newline at end of file
