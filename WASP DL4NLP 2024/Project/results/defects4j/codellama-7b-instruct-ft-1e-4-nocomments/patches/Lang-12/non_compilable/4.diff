diff --git a/tmp/24e397e8-d053-43c6-9caa-2fa5ffb993d8_buggy.java b/tmp/12fc4764-6cb5-4c1a-b3b0-ea5f50c99cab_fixed.java
index 7c9c72e..f96e171 100644
--- a/tmp/24e397e8-d053-43c6-9caa-2fa5ffb993d8_buggy.java
+++ b/tmp/12fc4764-6cb5-4c1a-b3b0-ea5f50c99cab_fixed.java
@@ -1,93 +1,43 @@
-    /**
-     * <p>Creates a random string based on a variety of options, using
-     * supplied source of randomness.</p>
-     *
-     * <p>If start and end are both {@code 0}, start and end are set
-     * to {@code ' '} and {@code 'z'}, the ASCII printable
-     * characters, will be used, unless letters and numbers are both
-     * {@code false}, in which case, start and end are set to
-     * {@code 0} and {@code Integer.MAX_VALUE}.
-     *
-     * <p>If set is not {@code null}, characters between start and
-     * end are chosen.</p>
-     *
-     * <p>This method accepts a user-supplied {@link Random}
-     * instance to use as a source of randomness. By seeding a single 
-     * {@link Random} instance with a fixed seed and using it for each call,
-     * the same random sequence of strings can be generated repeatedly
-     * and predictably.</p>
-     *
-     * @param count  the length of random string to create
-     * @param start  the position in set of chars to start at
-     * @param end  the position in set of chars to end before
-     * @param letters  only allow letters?
-     * @param numbers  only allow numbers?
-     * @param chars  the set of chars to choose randoms from, must not be empty.
-     *  If {@code null}, then it will use the set of all chars.
-     * @param random  a source of randomness.
-     * @return the random string
-     * @throws ArrayIndexOutOfBoundsException if there are not
-     *  {@code (end - start) + 1} characters in the set array.
-     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
-     * @since 2.0
-     */
-    public static String random(int count, int start, int end, boolean letters, boolean numbers,
-                                char[] chars, Random random) {
-        if (count == 0) {
-            return "";
-        } else if (count < 0) {
+    public static String random(int count) {
+        return random(count, null, false, false);
+    }
+    public static String random(int count, boolean letters) {
+        return random(count, letters, false);
+    }
+    public static String random(int count, boolean letters, boolean numbers) {
+        return random(count, letters, numbers, null, null);
+    }
+    public static String random(int count, char[] chars) {
+        return random(count, chars, null);
+    }
+    public static String random(int count, String string) {
+        return random(count, string.toCharArray());
+    }
+    public static String random(int count, String string, Random random) {
+        return random(count, string.toCharArray(), random);
+    }
+    public static String random(int count, boolean letters, boolean numbers, char[] chars, Random random) {
+        if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
-
-        if (start == 0 && end == 0) {
-                if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
-                } else {
-                    end = 'z' + 1;
-                    start = ' ';                
-                }
-        }
-
-        char[] buffer = new char[count];
-        int gap = end - start;
-
-        while (count-- != 0) {
-            char ch;
         if (chars == null) {
-                ch = (char) (random.nextInt(gap) + start);
+            if (!letters && !numbers) {
+                chars = new char[('z' + 1) - ' '];
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                chars = new char[55296];
             }
-            if (letters && Character.isLetter(ch)
-                    || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
-                    } else {
-                        // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+            for (int i = 0, cp = 0; i < chars.length; i++) {
+                if (!letters || (cp = Character.codePointAt(chars, i)) >= 'a' && cp <= 'z') {
+                    chars[i] = (char) cp;
                 }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
-                    } else {
-                        // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                if (!numbers || (cp = Character.codePointAt(chars, i)) >= '0' && cp <= '9') {
+                    chars[i] = (char) cp;
                 }
-                } else if(ch >= 56192 && ch <= 56319) {
-                    // private high surrogate, no effing clue, so skip it
-                    count++;
-                } else {
-                    buffer[count] = ch;
             }
         } else {
-                count++;
+            if (chars.length == 0) {
+                throw new IllegalArgumentException("The characters array must not be empty");
             }
         }
-        return new String(buffer);
+        return random(count, 0, chars.length - 1, letters, numbers, chars, random);
     }
\ No newline at end of file
