diff --git a/tmp/ed2a73a6-3abd-401e-aacd-83aa5151d461_buggy.java b/tmp/1dcfbd7b-2773-42a4-aefd-ccaa89ea9c43_fixed.java
index 7d8d756..772b330 100644
--- a/tmp/ed2a73a6-3abd-401e-aacd-83aa5151d461_buggy.java
+++ b/tmp/1dcfbd7b-2773-42a4-aefd-ccaa89ea9c43_fixed.java
@@ -1,48 +1,37 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
-        // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+        JsonToken t = p.currentToken();
+        if (JsonToken.START_OBJECT != t) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
+        t = p.nextToken();
+        if (JsonToken.FIELD_NAME != t) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
-
-        // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
+        t = p.nextToken();
+        if (_typeIdVisible && JsonToken.START_OBJECT == t) {
             TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+            tb.writeStartObject(); 
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+            t = p.nextToken();
         }
-        
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+        if (JsonToken.END_OBJECT != t) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
