diff --git a/tmp/0e6ac61e-acd9-4cf6-9731-ceebcf66b306_buggy.java b/tmp/59a7128a-0d7b-49c3-9a4d-9482bbc3daf6_fixed.java
index eed2194..729c7aa 100644
--- a/tmp/0e6ac61e-acd9-4cf6-9731-ceebcf66b306_buggy.java
+++ b/tmp/59a7128a-0d7b-49c3-9a4d-9482bbc3daf6_fixed.java
@@ -1,55 +1,54 @@
     /**
      * Gets a time zone instance for the specified offset to UTC in hours and minutes.
      * This method assumes 60 minutes in an hour, and standard length minutes.
      * <p>
      * This factory is a convenient way of constructing zones with a fixed offset.
-     * The hours value must be in the range -23 to +23.
-     * The minutes value must be in the range -59 to +59.
+     * The hours value must be in the range -24 to +24.
+     * The minutes value must be in the range -60 to +60.
      * The following combinations of sign for the hour and minute are possible:
      * <pre>
      *  Hour    Minute    Example    Result
-     * 
-     *  +ve     +ve       (2, 15)    +02:15
-     *  +ve     zero      (2, 0)     +02:00
-     *  +ve     -ve       (2, -15)   IllegalArgumentException
-     * 
-     *  zero    +ve       (0, 15)    +00:15
-     *  zero    zero      (0, 0)     +00:00
-     *  zero    -ve       (0, -15)   -00:15
-     * 
-     *  -ve     +ve       (-2, 15)   -02:15
-     *  -ve     zero      (-2, 0)    -02:00
+     *  +ve     +ve       (+2, +15)  +02:15
+     *  +ve     zero      (+2, +0)    +02:00
+     *  +ve     -ve       (+2, -15)   -02:15
+     *  zero    +ve       (+0, +15)   +00:15
+     *  zero    zero      (+0, +0)    +00:00
+     *  zero    -ve       (+0, -15)   -00:15
+     *  -ve     +ve       (-2, +15)   -02:15
+     *  -ve     zero      (-2, +0)    -02:00
      *  -ve     -ve       (-2, -15)   -02:15
+     *  -ve     -ve       (-2, +15)   -02:15
+     *  -24     -ve       (+0, -60)   -24:00
      * </pre>
      * Note that in versions before 2.3, the minutes had to be zero or positive.
      * 
-     * @param hoursOffset  the offset in hours from UTC, from -23 to +23
-     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59
+     * @param hoursOffset  the offset in hours from UTC, from -24 to +24
+     * @param minutesOffset  the offset in minutes from UTC, from -60 to +60
      * @return the DateTimeZone object for the offset
      * @throws IllegalArgumentException if any value is out of range, the minutes are negative
      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
      */
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
-        if (hoursOffset < -23 || hoursOffset > 23) {
+        if (hoursOffset < -24 || hoursOffset > 24) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+        if (minutesOffset < 0 || minutesOffset > 60) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
         int offset = 0;
         try {
             int hoursInMinutes = hoursOffset * 60;
+            minutesOffset = hoursInMinutes + minutesOffset;
             if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
+                offset = -FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
             } else {
-                minutesOffset = hoursInMinutes + minutesOffset;
-            }
                 offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            }
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
\ No newline at end of file
