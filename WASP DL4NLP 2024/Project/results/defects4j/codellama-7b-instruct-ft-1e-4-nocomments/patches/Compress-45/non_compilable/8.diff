diff --git a/tmp/2ede2f54-4191-4d4b-b96e-945a9ff670ea_buggy.java b/tmp/c18d7d6d-c8c5-4d96-94f9-ce8aaebce2af_fixed.java
index 1bbc082..b2f58d4 100644
--- a/tmp/2ede2f54-4191-4d4b-b96e-945a9ff670ea_buggy.java
+++ b/tmp/c18d7d6d-c8c5-4d96-94f9-ce8aaebce2af_fixed.java
@@ -1,36 +1,39 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      * 
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      * 
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
-    public static int formatLongOctalOrBinaryBytes(
+    public static int formatLongOctalOrBinaryBytesRoundTrip(
         final long value, final byte[] buf, final int offset, final int length) {
-
-        // Check whether we are dealing with UID/GID or SIZE field
-        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
-
-        final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
-            return formatLongOctalBytes(value, buf, offset, length);
+        final long maxAsOctalChar = (length == TarConstants.UIDLEN) ? TarConstants.MAXID : TarConstants.MAXSIZE;
+        long valueBack = formatLongOctalOrBinaryBytes(value, buf, offset, length);
+        if (valueBack != value) {
+          long valueBack2 = formatBigIntegerBinary(new java.math.BigInteger(value+""), buf, offset, length, false);
+          if (valueBack2 != value) {
+            throw new RuntimeException("Value " + value + 
+            " round trips differently with octal and binary encoding.");
           }
-
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+        } else if (Math.abs(valueBack) > maxAsOctalChar){
+          final long valueBack2 = formatBigIntegerBinary(
+              new java.math.BigInteger(Long.toString(value)),
+              buf, offset, length, false);
+          if (valueBack2 != value) {
+              throw new RuntimeException("Value " + value + 
+                  " round trips differently with octal and binary encoding.");
           }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
-
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+        }
+        buf[offset] = (byte) (((value > 0) ? 0x80 : 0xff));
         return offset + length;
     }
\ No newline at end of file
