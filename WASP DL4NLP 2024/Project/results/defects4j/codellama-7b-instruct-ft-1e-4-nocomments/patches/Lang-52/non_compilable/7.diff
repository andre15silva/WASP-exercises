diff --git a/tmp/7e11f2de-3e81-4f91-8a61-564452e2a0e7_buggy.java b/tmp/af395c57-7ede-4560-bdf7-bfd9c06d2597_fixed.java
index a6dab52..a244637 100644
--- a/tmp/7e11f2de-3e81-4f91-8a61-564452e2a0e7_buggy.java
+++ b/tmp/af395c57-7ede-4560-bdf7-bfd9c06d2597_fixed.java
@@ -1,80 +1,42 @@
     /**
      * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>
-     * 
-     * @param out write to receieve the escaped string
+     * @param out <code>Writer</code>
      * @param str String to escape values in, may be null
-     * @param escapeSingleQuote escapes single quotes if <code>true</code>
      * @throws IOException if an IOException occurs
      */
-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
+    public static void escapeJavaScript(Writer out, String str)
+                  throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (str == null) {
             return;
         }
-        int sz;
-        sz = str.length();
+        int sz = str.length();
         for (int i = 0; i < sz; i++) {
             char ch = str.charAt(i);
-
-            // handle unicode
-            if (ch > 0xfff) {
-                out.write("\\u" + hex(ch));
-            } else if (ch > 0xff) {
-                out.write("\\u0" + hex(ch));
-            } else if (ch > 0x7f) {
-                out.write("\\u00" + hex(ch));
-            } else if (ch < 32) {
             switch (ch) {
-                    case '\b':
-                        out.write('\\');
-                        out.write('b');
+              case '<':
+                out.write("\\u003c");
                 break;
-                    case '\n':
-                        out.write('\\');
-                        out.write('n');
+              case '>':
+                out.write("\\u003e");
                 break;
-                    case '\t':
-                        out.write('\\');
-                        out.write('t');
-                        break;
-                    case '\f':
-                        out.write('\\');
-                        out.write('f');
-                        break;
-                    case '\r':
-                        out.write('\\');
-                        out.write('r');
-                        break;
-                    default :
-                        if (ch > 0xf) {
-                            out.write("\\u00" + hex(ch));
-                        } else {
-                            out.write("\\u000" + hex(ch));
-                        }
-                        break;
-                }
-            } else {
-                switch (ch) {
               case '\'':
-                        if (escapeSingleQuote) {
-                          out.write('\\');
-                        }
-                        out.write('\'');
+                out.write("\\u0027");
                 break;
-                    case '"':
-                        out.write('\\');
-                        out.write('"');
+              case '\"':
+                out.write("\\u0022");
+                break;
+              case '&':
+                out.write("\\u0026");
                 break;
               case '\\':
-                        out.write('\\');
-                        out.write('\\');
+                out.write("\\u005c");
                 break;
               default :
                 out.write(ch);
                 break;
             }
         }
     }
\ No newline at end of file
-    }
