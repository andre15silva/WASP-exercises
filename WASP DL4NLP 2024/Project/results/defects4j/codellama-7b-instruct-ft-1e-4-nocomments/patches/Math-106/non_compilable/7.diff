diff --git a/tmp/f9d55c68-4eeb-415c-a154-b31899293d82_buggy.java b/tmp/bb9bd619-59ad-44d9-88db-5f25db9d666b_fixed.java
index 42c5923..47d4e93 100644
--- a/tmp/f9d55c68-4eeb-415c-a154-b31899293d82_buggy.java
+++ b/tmp/bb9bd619-59ad-44d9-88db-5f25db9d666b_fixed.java
@@ -1,89 +1,79 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
+     * expects the string to be formatted as a proper or improper fraction.
+     * Leading minus signs are allowed for improper fractions.
      * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
+     * Minus signs are only allowed in the whole number part, or as leading
+     * minus signs, for improper fractions.
+     * If a minus sign is found as first element, then an improper fraction is
+     * tried to be parsed.  Valid improper fractions are of the form
+     * <code>-n</code>, <code>-n/d</code>, <code>-w + n/d</code>, where
+     * <code>n</code> and <code>d</code> are (unsigned) integers, whereas
+     * <code>w</code> is an (unsigned) integer.  The minus sign in the last three
+     * forms must NOT be minus signs.  If a minus sign is NOT found as first
+     * element, then a proper (improper) fraction is tried to be parsed.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
-        
         int initialIndex = pos.getIndex();
-
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-
-        // parse whole
-        Number whole = getWholeFormat().parse(source, pos);
-        if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
-            return null;
-        }
-
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-        
-        // parse numerator
-        Number num = getNumeratorFormat().parse(source, pos);
-        if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
-            return null;
-        }
-        
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
+        boolean negate = false;
         switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
-        case '/' :
-            // found '/', continue parsing denominator
+        case '-' :
+            negate = true;
             break;
         default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
-            return null;
+            return properFormat.parse(source, pos);
         }
-
-        // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-
-        // parse denominator
+        Number num = getNumeratorFormat().parse(source, pos);
+        int n = num == null ? 0 : num.intValue();
+        int d = 0;
+        int w = 0;
+        if (num != null) {
+            parseAndIgnoreWhitespace(source, pos);
             Number den = getDenominatorFormat().parse(source, pos);
+            int denPos = pos.getIndex();
             if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+                pos.setIndex(denPos - 1);
+                int c2 = parseNextCharacter(source, pos);
+                if (c2 == 0) {
+                    throw new ParseException("Improper fraction expected." ,
+                        startIndex);
+                }
+                if (c2 != '/') {
+                    throw new ParseException("Invalid fraction.", startIndex);
+                }
+                den = getDenominatorFormat().parse(source, pos);
+            }
+            if (den == null) {
+                pos.setIndex(initialIndex);
+                return null;
+            }
+            d = den.intValue();
+        }
+        if (num == null) {
             pos.setIndex(initialIndex);
             return null;
         }
-        
-            // minus signs must be leading, invalid
-
-        int w = whole.intValue();
-        int n = num.intValue();
-        int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+        int n2 = n * d;
+        w = (c == '-') ? (-1) : (1);
+        ret = new Fraction(w * (n2 + n) , d);
+        if (negate) {
+            Integer o = ret.getNumerator();
+            if (MathUtils.signum(o.intValue()) == -1) {
+                throw new ParseException("Malformed number.",startIndex);
+            }
+            ret = ret.negate();
+        }
+        return ret;
     }
\ No newline at end of file
