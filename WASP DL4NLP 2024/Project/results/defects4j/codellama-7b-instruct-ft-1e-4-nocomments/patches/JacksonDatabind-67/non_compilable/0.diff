diff --git a/tmp/a01cfab9-52a2-458d-b5b4-b8bf846068cf_buggy.java b/tmp/a6592795-99dc-4e4a-af56-6045fed3c7c4_fixed.java
index bc80637..af60df2 100644
--- a/tmp/a01cfab9-52a2-458d-b5b4-b8bf846068cf_buggy.java
+++ b/tmp/a6592795-99dc-4e4a-af56-6045fed3c7c4_fixed.java
@@ -1,33 +1,46 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
-        // the only non-standard thing is this:
         if (deser == null) {
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
+                JavaType enumType = JavaType.byName(type.toCanonical().getRawClass().getName()).build();
+                JsonDeserializer<Enum> rawDes =  _createEnumKeyDeserializer(ctxt, enumType);
+                deser = new KeyDeserializer() {
+                    @Override
+                    public Object deserializeKey(String key, DeserializationContext ctxt)
+                            throws IOException
+                    {
+                        Class<? exteds Enum> rawClass = (Class<Enum<?>>) enumType.getRawClass();
+                        return Enum.valueOf(rawClass, key.toLowerCase());
                     }
+                };
+                if (_factoryConfig.hasDeserializerModifiers()) {
+                    BeanDeserializerModifier[] mods = _factoryConfig.deserializerModifiers();
+                    deser = mods[mods.length-1].modifyEnumDeserializer(config, type, beanDesc, deser);
+                }
+            } else {
                 deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
             }
-        // and then post-processing
+        }
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
         return deser;
     }
\ No newline at end of file
