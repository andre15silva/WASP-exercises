diff --git a/tmp/7f6784b1-b558-4d93-b853-2572c6e88515_buggy.java b/tmp/5fde5889-6414-4945-9fa6-70867bc25012_fixed.java
index 181b1ac..0b23222 100644
--- a/tmp/7f6784b1-b558-4d93-b853-2572c6e88515_buggy.java
+++ b/tmp/5fde5889-6414-4945-9fa6-70867bc25012_fixed.java
@@ -1,23 +1,22 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
-     * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
-     * returned in the parts of the result according to the rules for
-     * {@link java.lang.Double} arithmetic.</p>
+     * If either this or <code>rhs</code> has a NaN value in either part, the
+     * result is NaN.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+        return createComplex(
+                FastMath.add(real, rhs.getReal()),
+                FastMath.add(imaginary, rhs.getImaginary()), true);
     }
\ No newline at end of file
