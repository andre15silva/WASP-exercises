diff --git a/tmp/6ddaa980-28c8-4cca-a470-3d675a1d7503_buggy.java b/tmp/7dec5c81-13a2-437e-bce1-519a7c8b8431_fixed.java
index 181b1ac..70d23e7 100644
--- a/tmp/6ddaa980-28c8-4cca-a470-3d675a1d7503_buggy.java
+++ b/tmp/7dec5c81-13a2-437e-bce1-519a7c8b8431_fixed.java
@@ -1,23 +1,36 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
      * {@link #NaN} is returned; otherwise Infinite and NaN values are
      * returned in the parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+        if (real == Double.NaN ||
+            imaginary == Double.NaN ||
+            rhs.getReal() == Double.NaN ||
+            rhs.getImaginary() == Double.NaN) {
+            return NaN;
+        }
+        Double realReturn = real + rhs.getReal();
+        Double imaginaryReturn = imaginary + rhs.getImaginary();
+        if (realReturn == Double.POSITIVE_INFINITY ||
+            realReturn == Double.NEGATIVE_INFINITY ||
+            imaginaryReturn == Double.POSITIVE_INFINITY ||
+            imaginaryReturn == Double.NEGATIVE_INFINITY) {
+            return createComplex(doubleNaN, doubleNaN);
+        }
+        return createComplex(realReturn, imaginaryReturn);
     }
\ No newline at end of file
