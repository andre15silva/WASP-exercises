diff --git a/tmp/32f69620-a0c2-4537-8a29-ff6a96d7bbe1_buggy.java b/tmp/444314c8-e821-4430-a83f-d5617972d1a4_fixed.java
index 181b1ac..8638542 100644
--- a/tmp/32f69620-a0c2-4537-8a29-ff6a96d7bbe1_buggy.java
+++ b/tmp/444314c8-e821-4430-a83f-d5617972d1a4_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
      * {@link #NaN} is returned; otherwise Infinite and NaN values are
      * returned in the parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
-        MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+        if ((this.isNaN()) || (rhs.isNaN())) {
+            return NaN;
+        }
+        double temp = real + rhs.getReal();
+        if (Double.isInfinite(temp)) {
+            temp = Double.NaN;
+        }
+        double temp2 = imaginary + rhs.getImaginary();
+        if (Double.isInfinite(temp2)) {
+            temp2 = Double.NaN;
+        }
+        return createComplex(temp, temp2);
     }
\ No newline at end of file
