diff --git a/tmp/7e44f256-87cc-4b2f-9b04-e2abe597f0ca_buggy.java b/tmp/bb261f37-168e-43ac-919e-7f2ed2862b4a_fixed.java
index 181b1ac..ed56903 100644
--- a/tmp/7e44f256-87cc-4b2f-9b04-e2abe597f0ca_buggy.java
+++ b/tmp/bb261f37-168e-43ac-919e-7f2ed2862b4a_fixed.java
@@ -1,23 +1,17 @@
     /**
-     * Return the sum of this complex number and the given complex number.
-     * <p>
-     * Uses the definitional formula
-     * <pre>
-     * (a + bi) + (c + di) = (a+c) + (b+d)i
-     * </pre></p>
-     * <p>
-     * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
-     * returned in the parts of the result according to the rules for
-     * {@link java.lang.Double} arithmetic.</p>
+     * Compute the sum of {@code this} and {@code rhs}.  If either
+     * argument contains {@link java.lang.Double#NaN}, then {@link #NaN}
+     * is returned; otherwise Infinite and NaN values are returned in
+     * the parts of the result according to the rules for
+     * {@link java.lang.Double} arithmetic.
      *
-     * @param rhs the other complex number
-     * @return the complex number sum
-     * @throws NullArgumentException if <code>rhs</code> is null
+     * @param rhs The value to add against {@code this}.
+     * @return The sum of {@code this} and {@code rhs}, or {@link #NaN}.
+     * @since 3.0
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
\ No newline at end of file
