diff --git a/tmp/9f7be85f-19e0-492d-825f-cf1f4cddfb23_buggy.java b/tmp/87c72323-6cca-4e87-9ca0-4a920c142230_fixed.java
index 43fb5fd..09a5948 100644
--- a/tmp/9f7be85f-19e0-492d-825f-cf1f4cddfb23_buggy.java
+++ b/tmp/87c72323-6cca-4e87-9ca0-4a920c142230_fixed.java
@@ -1,55 +1,46 @@
-    /**
-     * <p>Breaks <code>token</code> into its constituent parts
-     * using the following algorithm.
-     * <ul>
-     *  <li>ignore the first character ("<b>-</b>")</li>
-     *  <li>foreach remaining character check if an {@link Option}
-     *  exists with that id.</li>
-     *  <li>if an {@link Option} does exist then add that character
-     *  prepended with "<b>-</b>" to the list of processed tokens.</li>
-     *  <li>if the {@link Option} can have an argument value and there 
-     *  are remaining characters in the token then add the remaining 
-     *  characters as a token to the list of processed tokens.</li>
-     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> 
-     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
-     *  "<b>--</b>" followed by the remaining characters and also 
-     *  the remaining tokens directly to the processed tokens list.</li>
-     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
-     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
-     *  character prepended with "<b>-</b>".</li>
-     * </ul>
-     * </p>
-     *
-     * @param token The current token to be <b>burst</b>
-     * @param stopAtNonOption Specifies whether to stop processing
-     * at the first non-Option encountered.
-     */
     protected void burstToken(String token, boolean stopAtNonOption)
     {
-        for (int i = 1; i < token.length(); i++)
+        int i = 0;
+        int len = token.length();
+        do
         {
-            String ch = String.valueOf(token.charAt(i));
-
-            if (options.hasOption(ch))
+            if (i != 0)
             {
-                tokens.add("-" + ch);
-                currentOption = options.getOption(ch);
-
-                if (currentOption.hasArg() && (token.length() != (i + 1)))
+                if (i == len)
+                {
+                    tokens.add(token);
+                    break;
+                }
+                char ch = token.charAt(i);
+                String opt = String.valueOf(ch);
+                if (options.hasOption(opt))
+                {
+                    tokens.add("-" + opt);
+                    currentOption = options.getOption(opt);
+                    if (currentOption.hasArg() && (i != (len - 1)))
                     {
                         tokens.add(token.substring(i + 1));
+                        currentOption = null;
+                        break;
+                    }
+                    else
+                    {
+                        break;
+                    }
+                }
+            }
+            i++;
+        } while (i < len);
         
-                    break;
-                }
-            }
-            else if (stopAtNonOption)
+        if (currentOption != null)
+        {
+            if (stopAtNonOption)
             {
                 process(token.substring(i));
             }
             else
             {
                 tokens.add(token);
-                break;
             }
         }
     }
\ No newline at end of file
