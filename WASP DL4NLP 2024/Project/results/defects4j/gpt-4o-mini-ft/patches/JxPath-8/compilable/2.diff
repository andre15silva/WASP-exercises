diff --git a/tmp/efc720df-d78c-4658-86ac-2f1b128a775f_buggy.java b/tmp/0d9de80c-c707-4c4f-921d-a46fd3e8f749_fixed.java
index 98d89dc..24e267c 100644
--- a/tmp/efc720df-d78c-4658-86ac-2f1b128a775f_buggy.java
+++ b/tmp/0d9de80c-c707-4c4f-921d-a46fd3e8f749_fixed.java
@@ -1,23 +1,26 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+        // NaN does not compare equal to anything, so e.g. compare(""), compare(0)
+        // does not really ned to be tested for NaN object.
+        return evaluateCompare((Double.isNaN(ld) && Double.isNaN(rd)) ? 0 :
+                               (ld == rd ? 0 : ld < rd ? -1 : 1));
     }
