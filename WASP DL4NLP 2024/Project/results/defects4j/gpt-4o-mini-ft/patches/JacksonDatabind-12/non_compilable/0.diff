diff --git a/tmp/58117b77-3f2b-492d-a160-48bc4a9bdb5a_buggy.java b/tmp/7a2f9f5b-ecfb-4bfb-bfad-46ba5fb032c5_fixed.java
index 845704e..b44e1a1 100644
--- a/tmp/58117b77-3f2b-492d-a160-48bc4a9bdb5a_buggy.java
+++ b/tmp/7a2f9f5b-ecfb-4bfb-bfad-46ba5fb032c5_fixed.java
@@ -1,21 +1,37 @@
     /**
      * Turns out that these are expensive enough to create so that caching
      * does make sense.
      *<p>
      * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
      * a value type deserializer; this caused an issue with 2.4.4 of
      * JAXB Annotations (failing a test).
      * It is also possible that some other settings could make deserializers
      * un-cacheable; but on the other hand, caching can make a big positive
      * difference with performance... so it's a hard choice.
      * 
      * @since 2.4.4
      */
     @Override
     public boolean isCachable() {
         /* As per [databind#735], existence of value or key deserializer (only passed
          * if annotated to use non-standard one) should also prevent caching.
          */
-        return (_valueTypeDeserializer == null)
-                && (_ignorableProperties == null);
+        if (_valueTypeDeserializer == null && _ignorableProperties == null) {
+            // XXX [databind#735]: Must use latest information for map types
+            if (_valueType != null && Map.class.isAssignableFrom(_valueType)) {
+                if (_genericTypes != null) {
+                    if (_genericTypes.length > 1) {
+                        return true;
+                    }
+                } else {
+                    if (_valueType.getRawClass().isMemberClass()) {
+                        // internal type - not good for caching.
+                        return false;
+                    }
+                }
+            }
+            // if we have a simple value type and no sub-types, we can cache
+            return true;
+        }
+        return false;
     }
