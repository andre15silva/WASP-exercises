diff --git a/tmp/9b8183fa-d38b-418d-95b9-add591048d67_buggy.java b/tmp/6e31d42c-84d4-4c4e-be8f-4d255685bf4a_fixed.java
index ad4b0d8..5d236fd 100644
--- a/tmp/9b8183fa-d38b-418d-95b9-add591048d67_buggy.java
+++ b/tmp/6e31d42c-84d4-4c4e-be8f-4d255685bf4a_fixed.java
@@ -1,47 +1,40 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
+        // Check the distance from the first cluster center and sum them to D
         final double[] dx2 = new double[pointSet.size()];
-        while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
-                final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+            dx2[i] = p.distanceFrom(resultSet.get(0).getCenter(), 2);
         }
-
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
+        while (resultSet.size() < k) {
+            // For each data point x, compute D(x), the distance between x and
+            // the nearest center that has already been chosen and return D2
+            final double r = random.nextDouble() * sum(dx2);
             for (int i = 0 ; i < dx2.length; i++) {
                 if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
+                    resultSet.add(new Cluster<T>(pointSet.remove(i)));
                     break;
                 }
             }
         }
 
         return resultSet;
 
     }
