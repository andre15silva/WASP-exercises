diff --git a/tmp/52f212be-9188-4907-936a-4d94aca2ce56_buggy.java b/tmp/01bdbb98-6dfd-4a62-9177-8e77334ff210_fixed.java
index d4e6d48..574d649 100644
--- a/tmp/52f212be-9188-4907-936a-4d94aca2ce56_buggy.java
+++ b/tmp/01bdbb98-6dfd-4a62-9177-8e77334ff210_fixed.java
@@ -1,23 +1,26 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+      // slightly different semantics than '' + (a))
+      // TODO(bashir): verify whether this is still true
+      if ((!n.isArgOfCall() || n.getParent().isCall())
+          && !n.hasChildren()) {
         Node value = callTarget.getNext();
         if (value != null) {
           Node addition = IR.add(
               IR.string("").srcref(callTarget),
               value.detachFromParent());
           n.getParent().replaceChild(n, addition);
           reportCodeChange();
           return addition;
         }
       }
+    }
     return n;
   }
