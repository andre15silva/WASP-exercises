diff --git a/tmp/358e64dd-67ad-43b6-abeb-c6406801a53b_buggy.java b/tmp/aa46a302-288b-4ea3-9f8c-35a35179ce9c_fixed.java
index d4e6d48..e0badbd 100644
--- a/tmp/358e64dd-67ad-43b6-abeb-c6406801a53b_buggy.java
+++ b/tmp/aa46a302-288b-4ea3-9f8c-35a35179ce9c_fixed.java
@@ -1,23 +1,26 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+      // We can't do this in the general case since calling
+      // String(a) can have side effects.
+      // See http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && !value.isFunction()) {
+        if (value.isNumber() || value.isString() ||
+            NodeUtil.isImmutableValue(value)) {
           Node addition = IR.add(
               IR.string("").srcref(callTarget),
               value.detachFromParent());
           n.getParent().replaceChild(n, addition);
           reportCodeChange();
           return addition;
         }
       }
+    }
     return n;
   }
