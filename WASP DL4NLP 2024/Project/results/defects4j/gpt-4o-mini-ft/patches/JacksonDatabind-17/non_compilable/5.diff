diff --git a/tmp/5bcff24d-4282-48ae-8170-aee1a4583f55_buggy.java b/tmp/8b1090c2-271d-4c4c-99c7-2a242b262d74_fixed.java
index 01967cc..a70447b 100644
--- a/tmp/5bcff24d-4282-48ae-8170-aee1a4583f55_buggy.java
+++ b/tmp/8b1090c2-271d-4c4c-99c7-2a242b262d74_fixed.java
@@ -1,35 +1,37 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
          * use typing; that is both due to them being concrete and final,
          * and since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
 //                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
+                // [databind#793] So that this works for collections, too:
+                return _appliesFor == NON_CONCRETE_AND_ARRAYS ? t.isArrayType() || (t.getRawClass() == Object.class)
+                        : (t.getRawClass() == Object.class)
+                                || !t.isConcrete() 
                                 // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                                || TreeNode.class.isAssignableFrom(t.getRawClass());
 
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // [Issue#88] Should not apply to JSON tree models:
                 return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
             default:
             //case JAVA_LANG_OBJECT:
 //                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
