diff --git a/tmp/f9f2a20d-1ca0-4074-960b-afbbd3120da0_buggy.java b/tmp/691745a7-07bf-4344-8ea0-6339f617e950_fixed.java
index 181b1ac..61bbabb 100644
--- a/tmp/f9f2a20d-1ca0-4074-960b-afbbd3120da0_buggy.java
+++ b/tmp/691745a7-07bf-4344-8ea0-6339f617e950_fixed.java
@@ -1,23 +1,25 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
-     * returned in the parts of the result according to the rules for
+     * {@link #NaN} is returned; otherwise NaN values are returned in the
+     * parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+        double sumReal = real + rhs.getReal();
+        double sumImaginary = imaginary + rhs.getImaginary();
+        return createComplex(Double.isNaN(sumReal) ? NaN : sumReal,
+            Double.isNaN(sumImaginary) ? NaN : sumImaginary);
     }
