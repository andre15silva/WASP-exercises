diff --git a/tmp/a82354df-4ef3-4c50-800d-c72fee4ee13e_buggy.java b/tmp/39536065-ca4c-4c82-82e5-89ade685fd7a_fixed.java
index 181b1ac..64c3f76 100644
--- a/tmp/a82354df-4ef3-4c50-800d-c72fee4ee13e_buggy.java
+++ b/tmp/39536065-ca4c-4c82-82e5-89ade685fd7a_fixed.java
@@ -1,23 +1,25 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
      * {@link #NaN} is returned; otherwise Infinite and NaN values are
      * returned in the parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+        double a = (Double.isNaN(real) || Double.isNaN(rhs.getReal())) ? NaN : (real + rhs.getReal());
+        double b = (Double.isNaN(imaginary) || Double.isNaN(rhs.getImaginary()))
+            ? NaN : (imaginary + rhs.getImaginary());
+        return createComplex(a, b);
     }
