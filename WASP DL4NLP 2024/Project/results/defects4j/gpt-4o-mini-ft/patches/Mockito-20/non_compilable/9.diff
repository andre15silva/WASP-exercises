diff --git a/tmp/055c80cb-b75a-4804-b0df-0ef603dc86f1_buggy.java b/tmp/856cb30d-f245-46e7-bd9a-2990a4e2d310_fixed.java
index f9a9b5b..c93a94e 100644
--- a/tmp/055c80cb-b75a-4804-b0df-0ef603dc86f1_buggy.java
+++ b/tmp/856cb30d-f245-46e7-bd9a-2990a4e2d310_fixed.java
@@ -1,30 +1,36 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
+        Class<?> actualType = settings.getTypeToMock();
         try {
+            if (settings.isSpied() || Modifier.isAbstract(actualType.getModifiers())) {
+                // For abstract classes, the actual type to instantiate is the 1st superclass.
+                mockInstance = classInstantiator.instantiate(actualType);
+            } else {
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
-            return ensureMockIsAssignableToMockedType(settings, mockInstance);
+            }
+        } catch (InstantiationException e) {
+            throw new MockitoException("You cannot use @Mock on inner classes", e); // TODO: clarify the wording
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
+                    "  class to mock : " + describeClass(actualType), // TODO: describeClass with parent class & mock
+                    "  created class : " + describeClass(mockedProxyType),
                     "  proxy instance class : " + describeClass(mockInstance),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
         }
+        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+
+        return ensureMockIsAssignableToMockedType(settings, mockInstance);
     }
