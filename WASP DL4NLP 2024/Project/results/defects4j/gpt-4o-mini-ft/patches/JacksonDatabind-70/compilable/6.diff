diff --git a/tmp/6947e5ed-8b8c-4d86-93a4-261ab5669d6c_buggy.java b/tmp/f7f498d9-500a-4caf-b629-059d3846967a_fixed.java
index 0313249..51917cc 100644
--- a/tmp/6947e5ed-8b8c-4d86-93a4-261ab5669d6c_buggy.java
+++ b/tmp/f7f498d9-500a-4caf-b629-059d3846967a_fixed.java
@@ -1,32 +1,33 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
         String key = getPropertyName(propToRm);
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
+                // 28-Nov-2015, tatu: Important: must check name slot and NOT property name,
+                //   because base class supports lower-case names in case-insensitive mode (which is
+                //   enabled between 2.8 and 2.9, see #1493).
                 found = key.equals(prop.getName());
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
                     continue;
                 }
             }
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
