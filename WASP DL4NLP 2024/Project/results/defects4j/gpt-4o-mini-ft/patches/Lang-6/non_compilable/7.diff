diff --git a/tmp/4b490795-cef2-41ef-8ff0-db52dafe702b_buggy.java b/tmp/529d17a3-4c90-456f-9cc9-f358966e6117_fixed.java
index 4c1ed27..4d8e97e 100644
--- a/tmp/4b490795-cef2-41ef-8ff0-db52dafe702b_buggy.java
+++ b/tmp/529d17a3-4c90-456f-9cc9-f358966e6117_fixed.java
@@ -1,32 +1,39 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
+                String toWrite;
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
+                try {
+                   toWrite = StringEscapeUtils.escapeCsv(new String(c));
+                } catch (StringIndexOutOfBoundsException e) {
+                   // likely a surrogate pair, lame, but sometimes better than printing u+??
+                   toWrite = "u+" + Integer.toHexString(c[0]);
+                }
+                out.write(toWrite.toCharArray());
                 pos+= c.length;
                 continue;
             }
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
             }
         }
     }
