diff --git a/tmp/70dcf24a-0abb-4e2b-98fd-26637942000b_buggy.java b/tmp/aae0bee5-cf69-45a4-8e80-9a33b176826d_fixed.java
index b56897c..a3f9483 100644
--- a/tmp/70dcf24a-0abb-4e2b-98fd-26637942000b_buggy.java
+++ b/tmp/aae0bee5-cf69-45a4-8e80-9a33b176826d_fixed.java
@@ -1,27 +1,34 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
-        }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+        } else if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+          return true;
+        } else if (n.isForIn()) {
+          // TODO(user): this is too conservative, but we don't write
+          // enough users of 'for in' to have enough test cases, and so
+          // don't want to figure out which forms may become buggy
+          // whenever we try to do more analysis for for-in. We may
+          // revisit 'for in' later and do a better job with the
+          // analysis, but for now, let's just revert to the simpler
+          // form.
           return true;
         }
 
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
