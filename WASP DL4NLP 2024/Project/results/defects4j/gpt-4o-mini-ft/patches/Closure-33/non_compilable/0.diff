diff --git a/tmp/53987410-21ba-424b-94f0-93ba695df806_buggy.java b/tmp/6b883291-8f57-4162-94f9-702c433e56ba_fixed.java
index fb2b020..632faee 100644
--- a/tmp/53987410-21ba-424b-94f0-93ba695df806_buggy.java
+++ b/tmp/6b883291-8f57-4162-94f9-702c433e56ba_fixed.java
@@ -1,27 +1,36 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
+          // The method definition will narrow here, so to avoid
+          // undue noise (see b/11809102), only issue a message if
+          // the type has more obtained methods then the object.
+          // So far we only care if if the GWT JSNI type has more than
+          // the two defined at the type-level; the match constrains
+          // that we do on method declarations avoids undue noise
+          if (getPropertySize(propType) > 2) {
+            report(JSError.make(propType));
+          }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
