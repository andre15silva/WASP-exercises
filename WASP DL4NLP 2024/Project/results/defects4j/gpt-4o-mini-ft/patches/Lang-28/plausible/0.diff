diff --git a/tmp/806a81fa-e8c4-4e41-ab32-78a74ca3a5d6_buggy.java b/tmp/1882962f-604d-4405-b49a-66c45af88b68_fixed.java
index 4bbd561..8547627 100644
--- a/tmp/806a81fa-e8c4-4e41-ab32-78a74ca3a5d6_buggy.java
+++ b/tmp/1882962f-604d-4405-b49a-66c45af88b68_fixed.java
@@ -1,37 +1,44 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
             while (input.charAt(end) != ';') {
                 end++;
             }
 
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            if (entityValue > Character.MAX_VALUE) {
+                // Ensures that we support Unicode Supplemental characters > 0xFFFF
+                out.write((char) 0xD800 | (char) ((entityValue - 0x10000) >> 10));
+                out.write((char) 0xDC00 | (char) (entityValue & 0x3FF));
+                return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            } else {
                 out.write(entityValue);
                 return 2 + (end - start) + (isHex ? 1 : 0) + 1;
             }
+        }
         return 0;
     }
