diff --git a/tmp/0dca4d61-8c60-418b-80b8-ab1f4ce2a588_buggy.java b/tmp/ce82064a-9cdc-4303-8ca9-349634cc053d_fixed.java
index 4bbd561..f56add3 100644
--- a/tmp/0dca4d61-8c60-418b-80b8-ab1f4ce2a588_buggy.java
+++ b/tmp/ce82064a-9cdc-4303-8ca9-349634cc053d_fixed.java
@@ -1,37 +1,43 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
             while(input.charAt(end) != ';') {
                 end++;
             }
 
             int entityValue;
             try {
+                if(end - start < 7) {
                     if(isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
+                } else {
+                    // supplementaries are larger than 0xFFFF
+                    // use the same decoding mechanism as the entity decoder.
+                    return super.translate(input, index, out);
+                }
             } catch(NumberFormatException nfe) {
                 return 0;
             }
 
                 out.write(entityValue);
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
