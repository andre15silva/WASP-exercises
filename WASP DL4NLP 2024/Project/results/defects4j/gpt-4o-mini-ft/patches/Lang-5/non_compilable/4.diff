diff --git a/tmp/d4c34b6b-63b4-493d-a696-0830871fb74c_buggy.java b/tmp/c92f9146-edde-421d-b0df-6d537013e6c7_fixed.java
index f843d29..cc6ae36 100644
--- a/tmp/d4c34b6b-63b4-493d-a696-0830871fb74c_buggy.java
+++ b/tmp/c92f9146-edde-421d-b0df-6d537013e6c7_fixed.java
@@ -1,68 +1,87 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+        char ch0;
+        if ('_' == (ch0 = str.charAt(0))) {
+            if (len < 3) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 2) {
-                return new Locale(str);
+            if (!Character.isUpperCase(str.charAt(1)) || !Character.isLowerCase(str.charAt(2))) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (len == 3) {
+                return new Locale(str.substring(1, 2), "", str.substring(3, 4));
             }
             if (len < 5) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(2) != '_') {
+            if ('_' != (str.charAt(3))) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
-            }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+            ch0 = str.charAt(4);
+            if (!Character.isUpperCase(ch0) && !Character.isDigit(ch0)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (len == 5) {
+                return new Locale(str.substring(1, 2), "", str.substring(5), "");
+            }
+            if (len < 7) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if ('_' != (str.charAt(5))) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale(str.substring(1, 2), "", str.substring(4, 5), str.substring(6));
+        } else {
+            final char loCh1 = 'a' + ((int) ch0) - 1;
+            final char loCh2 = 'A' + ((int) ch0) - 1;
+            if (!Character.isLowerCase(ch0) && !Character.isUpperCase(ch0) || str.length() > 5) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            if (5 == len) {
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             }
             if (len < 7) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(5) != '_') {
+            if (!Character.isUpperCase(ch0)) {
+                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(7));
+            }
+            if ('_' != (str.charAt(0))) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            return new Locale(str.substring(0, 2), "", str.substring(3, 5), str.substring(6));
+        }
     }
