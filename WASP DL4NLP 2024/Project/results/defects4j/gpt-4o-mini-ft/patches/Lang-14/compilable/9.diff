diff --git a/tmp/b4b66f89-787a-4f7e-9d25-e0601ee1eb70_buggy.java b/tmp/9bbaadf4-ae55-476a-ae7b-f74b2a38c4eb_fixed.java
index c18eb8b..3abaee8 100644
--- a/tmp/b4b66f89-787a-4f7e-9d25-e0601ee1eb70_buggy.java
+++ b/tmp/9bbaadf4-ae55-476a-ae7b-f74b2a38c4eb_fixed.java
@@ -1,30 +1,30 @@
     /**
-     * <p>Compares two CharSequences, returning {@code true} if they represent
-     * equal sequences of characters.</p>
+     * <p>Compares two objects, returning {@code true} if they represent equal
+     * sequences of characters.</p>
      *
      * <p>{@code null}s are handled without exceptions. Two {@code null}
-     * references are considered to be equal. The comparison is case sensitive.</p>
+     * references are considered to be equal.</p>
      *
      * <pre>
      * StringUtils.equals(null, null)   = true
      * StringUtils.equals(null, "abc")  = false
      * StringUtils.equals("abc", null)  = false
      * StringUtils.equals("abc", "abc") = true
      * StringUtils.equals("abc", "ABC") = false
      * </pre>
      *
      * @see java.lang.CharSequence#equals(Object)
      * @param cs1  the first CharSequence, may be {@code null}
      * @param cs2  the second CharSequence, may be {@code null}
      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
      */
     public static boolean equals(CharSequence cs1, CharSequence cs2) {
         if (cs1 == cs2) {
             return true;
         }
         if (cs1 == null || cs2 == null) {
             return false;
         }
         return cs1.equals(cs2);
     }
