diff --git a/tmp/3a1a22d3-7774-4c3c-9ec7-15a8719c0b6f_buggy.java b/tmp/3197b5bf-eda7-47b1-9bf7-cf1c0c009e8a_fixed.java
index eb9ce9f..58cf60a 100644
--- a/tmp/3a1a22d3-7774-4c3c-9ec7-15a8719c0b6f_buggy.java
+++ b/tmp/3197b5bf-eda7-47b1-9bf7-cf1c0c009e8a_fixed.java
@@ -1,60 +1,61 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       } else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
       } else if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
+        } else if (info.hasTypedefType()) {
+          if (rValue != null && rValue.isObjectLit()) {
+            return rValue.getJSType();
+          }
         } else {
           // Check if this is constant, and if it has a known type.
           if (info.isConstant()) {
             JSType knownType = null;
             if (rValue != null) {
               if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
                 // If rValue has a type-cast, we use the type in the type-cast.
                 // If rValue's type was already computed during scope creation,
                 // then we can safely use that.
                 return rValue.getJSType();
-              } else if (rValue.isOr()) {
+              }
               // Check for a very specific JS idiom:
               // var x = x || TYPE;
               // This is used by Closure's base namespace for esoteric
               // reasons.
               Node firstClause = rValue.getFirstChild();
-                Node secondClause = firstClause.getNext();
-                boolean namesMatch = firstClause.isName()
-                    && lValue.isName()
-                    && firstClause.getString().equals(lValue.getString());
-                if (namesMatch && secondClause.getJSType() != null
-                    && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
-                }
+              if (firstClause.isOr()) {
+                firstClause = firstClause.getFirstChild();
               }
+              Node secondClause = (firstClause.getNext() == null) ?
+                  NodeUtil.newUndefinedNode(null) : firstClause.getNext();
+              return JSType.fromAstType(secondClause.getJSType());
             }
           }
         }
       }
 
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
