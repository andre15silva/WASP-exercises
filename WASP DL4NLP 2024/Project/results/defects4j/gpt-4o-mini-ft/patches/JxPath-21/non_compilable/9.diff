diff --git a/tmp/2f3ec1aa-7893-43ac-94e7-6a9e293fb614_buggy.java b/tmp/64e1c64c-e401-44f8-a3e6-52b985d17ebc_fixed.java
index 516fad7..db8aec0 100644
--- a/tmp/2f3ec1aa-7893-43ac-94e7-6a9e293fb614_buggy.java
+++ b/tmp/64e1c64c-e401-44f8-a3e6-52b985d17ebc_fixed.java
@@ -1,8 +1,34 @@
     /**
      * If the property contains a collection, then the length of that
      * collection, otherwise - 1.
      * @return int length
      */
     public int getLength() {
         return ValueUtils.getLength(getBaseValue());
     }
+
+    @Override
+    public Boolean isEqual(Object value) {
+        boolean equals = super.isEqual(value);
+        if (isFocusable()) {
+            try {
+                boolean isEnclosed = false;
+                if (getBaseValue() instanceof AbstractCollection) {
+                    isEnclosed = !(Long.valueOf(((AbstractCollection) getBaseValue()).size()).equals
+                        (getInstance().evaluate("count(" + getHistoryPointer() + "/node())")))
+                        && "{" + getInstance().getName() + "}"
+                        + getInstance().getInstanceId()
+                        + "/" + getHistoryPointer();
+                } else {
+                    List<NodeInfo> nodes = getInstance().getNodeSet(getHistoryPointer()).nodes();
+                    isEnclosed = !(nodes.size() == 1 && nodes.get(0).isSameNodeInfo(getBaseValue()));
+                }
+                if (!equals && isEnclosed) {
+                    return Boolean.FALSE;
+                }
+            } catch (EvaluationException e) {
+                log.error(getHistoryPointer() + "/node() failed", e);
+            }
+        }
+        return equals;
+    }
