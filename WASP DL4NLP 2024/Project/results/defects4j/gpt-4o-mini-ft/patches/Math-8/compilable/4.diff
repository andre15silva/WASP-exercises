diff --git a/tmp/cc73e54c-9653-4513-abab-8a6aa47d3091_buggy.java b/tmp/d4c4f569-ecb7-4739-a938-1827d9f7dc92_fixed.java
index bfa2423..7f4cb04 100644
--- a/tmp/cc73e54c-9653-4513-abab-8a6aa47d3091_buggy.java
+++ b/tmp/d4c4f569-ecb7-4739-a938-1827d9f7dc92_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        /*
+         * Allocate an array of objects using generic array creation.
+         * See http://www.cs.technion.ac.il/~jeremy/pub/jlr93.pdf for
+         * reasoning. Fixing the issue by casting to Object[] before
+         * finally casting the array to an array of T allows this code
+         * to work with Java 1.4.2, and allows for the use of as though
+         * it were Java 1.2 style syntax.
+         */
+        final @SuppressWarnings("unchecked")
+        T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
 
     }
