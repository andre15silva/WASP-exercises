diff --git a/tmp/ffc8d499-fc05-4eb9-8a3b-16d59b7215b7_buggy.java b/tmp/4091a6d2-7e32-405b-840c-09256ecadee5_fixed.java
index eea9e73..0674b34 100644
--- a/tmp/ffc8d499-fc05-4eb9-8a3b-16d59b7215b7_buggy.java
+++ b/tmp/4091a6d2-7e32-405b-840c-09256ecadee5_fixed.java
@@ -1,41 +1,44 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
 		for (int i = 0; i < csLength; i++) {
             char ch = cs.charAt(i);
             for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
+                char searchChar = searchChars[j];
+                //if (searchChar == ch) {
+				if ((searchChar < 0x10000 && searchChar == ch) || (searchChar > 0x10000 && searchChar == Character.toChars(ch)[1])) {
                         // ch is a supplementary character
                         // ch is in the Basic Multilingual Plane
                         return true;
                     }
                 }
+            }
 		}
 		return false;
 	}
