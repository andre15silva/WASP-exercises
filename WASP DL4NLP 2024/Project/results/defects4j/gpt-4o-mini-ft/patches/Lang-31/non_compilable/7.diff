diff --git a/tmp/327259c3-d52d-4134-a1cf-06a2832b0f9e_buggy.java b/tmp/f5017f1e-573f-4939-917e-358d09fee113_fixed.java
index eea9e73..314153f 100644
--- a/tmp/327259c3-d52d-4134-a1cf-06a2832b0f9e_buggy.java
+++ b/tmp/f5017f1e-573f-4939-917e-358d09fee113_fixed.java
@@ -1,41 +1,54 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
-		int searchLength = searchChars.length;
 		for (int i = 0; i < csLength; i++) {
 			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
+			for (int j = 0; j < searchChars.length; j++) {
 				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+						// ch is a supplementary character? 
+						if ( Character.isHighSurrogate(searchChars[j]) ) {
+							int chLength = Character.toChars(cs.charAt(i), cs.charAt(i + 1), new char[2], 0);
+							int start = Character.codePointCount(cs, 0, i);
+							int end = Character.codePointCount(cs, 0, i + chLength + searchLength);
+							/*
+     * Discussion on this break condition. 
+     * In an earlier draft I had erroneously written "if" without paired brackets 
+     * around the nested statements. This ended up breaking things for non-BMP characters.
+     * The if() clause is here because it is "want" rather than "must", which suggests
+     * a possible performance optimisation.
+     */
+							if ( Character.isLowSurrogate(searchChars[j]) ){
+								break;
+							}
+						}
 						return true;
 				}
 			}
 		}
 		return false;
 	}
