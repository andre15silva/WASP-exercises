diff --git a/tmp/da9dbe84-fbdb-4552-b092-f625dc0bbe35_buggy.java b/tmp/8a94a2c0-451d-41b5-954e-82eb85f299ef_fixed.java
index eea9e73..4fcd0f5 100644
--- a/tmp/da9dbe84-fbdb-4552-b092-f625dc0bbe35_buggy.java
+++ b/tmp/8a94a2c0-451d-41b5-954e-82eb85f299ef_fixed.java
@@ -1,41 +1,62 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
+		boolean found = false;
 		for (int i = 0; i < csLength; i++) {
 			char ch = cs.charAt(i);
 			for (int j = 0; j < searchLength; j++) {
 				if (searchChars[j] == ch) {
 						// ch is a supplementary character
 						// ch is in the Basic Multilingual Plane
+						// checks for supplementary chars
+						if (Character.codePointCount(cs, i, i + 1) == 1) {
+							found = true;
+						} else {
+							found = (Character.toChars(Character.codePointAt(cs, i))[0] == searchChars[j]);
+							if (found == true) {
 								return true;
 							}
 						}
+						i++;
+						// dont check end of array
+						for (; j < searchLength; j++) {
+							// checks for supplementary chars
+							if (Character.toChars(Character.codePointAt(searchChars, j))[0] == ch) {
+								found = true;
+								break;
+							}
+						}
+					}
+			}
+			if (found == true) {
+				return true;
+			}
 		}
 		return false;
 	}
