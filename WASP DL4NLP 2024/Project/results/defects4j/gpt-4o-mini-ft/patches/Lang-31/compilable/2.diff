diff --git a/tmp/a5dc1b48-f2c8-4f5a-bbd4-b00e36646697_buggy.java b/tmp/2b442a1f-7684-4238-865e-2d19f1b56837_fixed.java
index eea9e73..72baa3f 100644
--- a/tmp/a5dc1b48-f2c8-4f5a-bbd4-b00e36646697_buggy.java
+++ b/tmp/2b442a1f-7684-4238-865e-2d19f1b56837_fixed.java
@@ -1,41 +1,45 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
 		for (int i = 0; i < csLength; i++) {
 			char ch = cs.charAt(i);
 			for (int j = 0; j < searchLength; j++) {
 				if (searchChars[j] == ch) {
+					if (j >= 0x10000) {
+						return false; // Don't allow the supplementary character as a candidate char
+					} else {
 						// ch is a supplementary character
 						// ch is in the Basic Multilingual Plane
 						return true;
 					}
 				}
 			}
+		}
 		return false;
 	}
