diff --git a/tmp/add3c93d-5e1b-48b1-a606-21bb0eb95557_buggy.java b/tmp/ce2c23a1-6d7a-4ea6-9327-6bb7b265eb71_fixed.java
index b86c1ea..71630f2 100644
--- a/tmp/add3c93d-5e1b-48b1-a606-21bb0eb95557_buggy.java
+++ b/tmp/ce2c23a1-6d7a-4ea6-9327-6bb7b265eb71_fixed.java
@@ -1,38 +1,42 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
             }
             else {
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
                     if (pos < len - 2) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
                     } else {
                         pos++;
                     }
                 }
                 pos--;
             }
+//            String escaped = StringEscapeUtils.escapeXml(input.toString(pos, input.length()));
+//            if (!escaped.equals(input.toString())) {
+//                throw new IllegalStateException("Input contains control or out-of-band characters");
+//            }
             pos++;
         }
     }
