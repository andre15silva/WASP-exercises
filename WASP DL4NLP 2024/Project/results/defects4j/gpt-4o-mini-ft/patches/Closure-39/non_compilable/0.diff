diff --git a/tmp/6e8bcb4b-dacc-4fe1-827d-80aedd2f833c_buggy.java b/tmp/b53528c0-d423-433f-9c7b-038e908e2b61_fixed.java
index e4d90e7..1de6c82 100644
--- a/tmp/6e8bcb4b-dacc-4fe1-827d-80aedd2f833c_buggy.java
+++ b/tmp/b53528c0-d423-433f-9c7b-038e908e2b61_fixed.java
@@ -1,45 +1,84 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        JSType propertyType = getPropertyType(property);
+        if (!propertyType.toAnnotationString().equals(propertyType.toString()) &&
+            !propertyType.toString().equals(JSTYPE_OBJECT.toAnnotationString())) {
+          sb.append("/*");
+          sb.append(propertyType);
+          sb.append("*/");
+        }
+        sb.append(propertyType.toAnnotationString());
+
+        ++i;
+        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+          sb.append(", ...");
+          break;
+        }
+      }
+
+      sb.append("}");
+
+      prettyPrint = false;
+      return sb.toString();
+    } else if (prettyPrint) {
+      StringBuilder sb = new StringBuilder();
+      sb.append("{");
+
+      int i = 0;
+      for (String property : getOwnPropertyNames()) {
+        if (i > 0) {
+          sb.append(", ");
+        }
+
+        sb.append(property);
+        sb.append(": ");
+        JSType propertyType = getPropertyType(property);
+        if (!propertyType.toAnnotationString().equals(propertyType.toString()) &&
+            !propertyType.toString().equals(JSTYPE_OBJECT.toAnnotationString())) {
+          sb.append("/*");
+          sb.append(propertyType);
+          sb.append("*/");
+        }
+        sb.append(propertyType.toAnnotationString());
 
         ++i;
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
