diff --git a/tmp/a78dd45a-9685-4320-b4d2-a6eed5000fde_buggy.java b/tmp/2e72490b-085e-4772-a294-178ed4f58d48_fixed.java
index e4d90e7..e375e5d 100644
--- a/tmp/a78dd45a-9685-4320-b4d2-a6eed5000fde_buggy.java
+++ b/tmp/2e72490b-085e-4772-a294-178ed4f58d48_fixed.java
@@ -1,45 +1,53 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
+      // When pretty printing a record, the manual pretty printing marshaller
+      // has a special record mode that does pretty-printing for anonymous
+      // object types, so we'll just set prettyPrint = true and rely on
+      // the one we already have.
+      if (isRecordType()) {
+        prettyPrint = true;
+      }
+
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
+           current != null && !current.isNativeObjectType() && !current.isFunctionType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
         sb.append(getPropertyType(property).toString());
 
         ++i;
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
