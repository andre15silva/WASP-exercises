diff --git a/tmp/e6406b78-4845-4ebc-a863-1b8947c0af81_buggy.java b/tmp/d2c7c519-0903-4165-8901-2c9fff1737e3_fixed.java
index 227a4ef..3f443da 100644
--- a/tmp/e6406b78-4845-4ebc-a863-1b8947c0af81_buggy.java
+++ b/tmp/d2c7c519-0903-4165-8901-2c9fff1737e3_fixed.java
@@ -1,48 +1,39 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        text = rtrim(text);
         int pos = findWrapPos(text, width, 0);
-
         if (pos == -1)
         {
-            sb.append(rtrim(text));
-
+            sb.append(text);
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
     		
         while (true)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            String padding = createPadding(nextLineTabStop);
+            text = padding + rtrim(text.substring(pos).trim());
             pos = findWrapPos(text, width, 0);
-
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
-            } else
-            if (pos == lastPos)
+            } else if (pos == 0)
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            	sb.append(text);
+            	return sb;
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
