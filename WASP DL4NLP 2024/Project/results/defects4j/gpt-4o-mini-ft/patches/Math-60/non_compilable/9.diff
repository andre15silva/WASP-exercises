diff --git a/tmp/7e0a9b82-2106-4e87-a5a5-0a665814ed9b_buggy.java b/tmp/d5bcec11-ac49-4d6e-90a5-27b175f47b8f_fixed.java
index 3127f85..0273117 100644
--- a/tmp/7e0a9b82-2106-4e87-a5a5-0a665814ed9b_buggy.java
+++ b/tmp/d5bcec11-ac49-4d6e-90a5-27b175f47b8f_fixed.java
@@ -1,24 +1,25 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+        if (dev < 0) {
+            final double r = cumLowerTail(dev);
+            if (r < 1e-8)
+                return r; // avoid top coding due to convergence issues (MATH-192)
+            else
+                return 0; // top code to return
         } else {
-                throw ex;
-            }
+            final double r = cumUpperTail(dev);
+            if (r > 1 - 1e-8)
+                return r; // avoid top coding due to convergence issues (MATH-192)
+            else
+                return 1; // top code to return
         }
     }
