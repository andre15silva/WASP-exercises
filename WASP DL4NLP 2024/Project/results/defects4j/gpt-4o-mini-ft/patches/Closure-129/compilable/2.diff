diff --git a/tmp/46b03fb3-197f-4f86-ae8c-160a6502fa62_buggy.java b/tmp/588316a3-1d21-4587-b844-7fa4fa988bcd_fixed.java
index e8705ac..185f8a0 100644
--- a/tmp/46b03fb3-197f-4f86-ae8c-160a6502fa62_buggy.java
+++ b/tmp/588316a3-1d21-4587-b844-7fa4fa988bcd_fixed.java
@@ -1,24 +1,29 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
       // ignore cast nodes.
 
+      // if the call is to a dot node, then it's not a free call
+      // (while this doesn't always hold, it's probably better
+      // to play it safe and err on the side of not optimizing code
+      // seeing as they're rare, rather than erroneously optimizing
+      // code and causing unintended side effects).
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
