diff --git a/tmp/9571cc0a-1d69-45c0-af5a-6167faa2b81c_buggy.java b/tmp/3ba55497-5cfd-45eb-80aa-a7f26ae2ddbf_fixed.java
index e8705ac..ce34307 100644
--- a/tmp/9571cc0a-1d69-45c0-af5a-6167faa2b81c_buggy.java
+++ b/tmp/3ba55497-5cfd-45eb-80aa-a7f26ae2ddbf_fixed.java
@@ -1,24 +1,37 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
+      Node grandChild = first.getFirstChild();
 
       // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+      if (!(NodeUtil.isGet(first) || NodeUtil.isCast(first))) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
+      } else if (NodeUtil.isGet(first) &&
+                 grandChild != null &&
+                 grandChild.isName()) {
+        String name = grandChild.getString();
+        if ("eval".equals(name) || "execScript".equals(name)) {
+          Node child = grandChild;
+          do {
+            child = child.getNext();
+          } while (child != null && !NodeUtil.isGet(child));
+          if (child != null) {
+            child.putBooleanProp(Node.DIRECT_EVAL, true);
+          }
+        }
       }
     }
