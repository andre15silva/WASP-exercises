diff --git a/tmp/2a0138cf-96c1-4f83-bebe-459a6d55824a_buggy.java b/tmp/909ccaa9-6095-4188-a33b-5308619e9162_fixed.java
index da3f951..c594dc7 100644
--- a/tmp/2a0138cf-96c1-4f83-bebe-459a6d55824a_buggy.java
+++ b/tmp/909ccaa9-6095-4188-a33b-5308619e9162_fixed.java
@@ -1,174 +1,204 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }  
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear 
             // to be in specification of class. OS X Java parses it to 
             // a wrong value.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
             return createInteger(str);
         }   
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = str.indexOf('.');
         int expPos = str.indexOf('e') + str.indexOf('E') + 1;
 
         if (decPos > -1) {
 
             if (expPos > -1) {
                 if (expPos < decPos) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
         } else {
             if (expPos > -1) {
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
-            String numeric = str.substring(0, str.length() - 1);
-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
-            switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
-                        try {
-                            return createLong(numeric);
-                        } catch (NumberFormatException nfe) {
-                            //Too big for a long
+            int length = str.length() - 2;
+            if (exp != null) {
+                length -= exp.length();
             }
-                        return createBigInteger(numeric);
-
+            if (dec != null) {
+                length -= dec.length();
             }
-                    throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
-                    try {
-                        Float f = NumberUtils.createFloat(numeric);
-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
-                            return f;
-                        }
-
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                case 'd' :
-                case 'D' :
-                    try {
-                        Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
-                            return d;
+            sumIdx = 0;
+            numToken = str;
+            numBytes = null;
+            listIndex = 0;
+            listIdx = 0;
+            markStartIdx = 0;
+            markEndIdx = str.length() - 1;
+            while ((sumIdx > 0) && (sumIdx < length)) {
+                if (Character.isDigit(numToken.charAt(sumIdx)) || (numToken.charAt(sumIdx) == 'e') || (numToken.charAt(sumIdx) == 'E')) { sumIdx++; }
+                else if (numToken.charAt(sumIdx) == 'P') { sumIdx++; }
+                else if((numToken.charAt(sumIdx) == '-')) { sumIdx++; }
+                else if ((numToken.charAt(sumIdx) == '+')) { sumIdx++; }
+                else { numToken = str.substring(sumIdx); length = numToken.length(); }
             }
-                    } catch (NumberFormatException nfe) {
-                        // ignore the bad number
+            //All are legal numbers, so can be treated as part of a number
+            length = numToken.length();
+            if (mant.indexOf('.') > -1) {
+                mant = str.substring(0, expPos);
+                dec = null;
+                exp = null;
+            } else {
+                if (expPos > -1) {
+                    exp = str.substring(expPos);
+                    dec = null;
+                    mant = str.substring();
+                } else {
+                    mant = str;
+                    dec = null;
+                    exp = null;
                 }
+            }
+            //Numeric of range bigger than long
+            if (length < 64) {
+                //There's a potential of wrapping around
                 try {
-                        return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) {
-                        // ignore the bad number
-                    }
-                    //$FALL-THROUGH$
-                default :
-                    throw new NumberFormatException(str + " is not a valid number.");
-
+                    if (str.indexOf('.')) {
+                        try { return createFloat(str); } catch (NumberFormatException nfe) { numToken = str; numBytes = null; }
+                    }
+                    else { try { return createInteger(str); } catch (NumberFormatException nfe) { return createLong(str); } }
+                } catch (NumberFormatException nfe) { }
+            }
+            sumIdx = 0;
+            numToken = str;
+            numBytes = null;
+            listIdx = 0;
+            listIndex = 0;
+            markStartIdx = 0;
+            markEndIdx = str.length() - 1;
+            while ((sumIdx > 0) && (sumIdx < length)) {
+                if (Character.isDigit(numToken.charAt(sumIdx)) || (numToken.charAt(sumIdx) == 'e') || (numToken.charAt(sumIdx) == 'E')) { sumIdx++; }
+                else if (numToken.charAt(sumIdx) == 'P') { sumIdx++; }
+                else if((numToken.charAt(sumIdx) == '-')) { sumIdx++; }
+                else if ((numToken.charAt(sumIdx) == '+')) { sumIdx++; }
+                else { numToken = str.substring(sumIdx); length = numToken.length(); }
+            }
+            //Last character extends range
+            if (length == 64) {
+                if (numToken.indexOf('.') == -1) {
+                    if ((mant == null) && (dec == null) && (memNum.indexOf((char)2) >= 0)) {
+                        //Assume it's valid, so withdraw
+                        try { return createFloat(str); } catch (NumberFormatException nfe) { numToken = str; numBytes = null; }
+                    }
+                    else { try { return createInteger(str); } }
+                }
+            }
+            if (listIdx < 0) {
+                inOrder = inputList;
+                return createBigInteger(str);
+            }
+            else { 
+                inOrder = inputList.sum();
+                if (str.equals(inputString)) return null;
+                else return null;
             }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
                 //Must be an int,long,bigint
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     return createLong(str);
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 return createBigInteger(str);
 
             } else {
                 //Must be a float,double,BigDec
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
                 try {
                     Double d = createDouble(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
                     // ignore the bad number
                 }
 
                 return createBigDecimal(str);
 
             }
         }
     }
