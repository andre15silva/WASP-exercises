diff --git a/tmp/ea2dc7a1-4b7b-40d0-a43d-337848473482_buggy.java b/tmp/ebc34bf2-5032-4670-8b97-ddc2b5ad9066_fixed.java
index d57736b..af3c52f 100644
--- a/tmp/ea2dc7a1-4b7b-40d0-a43d-337848473482_buggy.java
+++ b/tmp/ebc34bf2-5032-4670-8b97-ddc2b5ad9066_fixed.java
@@ -1,39 +1,48 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
+          if (objType.hasProperty(prop)) {
             JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
+            JSType objPropType = objType.getPropertyType(prop);
+            if (objPropType == null || !objPropType.isSubtype(propType)) {
               JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
+              if (objPropType == null) {
                 typeToInfer =
                     getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              } else {
+                typeToInfer =
+                    objPropType.getLeastSupertype(propType);
               }
-            objType.defineInferredProperty(prop, typeToInfer, null);
+              objType.unrestrainedDefineInferredProperty(prop, typeToInfer, null);
+            }
+          } else {
+            JSType propType = constraintObj.getPropertyType(prop);
+            objType.defineInferredProperty(prop, propType, null);
           }
         }
       }
     }
   }
