diff --git a/tmp/ef1d3009-4f98-4329-a873-7eb03ca56cfd_buggy.java b/tmp/6004e11d-d2e8-4b19-ab2e-4933055c5e44_fixed.java
index d57736b..3b22d1c 100644
--- a/tmp/ef1d3009-4f98-4329-a873-7eb03ca56cfd_buggy.java
+++ b/tmp/6004e11d-d2e8-4b19-ab2e-4933055c5e44_fixed.java
@@ -1,39 +1,59 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
+              JSModuleElement element =
+                  objType.getTypeOfThis().getRelativeToRoot();
+              if (objType.getType().isUnionType() &&
+                  !propType.matchesObjectIntrospection() &&
+                  propType.matchesObjectIntrospectionUnderAssociativeArray()) {
+                // Possibly it is not a true Union type.
+                // Types inside a union may legitimately use
+                // an associative array type.
+                // Types declared in cog groups with the associative array.
+                // and to infer them all, we create a true Union.
+                // TODO(nicksantos): We need to clearly define the boundaries
+                // between an associative array and a formal object.
+                JSType unionType = getNativeType(VOID_TYPE)
+                    .getLeastSupertype(typeToInfer);
                 typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+                    new JSTypeRegistry(n, "should be union")
+                        .createUnionType(
+            parent,
+                            new NamedTypeRegistry("{prop:some type}"),
+            javadoc, "$",lf, qjstring_allocNoMeta, jpt, group);
+
                 objType.defineInferredProperty(prop, typeToInfer, null);
               }
             }
           }
         }
       }
+    }
+  }
