diff --git a/tmp/3d4b16ad-b8e2-4284-8ee8-91bb7728b235_buggy.java b/tmp/b9625d0b-ca04-408c-96d8-61279b48ca67_fixed.java
index d57736b..fa08e7b 100644
--- a/tmp/3d4b16ad-b8e2-4284-8ee8-91bb7728b235_buggy.java
+++ b/tmp/b9625d0b-ca04-408c-96d8-61279b48ca67_fixed.java
@@ -1,39 +1,52 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+      ObjectType objType =
+          ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
+          JSType inferredType = propagateTypeForInferredProperty(
+              propType, objType);
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            objType.defineInferredProperty(prop, inferredType, null);
           }
-            objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
+
+  /**
+   * Returns the least supertype of <code>type</code> and the type that would
+   * have been inferred if it had been used instead of type.
+   */
+  private JSType propagateTypeForInferredProperty(JSType type, ObjectType objType) {
+    if (objType.hasProperty(type.toString())) {
+      // Known property, just go with the known type.
+      return objType.getPropertyType(type.toString());
+    } else {
+      // A new property; widen the type since we're not supposed to a
+      // type that has undefined in it
+      return getNativeType(VOID_TYPE).getLeastSupertype(type);
+    }
   }
