diff --git a/tmp/d39a1214-e18e-4a84-9789-f1a10eb10c68_buggy.java b/tmp/cded3590-04b4-42a8-92cf-40f72948e218_fixed.java
index 4b163f6..852ad20 100644
--- a/tmp/d39a1214-e18e-4a84-9789-f1a10eb10c68_buggy.java
+++ b/tmp/cded3590-04b4-42a8-92cf-40f72948e218_fixed.java
@@ -1,28 +1,43 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
                 break;
             }
             numToSkip -= skipped;
         }
         
+        // at the moment of this writing, the implementation of skip
+        // on the StreamWrapper was returning 0, in case of FilterInputStream
+        // on the top of some InputStream, this implementation would
+        // call read() one more time than desired.  By changing the
+        // break condition to <=0 we prevent this to happen
+        /*mpl
+        while (numToSkip > 0) {
+            long skipped = input.skip(numToSkip);
+            if (skipped <= 0) {
+                break;
+            }
+            numToSkip -= skipped;
+        }
+        */
+            
         return available - numToSkip;
     }
