diff --git a/tmp/ef735eda-0141-4f1c-b817-a6da6b2e1995_buggy.java b/tmp/bb2d3a03-ae58-4317-a832-8746ed2cacb8_fixed.java
index b2db1d6..793acec 100644
--- a/tmp/ef735eda-0141-4f1c-b817-a6da6b2e1995_buggy.java
+++ b/tmp/bb2d3a03-ae58-4317-a832-8746ed2cacb8_fixed.java
@@ -1,29 +1,31 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
+            // [Issue#515]
+            TargetType targetType = (isMixIn) ? TargetType.MIXIN : TargetType.BEHAVIOR;
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
-                AnnotatedMethod am = methods.find(m);
+                AnnotatedMethod am = mixIns.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
-                    _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
+                    if (targetType.isBehavior()) {
+                        _addHandlerBehaviour(m, am);
+                    }
+                    // well, or, as per [Issue#515], multi-level merge regardless...
+                    addMix(m, TargetType.MIXIN, targetType, mixIns);
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                    // Well, or, as per [Issue#515], multi-level merge... for mixins...
+                    addMix(m, TargetType.BEHAVIOR, targetType, methods);
                 }
             }
         }
     }
