diff --git a/tmp/9d6329d3-0e93-4c17-9a79-d0c91521de79_buggy.java b/tmp/1495cf68-be0c-4ff0-8e1d-c973f2453aac_fixed.java
index 800e6e1..9349ab8 100644
--- a/tmp/9d6329d3-0e93-4c17-9a79-d0c91521de79_buggy.java
+++ b/tmp/1495cf68-be0c-4ff0-8e1d-c973f2453aac_fixed.java
@@ -1,32 +1,44 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
+
+      if (n.isGetProp() || n.isGetElem() || n.isName()) {
+        String key = n.getQualifiedName();
+        if (key != null) {
+          var varNode = lastLocalScope.getVar(key) == null
+              ? lastLocalScope.getVar(key)
+              : lastLocalScope.getVar(key);
+          if (varNode != null) {
+            varSymbolTableCreator(varNode, "", key);
+          }
+        }
+      }
     }
