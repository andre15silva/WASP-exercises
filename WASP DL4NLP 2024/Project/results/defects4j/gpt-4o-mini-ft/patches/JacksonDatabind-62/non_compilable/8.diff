diff --git a/tmp/bbe3097c-c4ef-4d0d-8639-22cbcb5c5a03_buggy.java b/tmp/e9d94b68-b0b1-4b23-b4b3-ba8fffea4b2c_fixed.java
index 6c9090f..67eefd8 100644
--- a/tmp/bbe3097c-c4ef-4d0d-8639-22cbcb5c5a03_buggy.java
+++ b/tmp/e9d94b68-b0b1-4b23-b4b3-ba8fffea4b2c_fixed.java
@@ -1,45 +1,69 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
+
+    /* 17-Apr-2017, tatu: [databind#1487] Need special handling for unmodifiable collection types, since they don't have a default constructor
+     *   Will need to check if we still have similar issue in other cases...
+     */
+    @Override
+    protected JavaType _constructAnotherType(JavaType type) {
+        Class<?> raw = type.getRawClass();
+        if (raw == Collections.unmodifiableSet(Collections.emptySet()).getClass()) {
+            // NOTE: type info (probably type parameter) is lost at this point
+            // [databind#739]: perhaps fix this in the future, or document this
+            return getCollectionType(Collections.modifiableSet(Collections.emptySet()));
+        }
+        if (raw == Collections.unmodifiableList(Collections.emptyList()).getClass()) {
+            // NOTE: type info (probably type parameter) is lost at this point
+            // [databind#739]: perhaps fix this in the future, or document this
+            return getCollectionType(Collections.modifiableList(Collections.emptyList()));
+        }
+        if (raw == Collections.unmodifiableCollection(Collections.emptyList()).getClass()) {
+            // NOTE: type info (probably type parameter) is lost at this point
+            // [databind#739]: perhaps fix this in the future, or document this
+            return getCollectionType(Collections.modifiableCollection(Collections.emptyList()));
+        }
+        return super._constructAnotherType(type);
+    }
