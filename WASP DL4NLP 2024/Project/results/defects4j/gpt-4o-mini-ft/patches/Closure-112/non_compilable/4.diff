diff --git a/tmp/494aefd0-f7a6-412d-bbc9-f918fcc92ed8_buggy.java b/tmp/aa6ed1f1-1cf7-4040-bf3e-51ef7e6abe37_fixed.java
index 63641d0..9a0b9f6 100644
--- a/tmp/494aefd0-f7a6-412d-bbc9-f918fcc92ed8_buggy.java
+++ b/tmp/aa6ed1f1-1cf7-4040-bf3e-51ef7e6abe37_fixed.java
@@ -1,33 +1,44 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    Set<TemplateType> templatesRecall =
+        fnType.getTemplateTypeMap().getTemplateKeys();
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // If there are no templates or no template type parameters, we can
+    // stop here, since we can't have any type references to any
+    // templated classes, which means there's no point (from a type
+    // check perspective) in using the function's inferred type.
+    if (templatesRecall.isEmpty() ||
+        inferred.size() < templatesRecall.size()) {
+      return false;
+    }
+
+    // Otherwise we put it back on the output that we create. If we
+    // couldn't find a replacement, we replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
