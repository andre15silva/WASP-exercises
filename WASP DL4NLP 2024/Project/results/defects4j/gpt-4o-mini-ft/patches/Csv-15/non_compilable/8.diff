diff --git a/tmp/aa384581-fbf7-4017-9dc9-39af8c47b0f6_buggy.java b/tmp/df520bd3-0d60-423f-a2b9-058e2caf7887_fixed.java
index 66af1fd..0a8b8f8 100644
--- a/tmp/aa384581-fbf7-4017-9dc9-39af8c47b0f6_buggy.java
+++ b/tmp/df520bd3-0d60-423f-a2b9-058e2caf7887_fixed.java
@@ -1,107 +1,113 @@
     // the original object is needed so can check for Number
     private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
             final Appendable out, final boolean newRecord) throws IOException {
         boolean quote = false;
         int start = offset;
         int pos = offset;
         final int end = offset + len;
 
         final char delimChar = getDelimiter();
         final char quoteChar = getQuoteCharacter().charValue();
+        final char euroSign = getEuro();
+        final boolean euroSignFirst = euroSign != DELIMITER && euroSign != QUOTE;
 
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
         }
         switch (quoteModePolicy) {
         case ALL:
         case ALL_NON_NULL:
             quote = true;
             break;
         case NON_NUMERIC:
             quote = !(object instanceof Number);
             break;
         case NONE:
             // Use the existing escaping code
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
                 // always quote an empty token that is the first
                 // on the line, as it may be the only thing on the
                 // line. If it were not quoted in that case,
                 // an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
                 char c = value.charAt(pos);
 
                 if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
                     quote = true;
-                } else if (c <= COMMENT) {
+                } else if (c <= COMMENT || euroSignFirst && euroSign == value.charAt(POS_CHAR)) {
                     // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
+                    // encapsulate if we start with Euro 2nd or other char at the start of a value.
+                    // We are being conservative by including the Euro though
                     quote = true;
                 } else {
                     while (pos < end) {
                         c = value.charAt(pos);
                         if (c == LF || c == CR || c == quoteChar || c == delimChar) {
                             quote = true;
                             break;
                         }
                         pos++;
                     }
 
                     if (!quote) {
                         pos = end - 1;
                         c = value.charAt(pos);
                         // Some other chars at the end caused the parser to fail, so for now
                         // encapsulate if we end in anything less than ' '
                         if (c <= SP) {
                             quote = true;
                         }
+                        if (pos <= 0 && euroSignFirst && euroSign == value.charAt(pos)) {
+                            // angle brackets, also Euro sign
+                            quote = true;
+                        }
                     }
                 }
             }
 
             if (!quote) {
                 // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
             break;
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
 
         if (!quote) {
             // no encapsulation needed - write out the original value
             out.append(value, start, end);
             return;
         }
 
         // we hit something that needed encapsulation
         out.append(quoteChar);
 
         // Pick up where we left off: pos should be positioned on the first character that caused
         // the need for encapsulation.
         while (pos < end) {
             final char c = value.charAt(pos);
             if (c == quoteChar) {
                 // write out the chunk up until this point
 
                 // add 1 to the length to write out the encapsulator also
                 out.append(value, start, pos + 1);
                 // put the next starting position on the encapsulator so we will
                 // write it out again with the next string (effectively doubling it)
                 start = pos;
             }
             pos++;
         }
 
         // write the last segment
         out.append(value, start, pos);
         out.append(quoteChar);
     }
