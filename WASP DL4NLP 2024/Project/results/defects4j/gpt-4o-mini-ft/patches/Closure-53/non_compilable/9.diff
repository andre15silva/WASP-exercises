diff --git a/tmp/060378ca-a5a8-4755-8d36-96dd09d4ce63_buggy.java b/tmp/3f18b972-e7ab-42ff-b671-a1ddac23a40d_fixed.java
index 41ea16c..605619a 100644
--- a/tmp/060378ca-a5a8-4755-8d36-96dd09d4ce63_buggy.java
+++ b/tmp/3f18b972-e7ab-42ff-b671-a1ddac23a40d_fixed.java
@@ -1,63 +1,75 @@
     /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
+     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c.
      * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
+     * true, as would the x = {...} expression, unless x is local to
+     * a function or a lazy block.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
       }
 
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
 
       Node replacement;
       // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+      // expr statement evaluates to true in case it matters. Add it back
+      // in if the assignment is not allowed to be empty.
+      //
+      // NOTE: This only activates if a variable is defined in the same
+      // function where the assignment occurs, with this guesstimate of
+      // usefulness:
+      //  - Similarly to how google's code style guide suggests scoping
+      //    functions like this to only the local function context unless
+      //    you know that it is safe to also expose it to the enclosing
+      //    scope, there may be other reasons. For example, closure
+      //    compiler-level name binding ensures a single memory location,
+      //    meaning that the parentheses entity won't cause a cache flush.
+      //
+      //  - Compilation of the entire lexical scope into the compiled scope
+      //    may be impacted in ways unclean enough to cause stack overflow
+      //    errors due to recursion in the incorrect context.
+      //
+      // TODO(user): Better source information.
+      if (varmap.size() > 0 && ref.getParent() instanceof FunctionNode) {
+        // Local function, context can be safely exposed.
+        replacement = new Node(Token.COMMA);
         nodes.add(new Node(Token.TRUE));
-
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
+        for (i = 1; i < nodes.size(); i++) {
+          replacement.addChildAfter(nodes.get(i), replacement);
+        }
+      } else {
         replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
       }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
-      Node replace = ref.getParent();
+      for (Node n : nodes) {
+        replacement.addChildBefore(replace.cloneTree()).addChildToBack(n);
+      }
       replacement.copyInformationFromForTree(replace);
-
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
       } else {
         replace.getParent().replaceChild(replace, replacement);
       }
     }
