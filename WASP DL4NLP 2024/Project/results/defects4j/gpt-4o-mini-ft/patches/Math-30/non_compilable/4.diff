diff --git a/tmp/8101df31-4fd7-4ded-873d-df3528bdd2a5_buggy.java b/tmp/95c3db84-8599-4df4-a026-d0b3120b5a9d_fixed.java
index 3c69e10..70b11b2 100644
--- a/tmp/8101df31-4fd7-4ded-873d-df3528bdd2a5_buggy.java
+++ b/tmp/95c3db84-8599-4df4-a026-d0b3120b5a9d_fixed.java
@@ -1,27 +1,38 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
+     * @param largeSampleAdjustment if <code>true</code>, applies a continuity correction to z-statistic
+     * based on N=5N1.5
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
-                                             final int n2)
+                                             final int n2,
+                                             final boolean largeSampleAdjustment)
         throws ConvergenceException, MaxCountExceededException {
 
         final int n1n2prod = n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
         final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+        final double z = ((Umin - EU) / FastMath.sqrt(VarU));
+        double zScore = z;
+        if(largeSampleAdjustment)
+        {
+            int n = Math.max(n1, n2);
+            zScore += ((z * z)/(2*n)) * (Math.abs(n1-n2))/(Math.max(n1,n2) + 1);
+            // Adjust p-value for Mann-Whitney test, note that
+            // 2 tail is by default, no adjustment needed.
+        }
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        return 2 * standardNormal.cumulativeProbability(zScore);
     }
