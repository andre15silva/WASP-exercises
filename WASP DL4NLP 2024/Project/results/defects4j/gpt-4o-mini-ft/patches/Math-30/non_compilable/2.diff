diff --git a/tmp/9af0999d-a265-486d-85cb-c72436e33555_buggy.java b/tmp/c8f00810-6969-49f0-bc24-2ac323f916a0_fixed.java
index 3c69e10..e848ed6 100644
--- a/tmp/9af0999d-a265-486d-85cb-c72436e33555_buggy.java
+++ b/tmp/c8f00810-6969-49f0-bc24-2ac323f916a0_fixed.java
@@ -1,27 +1,28 @@
     /**
      * @param Umin smallest Mann-Whitney U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
      * @return two-sided asymptotic p-value
      * @throws ConvergenceException if the p-value can not be computed
      * due to a convergence error
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
         final int n1n2prod = n1 * n2;
-
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
-
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
-
+        double approxPValue;
+        if (n1n2prod <= 1_500_000) {
+            // Instead of ignoring any non-finite number returned from NormalDistribution.cumulativeProbability
+            // I will simply throw an error
             final NormalDistribution standardNormal = new NormalDistribution(0, 1);
-
-        return 2 * standardNormal.cumulativeProbability(z);
+            double z = (Umin - n1n2prod / 2.0) / FastMath.sqrt((n1n2prod * (n1 + n2 + 1)) / 12.0);
+            approxPValue = standardNormal.cumulativeProbability(z);
+        } else {
+            approxPValue = MathUtil.defaultProbablityError();
+        }
+        return 2 * approxPValue;
     }
