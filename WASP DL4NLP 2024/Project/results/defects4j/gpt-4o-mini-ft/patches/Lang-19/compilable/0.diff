diff --git a/tmp/0df0efa3-de27-436e-a13f-67be8c567f20_buggy.java b/tmp/91d685ab-f31f-4891-b31f-4dfbd03911bf_fixed.java
index 72a422c..e558529 100644
--- a/tmp/0df0efa3-de27-436e-a13f-67be8c567f20_buggy.java
+++ b/tmp/91d685ab-f31f-4891-b31f-4dfbd03911bf_fixed.java
@@ -1,51 +1,59 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            boolean mustFinishEntity = false;
             boolean isHex = false;
+            char firstChar = 0;
 
-            char firstChar = input.charAt(start);
+            if(start < seqEnd) {
+                firstChar = input.charAt(start);
+                // Check there's more than just an x after the &#
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
+                }
             }
 
             int end = start;
+            if(end < seqEnd) {
                 // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
+                while(input.charAt(end) != ';' && end < seqEnd && mustFinishEntity)
                 {
                     end++;
                 }
+            } else
+            {
+                mustFinishEntity = false;
+            }
 
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
                 return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
 
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
