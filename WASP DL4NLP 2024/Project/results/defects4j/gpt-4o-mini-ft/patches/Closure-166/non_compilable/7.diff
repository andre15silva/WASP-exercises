diff --git a/tmp/a0dddc32-f337-46a9-80a4-0465d0ed465c_buggy.java b/tmp/e58f2a05-8924-4562-aa05-876d284ea1d1_fixed.java
index 5f96616..68dcef9 100644
--- a/tmp/a0dddc32-f337-46a9-80a4-0465d0ed465c_buggy.java
+++ b/tmp/e58f2a05-8924-4562-aa05-876d284ea1d1_fixed.java
@@ -1,20 +1,24 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // getting the property map, and using the information to construct
+    // a new object type whose property map used those properties as
+    // constraints to be met.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+      JSType matchType = matchRecordTypeConstraint(constraint.toObjectType());
+      if (!matchType.isEmptyType()) {
+        recordType = matchType;
+      }
     }
   }
