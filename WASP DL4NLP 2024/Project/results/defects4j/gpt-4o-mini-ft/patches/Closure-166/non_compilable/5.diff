diff --git a/tmp/77b154c1-29fd-4958-800e-2ac1941233ff_buggy.java b/tmp/36766b32-9452-4230-ab72-4fd419609e1c_fixed.java
index 5f96616..ae2035e 100644
--- a/tmp/77b154c1-29fd-4958-800e-2ac1941233ff_buggy.java
+++ b/tmp/36766b32-9452-4230-ab72-4fd419609e1c_fixed.java
@@ -1,20 +1,35 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
+    JSDocInfo docInfo = getJSDocInfo();
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    if (isFunctionType() && constraint.isRecordType() && docInfo != null
+        && docInfo.getType().isObjectType()) {
+      ObjectType constraintType = constraint.toObjectType();
+      matchRecordTypeConstraint(constraintType);
+      if (constraintType.getPropertyCount() == 0) {
+        // If the constraint object had a record constraint but no
+        // properties in its real type, we need to check whether
+        // there are in fact properties in the constrained type itself.
+        ObjectType constrainedType = getType().toObjectType();
+        JSDocInfo constrainedDocInfo = constrainedType.getJSDocInfo();
+        if (constrainedDocInfo != null) {
+          ObjectType inferredConstraintType =
+              constrainedDocInfo.getType();
+          matchRecordTypeConstraint(inferredConstraintType);
+        }
+      }
     }
   }
