diff --git a/tmp/d4a96baa-86d4-48bf-a219-217cdabae9c0_buggy.java b/tmp/d5113bb8-9863-4647-87d9-969b7c508d88_fixed.java
index 25ca093..342bff6 100644
--- a/tmp/d4a96baa-86d4-48bf-a219-217cdabae9c0_buggy.java
+++ b/tmp/d5113bb8-9863-4647-87d9-969b7c508d88_fixed.java
@@ -1,52 +1,80 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
+        // try and detect BOM
+        if (byteData.remaining() >= 4) {
+            int bom = (byteData.get() & 0xff) << 24;
+            byteData.mark();
+            bom |= (byteData.get() & 0xff) << 16;
+            bom |= (byteData.get() & 0xff) << 8;
+            bom |= (byteData.get() & 0xff);
+            byteData.reset();
+            switch (bom) {
+                case UTF_16BE:
+                case UTF_16LE:
+                case UTF_32BE:
+                case UTF_32LE:
+                    // these can be found in the byte data itself, skip content type detection
+                    return parseByteData(bom, charsetName, baseUri, parser);
+            }
+        } else if (byteData.remaining() > 2 && byteData.remaining() < 4) { // may just be a header problem
+            int possibleBOM = (byteData.get() & 0xff) << 16 | (byteData.get() & 0xff) << 8 | (byteData.get() & 0xff);
+            byteData.reset();
+            switch (possibleBOM) {
+                case UTF_16BE:
+                case UTF_16LE:
+                case UTF_32BE:
+                case UTF_32LE:
+                    return parseByteData(possibleBOM, charsetName, baseUri, parser);
+            }
+        }
+
         // look for BOM - overrides any other header or input
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
             charsetName = defaultCharset;
             doc = null;
         }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
