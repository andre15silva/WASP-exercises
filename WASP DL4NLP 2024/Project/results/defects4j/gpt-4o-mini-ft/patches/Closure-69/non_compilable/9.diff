diff --git a/tmp/1b6d3461-579e-42fc-8243-33d036d8cb42_buggy.java b/tmp/773045bd-af17-4690-aea4-bfb7daa84927_fixed.java
index bf9c086..8c79bdd 100644
--- a/tmp/1b6d3461-579e-42fc-8243-33d036d8cb42_buggy.java
+++ b/tmp/773045bd-af17-4690-aea4-bfb7daa84927_fixed.java
@@ -1,54 +1,67 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
       // Functions with explcit 'this' types must be called in a GETPROP
       // or GETELEM.
 
+      if (functionType.isConstructor()
+          || functionType.hasInstanceType()
+          || (functionType.getTypeOfThis().isUnknownType() && isExtern)) {
+        // Don't check re-execution safety for constructors, which are not
+        // repeatedly executed in any case.
+        //  TODO: Consider making the type checker a user-defined type of function.
+        //  Register the function as "global" and as "user-defined" like native stuff
+        //  if one of the prevs. true, nonetheless issue an error.
+        //  Probably prove incorrect by checking the function's great grandfather.
+      } else {
+        report(t, n, INVOKE_WITHOUT_CONTEXT, childType.toString());
+      }
+
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
