diff --git a/tmp/1f9ac223-3926-47f0-b63b-194296e4652b_buggy.java b/tmp/2134f1b8-10bb-4d43-a57f-b12a7be4c5c3_fixed.java
index c9da1b7..720b19a 100644
--- a/tmp/1f9ac223-3926-47f0-b63b-194296e4652b_buggy.java
+++ b/tmp/2134f1b8-10bb-4d43-a57f-b12a7be4c5c3_fixed.java
@@ -1,33 +1,46 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
             }
 
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
+                if ((oldOne instanceof Constructor) && ((Constructor)oldOne).getDeclaringClass().getName().equals(newOne.getDeclaringClass().getName())
+                     && !isSerializableFactoryMethod(oldOne))
+                    return;
+
+                // [databind#928]: issue with treatment of StringBuilder as conflicting
+                // - note: short-circuiting reason is that this pattern also matched
+                //     for Executable, since they are both `Constructor`s in JDK 8 (for now)
+                //     also applies to StringBuffer constructor; more likely to be a case
+                //     for StringBuilder. Raising issues for both.
+                if (oldOne instanceof Constructor && newOne instanceof Constructor
+                        && oldOne.getDeclaringClass().getName().equals(newOne.getDeclaringClass().getName())) {
+                    return;
+                }
 
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
                 // otherwise, which one to choose?
                     // new type more generic, use old
                 // new type more specific, use it
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
