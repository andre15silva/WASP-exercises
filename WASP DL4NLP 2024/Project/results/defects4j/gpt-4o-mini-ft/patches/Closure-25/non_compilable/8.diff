diff --git a/tmp/db76a728-7684-4adc-aa72-c0a7a1f407ed_buggy.java b/tmp/e62edfd6-ce2c-4bee-8d44-30bb65bba0a0_fixed.java
index b98f0a7..b98047f 100644
--- a/tmp/db76a728-7684-4adc-aa72-c0a7a1f407ed_buggy.java
+++ b/tmp/e62edfd6-ce2c-4bee-8d44-30bb65bba0a0_fixed.java
@@ -1,29 +1,30 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
+      inferInstancePropertyTypes(scope, arg, n);
     }
     return scope;
   }
