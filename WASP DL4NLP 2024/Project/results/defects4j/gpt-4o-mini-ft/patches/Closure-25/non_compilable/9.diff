diff --git a/tmp/3d72bd04-48ca-4cb4-9513-bc102837410f_buggy.java b/tmp/d81aaa00-920d-4271-a395-a57554f71754_fixed.java
index b98f0a7..993eff6 100644
--- a/tmp/3d72bd04-48ca-4cb4-9513-bc102837410f_buggy.java
+++ b/tmp/d81aaa00-920d-4271-a395-a57554f71754_fixed.java
@@ -1,29 +1,38 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
+        if (ct != null && ct.isConstructor() && !ct.isInterface()) {
+          // Backward type inference to deduce type of constructor argument.
+          Node arg = constructor.getFirstChild().getNext();
+          if (arg != null) {
+            JSType argType = arg.getJSType();
+            if (argType != null && !argType.isUnknownType()) {
+              argType = argType.restrictByNotNullOrUndefined();
+              type = type == null ? argType : type.meet(argType);
+            }
+          }
+          type = type == null ? ct.getInstanceType() : type.union(ct.getInstanceType());
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
