diff --git a/tmp/e4f26b6b-ded7-477c-8c25-32a494d5ae60_buggy.java b/tmp/fb2a1df0-a38b-434e-b688-7b10c736f44b_fixed.java
index b98f0a7..2ed0eec 100644
--- a/tmp/e4f26b6b-ded7-477c-8c25-32a494d5ae60_buggy.java
+++ b/tmp/fb2a1df0-a38b-434e-b688-7b10c736f44b_fixed.java
@@ -1,29 +1,46 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
-        if (ct != null && ct.isConstructor()) {
+        if (ct != null) {
+          // Backwards inference in case the constructor type is not subclassed.
+          // Scenarios include:
+          //   * Object === Object (no 'new' keyword)
+          //   * Simple and Deferred classes
+          //   * Object.defineProperty, etc.
+          //   * Object.create and library-like functions, etc.
+          // In these scenarios, the object to be inferred from is the
+          // second parameter of the call, which is not a JSDoc type object.
+          UnionType ut = new UnionType().copyAsInstanceType();
+          for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+            JSType argType = arg.getJSType();
+            if (argType != null) {
+              ut = ut.add(argType);
+            }
+          }
+          if (!ut.hasAnyType()) {
+            ct = ct.toBuilder().setSource(ut).build();
+          }
+          if (ct.isConstructor()) {
             type = ct.getInstanceType();
           }
         }
       }
+    }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
     return scope;
   }
