diff --git a/tmp/35cdb6a5-dea2-4a5e-90e6-2b5d3efed527_buggy.java b/tmp/deb08171-c68a-4016-959d-a59e01ad23eb_fixed.java
index b36c3f0..6fffc9b 100644
--- a/tmp/35cdb6a5-dea2-4a5e-90e6-2b5d3efed527_buggy.java
+++ b/tmp/deb08171-c68a-4016-959d-a59e01ad23eb_fixed.java
@@ -1,58 +1,69 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
-    } else if (nameNode.getType() == Token.GETPROP) {
+    }
+
+    Node firstArg = nameNode.getNext();
+    if (firstArg != null) {
+      firstArg = firstArg.getFirstChild();
+    } else {
+      firstArg = Node.newString("");
+    }
+
+    // Check for calls with arguments that are definitely not accessors' only
+    // side effect.
+    if (firstArg.getType() == Token.GETPROP) {
+      String prop = firstArg.getLastChild().getString();
       if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(prop)) {
+        return false;
+      } else if (CALL_ACTIONS_WITHOUT_SIDEEFFECTS.contains(
+                callNode.getString())
+          && nameNode.getName().length() > 0
+          && evaluatesToLocalValue(firstArg.getFirstChild())) {
         return false;
       }
-
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
     }
 
     // Functions in the "Math" namespace have no side effects.
 
     if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+      if (firstArg.isRegExp()
+          && REGEXP_METHODS.contains(firstArg.getLastChild().getString())) {
         return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
+      } else if (firstArg.isString()
           && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
+              firstArg.getLastChild().getString())) {
+        Node param = firstArg.getNext();
         if (param != null &&
             (param.getType() == Token.STRING
                 || param.getType() == Token.REGEXP))
           return false;
       }
     }
-    }
 
     return true;
   }
