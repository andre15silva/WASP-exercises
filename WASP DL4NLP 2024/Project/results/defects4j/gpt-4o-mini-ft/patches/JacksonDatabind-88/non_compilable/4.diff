diff --git a/tmp/ce4ae5ba-2010-493d-acd0-ed6bd28da895_buggy.java b/tmp/8887914b-3e2a-4876-922f-7b63d493bd7e_fixed.java
index ae1f3a6..c6cfb57 100644
--- a/tmp/ce4ae5ba-2010-493d-acd0-ed6bd28da895_buggy.java
+++ b/tmp/8887914b-3e2a-4876-922f-7b63d493bd7e_fixed.java
@@ -1,34 +1,40 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
-        if (id.indexOf('<') > 0) {
+        int hash = id.indexOf('<');
+        if (hash > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
                 // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+            while (hash >= 0) {
+                // check for nested types (should add a method for this in TypeFactory?)
+                t = tf.constructSpecializedType(t, t.narrowContentsType());
+                hash = id.indexOf('<', hash+1);
+            }
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
         return tf.constructSpecializedType(_baseType, cls);
     }
