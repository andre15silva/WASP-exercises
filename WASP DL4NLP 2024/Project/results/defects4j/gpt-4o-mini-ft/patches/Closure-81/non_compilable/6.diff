diff --git a/tmp/a5717f92-dba4-4403-92c9-f7535b20ddc5_buggy.java b/tmp/6d0a1a72-2772-4d8f-8c67-bad306ba7ebc_fixed.java
index 6e05e4b..79caef6 100644
--- a/tmp/a5717f92-dba4-4403-92c9-f7535b20ddc5_buggy.java
+++ b/tmp/6d0a1a72-2772-4d8f-8c67-bad306ba7ebc_fixed.java
@@ -1,51 +1,53 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+      boolean unnamedFunction = false;
       if (name == null) {
         name = new Name();
         name.setIdentifier("");
-        isUnnamedFunction = true;
+        unnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
-      if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
-        newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+      if (unnamedFunction) {
+        int lineno = functionNode.getLineno();
+        if (location == null || location.getLineno() != lineno) {
+          unnamedFunction = false;
+        }
+      }
+      if (unnamedFunction) {
+        // Old Rhino tagged the unnamed function with the line number of the
+        // function keyword, instead of the line number of the paren opcode.
+        // For non-nameable functions, this is the fact that there is no name,
+        // so repair that by using the following method.
+        node.setLineno(lineno);
+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
+        node.setCharno(position2charno(functionNode.getAbsolutePosition()
+            + functionNode.getLp()));
+        newName.setLineno(functionNode.getLineno());
+      } else {
+        newName.setCharno(functionNode.getFunctionName().getCharno());
+        newName.setLineno(functionNode.getFunctionName().getLineno());
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
-        lp.setLineno(functionNode.getLineno());
-      }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
       return node;
     }
