diff --git a/tmp/1f1ac28a-7dcd-4545-8a31-98eebfed93f1_buggy.java b/tmp/0ecbbefe-3898-45e2-ab18-be23c02a5c55_fixed.java
index 6e05e4b..444276d 100644
--- a/tmp/1f1ac28a-7dcd-4545-8a31-98eebfed93f1_buggy.java
+++ b/tmp/0ecbbefe-3898-45e2-ab18-be23c02a5c55_fixed.java
@@ -1,51 +1,49 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
+      // The body node needs a statement too, since if it appears without one
+      // in an expression context, it becomes an optional semicolon node.
+      Node body = (isUnnamedFunction) ? newNode(Token.EXPR_VOID) : newNode(Token.BLOCK);
+
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
+      // N.B. In the parse tree, the function name and left paren are at the 
+      // same depth.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
-      node.addChildToBack(lp);
-
-      Node bodyNode = transform(functionNode.getBody());
+      body.addChildToBack(lp);
+      Node bodyNode = transform(body);
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
