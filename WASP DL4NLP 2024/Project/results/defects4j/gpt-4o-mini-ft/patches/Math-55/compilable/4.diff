diff --git a/tmp/8ab3071f-1f5b-492d-830a-3a317525a9cb_buggy.java b/tmp/bf1bf95d-8208-4103-88c6-302519600a02_fixed.java
index 1478ee1..7cc11db 100644
--- a/tmp/8ab3071f-1f5b-492d-830a-3a317525a9cb_buggy.java
+++ b/tmp/bf1bf95d-8208-4103-88c6-302519600a02_fixed.java
@@ -1,24 +1,30 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
 
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
 
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
 
 
+      // 4D case generates errors due to cross-product implemented by computing
+      // the 3D cross-product in the plane orthogonal to the first vector:
+      // PCComputing vector cross-products in exact arithmetic.
+      // - Users Conference paper by J. Palmer; slides from VLDB also exist
+
+
       // compute cross product from v3 and v2 instead of v1 and v2
      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
 
   }
