diff --git a/tmp/e426a3e4-8224-40df-9270-6a1b30e9089a_buggy.java b/tmp/e4ccc92a-7750-4806-91d1-41757f0edea2_fixed.java
index 1478ee1..466eab4 100644
--- a/tmp/e426a3e4-8224-40df-9270-6a1b30e9089a_buggy.java
+++ b/tmp/e4ccc92a-7750-4806-91d1-41757f0edea2_fixed.java
@@ -1,24 +1,33 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
 
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
 
+      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+
+      // If v1.v2 is null, we return zero.
+      double rho = FastMathDirectional.cosine(-1,
+                                               FastMathDirectional.cosine(1,
+                  FastMathDirectional.cosine(1,v1.getX(), v1.getY(), v2.getX(), v2.getY()),
+                  FastMathDirectional.cosine(2,v1.getZ(), v2.getZ()))
+                                              - v1.dotProduct(v2)
+                                               /v2.magnitudeSquare(), v1.magnitudeSquare());
+
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
 
       // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      double vx = v1.y * v2.z - v1.z * v2.y, vy = v1.z * v2.x - v1.x * v2.z;
+      return new Vector3D(vx , vy, v1.x * v2.y - v1.y * v2.x);
 
   }
