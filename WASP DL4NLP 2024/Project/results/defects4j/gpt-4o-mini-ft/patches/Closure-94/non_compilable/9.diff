diff --git a/tmp/d521bb70-c464-4350-af22-d36d321bfc7f_buggy.java b/tmp/e4142631-c81b-485a-a597-e7559193f321_fixed.java
index 66e3d01..917f4b6 100644
--- a/tmp/d521bb70-c464-4350-af22-d36d321bfc7f_buggy.java
+++ b/tmp/e4142631-c81b-485a-a597-e7559193f321_fixed.java
@@ -1,34 +1,45 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
+   * @param allowNamespace Indicates if assignment code may contain namespace-qualified symbols.
    */
-  static boolean isValidDefineValue(Node val, Set<String> defines) {
+  static boolean isValidDefineValue(Node val, Set<String> defines, boolean allowNamespace) {
+    boolean isInCodeScope = !val.isFromExterns();
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
       // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
+        if (isInCodeScope) {
+          // As a special case for j2cl, supports a namespace-qualified "gensym" reference
+          String gensym = allowNamespace ? "genNamespace()" : "genSym";
+          String initialText = "closure." + gensym + "('closure.define')";
+          return (val.toString().contains(initialText));
+        } else {
+          return false;
+        }
 
       // Uniary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+        return isValidDefineValue(val.getFirstChild(), defines, allowNamespace);
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
+        return false;
     }
     return false;
   }
