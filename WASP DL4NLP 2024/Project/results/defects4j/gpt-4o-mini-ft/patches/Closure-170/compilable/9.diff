diff --git a/tmp/6008abb7-6ed5-4df0-a6a0-b874e48be7a6_buggy.java b/tmp/a96a42eb-e74e-47d8-bb3b-a72d5fcf54e1_fixed.java
index 5abdeb5..292d212 100644
--- a/tmp/6008abb7-6ed5-4df0-a6a0-b874e48be7a6_buggy.java
+++ b/tmp/a96a42eb-e74e-47d8-bb3b-a72d5fcf54e1_fixed.java
@@ -1,29 +1,32 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
+      final boolean canCaptureVar = 
+        !cfgNode.isFunction() || cfgNode.getJSDocInfo().hasThisType();
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (!(canCaptureVar && n.isName() && n.getString().equals(varName))
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
               //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+              || (parent.isAssign() && (parent.getFirstChild() == n))) {
+            // Not safe to capture without immediate use
+            return;
+          }
           // Don't count lhs of top-level assignment chain
           numUsesWithinCfgNode++;
         }
-        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
