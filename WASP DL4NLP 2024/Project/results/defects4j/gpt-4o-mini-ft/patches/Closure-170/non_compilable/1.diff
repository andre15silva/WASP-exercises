diff --git a/tmp/cf3ab0ea-08ba-4bc9-814a-7d6da662b44e_buggy.java b/tmp/7243d890-a853-42ab-aa02-3d1182d820a9_fixed.java
index 5abdeb5..799080a 100644
--- a/tmp/cf3ab0ea-08ba-4bc9-814a-7d6da662b44e_buggy.java
+++ b/tmp/7243d890-a853-42ab-aa02-3d1182d820a9_fixed.java
@@ -1,29 +1,35 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+              !(parent.isAssign() && (parent.getFirstChild() == n)) &&
+            // Don't count var assignments that are inside a hook
+            // ExpressionEvaluation object.
+            !t.getScope().isInsideVarContract(x -> {
+              Var var = t.getScope().getVar(x.getString());
+              // Variable does not exist
+              return var == null;
+            })) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
