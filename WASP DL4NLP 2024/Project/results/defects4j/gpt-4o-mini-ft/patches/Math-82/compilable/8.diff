diff --git a/tmp/6bf6d19d-21aa-4cbe-a98d-59f9eef5ba51_buggy.java b/tmp/b0e6156c-8a80-4fae-880c-98af3e05b03b_fixed.java
index 220820e..f2ee0ed 100644
--- a/tmp/6bf6d19d-21aa-4cbe-a98d-59f9eef5ba51_buggy.java
+++ b/tmp/b0e6156c-8a80-4fae-880c-98af3e05b03b_fixed.java
@@ -1,22 +1,23 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
-                final double ratio = rhs / entry;
-                if (ratio < minRatio) {
-                    minRatio = ratio;
-                    minRatioPos = i; 
-                }
-            }
+//            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+//            final double entry = tableau.getEntry(i, col);
+//            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+//                final double ratio = rhs / entry;
+//                System.out.println("MRT row: " + i + ", col: " + col + ", rhs: " + rhs + ", entry: " + entry + ", ratio: " + ratio);
+//                if (ratio < minRatio) {
+//                    minRatio = ratio;
+//                    minRatioPos = i; 
+//                }
+//            }
         }
         return minRatioPos;
     }
