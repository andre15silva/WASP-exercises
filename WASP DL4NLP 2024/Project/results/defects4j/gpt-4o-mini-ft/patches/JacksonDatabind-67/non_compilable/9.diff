diff --git a/tmp/83c3fa31-6b10-492f-ab95-75515a0af5ca_buggy.java b/tmp/3f9b3e07-7b0d-4ae3-ad2d-5028e93ba5c6_fixed.java
index bc80637..2a328ec 100644
--- a/tmp/83c3fa31-6b10-492f-ab95-75515a0af5ca_buggy.java
+++ b/tmp/3f9b3e07-7b0d-4ae3-ad2d-5028e93ba5c6_fixed.java
@@ -1,33 +1,62 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
         // the only non-standard thing is this:
         if (deser == null) {
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
+                // TODO: [databind#1445] Also allow having this done via a per-type `@JsonEnumKeys`?
+                Class<? extends Enum<?>> rawClass = (Class<Enum<?>>) type.getRawClass();
+                if (_factoryConfig.hasDeserializerModifiers()) {
+                    for (BeanDeserializerModifier m : _factoryConfig.deserializerModifiers()) {
+                        deser = m.modifyKeyDeserializer(config, type, deser);
+                        //^^^ may be overwritten
+                    }
+                }
+                if (deser == null) {
+                    deser = _createEnumKeyDeserializer(ctxt, type);
+                }
+                Class<?> elemClass = type.getKeyElementType(config);
+                if (elemClass.isAssignableFrom(rawClass)) {
+                    return deser;
+                }
+                final Enum<?>[] enums = rawClass.getEnumConstants();
+                // since this is an enum, not necessarily `String` anyway...
+                if (elemClass.isAssignableFrom(String.class)) {
+                    String[] keys = new String[enums.length];
+                    for (int i = 0; i < keys.length; ++i) {
+                        keys[i] = enums[i].name();
+                    }
+                    return _createEnumKeyDeserializer(ctxt, type, keys, enums);
+                } else {
+                    String[] keys = new String[enums.length];
+                    for (int i = 0; i < keys.length; ++i) {
+                        keys[i] = enums[i].toString();
+                    }
+                    return _createEnumKeyDeserializer(ctxt, type, keys, enums);
+                }
             }
             deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
         }
         // and then post-processing
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
         return deser;
     }
