diff --git a/tmp/ad94d2c2-d552-403a-97fd-d9966bf7b578_buggy.java b/tmp/570a756b-c020-47ac-8974-3848e20da131_fixed.java
index 7f61a8c..6843797 100644
--- a/tmp/ad94d2c2-d552-403a-97fd-d9966bf7b578_buggy.java
+++ b/tmp/570a756b-c020-47ac-8974-3848e20da131_fixed.java
@@ -1,73 +1,89 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+    /**
+     * Not for NOP nodes that merely exist to attach a JSDoc object,
+     * as this is almost always a sign of a bug. However, allow
+     * jsspec-style "one-liners" to exist because maintaining a one-line
+     * statement while still condensing it with closures would require
+     * blocking lots of useful magic.  Rather than getting all smart for
+     * something that may or may not be an issue, only argue against
+     * duplicitous declarations that could produce an argument array.
+     */
+    if (! NodeUtil.isStatement(n)) {
       if (parent.getType() == Token.COMMA) {
         Node gramps = parent.getParent();
         if (gramps.isCall() && parent == gramps.getFirstChild()) {
           if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
         return;
           }
       }
+      } else if (parent.isComma()) {
+        // We can't allow duplicitious definitions that could confuse
+        // argument accesses later, jsspec or an invisible call.  These
+        // xxxmethods are frecking all version-sensitive, so it's just
+        // easier to let the peep-hole passes look for these if you'll
+        // persuade me to enable the more scrutinous path.
+        return;
+      }
+    }
 
-    // This no-op statement was there so that JSDoc information could
+    // This no-op statement is often there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
       if (n == parent.getLastChild()) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA)
             continue;
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
             return;
           else
             break;
         }
       }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
            n == parent.getFirstChild().getNext().getNext())) {
       } else {
       return;
       }
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
       } else if (n.isExprResult()) {
         return;
       }
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
