diff --git a/tmp/fc70e775-5df6-473f-96cd-06bb89d412a7_buggy.java b/tmp/0c43323d-0ddd-4ecf-89b1-65db135d6f11_fixed.java
index 58a1651..cd75b98 100644
--- a/tmp/fc70e775-5df6-473f-96cd-06bb89d412a7_buggy.java
+++ b/tmp/0c43323d-0ddd-4ecf-89b1-65db135d6f11_fixed.java
@@ -1,32 +1,44 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
+    boolean typedefInBackwardsUse = false;
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
+    if (typeOfThis instanceof UnionType) {
+      UnionType union = (UnionType) typeOfThis;
+      for (JSType member : union.getAlternates()) {
+        if (!(member instanceof ObjectType)) {
+          typedefInBackwardsUse = true;
+          break;
+        }
+      }
+    }
+    if (typedefInBackwardsUse) {
       typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
