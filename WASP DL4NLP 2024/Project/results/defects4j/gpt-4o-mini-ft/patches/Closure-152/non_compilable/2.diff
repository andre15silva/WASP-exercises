diff --git a/tmp/77485839-0294-4d18-99e8-e004200df1fe_buggy.java b/tmp/6fa36f0c-283c-447e-a231-6979ded9a958_fixed.java
index 58a1651..1caeb73 100644
--- a/tmp/77485839-0294-4d18-99e8-e004200df1fe_buggy.java
+++ b/tmp/6fa36f0c-283c-447e-a231-6979ded9a958_fixed.java
@@ -1,32 +1,38 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // The instance of check works for case of typedef usage.
+    if (!(typeOfThis instanceof ObjectType)) {
+      String typeName =
+          typeOfThis.toString() + " (actual typed is not ObjectType)";
+      t.warning(null, typeName, null);
+    }
+    typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
