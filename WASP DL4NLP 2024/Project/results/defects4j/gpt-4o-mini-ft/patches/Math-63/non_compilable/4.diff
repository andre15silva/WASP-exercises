diff --git a/tmp/039d3efc-424e-4981-8c16-98c8b4f94c18_buggy.java b/tmp/f5b71a48-b0fd-4027-9644-e476c591247f_fixed.java
index 9033e1c..e1edd4a 100644
--- a/tmp/039d3efc-424e-4981-8c16-98c8b4f94c18_buggy.java
+++ b/tmp/f5b71a48-b0fd-4027-9644-e476c591247f_fixed.java
@@ -1,11 +1,51 @@
     /**
      * Returns true iff they are equal as defined by
      * {@link #equals(double,double,int) equals(x, y, 1)}.
      *
      * @param x first value
      * @param y second value
      * @return {@code true} if the values are equal.
      */
     public static boolean equals(double x, double y) {
         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
     }
+
+    /**
+     * Returns true iff they are equal as defined by
+     * {@link #equals(double,double,int) equals(x, y, 1)} whether or not NaN has been added to the
+     * implementation of the ArrayUtils.equals method, since JDK1.6 or recent additions to Apache Libraries or 
+     * Javadocs that mention this issue in the inner classes.  If comparing <code>arrays</code> does not work works 
+     * then compare as normal.
+     * @param x double[] The first array to compare
+     * @param y double[] The second array to compare
+     * @return {@code true} if the values are equal.  {@code false} if one array is null and the other
+     * is not.  {@code false} if the sizes of the two arrays differ.
+     */
+    public static boolean equals(double[] x, double[] y) {
+        // First, check for reference equality
+        if (x == y) {
+            return true;
+        }
+        // If either array is null then the other is obviously
+        // not equal to it
+        if (x == null || y == null) {
+            return false;
+        }
+        // Now check for array size inequality
+        int xSize = x.length;
+        int ySize = y.length;
+        if (xSize != ySize) {
+            return false;
+        }
+        // Finally, check for content equality
+        for (int i = 0; i < x.length; i++) {
+            if (Double.isNaN(x[i])) {
+                if (!Double.isNaN(y[i])) {
+                    return false;
+                }
+            } else if (x[i] != y[i]) {
+                return false;
+            }
+        }
+        return true;
+    }
