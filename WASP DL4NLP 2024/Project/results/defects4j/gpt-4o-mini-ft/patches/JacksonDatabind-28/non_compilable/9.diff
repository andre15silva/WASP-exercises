diff --git a/tmp/6e7e2e1f-3051-4ef9-bbd1-f0f9582cf4e6_buggy.java b/tmp/8279f0e1-d5dc-42a1-9d8e-e58e3e65da6c_fixed.java
index 66bb99f..5f3ee7f 100644
--- a/tmp/6e7e2e1f-3051-4ef9-bbd1-f0f9582cf4e6_buggy.java
+++ b/tmp/8279f0e1-d5dc-42a1-9d8e-e58e3e65da6c_fixed.java
@@ -1,14 +1,26 @@
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
                 p.nextToken();
+                try {
                     return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+                } catch (UnrecognizedPropertyException e) {
+                    // Correct mistake from 2.8 when extended type-handlers were introduced:
+                    //    "Should have expected ObjectNode instead of MyValue" when trying to
+                    //    unmarshal MyValue from JSON
+                    // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
+                    //    if caller has advanced to the first token of Object, but for empty Object
+                    if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                        throw ctxt.mappingException(ObjectNode.class);
+                    }
+                    throw e;
+                }
             }
             // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
             //    if caller has advanced to the first token of Object, but for empty Object
             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
             throw ctxt.mappingException(ObjectNode.class);
          }
