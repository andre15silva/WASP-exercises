diff --git a/tmp/6a51dbb4-48b9-430f-b862-1d98b266e1e6_buggy.java b/tmp/fcfb2c31-bf3a-4921-a765-4bea03c4712a_fixed.java
index 7116384..b74a035 100644
--- a/tmp/6a51dbb4-48b9-430f-b862-1d98b266e1e6_buggy.java
+++ b/tmp/fcfb2c31-bf3a-4921-a765-4bea03c4712a_fixed.java
@@ -1,39 +1,44 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+              if (bitsCachedSize > 39 && (nextByte & 0x80) != 0) {
+                // Don't overflow the bits when we have 47 or more bits and the new byte has a 1 in its high-order bit.
+                bitsCached = bitsCachedSize > 56 ? bitsCached & ~MASKS[8 - bitsCachedSize] : bitsCached | MASKS[8 - bitsCachedSize];
+                bitsCachedSize += 8;
+              }
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
             // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
         
         final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsOut = (bitsCached & MASKS[count]);
                 bitsCached >>>= count;
             } else {
                 bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
             }
             bitsCachedSize -= count;
         return bitsOut;
     }
