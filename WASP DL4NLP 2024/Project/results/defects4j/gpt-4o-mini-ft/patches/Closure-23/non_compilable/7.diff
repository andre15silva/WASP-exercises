diff --git a/tmp/9d84c164-e69c-47bb-a25b-5fa69c4ef3e5_buggy.java b/tmp/4e14e343-82e0-44d3-9ddc-5953d8f8df7e_fixed.java
index cfdcd9c..9e11341 100644
--- a/tmp/9d84c164-e69c-47bb-a25b-5fa69c4ef3e5_buggy.java
+++ b/tmp/4e14e343-82e0-44d3-9ddc-5953d8f8df7e_fixed.java
@@ -1,51 +1,51 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
+    if (index != Math.floor(index)) {
+      warning(INVALID_GETELEM_INDEX_ERROR, right);
+      return n;
+    }
+
     int intIndex = (int) index;
-    if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
-    }
-
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node current = left.getFirstChild();
     Node elem = null;
     for (int i = 0; current != null && i < intIndex; i++) {
       elem = current;
-
       current = current.getNext();
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
-    if (elem.isEmpty()) {
+    current = elem.getNext();
+    if (elem.isEmpty() || (current == null && left.getChildCount() == 1)) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
