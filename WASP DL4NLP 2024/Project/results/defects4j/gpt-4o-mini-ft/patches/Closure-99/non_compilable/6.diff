diff --git a/tmp/60dd454d-0917-4b3f-b3ab-f6efab31611b_buggy.java b/tmp/f9884344-3a38-405a-8538-88ee653506ac_fixed.java
index 86553f4..848143f 100644
--- a/tmp/60dd454d-0917-4b3f-b3ab-f6efab31611b_buggy.java
+++ b/tmp/f9884344-3a38-405a-8538-88ee653506ac_fixed.java
@@ -1,57 +1,66 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
+      // Report error if the function could be a global
+      // This means it's either a top-level function or a (nested) function
+      // declaration in a top-level function.
+      if (parent != null && (parent.getType() == Token.SCRIPT ||
+          (parent.getType() == Token.FUNCTION &&
+           parent.getParent().getType() == Token.SCRIPT))) {
+        t.setWarning(this, Warnings.WARN_USED_GLOBAL_THIS,
+            n.getLineno(), n.getCharno(), getSourceName());
+      }
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
       
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
             return false;
           }
           if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
             return false;
           }
       }
     }
 
     return true;
   }
