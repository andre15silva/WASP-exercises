diff --git a/tmp/2fec7522-ed7d-4ee5-8451-cdfe16112ad3_buggy.java b/tmp/d6b4efa9-77ac-4d99-89f4-cce604df75f4_fixed.java
index 1c875ad..022e8da 100644
--- a/tmp/2fec7522-ed7d-4ee5-8451-cdfe16112ad3_buggy.java
+++ b/tmp/d6b4efa9-77ac-4d99-89f4-cce604df75f4_fixed.java
@@ -1,31 +1,25 @@
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+            for (Matcher matcher : matchers) {
+                if (!(matcher instanceof CapturesArguments)) {
+                    continue;
+                }
+                if (isVariableArgument(invocation, indexOfVararg) && isVarargMatcher(matcher)) {
+                    Object array = invocation.getRawArguments()[indexOfVararg];
+                    for (int i = 0; i < Array.getLength(array); i++) {
+                        ((CapturesArguments) matcher).captureFrom(Array.get(array, i));
+                    }
+                    //since we've captured all varargs already, it does not make sense to process other matchers.
+                    return;
+                }
+            }
+        }
 
-        } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
-    }
