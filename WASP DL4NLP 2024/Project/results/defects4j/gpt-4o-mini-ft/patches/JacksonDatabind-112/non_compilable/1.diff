diff --git a/tmp/8426f93f-e6b2-436a-910f-f98f309a1f48_buggy.java b/tmp/b1aa6e6b-184d-4648-80f6-a21f736ee651_fixed.java
index 4ebe4f9..0df138f 100644
--- a/tmp/8426f93f-e6b2-436a-910f-f98f309a1f48_buggy.java
+++ b/tmp/b1aa6e6b-184d-4648-80f6-a21f736ee651_fixed.java
@@ -1,41 +1,49 @@
     /*
     /**********************************************************
     /* Validation, post-processing
     /**********************************************************
      */
     @Override
     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegate = null;
         if (_valueInstantiator != null) {
             // [databind#2324]: check both array-delegating and delegating
             AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
             if (delegateCreator != null) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 delegate = findDeserializer(ctxt, delegateType, property);
+                // [databind#2229]: need to find deserializer again to get actual container type to work for bags
+                if (delegateCreator.getParameterType(0).isContainerType()) {
+                    JavaType newType = delegateCreator.getParameterType(0).containedType(0);
+                    // TODO: Should merge same logic in _findValueDeserializer
+                    delegateType = ctxt.getTypeFactory().constructType(\
+                            Collection.class, newType);
+                    valueDeser = findDeserializer(ctxt, delegateType, property);
+                }
             }
         }
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         final JavaType valueType = _containerType.getContentType();
         if (valueDeser == null) {
             // [databind#125]: May have a content converter
             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
             if (valueDeser == null) {
             // And we may also need to get deserializer for String
                 valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
             }
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
         }
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
         if (isDefaultDeserializer(valueDeser)) {
             valueDeser = null;
         }
         return withResolved(delegate, valueDeser, nuller, unwrapSingle);
     }
