diff --git a/tmp/2e0130c2-93ea-4c97-81cd-482a71905b8a_buggy.java b/tmp/0427a9ad-d234-4106-9619-bb5efed958f6_fixed.java
index fa42cd9..cb683b6 100644
--- a/tmp/2e0130c2-93ea-4c97-81cd-482a71905b8a_buggy.java
+++ b/tmp/0427a9ad-d234-4106-9619-bb5efed958f6_fixed.java
@@ -1,27 +1,34 @@
   /**
    * Declares a refined type in {@code scope} for the name represented by
    * {@code node}. It must be possible to refine the type of the given node in
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
   protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
     switch (node.getType()) {
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
         break;
 
       case Token.GETPROP:
         String qualifiedName = node.getQualifiedName();
         Preconditions.checkNotNull(qualifiedName);
 
         JSType origType = node.getJSType();
         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
-        // "this" references aren't currently modeled in the CFG.
-
-      default:
+        // TODO(johnlenz): There are treachorous issue with `this` and it isn't modeled correctly.
+        // https://github.com/google/closure-compiler/issues/1497
+        // Since "this" references aren't currently modeled in the CFG, throw an exception.
+        // This often occurs as an error in refinement typing.
+        // https://github.com/google/closure-compiler/issues/1498
+      case Token.NAME:
+      case Token.GETELEM:
+      case Token.RETURN:
+      case Token.BIND:
+      case Token.CALL:
         throw new IllegalArgumentException("Node cannot be refined. \n" +
             node.toStringTree());
     }
   }
