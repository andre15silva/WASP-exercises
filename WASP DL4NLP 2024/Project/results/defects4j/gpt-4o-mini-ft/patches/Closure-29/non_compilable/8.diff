diff --git a/tmp/3683857c-855a-495e-bda7-d1ade6e7ce75_buggy.java b/tmp/4eb8bee5-0e9c-4867-84f5-fe438824b576_fixed.java
index be9c8a3..1a46c14 100644
--- a/tmp/3683857c-855a-495e-bda7-d1ade6e7ce75_buggy.java
+++ b/tmp/4eb8bee5-0e9c-4867-84f5-fe438824b576_fixed.java
@@ -1,94 +1,73 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+          if (parent.getFirstChild().isName()) {
+            // If name refers to a non-local, we don't know which instance
+            // to use.
+            // Local trust is not good enough, however, since we cannot tell
+            // whether the call site uses 'this' or not.
             return false;
           }
 
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
           // Object.prototype can have arbitrary properties on it.
           //
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
-          return false;
+          continue;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
-          }
-
-
-          Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
+        // Check if val is the parent of any of the passed in
         // references, as that is how self-referential assignments
-          // will happen.
-          for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
-                return false;
-              }
-              refNode = refNode.getParent();
-            }
-          }
-        }
-
-
+        // can happen.
+        if (contentsInNode(refs, val)) {
+          // We're also not willing to take chances with ES5 getters/setters.
+          // If there are getters on the literal that may have performed
+          // additional side effects, this pass may spoil them.
+          if (!val.getFirstChild().isGetterDef() &&
+              !val.getLastChild().isSetterDef()) {
             // We have found an acceptable object literal assignment. As
             // long as there are no other assignments that mess things up,
             // we can inline.
             ret = true;
           }
+        }
+      }
       return ret;
     }
