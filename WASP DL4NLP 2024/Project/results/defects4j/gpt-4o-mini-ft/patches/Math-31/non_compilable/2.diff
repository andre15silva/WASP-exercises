diff --git a/tmp/ecabf627-5283-4def-ae4e-c8742f973389_buggy.java b/tmp/0258a32c-b7f5-47c3-b06e-461657a17a7a_fixed.java
index 57d43b9..01b1bac 100644
--- a/tmp/ecabf627-5283-4def-ae4e-c8742f973389_buggy.java
+++ b/tmp/0258a32c-b7f5-47c3-b06e-461657a17a7a_fixed.java
@@ -1,102 +1,101 @@
     /**
      * <p>
      * Evaluates the continued fraction at the value x.
      * </p>
      *
      * <p>
      * The implementation of this method is based on the modified Lentz algorithm as described
      * on page 18 ff. in:
      * <ul>
      * <li>
      *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
      *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
      *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
      * </li>
      * </ul>
      * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
      * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
      * </p>
      *
      * @param x the evaluation point.
      * @param epsilon maximum error allowed.
      * @param maxIterations maximum number of convergents
      * @return the value of the continued fraction evaluated at x.
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
         final double small = 1e-50;
         double hPrev = getA(0, x);
 
         // use the value of small as epsilon criteria for zero checks
         if (Precision.equals(hPrev, 0.0, small)) {
             hPrev = small;
         }
 
         int n = 1;
         double dPrev = 0.0;
         double p0 = 1.0;
         double q1 = 1.0;
         double cPrev = hPrev;
         double hN = hPrev;
 
-        while (n < maxIterations) {
         final double a = getA(n, x);
         final double b = getB(n, x);
+        double deltaN = a / b;
+        double scaleFactor = a;
 
-            double cN = a * hPrev + b * p0;
-            double q2 = a * q1 + b * dPrev;
-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
-                double scaleFactor = 1d;
-                double lastScaleFactor = 1d;
-                final int maxPower = 5;
-                final double scale = FastMath.max(a,b);
-                if (scale <= 0) {  // Can't scale
-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
-                }
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
-                    } else if (b != 0) {
-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
-                    }
-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
-                        break;
-                    }
-                }
-            }
+        while (n < maxIterations) {
+            scaleFactor = FastMath.max(scaleFactor, FastMath.abs(a));
+            final double hN_1 = hN;
+            a = getA(n, x);
+            b = getB(n, x);
+            deltaN = a / b;
 
-            final double deltaN = cN / q2 / cPrev;
-            hN = cPrev * deltaN;
-
-            if (Double.isInfinite(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
-                                               x);
-            }
-            if (Double.isNaN(hN)) {
-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
-                                               x);
-            }
-
-            if (FastMath.abs(deltaN - 1.0) < epsilon) {
-                break;
-            }
-
-            dPrev = q1;
-            cPrev = cN / q2;
+            cPrev = cN / deltaN;
             p0 = hPrev;
-            hPrev = cN;
+            hPrev = hN; 
             q1 = q2;
-            n++;
+            dPrev = q1;
+            deltaN = cN / deltaP;
+            n = n + 1;
+            deltaN /= scaleFactor;
+            hN = deltaN / b;
+            if (FastMath.abs(a) < small) {
+                hN = -hN_1;
+            }
+            if (deltaN > 0 || deltaP > 0) {
+                hN = hN_1 * deltaN;
+            }
+            // TODO: removing scaleFactor scaling brings back problems as in Ticket #646 so use the bounds of importance
+            binomialSampleFun0 = scaleFactor = 1.0;
+            binomialSampleFun1 = 1.0; 
+            if (n-- <= maxn) {
+                binomialSampleFun0 /= scaleFactor;
+                binomialSampleFun1 /= scaleFactor;
+            }
+            cPrev = hPrev;
+            if (binomialSampleFun1 < (a - x) / scale)
+                hN = -hN;
+            if (FastMath.abs(cP - cPrev) > small) {
+                hN/ = small;
+                dPrev = small;
+                binomialSampleFun1 = dPrev;
+            }
+            if (cN > 0 && cP < 0) {      // err, retry
+                dPrev = cN;
+                cPrev = cN;
+                hN = dPrev;
+                binomialSampleFun1 = binomialSampleFun1;
+            }
+            else {
+                return hN;
+            }
         }
 
         if (n >= maxIterations) {
             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                 maxIterations, x);
         }
 
-        return hN;
+        return cN;
     }
