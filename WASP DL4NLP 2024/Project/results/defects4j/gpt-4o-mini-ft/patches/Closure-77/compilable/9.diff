diff --git a/tmp/3f785b25-f55a-4c18-b989-c512adee745e_buggy.java b/tmp/e40906db-52d6-487b-b4f8-6a9d36ccf327_fixed.java
index 89c5bf7..3e1cb5c 100644
--- a/tmp/3f785b25-f55a-4c18-b989-c512adee745e_buggy.java
+++ b/tmp/e40906db-52d6-487b-b4f8-6a9d36ccf327_fixed.java
@@ -1,71 +1,82 @@
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
                           String doublequoteEscape,
                           String singlequoteEscape,
                           String backslashEscape,
                           CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
         case '\n': sb.append("\\n"); break;
         case '\r': sb.append("\\r"); break;
         case '\t': sb.append("\\t"); break;
         case '\\': sb.append(backslashEscape); break;
         case '\"': sb.append(doublequoteEscape); break;
         case '\'': sb.append(singlequoteEscape); break;
         case '>':                       // Break --> into --\> or ]]> into ]]\>
           if (i >= 2 &&
               ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
             sb.append("\\>");
           } else {
             sb.append(c);
           }
           break;
         case '<':
           // Break </script into <\/script
           final String END_SCRIPT = "/script";
 
           // Break <!-- into <\!--
           final String START_COMMENT = "!--";
 
           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                               END_SCRIPT.length())) {
             sb.append("<\\");
           } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                      START_COMMENT.length())) {
             sb.append("<\\");
           } else {
             sb.append(c);
           }
           break;
         default:
           // If we're given an outputCharsetEncoder, then check if the
           //  character can be represented in this character set.
           if (outputCharsetEncoder != null) {
             if (outputCharsetEncoder.canEncode(c)) {
               sb.append(c);
             } else {
               // Unicode-escape the character.
               appendHexJavaScriptRepresentation(sb, c);
             }
           } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
-              sb.append(c);
-            } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
+            switch (c) {
+              case 0:
+                sb.append("\\0");
+                break;
+              case 1:
+              case 2:
+              case 3:
+              case 4:
+              case 5:
+                sb.append("\\u0");
                 appendHexJavaScriptRepresentation(sb, c);
+                break;
+              // Nonzero integer, or hex.
+              default:
+                // Either latin-1 (0..255) or unicodes > 0x080.
+                // s's n.b. re-encoding of latin-1 would need to be done at
+                // potential performance hit, so going straight to latins catches
+                // all non-control chars.
+                sb.append(c >= 0x80 ? "\\u" : c);
+                break;
             }
           }
+          break;
       }
     }
     sb.append(quote);
     return sb.toString();
   }
