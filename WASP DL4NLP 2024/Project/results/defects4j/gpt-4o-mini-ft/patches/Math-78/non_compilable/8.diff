diff --git a/tmp/421ebb57-899e-4c21-aa27-342be108fc68_buggy.java b/tmp/8e0bdfb0-ec9b-4cb0-83d2-70e6daf2b05d_fixed.java
index 032fa8e..8a8391a 100644
--- a/tmp/421ebb57-899e-4c21-aa27-342be108fc68_buggy.java
+++ b/tmp/8e0bdfb0-ec9b-4cb0-83d2-70e6daf2b05d_fixed.java
@@ -1,108 +1,119 @@
     /** Evaluate the impact of the proposed step on the event handler.
      * @param interpolator step interpolator for the proposed step
      * @return true if the event handler triggers an event before
      * the end of the proposed step (this implies the step should be
      * rejected)
      * @exception DerivativeException if the interpolator fails to
      * compute the switching function somewhere within the step
      * @exception EventException if the switching function
      * cannot be evaluated
      * @exception ConvergenceException if an event cannot be located
      */
     public boolean evaluateStep(final StepInterpolator interpolator)
         throws DerivativeException, EventException, ConvergenceException {
 
         try {
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+            final double t2 = tb + (interpolator.isForward() ? convergence : -convergence);
+            final double prevT    = tb;
+            final double prevTg0  = ga;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
-                final double gb = handler.g(tb, interpolator.getInterpolatedState());
+                ga = handler.g(tb, interpolator.getInterpolatedState());
+                final double t01 = interpolator.getPreviousTime();
+                final double g01 = handler.g(t01, interpolator.getPreviousState());
+                final double t111 = interpolator.getCurrentTime() + (interpolator.isForward() ? 	ga/ g0 : - convergence);
+                final double g11    = handler.g(t111, interpolator.getCurrentState());
+                final double y01    = g01 * (t21 - t01) + g01 * t11;
+                final double changedPhase = y01 * ((ga - g01) * (g0 * g11));
+                final double g1_prev = g11 / ga;
+                final double g0_prev = g01 / g0;
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if ((g0Positive ^ (ga >= 0)) || (((prevTg0 > ga) && (prevTg0 < g01)) || ((prevTg0 < ga) && (prevTg0 > g11))) || ((g1_prev) || (g11 < 0) ||  ((prevTg0 > ga) && (g11 == 0) && (t1 - ta > prevT)) || ((y01 != 1) || (g0 > ga)) || ((prevT + convergence) < (ga)))) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
                         // - there was an event near ta,
                         // - there is another event between ta and tb
                         // - when ta was computed, convergence was reached on the "wrong side" of the interval
                         // this implies that the real sign of ga is the same as gb, so we need to slightly
                         // shift ta to make sure ga and gb get opposite signs and the solver won't complain
                         // about bracketing
                             // this should never happen
                          
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
                             } catch (EventException e) {
                                 throw new FunctionEvaluationException(e, t);
                             }
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                             // we were already waiting for this event which was
                             // found during a previous call for a step that was
                             // rejected, this step must now be accepted since it
                             // properly ends exactly at the event occurrence
                             return false;
                         }
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
                         return true;
                     }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
             if ((cause != null) && (cause instanceof DerivativeException)) {
                 throw (DerivativeException) cause;
             } else if ((cause != null) && (cause instanceof EventException)) {
                 throw (EventException) cause;
             }
             throw new EventException(e);
         }
 
     }
