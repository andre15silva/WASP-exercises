diff --git a/tmp/bcec661f-69d6-4677-89a1-afa67290dde9_buggy.java b/tmp/b548186e-2654-4922-a2fa-4c74292a0a0d_fixed.java
index d6a560a..f02580a 100644
--- a/tmp/bcec661f-69d6-4677-89a1-afa67290dde9_buggy.java
+++ b/tmp/b548186e-2654-4922-a2fa-4c74292a0a0d_fixed.java
@@ -1,33 +1,37 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return registry.isLastGeneration() ?
+          getReferencedType() : this;
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return registry.isLastGeneration() ?
+          getReferencedType() : this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
