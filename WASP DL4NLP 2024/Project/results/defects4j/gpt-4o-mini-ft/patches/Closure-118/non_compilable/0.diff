diff --git a/tmp/d6e679f5-39db-463a-b5c2-f813cee652f2_buggy.java b/tmp/190b95d7-308f-41d1-acc5-e988fd06b103_fixed.java
index 0b7c52e..69d38c7 100644
--- a/tmp/d6e679f5-39db-463a-b5c2-f813cee652f2_buggy.java
+++ b/tmp/190b95d7-308f-41d1-acc5-e988fd06b103_fixed.java
@@ -1,27 +1,32 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
+        if (paramHelper.mode.isConversionCaseAllowed()) {
           if (!prop.scheduleRenaming(child,
                                      processProperty(t, prop, type, null))) {
             // TODO(user): It doesn't look like the user can do much in this
             // case right now.
             if (propertiesToErrorFor.containsKey(name)) {
               compiler.report(JSError.make(
                   t.getSourceName(), child, propertiesToErrorFor.get(name),
                   Warnings.INVALIDATION, name,
                   (type == null ? "null" : type.toString()), n.toString(), ""));
             }
           }
+        } else if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
+          // Will not be useful to run transformations here, so we can skip this altogether.
+          continue;
+        }
       }
     }
