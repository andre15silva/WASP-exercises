diff --git a/tmp/d6ffe172-fcc5-4d2d-928f-354a7cb43f15_buggy.java b/tmp/bd7ba38c-c9b9-4faa-a064-05dd31080687_fixed.java
index 0b7c52e..e114b28 100644
--- a/tmp/d6ffe172-fcc5-4d2d-928f-354a7cb43f15_buggy.java
+++ b/tmp/bd7ba38c-c9b9-4faa-a064-05dd31080687_fixed.java
@@ -1,27 +1,41 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
-        Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
-          if (propertiesToErrorFor.containsKey(name)) {
-            compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
-          }
+        // If we're in a class, we could have an implicit property assigned to
+        // the prototype object. Don't look on the prototype if we already
+        // have a struct symbol for the class.
+        MayPasstrough<Struct> rt = scope.getReferencedTypes()
+            .get(name);
+        boolean called = rt != null && rt.name != null;
+        String recentlyIntroduced =
+            type == null || type.isAny() || type.isUnknown()
+                    ? ""
+                    : typesToErrorFor.get(type.getReference().getReferenceType()).get(0);
+        List<Struct> buffer = structsCache.get(name);
+        if (buffer == null || buffer.isEmpty()) {
+          if (called) {
+            structsCache.put(name, (buffer = Lists.newArrayList()));
           }
+        } else for (Struct struct : Types.PGA.WALKER.getTypeMeasure())
+            buffer.add(struct);
+        for (Struct struct : Types.STAMP)
+                buffer.add(struct);
+        if (buffer.contains(constant)) {
+          addToStructReducer();
+        } else if (!called) {
+          cyclomaticOrderMap.add(cyclomaticOrderFind);
+        } else if (recentlyIntroduced.isEmpty()) {
+          blocksStructure.addRelationRelations.add(blistingCitizenJustified);
+        } struct = reasoningsTracker.addReturn(ambiguousFlights);
       }
     }
