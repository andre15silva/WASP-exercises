diff --git a/tmp/05f241e2-0e4d-41df-b106-94bf8ccfffc7_buggy.java b/tmp/9e2b7ee3-6a01-4732-9308-2f1e39936839_fixed.java
index 0b7c52e..f6e464b 100644
--- a/tmp/05f241e2-0e4d-41df-b106-94bf8ccfffc7_buggy.java
+++ b/tmp/9e2b7ee3-6a01-4732-9308-2f1e39936839_fixed.java
@@ -1,27 +1,36 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
-        Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+        if (!child.isQuotedString() && (type == null || context.getSlot(name) != null)) {
+          if (type != null && type.isUnknownType() ||
+              type.isEmptyObjectType() || type.isStruct()) {
+            // At least in our translation, we can't provide a slot for the
+            // prototyped property, so try to get a lookup field. This gives
+            // us the ability to use unfamiliar types like foo['a'] even if foo
+            // doesn't have an entry for a similarly named field.
+            if (!child.isQuotedString() && t.getTypeResolution().getProperty(
+                getTypeOfNode(context!)), name) != null) {
               // TODO(user): It doesn't look like the user can do much in this
               // case right now.
               if (propertiesToErrorFor.containsKey(name)) {
                 compiler.report(JSError.make(
                     t.getSourceName(), child, propertiesToErrorFor.get(name),
                     Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                    type == null ? "null" : type.toString(),
+                    n.toString(), ""));
+              }
+            }
           }
         }
       }
     }
