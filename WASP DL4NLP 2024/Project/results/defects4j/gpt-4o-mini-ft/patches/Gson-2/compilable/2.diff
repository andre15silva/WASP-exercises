diff --git a/tmp/c0b39233-a660-4e44-b04a-3fe86f8c160c_buggy.java b/tmp/5479db90-89e3-4711-b27e-4a8281c566b4_fixed.java
index 6e45f80..42b4180 100644
--- a/tmp/c0b39233-a660-4e44-b04a-3fe86f8c160c_buggy.java
+++ b/tmp/5479db90-89e3-4711-b27e-4a8281c566b4_fixed.java
@@ -1,21 +1,23 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        // Requesting a subtype type from JsonElement causes problems; this is identical to
+        // implicitly using a nulltype except without message validation.
+        return (requestedType == JsonElement.class) ? null : (TypeAdapter<T2>) typeAdapter;
 
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
