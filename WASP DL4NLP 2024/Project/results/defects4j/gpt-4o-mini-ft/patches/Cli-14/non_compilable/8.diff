diff --git a/tmp/9b8e90e7-e511-42c0-933c-03e3707c1b32_buggy.java b/tmp/113fe281-7ffd-429e-bebc-177fba78da46_fixed.java
index 71189c3..7885b08 100644
--- a/tmp/9b8e90e7-e511-42c0-933c-03e3707c1b32_buggy.java
+++ b/tmp/113fe281-7ffd-429e-bebc-177fba78da46_fixed.java
@@ -1,46 +1,61 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
                 option.validate(commandLine);
+                //Another option could be added to .getValue() check.
+                if (option.getArgument().getType() == File.class){
+                	// explains a kind of hack around the fact that
+                    // we try to be backward compliant while throwing
+                    // org.apache.commons.cli2.OptionException
+                    String value = (String) commandLine.getValue(option);
+                    File path = new File(value);
+                    try {
+                        File fs = path.getCanonicalFile();
+                        commandLine.setValue(option, fs);
+                    } catch (IOException e) {
+                        throw new OptionException(this, ResourceConstants.CANT_RESOLVE_FILE,
+                                                  path.getName());
+                    }
+                }
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
