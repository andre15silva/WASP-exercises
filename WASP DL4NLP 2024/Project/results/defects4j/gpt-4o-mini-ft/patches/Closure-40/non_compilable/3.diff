diff --git a/tmp/3f1868d1-8a60-414d-9057-da7844283fd9_buggy.java b/tmp/f94466e6-98a1-4e2c-9011-9ad38a9fe160_fixed.java
index 670114d..5956c34 100644
--- a/tmp/3f1868d1-8a60-414d-9057-da7844283fd9_buggy.java
+++ b/tmp/f94466e6-98a1-4e2c-9011-9ad38a9fe160_fixed.java
@@ -1,48 +1,53 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
-        if (NodeUtil.isVarDeclaration(n)) {
+        if (NodeUtil.isVarDeclaration(n) && !NodeUtil.isLhsOfAssign(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
             JsName nameInfo = getName(nameNode.getString(), true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null) {
+        // The semantics of the assignment are that whatever was inside the
+        // assignment before is gone. If this assignment is also a LHS of another
+        // assignment this accounts for two things.  In that case the first
+        // assignment really cooked things and we can discard its information,
+        // otherwise its lost information.
+        if (ns != null && !NodeUtil.isLhsOfAssign(nameNode)) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
       } else if (n.isCall()) {
         Node nameNode = n.getFirstChild();
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null && ns.onlyAffectsClassDef) {
           JsName name = getName(ns.name, false);
           if (name != null) {
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
           }
         }
       }
     }
