diff --git a/tmp/640142b7-8cfc-423f-88f4-aa52322c706b_buggy.java b/tmp/19e11a6f-96bf-47e9-b794-604e2cd168a2_fixed.java
index acd5eb5..efdd61b 100644
--- a/tmp/640142b7-8cfc-423f-88f4-aa52322c706b_buggy.java
+++ b/tmp/19e11a6f-96bf-47e9-b794-604e2cd168a2_fixed.java
@@ -1,32 +1,28 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
-
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
+            boolean isBr = next instanceof Element && ((Element) next).tagName().equalsIgnoreCase("br");
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
+            boolean couldSkip = isBr
+                || (next instanceof TextNode && (((TextNode) next).isBlank())) 
+                || (prev instanceof Element && ((Element) prev).isBlock() && next != null && !isBr)
                 ;
             if (couldSkip && isBlank) return;
-
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex > 0 && isNode(prev, "br")) 
             )
                 indent(accum, depth, out);
         }
-
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
