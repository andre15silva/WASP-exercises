diff --git a/tmp/545c72f3-2812-4eb7-b056-d2380961da05_buggy.java b/tmp/452c03e5-9dde-43f3-84f8-5abc28352841_fixed.java
index 2444d12..d6c2c2b 100644
--- a/tmp/545c72f3-2812-4eb7-b056-d2380961da05_buggy.java
+++ b/tmp/452c03e5-9dde-43f3-84f8-5abc28352841_fixed.java
@@ -1,29 +1,25 @@
-    // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
-
         while (tokens.hasNext()) {
             if (tokens.hasNextInt()) {
-                s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+                s.push(tokens.nextInt()); 
+            } else { 
                 int num2 = s.pop();
                 int num1 = s.pop();
                 String op = tokens.next();
-
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
                     case "/" -> s.push(num1 / num2);
                     default -> throw new IllegalArgumentException("exp contains an unknown operation.");
                 }
-                //  "+", "-", "*", "/"
             }
         }
         tokens.close();
         if (s.size() != 1) {
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
     }
\ No newline at end of file
