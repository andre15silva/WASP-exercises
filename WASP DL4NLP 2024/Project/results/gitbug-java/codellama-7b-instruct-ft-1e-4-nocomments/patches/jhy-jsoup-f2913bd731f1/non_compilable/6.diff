diff --git a/tmp/2745aa67-54af-40b4-a9a4-8aa42ea29b20_buggy.java b/tmp/6c39e279-7545-48dd-baf6-6ef83f880609_fixed.java
index 016a7f6..d27e718 100644
--- a/tmp/2745aa67-54af-40b4-a9a4-8aa42ea29b20_buggy.java
+++ b/tmp/6c39e279-7545-48dd-baf6-6ef83f880609_fixed.java
@@ -1,29 +1,30 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
-        boolean trimLeading = false, trimTrailing = false;
-
+        final boolean shouldIndent = Element.tagWithChildNodes(parentNode);
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            boolean indent = false;
+            if (shouldIndent) {
+                indent = trimLikeBlock && (((Element)parentNode).shouldIndent(out)) || Element.preserveWhitespace(parentNode);
+            }
+            boolean trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+            boolean trimTrailing = trimLikeBlock && nextSibling() == null;
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) 
+                || (next instanceof TextNode && (((TextNode) next).isBlank())); 
             if (couldSkip && isBlank) return;
-
             Node prev = previousSibling();
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                (siblingIndex == 0 && Element.tagWithChildNodes(parentNode) && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) 
             )
                 indent(accum, depth, out);
+            Entities.escape(accum, coreValue(), out, shouldIndent, normaliseWhite, trimLeading, trimTrailing);
+        } else {
+            Entities.escape(accum, coreValue(), out, false, normaliseWhite);
         }
-
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
