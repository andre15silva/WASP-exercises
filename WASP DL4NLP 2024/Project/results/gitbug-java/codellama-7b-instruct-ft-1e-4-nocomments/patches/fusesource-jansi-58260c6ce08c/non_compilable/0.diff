diff --git a/tmp/ce0abfc4-ca77-4f1d-994f-3452f58ca02c_buggy.java b/tmp/eb67f6d8-5758-41af-bf36-870f5c9d9833_fixed.java
index 712f277..125111c 100644
--- a/tmp/ce0abfc4-ca77-4f1d-994f-3452f58ca02c_buggy.java
+++ b/tmp/eb67f6d8-5758-41af-bf36-870f5c9d9833_fixed.java
@@ -1,48 +1,57 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
-
-        int i = 0;
         int j, k;
-
-        while (true) {
-            j = input.indexOf(BEGIN_TOKEN, i);
+        int start = 0;
+        int end = 0;
+        while (j > -1) {
+            int j2, k2;
+            j = input.indexOf(BEGIN_TOKEN, start);
             if (j == -1) {
-                if (i == 0) {
-                    target.append(input);
+                j2 = input.indexOf(END_TOKEN, start);
+                if (j2 == -1) {
+                    target.append(input.substring(start));
                     return target;
                 }
-                target.append(input.substring(i));
-                return target;
-            }
-            target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
-
-            if (k == -1) {
-                target.append(input);
-                return target;
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
-
+            String spec = input.substring(j + BEGIN_TOKEN_LEN, k);
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
+            target.append(input.substring(start, j));
             if (items.length == 1) {
+                end = j + BEGIN_TOKEN_LEN;
+            } else {
+                start = j + BEGIN_TOKEN_LEN;
+                j2 = input.indexOf(END_TOKEN, start);
+                if (j2 == -1) {
+                    target.append(input.substring(start));
+                    return target;
+                }
+                spec = input.substring(start, j2);
+                String[] items2 = spec.split(CODE_TEXT_SEPARATOR, 2);
+                if (items2.length == 1) {
                     target.append(input);
                     return target;
                 }
-            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
-
+                String replacement = render(items2[1], items2[0].split(CODE_LIST_SEPARATOR));
                 target.append(replacement);
-
-            i = k + END_TOKEN_LEN;
+                end = j2 + END_TOKEN_LEN;
+                start = end;
             }
+            k = input.indexOf(END_TOKEN, end);
+            if (k == -1) {
+                target.append(input.substring(end));
+                return target;
+            }
+        }
+        target.append(input.substring(start, end));
+        return target;
     }
\ No newline at end of file
