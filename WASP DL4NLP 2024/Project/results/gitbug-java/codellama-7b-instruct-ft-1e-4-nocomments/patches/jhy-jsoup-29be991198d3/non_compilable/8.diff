diff --git a/tmp/3c5f4fe0-fdf4-4a5b-b76f-627a6c4db0ac_buggy.java b/tmp/c58953cb-9e73-453f-a48e-934e58c39951_fixed.java
index 862c60c..1afda85 100644
--- a/tmp/3c5f4fe0-fdf4-4a5b-b76f-627a6c4db0ac_buggy.java
+++ b/tmp/c58953cb-9e73-453f-a48e-934e58c39951_fixed.java
@@ -1,25 +1,20 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
-
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            Node next = nextSibling();
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) 
+                || (next instanceof TextNode && ((TextNode) next).isBlank()); 
             if (couldSkip && isBlank()) return;
-
             if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank()))
                 indent(accum, depth, out);
         }
-
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
