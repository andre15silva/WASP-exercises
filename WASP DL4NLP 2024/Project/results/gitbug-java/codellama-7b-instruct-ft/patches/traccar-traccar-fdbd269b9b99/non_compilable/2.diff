diff --git a/tmp/3eb5a469-bbbb-49e0-a0b2-3a7d91608ab7_buggy.java b/tmp/e5dd73be-baac-4e9c-95ce-6c21d5ceacd9_fixed.java
index 30eba92..0c9a770 100644
--- a/tmp/3eb5a469-bbbb-49e0-a0b2-3a7d91608ab7_buggy.java
+++ b/tmp/e5dd73be-baac-4e9c-95ce-6c21d5ceacd9_fixed.java
@@ -1,113 +1,86 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
-            String[] data = pair.split("[=:]");
-            int key;
-            try {
-                key = Integer.parseInt(data[0], 16);
-            } catch (NumberFormatException e) {
-                continue;
-            }
-            String value = data[1];
-            if (key == 0x0) {
+            int type = Integer.parseInt(
+                    new String(Base64Coder.decodeToBytes(pair.substring(0, pair.indexOf(':'))), charset), 16);
+            if (type == 0x0) {
                 if (position != null) {
                     position.setTime(dateBuilder.getDate());
                     positions.add(position);
                 }
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
                 dateBuilder = new DateBuilder(new Date());
-            } else if (position != null) {
-                switch (key) {
+            } else if (type == 0x3) {
+                type = 0x2;
+            }
+            position.set(Position.KEY_EVENT, type);
+            String value = pair.substring(pair.indexOf('=') + 1);
+            if (position != null) {
+                switch (type) {  // event type
+                    case 0x1:
+                        dateBuilder.setTime(
+                                Integer.parseInt(value.substring(0, 2)),
+                                Integer.parseInt(value.substring(2, 4)),
+                                Integer.parseInt(value.substring(4, 6)),
+                                Integer.parseInt(value.substring(6)) * 10);
+                        break;
                     case 0x11:
                         value = ("000000" + value).substring(value.length());
                         dateBuilder.setDateReverse(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4)));
                         break;
-                    case 0x10:
+                    case 0x2:
                         value = ("00000000" + value).substring(value.length());
                         dateBuilder.setTime(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4, 6)),
                                 Integer.parseInt(value.substring(6)) * 10);
                         break;
                     case 0xA:
                         position.setValid(true);
                         position.setLatitude(Double.parseDouble(value));
                         break;
                     case 0xB:
                         position.setValid(true);
                         position.setLongitude(Double.parseDouble(value));
                         break;
                     case 0xC:
                         position.setAltitude(Double.parseDouble(value));
                         break;
                     case 0xD:
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                         break;
                     case 0xE:
                         position.setCourse(Integer.parseInt(value));
                         break;
-                    case 0xF:
-                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
-                        break;
-                    case 0x12:
-                        position.set(Position.KEY_HDOP, Integer.parseInt(value));
-                        break;
-                    case 0x20:
-                        position.set(Position.KEY_ACCELERATION, value);
-                        break;
-                    case 0x24:
-                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
-                        break;
-                    case 0x81:
-                        position.set(Position.KEY_RSSI, Integer.parseInt(value));
-                        break;
-                    case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
-                        break;
-                    case 0x104:
-                        position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
-                        break;
-                    case 0x105:
-                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
-                        break;
-                    case 0x10c:
-                        position.set(Position.KEY_RPM, Integer.parseInt(value));
-                        break;
-                    case 0x10d:
-                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
-                        break;
-                    case 0x111:
-                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
-                        break;
                     default:
-                        position.set(Position.PREFIX_IO + key, value);
+                        position.set(Position.PREFIX_IO + type, value);
                         break;
                 }
             }
         }
 
         if (position != null) {
             if (!position.getValid()) {
                 getLastLocation(position, null);
             }
             position.setTime(dateBuilder.getDate());
             positions.add(position);
         }
 
         return positions.isEmpty() ? null : positions;
     }
