diff --git a/tmp/230267e6-6bc1-4f2a-971c-f76ad50cd692_buggy.java b/tmp/240251bf-dd2c-4f7b-8b48-61fb1a695824_fixed.java
index 30eba92..f58289a 100644
--- a/tmp/230267e6-6bc1-4f2a-971c-f76ad50cd692_buggy.java
+++ b/tmp/240251bf-dd2c-4f7b-8b48-61fb1a695824_fixed.java
@@ -1,113 +1,150 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
             String[] data = pair.split("[=:]");
-            int key;
+            int key = -1;
+            String name = null;
+            String value = "";
             try {
                 key = Integer.parseInt(data[0], 16);
             } catch (NumberFormatException e) {
-                continue;
+                //no key, may be name
+                name = data[0];
             }
-            String value = data[1];
-            if (key == 0x0) {
-                if (position != null) {
-                    position.setTime(dateBuilder.getDate());
-                    positions.add(position);
+            if (data.length > 1) {
+                value = data[1];
             }
+            if (key == -1) {
+                //no key, may be name
+                switch (name) {
+                    case "EV":
+                    case "SSI":
+                        if ("1".equals(value)) {
+                            dateBuilder = new DateBuilder(new Date());
                             position = new Position(getProtocolName());
                             position.setDeviceId(deviceSession.getDeviceId());
-                dateBuilder = new DateBuilder(new Date());
+                        } else {
+                            if (position != null) {
+                                position.setTime(dateBuilder.getDate());
+                                positions.add(position);
+                            }
+                            position = null;
+                        }
+                        continue;
+                    case "TS":
+                        if (dateBuilder != null) {
+                            dateBuilder.setTime(
+                                    Integer.parseInt(value.substring(0, 2)),
+                                    Integer.parseInt(value.substring(2, 4)),
+                                    Integer.parseInt(value.substring(4, 7)),
+                                    (Integer.parseInt(value.substring(8, 10))) * 10);
+                        }
+                        continue;
+                    case "ID":
+                        name = data[2];
+                        continue;
+                    case "SK":
+                        name = data[2];
+                        value = data[3];
+                        continue;
+                }
+                position = null;
+                continue;
             } else if (position != null) {
                 switch (key) {
                     case 0x11:
+                        if (dateBuilder != null) {
                             value = ("000000" + value).substring(value.length());
                             dateBuilder.setDateReverse(
                                     Integer.parseInt(value.substring(0, 2)),
                                     Integer.parseInt(value.substring(2, 4)),
                                     Integer.parseInt(value.substring(4)));
+                        }
                         break;
                     case 0x10:
+                        if (dateBuilder != null) {
                             value = ("00000000" + value).substring(value.length());
                             dateBuilder.setTime(
                                     Integer.parseInt(value.substring(0, 2)),
                                     Integer.parseInt(value.substring(2, 4)),
                                     Integer.parseInt(value.substring(4, 6)),
-                                Integer.parseInt(value.substring(6)) * 10);
+                                    Integer.parseInt(value.substring(6, 10)) * 10);
+                        }
                         break;
                     case 0xA:
                         position.setValid(true);
                         position.setLatitude(Double.parseDouble(value));
                         break;
                     case 0xB:
                         position.setValid(true);
                         position.setLongitude(Double.parseDouble(value));
                         break;
                     case 0xC:
                         position.setAltitude(Double.parseDouble(value));
                         break;
                     case 0xD:
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                         break;
                     case 0xE:
                         position.setCourse(Integer.parseInt(value));
                         break;
                     case 0xF:
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                         break;
                     case 0x12:
                         position.set(Position.KEY_HDOP, Integer.parseInt(value));
                         break;
                     case 0x20:
                         position.set(Position.KEY_ACCELERATION, value);
                         break;
                     case 0x24:
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
                         break;
                     case 0x81:
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
                         break;
                     case 0x82:
                         position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
                         break;
                     case 0x104:
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
                         break;
                     case 0x105:
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                         break;
                     case 0x10c:
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
                         break;
                     case 0x10d:
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                         break;
                     case 0x111:
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
                         break;
                     default:
                         position.set(Position.PREFIX_IO + key, value);
                         break;
                 }
             }
         }
 
         if (position != null) {
-            if (!position.getValid()) {
+            if (!position.getValid() && dateBuilder != null) {
                 getLastLocation(position, null);
             }
             position.setTime(dateBuilder.getDate());
             positions.add(position);
         }
 
         return positions.isEmpty() ? null : positions;
     }
