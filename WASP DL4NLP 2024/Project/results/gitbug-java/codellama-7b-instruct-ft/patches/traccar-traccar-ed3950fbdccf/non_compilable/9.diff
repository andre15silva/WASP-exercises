diff --git a/tmp/0c45d000-2220-4c82-bf53-74e0b7980c55_buggy.java b/tmp/2d3b7b1e-1dae-49cb-ad02-6aa5d9f034df_fixed.java
index abd3198..2b45f52 100644
--- a/tmp/0c45d000-2220-4c82-bf53-74e0b7980c55_buggy.java
+++ b/tmp/2d3b7b1e-1dae-49cb-ad02-6aa5d9f034df_fixed.java
@@ -1,28 +1,36 @@
     @Override
     protected Object encodeCommand(Command command) {
 
         ByteBuf content = Unpooled.buffer();
 
         switch (command.getType()) {
-            case Command.TYPE_POSITION_SINGLE:
+            case Command.TYPE_CUSTOM:
+                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);
+            case Command.TYPE_POSITION_FORCE_REFRESH:
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);
             case Command.TYPE_ENGINE_STOP:
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT, content);
             case Command.TYPE_ENGINE_RESUME:
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT, content);
             case Command.TYPE_SET_SPEED_LIMIT:
                 content.writeByte(command.getInteger(Command.KEY_DATA));
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_SPEED_LIMIT, content);
             case Command.TYPE_SET_ODOMETER:
                 content.writeShort(command.getInteger(Command.KEY_DATA));
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_ODOMETER, content);
             case Command.TYPE_POSITION_PERIODIC:
                 String[] data = command.getString(Command.KEY_FREQUENCY).split(";");
+                content.writeInt(data[3].hashCode());
+                if (data[0].equals("long")) {
+                    content.writeShort(Integer.valueOf(data[1]));
+                    content.writeShort(Integer.valueOf(data[2]));
+                } else {
                     content.writeShort(Integer.valueOf(data[0]));
-                content.writeShort(Integer.valueOf(data[1]));
                     content.writeShort(Integer.valueOf(data[2]));
-                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);
+                }
+                content.writeShort(Integer.valueOf(data[1]));
+                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CUSTOM_COMMAND, content);
             default:
                 return null;
         }
     }
