diff --git a/tmp/38d764e4-7da2-40bc-809e-b2bdbfe7a64b_buggy.java b/tmp/a38a8ee2-ad24-47be-91bf-444b0e43ca0b_fixed.java
index abd3198..ae06398 100644
--- a/tmp/38d764e4-7da2-40bc-809e-b2bdbfe7a64b_buggy.java
+++ b/tmp/a38a8ee2-ad24-47be-91bf-444b0e43ca0b_fixed.java
@@ -1,28 +1,33 @@
     @Override
     protected Object encodeCommand(Command command) {
 
         ByteBuf content = Unpooled.buffer();
 
         switch (command.getType()) {
             case Command.TYPE_POSITION_SINGLE:
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);
             case Command.TYPE_ENGINE_STOP:
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT, content);
             case Command.TYPE_ENGINE_RESUME:
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT, content);
             case Command.TYPE_SET_SPEED_LIMIT:
                 content.writeByte(command.getInteger(Command.KEY_DATA));
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_SPEED_LIMIT, content);
             case Command.TYPE_SET_ODOMETER:
                 content.writeShort(command.getInteger(Command.KEY_DATA));
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_ODOMETER, content);
             case Command.TYPE_POSITION_PERIODIC:
                 String[] data = command.getString(Command.KEY_FREQUENCY).split(";");
+                content.writeByte(GatorProtocolEncoder.PACKET_SEQUENCE_SET);
                 content.writeShort(Integer.valueOf(data[0]));
                 content.writeShort(Integer.valueOf(data[1]));
                 content.writeShort(Integer.valueOf(data[2]));
-                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);
+                content.writeByte(GatorProtocolDecoder.PACKET_SEQUENCE_EOF);
+                content.writeByte(GatorProtocolDecoder.PACKET_TYPE_COMMON);
+                content.writeShort((short) device.getUniqueId().substring(device.getUniqueId().length()-4, device.getUniqueId().length()).hashCode());
+                content.writeByte(GatorProtocolDecoder.PACKET_SEQUENCE_EOF);
+                return content;
             default:
                 return null;
         }
     }
