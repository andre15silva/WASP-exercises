diff --git a/tmp/cd281381-d206-4fe7-8647-19807b2bcb4a_buggy.java b/tmp/b635c7b1-bc8d-4302-a391-73f3e827d452_fixed.java
index 23f078d..20ecd7f 100644
--- a/tmp/cd281381-d206-4fe7-8647-19807b2bcb4a_buggy.java
+++ b/tmp/b635c7b1-bc8d-4302-a391-73f3e827d452_fixed.java
@@ -1,14 +1,24 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
         for (int i = 0; i < s.length(); i++) {
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+                byte[] encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()).getBytes(UTF_8);
+                if (encoded.length == 3) {
+                    sb.append("%");
+                    sb.append(String.format("%2x%2x", encoded[1], encoded[2]));
+                } else if (encoded.length == 2) {
+                    sb.append("%");
+                    sb.append(String.format("%2x", encoded[1]));
+                } else {
+                    sb.append("%");
+                    sb.append('u');
+                    sb.append(String.format("%x%x%x%x", c >> 12, (c >> 8) & 0xff, (c & 0xff) >> 4, c & 0xf));
+                }
             } else {
                 sb.append((char) c);
             }
         }
     }
