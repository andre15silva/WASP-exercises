diff --git a/tmp/95b12bba-e269-42ee-be91-5043469d9982_buggy.java b/tmp/9097a006-0faf-4f02-9b64-04d41955e42c_fixed.java
index f506479..06e964d 100644
--- a/tmp/95b12bba-e269-42ee-be91-5043469d9982_buggy.java
+++ b/tmp/9097a006-0faf-4f02-9b64-04d41955e42c_fixed.java
@@ -1,64 +1,71 @@
         void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
         {
             final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
             final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
             processor.consume(groupArg.getIdentity(), arguments);
 
             final Map<String, SimpleDslArg> argsByName = new HashMap<>();
             argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
             for (SimpleDslArg dslArg : groupArg.getOtherArgs())
             {
                 if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
                 {
                     throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
                 }
             }
 
             while (!arguments.isEmpty())
             {
                 final NameValuePair argument = arguments.peekFirst();
                 if (argument == NameValuePair.NULL)
                 {
                     arguments.pollFirst();
                     continue;
                 }
 
                 if (argument.name == null)
                 {
                     throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
                 }
 
                 final DslArg arg = argsByName.get(argument.name.toLowerCase());
                 if (arg == null)
                 {
                     break;
                 }
 
                 final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
                 if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
                 {
                     break;
                 }
 
                 checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
+                // TODO: how should I handle a parameter (group), that allows multiple values per default
+                // (i.e. a value should be a comma-separated list of values, without the group and value parameters),
+                // but the user decides to use the default separator (commas) for separating the parameter values.
+                String[] values = argument.value.trim().split("(?:\\s*\\,\\s*)|(?:\\s+\\;\\s*)");
+                for (String val : values)
+                {
+                    argValues.add(val.trim());
+                }
                 arguments.pollFirst();
             }
 
             // TODO: this whole thing here is a bit hacky!
             final Map<String, List<String>> valuesByName = new HashMap<>();
             for (final SimpleDslArg simpleDslArg : argsByName.values())
             {
                 final SimpleDslParam param = processor.collect(simpleDslArg);
                 if (param.hasValue())
                 {
                     valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
                 }
             }
 
             final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
             dslArgs[0] = groupArg.getIdentity();
             System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
             groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
         }
