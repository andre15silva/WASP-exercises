diff --git a/tmp/c3b39dc4-d1d3-4eef-a6cf-706abdc08198_buggy.java b/tmp/e2123c80-9467-45bd-9fa3-cbfae1a10e26_fixed.java
index 016a7f6..13f4f18 100644
--- a/tmp/c3b39dc4-d1d3-4eef-a6cf-706abdc08198_buggy.java
+++ b/tmp/e2123c80-9467-45bd-9fa3-cbfae1a10e26_fixed.java
@@ -1,29 +1,37 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        if (prettyPrint && trimLikeBlock && (Element)parentNode != null &&
+            (siblingIndex + 1 >= siblingNodes().size() ||
+             (siblingIndex+1<siblingNodes().size() && ((Node) siblingNodes().get(siblingIndex + 1)) instanceof TextNode &&
+              ((TextNode) ((Node) siblingNodes().get(siblingIndex + 1))).isBlank())
+            )
+        ) {
+            ((Element)parentNode).trailingCarriageReturnsInText(accum);
+        }
     }
