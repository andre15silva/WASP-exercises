diff --git a/tmp/a2d38f3f-8584-4a73-ac1b-a19dc29cbce3_buggy.java b/tmp/c64dc815-1d9f-4812-9923-601f6aa2ece8_fixed.java
index 47a8941..c395156 100644
--- a/tmp/a2d38f3f-8584-4a73-ac1b-a19dc29cbce3_buggy.java
+++ b/tmp/c64dc815-1d9f-4812-9923-601f6aa2ece8_fixed.java
@@ -1,53 +1,63 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
 		// Allows to track class name collisions:
 		Map<String, JDefinedClass> classes;
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
 		}
 		else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+			// Inner-scoped classes: e.g. <xs:element name="Catalogue" type="tns:CatalogueType"/>
+			//  Element is transformed to inner class which is used to represent schemaType and xsd:element.
+			//  This inner class is inner-scoped and has to be declared in the outer-scoped package
+			//  if it is an inner-scoped class element.
+			if (!extraXewOptions.contains("instantiate early")) {
 				for (ClassOutline classOutline : outline.getClasses()) {
-				if (classOutline.implClass == clazz) {
-					XSComponent sc = classOutline.target.getSchemaComponent();
+					if (classesToCheck.contains(classOutline.target.getSchemaComponent().getName())) {
+						for (ClassOutline classOutline2 : outline.getClasses()) {
+							if (classOutline2.implClass == clazz) {
+								XSComponent sc = classOutline2.target.getSchemaComponent();
 
 								// FIXME: Inner class is always a local declaration.
 								assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
 								setPrivateField(sc, "anonymous", Boolean.FALSE);
 
 								break;
 							}
 						}
 					}
+				}
+			}
+		}
 
 		if (classes.containsKey(clazz.name())) {
 			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
 			setPrivateField(clazz, "name", parent.name() + clazz.name());
 		}
 
 		classes.put(clazz.name(), clazz);
 
 		// Finally modify the class so that it refers back the container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
