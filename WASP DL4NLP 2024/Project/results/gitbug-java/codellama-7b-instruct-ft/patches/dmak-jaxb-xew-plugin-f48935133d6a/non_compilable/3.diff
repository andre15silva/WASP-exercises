diff --git a/tmp/47078a1a-eea0-4db9-88cd-6bb9248d7b9c_buggy.java b/tmp/45fb05e7-08ba-4990-8259-74b3da6cbc01_fixed.java
index 47a8941..8e751a8 100644
--- a/tmp/47078a1a-eea0-4db9-88cd-6bb9248d7b9c_buggy.java
+++ b/tmp/45fb05e7-08ba-4990-8259-74b3da6cbc01_fixed.java
@@ -1,53 +1,70 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
 		// Allows to track class name collisions:
 		Map<String, JDefinedClass> classes;
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
 		}
 		else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
+					if (classesToCheck.contains(sc.getName())) {
+						// Fix for <http://java.net/jira/browse/JAXB-894>
+						if (extraXewOptions != null && extraXewOptions.contains(
+								"-verbose") && extraXewOptions.contains(
+								"-Xxew:instantiate early")) {
+							writeSummary("\tNot handling inner-scoped " + sc.getName());
+							continue;
+						}
+
+						XSType xsType = ((XSDeclaration) sc).getType();
+						assert xsType != null : sc.getName();
+						if (!xsType.isElement()) {
+							// This is the case for anonymous complex types (e.g., of type ArrayList<String>)
+							sc = ((XSComplexType) xsType).getContentType();
+						}
+					}
+
 					// FIXME: Inner class is always a local declaration.
 					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
 
 					break;
 				}
 			}
 		}
 
 		if (classes.containsKey(clazz.name())) {
 			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
 			setPrivateField(clazz, "name", parent.name() + clazz.name());
 		}
 
 		classes.put(clazz.name(), clazz);
 
 		// Finally modify the class so that it refers back the container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
