diff --git a/tmp/a4cd3e19-d5e8-490a-9bf9-6a2cff299ef7_buggy.java b/tmp/cc2c07cd-36a8-452f-8aef-37f08f000a6f_fixed.java
index 0583946..9e54e80 100644
--- a/tmp/a4cd3e19-d5e8-490a-9bf9-6a2cff299ef7_buggy.java
+++ b/tmp/cc2c07cd-36a8-452f-8aef-37f08f000a6f_fixed.java
@@ -1,30 +1,37 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            boolean couldIndentAfter =
+                (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
+                    || (next instanceof TextNode && (((TextNode) next).isBlank())); // prev is blank text, from re-parenting
+            if (couldIndentAfter) {
+                // check for a dangling space after a custom node, which should not get trimmed
+                trimLeading = !(parentNode instanceof P ? siblingIndex()>0 : (parentNode instanceof Element ? ((Element) parentNode).tag().normalName().equals("bar") : false));
+            }
+            boolean couldSkip = isBlank; // no indent, no trim but keep new line
+            if (couldSkip)
+                node = (Node) (isEmpty() ? this : wrapWith("")); // replace this element text-node with new empty
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
