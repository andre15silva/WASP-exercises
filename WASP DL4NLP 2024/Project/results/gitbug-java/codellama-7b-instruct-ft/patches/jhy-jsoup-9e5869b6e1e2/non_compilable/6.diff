diff --git a/tmp/feee1dc4-71bd-49f6-babc-4f6ad03836de_buggy.java b/tmp/19fd4a0d-c97c-4cba-ac4f-c32910344213_fixed.java
index 0583946..715e36c 100644
--- a/tmp/feee1dc4-71bd-49f6-babc-4f6ad03836de_buggy.java
+++ b/tmp/19fd4a0d-c97c-4cba-ac4f-c32910344213_fixed.java
@@ -1,30 +1,33 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
+        boolean keepIndentSpaces = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
+            boolean isDangling =
+                (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            if (isDangling && isBlank) return;
+            keepIndentSpaces = isDangling;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                     (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                    (isDangling && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
-                indent(accum, depth, out);
+                indent(accum, depth, out, !keepIndentSpaces);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
