diff --git a/tmp/4ab5aa84-9d99-4314-b371-4d9cfb52627a_buggy.java b/tmp/5356ea51-49d8-4bc5-821b-7768bbfca757_fixed.java
index 0583946..87bfe8b 100644
--- a/tmp/4ab5aa84-9d99-4314-b371-4d9cfb52627a_buggy.java
+++ b/tmp/5356ea51-49d8-4bc5-821b-7768bbfca757_fixed.java
@@ -1,30 +1,36 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            boolean isDanglingSpace = isBlank();
+            boolean leadingTextBreak = (siblingIndex == 0 && parent != null && parent.tag().isBlock() && !isBlank) ||
+                    ((nodeName().equals("#text")) && out.outline() && previousSibling() != null && siblingNodes().size() == 1 &&
+                            previousSibling() instanceof TextNode && !((TextNode)previousSibling()).isBlank());
+            boolean isBr = (siblingIndex == 0 && parent != null && ((Element) parent).customTag()) || ((nodeName().equals("#text") && next instanceof TextNode && ((TextNode) next).isBlank()));  // dangling space after custom element / inline <br>
+            boolean couldSkip = next != null &&
+                    (next.nodeName().equals("#text") ? (((TextNode) next).customTextMarker() && ((TextNode) next).isBlank() && !leadingTextBreak) : (next.nodeName().equals("#comment") || next.nodeName().equals("#document-type"))) &&
+                    !isDanglingSpace &&
+                    !isBr;
+            if (couldSkip) return;
 
             Node prev = previousSibling();
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isDanglingSpace) ||
+                (out.outline() && siblingNodes().size() > 0 && !isDanglingSpace) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
