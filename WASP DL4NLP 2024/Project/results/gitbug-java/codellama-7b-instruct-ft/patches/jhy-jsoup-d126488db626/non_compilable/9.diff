diff --git a/tmp/d6feb59b-57e5-4ba8-8645-21f77918f9cb_buggy.java b/tmp/209c185b-66cd-4e9e-a2c8-586735b48321_fixed.java
index 5bf31b1..d85ceb7 100644
--- a/tmp/d6feb59b-57e5-4ba8-8645-21f77918f9cb_buggy.java
+++ b/tmp/209c185b-66cd-4e9e-a2c8-586735b48321_fixed.java
@@ -1,17 +1,37 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
+        StringBuilder cs = new StringBuilder();
         while (!tq.isEmpty()) {
-            if (tq.matches("("))
-                sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
-                sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
-                    break;
+            if (tq.matchesAny(',')) {
+                if (cs.length() == 0)
+                    sq.append(sq.length() == 0 ? " * " : tq.consume());
                 else
-                    tq.consume();
+                    cs.append(tq.consume());
+            }
+            else if (tq.matches("(")) {
+                if (sq.length() == 0)
+                    sq.append(" * ");
+                else {
+                    while (cs.length() <= tq.position())
+                        cs.append(cs.length() <= tq.position() ? " * " : tq.consume());
+                    return StringUtil.releaseBuilder(sq);
+                }
+            }
+            else if (tq.matches("[")) {
+                cs.append(tq.chompBalanced('[', ']'));
+                while (cs.length() <= tq.position())
+                    cs.append(cs.length() <= tq.position() ? " * " : tq.consume());
+            }
+            else if (tq.matchesAny(Combinators)) {
+                if (cs.length() == 0)
+                    sq.append(" * ");
+                else
+                    return StringUtil.releaseBuilder(sq);
+            }
             else
-                sq.append(tq.consume());
+                sq.append(cs.length() !=0 || (sq.length() != 0 && sq.charAt(sq.length() -1) == ' ') ? tq.consume() : "");
         }
+        while (cs.length() > 0)
+            cs.deleteCharAt(cs.length() - 1);
         return StringUtil.releaseBuilder(sq);
     }
