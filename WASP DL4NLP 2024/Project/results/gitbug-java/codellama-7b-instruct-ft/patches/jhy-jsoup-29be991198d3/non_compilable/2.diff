diff --git a/tmp/42c0d935-c35b-4d0a-bdf9-508771998fca_buggy.java b/tmp/9e6ad096-18e7-4a58-ae79-5c5975b1f037_fixed.java
index 862c60c..5c4a694 100644
--- a/tmp/42c0d935-c35b-4d0a-bdf9-508771998fca_buggy.java
+++ b/tmp/9e6ad096-18e7-4a58-ae79-5c5975b1f037_fixed.java
@@ -1,25 +1,27 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                            parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            boolean couldSkip = next != null && // not last text node
+                    (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
+                    ||
+                    (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
             if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+                (siblingIndex == 0 && parentNode instanceof Document))
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
