diff --git a/tmp/22dadf63-bb99-41e1-824b-2993fb81e234_buggy.java b/tmp/dee405ab-b3c6-4cdc-bb86-ec5652de6147_fixed.java
index 2444d12..ab4cbc3 100644
--- a/tmp/22dadf63-bb99-41e1-824b-2993fb81e234_buggy.java
+++ b/tmp/dee405ab-b3c6-4cdc-bb86-ec5652de6147_fixed.java
@@ -1,29 +1,29 @@
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
-        Scanner tokens = new Scanner(exp);
+        Scanner postfixTokens = new Scanner(exp);
 
-        while (tokens.hasNext()) {
-            if (tokens.hasNextInt()) {
-                s.push(tokens.nextInt()); // If int then push to stack
+        while (postfixTokens.hasNext()) {
+            if (postfixTokens.hasNextInt()) {
+                s.push(postfixTokens.nextInt()); // If int then push to stack
             } else { // else pop top two values and perform the operation
                 int num2 = s.pop();
                 int num1 = s.pop();
-                String op = tokens.next();
+                StringBuilder op = new StringBuilder(postfixTokens.next()); // If not int, op comes back from this
 
-                switch (op) {
+                switch (op.toString()) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
                     case "/" -> s.push(num1 / num2);
                     default -> throw new IllegalArgumentException("exp contains an unknown operation.");
                 }
                 //  "+", "-", "*", "/"
             }
         }
-        tokens.close();
+        postfixTokens.close();
         if (s.size() != 1) {
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
     }
