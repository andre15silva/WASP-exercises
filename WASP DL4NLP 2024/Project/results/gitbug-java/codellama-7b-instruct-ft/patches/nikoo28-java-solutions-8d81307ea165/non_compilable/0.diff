diff --git a/tmp/cc9acf1a-bdee-4ad8-ad96-7bcc8f7f0027_buggy.java b/tmp/a8b4afe2-c1e0-4cb1-b98b-320bb9f90ed1_fixed.java
index 9739964..9c4c89c 100644
--- a/tmp/cc9acf1a-bdee-4ad8-ad96-7bcc8f7f0027_buggy.java
+++ b/tmp/a8b4afe2-c1e0-4cb1-b98b-320bb9f90ed1_fixed.java
@@ -1,27 +1,29 @@
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
-    spans[0] = 1; // Span of first element is always 1
+    spans[0] = 1; // Span of first element is usually 1, except if it
+    // is followed by a greater price.
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty()
           && prices[indexStack.peek()] <= prices[i])
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
+      // is greater than all previous values. In that case,
+      // we need to increment the span of next element in the loop.
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
-        spans[i] = i - indexStack.peek();
+        spans[i] = i - indexStack.peek() + 1;
 
       indexStack.push(i);
     }
 
     return spans;
   }
