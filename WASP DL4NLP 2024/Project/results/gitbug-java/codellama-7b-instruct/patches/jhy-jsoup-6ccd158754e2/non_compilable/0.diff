diff --git a/tmp/de14285b-e5a4-4280-b6c0-9530d6d3c808_buggy.java b/tmp/fe922b5a-e3f9-4b83-a77b-030585e2388e_fixed.java
index 23f078d..2ddbde1 100644
--- a/tmp/de14285b-e5a4-4280-b6c0-9530d6d3c808_buggy.java
+++ b/tmp/fe922b5a-e3f9-4b83-a77b-030585e2388e_fixed.java
@@ -1,14 +1,20 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
+
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encodedString = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            sb.append(encodedString.substring(0, encodedString.length() - 1));
+            // OR
+            /*
+            String encodedString = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            sb.append(encodedString.replaceAll("\\?$", ""));
+            */
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
