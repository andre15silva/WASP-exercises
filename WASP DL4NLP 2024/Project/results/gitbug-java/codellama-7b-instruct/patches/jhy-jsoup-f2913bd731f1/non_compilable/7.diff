diff --git a/tmp/36fda2ec-f17a-453a-a070-b58ffa754d45_buggy.java b/tmp/9846cb79-cfee-44a6-9e5c-f9f26d43bb43_fixed.java
index 016a7f6..57bf9bb 100644
--- a/tmp/36fda2ec-f17a-453a-a070-b58ffa754d45_buggy.java
+++ b/tmp/9846cb79-cfee-44a6-9e5c-f9f26d43bb43_fixed.java
@@ -1,29 +1,28 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
-        final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final boolean prettyPrint = out.prettyPrint();
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
+    }
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+    if (!isBlank() || normaliseWhite) {
+        final boolean useNewLine = (normaliseWhite && !isBlank()) || (nextNode instanceof Element && nextNode.tag().isBlock()) || (nextNode instanceof TextNode && nextNode.isBlank());
+        final boolean addNewline = useNewLine && (siblingIndex > 0 || parentNode instanceof Document);
+        final boolean removeNewline = useNewLine && parentNode instanceof Document;
 
-            Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
-                indent(accum, depth, out);
+        if (addNewline) {
+            accum.append("\n");
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+
+        if (removeNewline) {
+            accum.append("\n");
+        }
+    }
 }
