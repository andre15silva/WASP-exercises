diff --git a/tmp/305af741-24f6-4a58-b306-5d04d0a341a7_buggy.java b/tmp/e03ff288-dad1-4898-bb69-422ad86c4f72_fixed.java
index 0583946..d0394ae 100644
--- a/tmp/305af741-24f6-4a58-b306-5d04d0a341a7_buggy.java
+++ b/tmp/e03ff288-dad1-4898-bb69-422ad86c4f72_fixed.java
@@ -1,30 +1,31 @@
-    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
+    static String outerHtmlHead(Element el, int depth, Document.OutputSettings out) throws IOException {
+        final Elements nodes = el.childNodes();
         final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        final Element parent = el.parent();
+        final boolean normaliseWhite = prettyPrint && !node.preserveWhitespace(parent);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            if (couldSkip && isBlank) return "";
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        return Entities.escape(accum, el.coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
