diff --git a/tmp/6eb0fe79-e37b-4d8c-a7bf-ea90e333d514_buggy.java b/tmp/fbe12089-da19-46d2-8484-75c5eb45e943_fixed.java
index 30eba92..99a22e0 100644
--- a/tmp/6eb0fe79-e37b-4d8c-a7bf-ea90e333d514_buggy.java
+++ b/tmp/fbe12089-da19-46d2-8484-75c5eb45e943_fixed.java
@@ -1,113 +1,2 @@
-    private Object decodePosition(
-            Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
-        if (deviceSession == null) {
-            return null;
-        }
-
-        List<Position> positions = new LinkedList<>();
-        Position position = null;
-        DateBuilder dateBuilder = null;
-
-        for (String pair : sentence.split(",")) {
-            String[] data = pair.split("[=:]");
-            int key;
-            try {
-                key = Integer.parseInt(data[0], 16);
-            } catch (NumberFormatException e) {
-                continue;
-            }
-            String value = data[1];
-            if (key == 0x0) {
-                if (position != null) {
-                    position.setTime(dateBuilder.getDate());
-                    positions.add(position);
-                }
-                position = new Position(getProtocolName());
-                position.setDeviceId(deviceSession.getDeviceId());
-                dateBuilder = new DateBuilder(new Date());
-            } else if (position != null) {
-                switch (key) {
-                    case 0x11:
-                        value = ("000000" + value).substring(value.length());
-                        dateBuilder.setDateReverse(
-                                Integer.parseInt(value.substring(0, 2)),
-                                Integer.parseInt(value.substring(2, 4)),
-                                Integer.parseInt(value.substring(4)));
-                        break;
-                    case 0x10:
-                        value = ("00000000" + value).substring(value.length());
-                        dateBuilder.setTime(
-                                Integer.parseInt(value.substring(0, 2)),
-                                Integer.parseInt(value.substring(2, 4)),
-                                Integer.parseInt(value.substring(4, 6)),
-                                Integer.parseInt(value.substring(6)) * 10);
-                        break;
-                    case 0xA:
-                        position.setValid(true);
-                        position.setLatitude(Double.parseDouble(value));
-                        break;
-                    case 0xB:
-                        position.setValid(true);
-                        position.setLongitude(Double.parseDouble(value));
-                        break;
-                    case 0xC:
-                        position.setAltitude(Double.parseDouble(value));
-                        break;
-                    case 0xD:
-                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
-                        break;
-                    case 0xE:
-                        position.setCourse(Integer.parseInt(value));
-                        break;
-                    case 0xF:
-                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
-                        break;
-                    case 0x12:
-                        position.set(Position.KEY_HDOP, Integer.parseInt(value));
-                        break;
-                    case 0x20:
-                        position.set(Position.KEY_ACCELERATION, value);
-                        break;
-                    case 0x24:
-                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
-                        break;
-                    case 0x81:
-                        position.set(Position.KEY_RSSI, Integer.parseInt(value));
-                        break;
-                    case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
-                        break;
-                    case 0x104:
-                        position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
-                        break;
-                    case 0x105:
-                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
-                        break;
-                    case 0x10c:
-                        position.set(Position.KEY_RPM, Integer.parseInt(value));
-                        break;
-                    case 0x10d:
-                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
-                        break;
-                    case 0x111:
-                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
-                        break;
-                    default:
-                        position.set(Position.PREFIX_IO + key, value);
-                        break;
-                }
-            }
-        }
-
-        if (position != null) {
-            if (!position.getValid()) {
-                getLastLocation(position, null);
-            }
-            position.setTime(dateBuilder.getDate());
-            positions.add(position);
-        }
-
-        return positions.isEmpty() ? null : positions;
-    }
+Yes, you can use a try-catch block to catch the `NumberFormatException` and ignore it if the string does not represent a valid number.
\ No newline at end of file
