diff --git a/tmp/36aca70c-86b6-424f-9991-b172a94f36b5_buggy.java b/tmp/70874511-b2f2-466e-965f-977c4ee18dfb_fixed.java
index 2444d12..74bb229 100644
--- a/tmp/36aca70c-86b6-424f-9991-b172a94f36b5_buggy.java
+++ b/tmp/70874511-b2f2-466e-965f-977c4ee18dfb_fixed.java
@@ -1,29 +1,11 @@
-    // Evaluates the given postfix expression string and returns the result.
-    public static int postfixEvaluate(final String exp) {
-        Stack<Integer> s = new Stack<Integer>();
-        Scanner tokens = new Scanner(exp);
-
-        while (tokens.hasNext()) {
-            if (tokens.hasNextInt()) {
-                s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
-                int num2 = s.pop();
-                int num1 = s.pop();
-                String op = tokens.next();
-
-                switch (op) {
-                    case "+" -> s.push(num1 + num2);
-                    case "-" -> s.push(num1 - num2);
-                    case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+public static String[] reverse(String str) {
+        if (str == null) {
+            throw new IllegalArgumentException("Input cannot be null");
         }
-                //  "+", "-", "*", "/"
+        int n = str.length();
+        char[] chars = new char[n];
+        for (int i = 0; i < n; i++) {
+            chars[i] = str.charAt(n - i - 1);
         }
-        }
-        tokens.close();
-        if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
-        }
-        return s.pop();
+        return new String(chars);
     }
