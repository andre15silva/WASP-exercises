diff --git a/tmp/6c12b530-afe5-4f2e-b1d3-ea6d6d76e696_buggy.java b/tmp/cd7b29ec-5bc7-434b-941a-b09b28f24e74_fixed.java
index b86b44d..c6da9bd 100644
--- a/tmp/6c12b530-afe5-4f2e-b1d3-ea6d6d76e696_buggy.java
+++ b/tmp/cd7b29ec-5bc7-434b-941a-b09b28f24e74_fixed.java
@@ -1,4 +1,64 @@
     public final Object computeValue(EvalContext context) {
         return compute(args[0].computeValue(context), args[1].computeValue(context))
                 ? Boolean.TRUE : Boolean.FALSE;
     }
+
+    static Object equal(Object val1, Object val2) {
+        if (val1 instanceof ObjectSet) {
+            return ((ObjectSet) val1).isEmpty() ? Boolean.FALSE : XPath.typeAgnosticEqual(val1, val2);
+        }
+        if (val2 instanceof ObjectSet) {
+            return ((ObjectSet) val2).isEmpty() ? Boolean.FALSE : XPath.typeAgnosticEqual(val1, val2);
+        }
+        return XPath.typeAgnosticEqual(val1, val2);
+    }
+
+    static Object notEqual(Object val1, Object val2) {
+        if (val1 instanceof ObjectSet) {
+            return ((ObjectSet) val1).isEmpty() ? Boolean.TRUE : XPath.typeAgnosticNotEqual(val1, val2);
+        }
+        if (val2 instanceof ObjectSet) {
+            return ((ObjectSet) val2).isEmpty() ? Boolean.TRUE : XPath.typeAgnosticNotEqual(val1, val2);
+        }
+        return XPath.typeAgnosticNotEqual(val1, val2);
+    }
+
+    static Object lesser(Object val1, Object val2) {
+        if (val1 instanceof ObjectSet) {
+            return ((ObjectSet) val1).isEmpty() ? Boolean.FALSE : XPath.typeAgnosticLess(val1, val2);
+        }
+        if (val2 instanceof ObjectSet) {
+            return ((ObjectSet) val2).isEmpty() ? Boolean.TRUE : XPath.typeAgnosticLess(val1, val2);
+        }
+        return XPath.typeAgnosticLess(val1, val2);
+    }
+
+    static Object greater(Object val1, Object val2) {
+        if (val1 instanceof ObjectSet) {
+            return ((ObjectSet) val1).isEmpty() ? Boolean.TRUE : XPath.typeAgnosticGreater(val1, val2);
+        }
+        if (val2 instanceof ObjectSet) {
+            return ((ObjectSet) val2).isEmpty() ? Boolean.FALSE : XPath.typeAgnosticGreater(val1, val2);
+        }
+        return XPath.typeAgnosticGreater(val1, val2);
+    }
+
+    static Object lesserEqual(Object val1, Object val2) {
+        if (val1 instanceof ObjectSet) {
+            return ((ObjectSet) val1).isEmpty() ? Boolean.FALSE : XPath.typeAgnosticLessEqual(val1, val2);
+        }
+        if (val2 instanceof ObjectSet) {
+            return ((ObjectSet) val2).isEmpty() ? Boolean.TRUE : XPath.typeAgnosticLessEqual(val1, val2);
+        }
+        return XPath.typeAgnosticLessEqual(val1, val2);
+    }
+
+    static Object greaterEqual(Object val1, Object val2) {
+        if (val1 instanceof ObjectSet) {
+            return ((ObjectSet) val1).isEmpty() ? Boolean.TRUE : XPath.typeAgnosticGreaterEqual(val1, val2);
+        }
+        if (val2 instanceof ObjectSet) {
+            return ((ObjectSet) val2).isEmpty() ? Boolean.FALSE : XPath.typeAgnosticGreaterEqual(val1, val2);
+        }
+        return XPath.typeAgnosticGreaterEqual(val1, val2);
+    }
