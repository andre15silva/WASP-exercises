diff --git a/tmp/8de9cacc-312f-471a-bab8-6763893500fe_buggy.java b/tmp/9065899a-6666-4689-b1de-a5d67cb67362_fixed.java
index 6e45f80..517039a 100644
--- a/tmp/8de9cacc-312f-471a-bab8-6763893500fe_buggy.java
+++ b/tmp/9065899a-6666-4689-b1de-a5d67cb67362_fixed.java
@@ -1,21 +1,38 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        return (!JsonElement.class.isAssignableFrom(requestedType))
+            ? (TypeAdapter<T2>) typeAdapter
+            : (TypeAdapter<T2>) newJsonElementAdapter(gson, typeAdapter);
 
       }
-      @Override public String toString() {
+      private <T2> TypeAdapter<T2> newJsonElementAdapter(final Gson gson,
+          final TypeAdapter<T1> typeAdapter) {
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            typeAdapter.write(out, value);
+          }
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            JsonElement element = JsonTreeReader.read(reader);
+            return typeAdapter.read(new JsonReaderReader(element));
+          }
+        };
+      }
+      @Override
+      public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
