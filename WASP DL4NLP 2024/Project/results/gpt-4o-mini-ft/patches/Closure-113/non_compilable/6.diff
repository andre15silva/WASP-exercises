diff --git a/tmp/ef88fafd-a2a8-4a00-a431-a9ce1a39d5b7_buggy.java b/tmp/2f65f896-4801-442f-8d64-0f2ceecdb7ae_fixed.java
index 29a9d2f..da0b060 100644
--- a/tmp/ef88fafd-a2a8-4a00-a431-a9ce1a39d5b7_buggy.java
+++ b/tmp/2f65f896-4801-442f-8d64-0f2ceecdb7ae_fixed.java
@@ -1,43 +1,38 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
-      if (provided == null || !provided.isExplicitlyProvided()) {
+      if (provided == null) {
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
-      } else {
-        JSModule providedModule = provided.explicitModule;
-
-        // This must be non-null, because there was an explicit provide.
-        Preconditions.checkNotNull(providedModule);
-
-        JSModule module = t.getModule();
-        if (moduleGraph != null &&
-            module != providedModule &&
-            !moduleGraph.dependsOn(module, providedModule)) {
+      } else if (!provided.isExplicitlyProvided() &&
+          // Handle the common case - code using goog.provide and goog.require -
+          // when the client use the closure pass and doesn't care about this
+          // unrecognizedRequire error.
+          (moduleGraph == null ||
+              !shouldRemoveGoogRequireUmappedNamespace(ns))) {
         compiler.report(
             t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
-                  providedModule.getName(),
-                  module.getName()));
-        }
+                provided.explicitModule.getName(),
+                t.getModule()));
       }
 
       maybeAddToSymbolTable(left);
-      maybeAddStringNodeToSymbolTable(arg);
+      maybeAddToSymbolTable(arg);
 
       // Requires should be removed before further processing.
       // Some clients run closure pass multiple times, first with
       // the checks for broken requires turned off. In these cases, we
       // allow broken requires to be preserved by the first run to
       // let them be caught in the subsequent run.
       if (provided != null) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
     }
   }
