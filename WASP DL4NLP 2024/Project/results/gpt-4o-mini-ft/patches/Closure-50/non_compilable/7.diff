diff --git a/tmp/922d3521-9954-4e8e-ad8a-4bc265a0ae6b_buggy.java b/tmp/46a28031-2d61-4311-9293-9d2820271dca_fixed.java
index d8b0158..ea4bbf5 100644
--- a/tmp/922d3521-9954-4e8e-ad8a-4bc265a0ae6b_buggy.java
+++ b/tmp/46a28031-2d61-4311-9293-9d2820271dca_fixed.java
@@ -1,113 +1,146 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
     Node right = callTarget.getNext();
     if (right != null) {
       if (!NodeUtil.isImmutableValue(right)) {
         return n;
       }
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
     // "," is the default, it doesn't need to be explicit
 
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+    boolean isEmptyArray =
+        (arrayNode.getChildCount() == 0) ||
+        (arrayNode.getChildCount() == 1 &&
+         NodeUtil.isImmutableValue(arrayNode.getFirstChild()));
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
         if (sb != null) {
-          Preconditions.checkNotNull(prev);
+          assert prev != null;
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
 
     if (sb != null) {
-      Preconditions.checkNotNull(prev);
+      assert prev != null;
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
+    boolean canRemoveDelimiters = !isEmptyArray;
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return n;
         }
+        if (canRemoveDelimiters) {
+          foldedStringNode = foldArrayDelimiters(
+              arrayNode, foldedStringNode, arrayFoldedChildren);
+        }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
         // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+        if (arrayFoldedChildren.size() == arrayNode.getChildCount() ||
+            (canRemoveDelimiters && (foldedSize <= originalSize))) {
           return n;
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
-          return n;
+        if (canRemoveDelimiters) {
+          foldedStringNode = foldArrayDelimiters(
+              arrayNode, foldedStringNode, arrayFoldedChildren);
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         reportCodeChange();
         break;
     }
 
     return n;
   }
+
+  // TODO(user): Move this helper somewhere else
+  private Node foldArrayDelimiters(Node arrayNode, Node foldedStringNode,
+                                    List<Node> arrayFoldedChildren) {
+    List<Node> newArrayFoldedChildren = Lists.newLinkedList();
+    StringBuilder sb = new StringBuilder();
+    sb.append(foldedStringNode.getString());
+    boolean hasDelimiters = false;
+    for (Node child : arrayFoldedChildren) {
+      String value = NodeUtil.getArrayElementStringValue(child);
+      if (value.equals("")) {
+        hasDelimiters = true;
+        continue; // Ignore empty string.
+      }
+      if (hasDelimiters) {
+        sb.append(",");
+        hasDelimiters = false;
+      }
+      sb.append(value);
+      newArrayFoldedChildren.add(child);
+    }
+    foldedStringNode.setString(sb.toString());
+    return foldedStringNode;
+  }
+
