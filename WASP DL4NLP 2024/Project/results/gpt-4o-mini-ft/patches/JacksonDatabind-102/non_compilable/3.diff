diff --git a/tmp/dffb474d-17f1-4fc8-8826-76a6ea7ee19f_buggy.java b/tmp/24c40bb0-6c92-4ab7-b302-f16fb82172ea_fixed.java
index 1b07d98..73a6114 100644
--- a/tmp/dffb474d-17f1-4fc8-8826-76a6ea7ee19f_buggy.java
+++ b/tmp/24c40bb0-6c92-4ab7-b302-f16fb82172ea_fixed.java
@@ -1,76 +1,85 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         // Note! Should not skip if `property` null since that'd skip check
         // for config overrides, in case of root value
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
         if (format.hasPattern()) {
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
             TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
                     : serializers.getTimeZone();
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
         final boolean hasLocale = format.hasLocale();
         final boolean hasTZ = format.hasTimeZone();
         final boolean asString = (shape == JsonFormat.Shape.STRING);
+        final boolean asTimestamp = asString || shape.isNumeric();
 
-        if (!hasLocale && !hasTZ && !asString) {
-            return this;
+        if (!hasLocale && !hasTZ && !asString && !asTimestamp) {
+            // 31-Aug-2022, tatu: For [databind#2064], the root value here is not acceptable for this
+            //    combination; need conformed type to avoid back-compat problems
+            return withFormat(asString ? Boolean.TRUE : Boolean.FALSE, null);
         }
 
         DateFormat df0 = serializers.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
         if (df0 instanceof StdDateFormat) {
             StdDateFormat std = (StdDateFormat) df0;
             if (format.hasLocale()) {
                 std = std.withLocale(format.getLocale());
             }
             if (format.hasTimeZone()) {
                 std = std.withTimeZone(format.getTimeZone());
             }
+            if (shape.isNumber()) {
+                std = std.withShape(JsonFormat.Shape.NUMBER);
+            }
+            if (asString) {
+                std = std.withShape(JsonFormat.Shape.STRING);
+            }
             return withFormat(Boolean.FALSE, std);
         }
 
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
         if (!(df0 instanceof SimpleDateFormat)) {
             serializers.reportBadDefinition(handledType(), String.format(
                 "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
                 df0.getClass().getName()));
         }
         SimpleDateFormat df = (SimpleDateFormat) df0;
         if (hasLocale) {
             // Ugh. No way to change `Locale`, create copy; must re-crete completely:
             df = new SimpleDateFormat(df.toPattern(), format.getLocale());
         } else {
             df = (SimpleDateFormat) df.clone();
         }
         TimeZone newTz = format.getTimeZone();
         boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
         if (changeTZ) {
             df.setTimeZone(newTz);
         }
         return withFormat(Boolean.FALSE, df);
     }
