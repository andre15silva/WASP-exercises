diff --git a/tmp/c0d46b58-7f29-46d8-9c92-af66d0795f98_buggy.java b/tmp/02681ee4-0748-40e4-a0bc-4d4f05904f70_fixed.java
index d907b39..0c8cecd 100644
--- a/tmp/c0d46b58-7f29-46d8-9c92-af66d0795f98_buggy.java
+++ b/tmp/02681ee4-0748-40e4-a0bc-4d4f05904f70_fixed.java
@@ -1,56 +1,60 @@
     public int read(byte[] buffer, int start, int length) throws IOException {
+        // TODO - make sure these exceptions are correct
         if (closed) {
             throw new IOException("The stream is closed");
         }
         if (inf.finished() || current == null) {
             return -1;
         }
 
         // avoid int overflow, check null buffer
         if (start <= buffer.length && length >= 0 && start >= 0
             && buffer.length - start >= length) {
             if (current.getMethod() == ZipArchiveOutputStream.STORED) {
                 int csize = (int) current.getSize();
                 if (readBytesOfEntry >= csize) {
                     return -1;
                 }
                 if (offsetInBuffer >= lengthOfLastRead) {
                     offsetInBuffer = 0;
                     if ((lengthOfLastRead = in.read(buf)) == -1) {
+                        if (readBytesOfEntry >= current.getSize()) {
                             return -1;
                         }
+                        throw new IOException("Truncated ZIP file");
+                    }
                     count(lengthOfLastRead);
                     bytesReadFromStream += lengthOfLastRead;
                 }
                 int toRead = length > lengthOfLastRead
                     ? lengthOfLastRead - offsetInBuffer
                     : length;
                 if ((csize - readBytesOfEntry) < toRead) {
                     toRead = csize - readBytesOfEntry;
                 }
                 System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
                 offsetInBuffer += toRead;
                 readBytesOfEntry += toRead;
                 crc.update(buffer, start, toRead);
                 return toRead;
             }
             if (inf.needsInput()) {
                 fill();
                 if (lengthOfLastRead > 0) {
                     bytesReadFromStream += lengthOfLastRead;
                 }
             }
             int read = 0;
             try {
                 read = inf.inflate(buffer, start, length);
             } catch (DataFormatException e) {
                 throw new ZipException(e.getMessage());
             }
             if (read == 0 && inf.finished()) {
                 return -1;
             }
             crc.update(buffer, start, read);
             return read;
         }
         throw new ArrayIndexOutOfBoundsException();
     }
