diff --git a/tmp/331f47db-b75e-4a74-864c-d4b9ad25ac51_buggy.java b/tmp/a9318469-f449-4ea1-8a96-9ac136d94427_fixed.java
index 735a993..48238f9 100644
--- a/tmp/331f47db-b75e-4a74-864c-d4b9ad25ac51_buggy.java
+++ b/tmp/a9318469-f449-4ea1-8a96-9ac136d94427_fixed.java
@@ -1,29 +1,33 @@
     /**
      * Appends an object to the builder padding on the right to a fixed length.
      * The <code>toString</code> of the object is used.
      * If the object is larger than the length, the right hand side is lost.
      * If the object is null, null text value is used.
      * 
      * @param obj  the object to append, null uses null text
      * @param width  the fixed field width, zero or negative has no effect
      * @param padChar  the pad character to use
      * @return this, to enable chaining
      */
     public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
-        if (width > 0) {
+        if (width <= 0) {
+            return this;
+        }
+        int strLen;
+        char[] str = (obj == null ? getNullText() : obj.toString().toCharArray());
+        if (str == null) {
+            return this;
+        }
+        strLen = str.length;
         ensureCapacity(size + width);
-            String str = (obj == null ? getNullText() : obj.toString());
-            int strLen = str.length();
-            if (strLen >= width) {
-                str.getChars(0, strLen, buffer, size);
-            } else {
-                int padLen = width - strLen;
-                str.getChars(0, strLen, buffer, size);
-                for (int i = 0; i < padLen; i++) {
-                    buffer[size + strLen + i] = padChar;
+        if (strLen > width) {
+            strLen = width;
         }
+        System.arraycopy(str, 0, buffer, size, strLen);
+        size += strLen;
+        for (int i = strLen; i < width; i++) {
+            buffer[size + i] = padChar;
         }
-            size += width;
-        }
+        size += (width - strLen);
         return this;
     }
