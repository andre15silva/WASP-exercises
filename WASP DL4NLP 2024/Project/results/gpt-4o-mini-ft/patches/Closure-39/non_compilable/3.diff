diff --git a/tmp/c8dae72b-954d-4ee2-897e-6676540fc94c_buggy.java b/tmp/d3d4c5f4-2477-49cd-9076-6b37e3251c27_fixed.java
index e4d90e7..6a2ab62 100644
--- a/tmp/c8dae72b-954d-4ee2-897e-6676540fc94c_buggy.java
+++ b/tmp/d3d4c5f4-2477-49cd-9076-6b37e3251c27_fixed.java
@@ -1,45 +1,47 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
+      StringBuilder sb = new StringBuilder();
+      sb.append("{");
+
       prettyPrint = false;
+      if (isRecordType() || isUnionType()) {
+        // Don't pretty print recursively.
+        String typeString = getReferencedType().toStringHelper(true);
+        sb.append(typeString);
+      }
 
-      // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
-      StringBuilder sb = new StringBuilder();
-      sb.append("{");
-
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        sb.append(formatForType(getPropertyType(property)));
 
         ++i;
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
-
       prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
