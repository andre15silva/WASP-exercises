diff --git a/tmp/283c9082-a2ff-4f29-89d7-6cf516e6e866_buggy.java b/tmp/bc905cb2-4f13-486b-a387-147d1fb5ef59_fixed.java
index 51ebfca..208e5a5 100644
--- a/tmp/283c9082-a2ff-4f29-89d7-6cf516e6e866_buggy.java
+++ b/tmp/bc905cb2-4f13-486b-a387-147d1fb5ef59_fixed.java
@@ -1,32 +1,38 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      * 
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
 
+        int chunkSize;
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        if (isChunked) {
+            chunkSize = CHUNK_SIZE;
+        } else {
+            chunkSize = (int) len;
+        }
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
                 
-        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
+        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(chunkSize, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
