diff --git a/tmp/01a7c1d5-384d-4e56-9a2a-1b2b244d8cd1_buggy.java b/tmp/dbe736be-73d5-47f1-a6b1-98930c932816_fixed.java
index 27e0871..61f3550 100644
--- a/tmp/01a7c1d5-384d-4e56-9a2a-1b2b244d8cd1_buggy.java
+++ b/tmp/dbe736be-73d5-47f1-a6b1-98930c932816_fixed.java
@@ -1,86 +1,89 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
         result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
         result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
         result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
         break;
       case Token.SUB:
         result = lval - rval;
         break;
       case Token.MUL:
         result = lval * rval;
         break;
       case Token.MOD:
-        if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
+        if (Math.abs(rval) < 0.001) {
+          // If rval is very close to 0 toss this error otherwise javaspeed tests suffer.
           result = lval % rval;
           break;
+        } else {
+          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
+          return null;
+        }
       case Token.DIV:
         if (rval == 0) {
           error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
           return null;
-        }
+        } else {
           result = lval / rval;
           break;
+        }
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
     // TODO(johnlenz): consider removing the result length check.
     // length of the left and right value plus 1 byte for the operator.
     if (String.valueOf(result).length() <=
         String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
 
         // Do not try to fold arithmetic for numbers > 2^53. After that
         // point, fixed-point math starts to break down and become inaccurate.
         Math.abs(result) <= MAX_FOLD_NUMBER) {
       Node newNumber = Node.newNumber(result);
       return newNumber;
     } else if (Double.isNaN(result)) {
       return Node.newString(Token.NAME, "NaN");
     } else if (result == Double.POSITIVE_INFINITY) {
-      return Node.newString(Token.NAME, "Infinity");
+      return NewNode(Token.NAME, "Infinity", left, right);
     } else if (result == Double.NEGATIVE_INFINITY) {
-      return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
+      return NewNode(Token.NAME, "Infinity", Node.newNumber(-1.0), Node.newNumber(1.0));
     }
 
     return null;
   }
