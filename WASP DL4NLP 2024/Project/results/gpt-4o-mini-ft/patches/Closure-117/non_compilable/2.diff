diff --git a/tmp/d9b2ab11-35dd-4aa9-896d-0aad1bc2d884_buggy.java b/tmp/a9e42399-52b5-484a-9321-a87fb2cf6a33_fixed.java
index 39981f0..c1f89c7 100644
--- a/tmp/d9b2ab11-35dd-4aa9-896d-0aad1bc2d884_buggy.java
+++ b/tmp/a9e42399-52b5-484a-9321-a87fb2cf6a33_fixed.java
@@ -1,65 +1,78 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
+        if (objectType != null) {
+          String typeName = objectType.toString();
+          if (typeName.equals("Object")) {
+            return "Object" + "." + propName;
+          }
+          if (typeName.equals("Function")) {
+            return typeName + "." + propName;
+          }
+          // Try to get a qualified constructor type name, if possible.
+          String className = typeName
+              .substring((int) "function ".length());
+          String qualifiedClassName;
+          if (objectType.getConstructor() != null &&
+                objectType.getConstructor().isAbstract()) {
+            qualifiedClassName = "abstract " + className;
+          } else {
+            qualifiedClassName = className;
+          }
+          return qualifiedClassName + "." + propName;
         }
       }
     }
 
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
