diff --git a/tmp/5e095db1-9714-454f-96f5-b87f3337fd68_buggy.java b/tmp/59b7f668-d899-40e9-9ab8-e12ed4bf87e8_fixed.java
index db19f52..18503f1 100644
--- a/tmp/5e095db1-9714-454f-96f5-b87f3337fd68_buggy.java
+++ b/tmp/59b7f668-d899-40e9-9ab8-e12ed4bf87e8_fixed.java
@@ -1,32 +1,48 @@
     // switching the chartset midstream when a meta http-equiv tag defines the charset.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
-        String docData;
+        // Javadoc spec says charset can be null, but validation of byte data can lead to it being non-null:
+        // https://github.com/jhy/jsoup/issues/713
+        if (charsetName == null) {
+            charsetName = defaultCharset;
+        }
         Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        String docData;
+        if (!Charset.forName(charsetName).equals(Charset.forName(defaultCharset))) { // need to decode to correct charset
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+            // can have spurious byte-order-mark
+            if (docData.startsWith("\uFEFF")) {
+                docData = docData.substring(1);
+            }
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    // can have spurious byte-order-mark
+                    if (docData.startsWith("\uFEFF")) {
+                        docData = docData.substring(1);
                     }
+                    doc = parser.parseInput(docData, baseUri);
                 }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            }
+        } else {
             docData = Charset.forName(charsetName).decode(byteData).toString();
+            // can have spurious byte-order-mark
+            if (docData.startsWith("\uFEFF")) {
+                docData = docData.substring(1);
+            }
+            doc = parser.parseInput(docData, baseUri);
         }
         if (doc == null) {
             // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
             // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
             // into head mode
 
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
