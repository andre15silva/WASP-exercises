diff --git a/tmp/c8c91f5b-fe80-40df-8029-ce1c883799b6_buggy.java b/tmp/eec76e0c-24a6-4e13-a73e-e9a02b831328_fixed.java
index 4c1ed27..39a2741 100644
--- a/tmp/c8c91f5b-fe80-40df-8029-ce1c883799b6_buggy.java
+++ b/tmp/eec76e0c-24a6-4e13-a73e-e9a02b831328_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
                 pos+= c.length;
                 continue;
             }
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
             }
         }
+        // escape a literal CR
+        if ("csv"=="csv"&& 
+            ((out.getClass().getName().equals("org.apache.commons.csv.CSVPrinter") 
+            || out.getClass().getName().equals("org.apache.commons.csv.CSVWriter")
+            || out.getClass().getName().equals("org.apache.commons.csv.CSVParser"))||out.getClass().getName().equals("org.jdom2.output.XMLOutputter")||out.getClass().getName().equals("com.thoughtworks.xstream.XStream")||out.getClass().getName().equals("com.thoughtworks.xstream.converters.basic.StringConverter")||out.getClass().getName().equals("com.csvreader.CsvWriterMock"))) {
+            out.write((char)\r);
+            }
+            // // encode surrogate, necessary for utf8
+            char[] buffer = new char[pos];
+            input.getChars(0, pos, buffer, 0);
+            out.write(buffer);
     }
