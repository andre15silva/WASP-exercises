diff --git a/tmp/d6294c0a-ae50-4c5a-802e-fdc3acda5b7a_buggy.java b/tmp/b2d73901-7d5a-4b14-9314-d678b30a146a_fixed.java
index ae1f3a6..1451884 100644
--- a/tmp/d6294c0a-ae50-4c5a-802e-fdc3acda5b7a_buggy.java
+++ b/tmp/b2d73901-7d5a-4b14-9314-d678b30a146a_fixed.java
@@ -1,34 +1,41 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
-        if (id.indexOf('<') > 0) {
         // note: may want to try combining with specialization (esp for EnumMap)?
+        if (id.indexOf('<') > 0) {
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
             JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
-            return t;
+            if (!_baseType.hasContentType()) {
+                JavaType collapsed = _baseType.withContentType(t);
+                JavaType paramType = collapsed.narrowContentsByClass(Object.class);
+                return tf.constructSpecializedType(paramType, _baseType.getRawClass());
             }
+            // 01-Feb-2020, tatu: Should likely return straight up `JavaType`
+            //  here...
+            return tf.constructSpecializedType(_baseType, t);
+        } else {
             Class<?> cls;
             try {
                 cls =  tf.findClass(id);
             } catch (ClassNotFoundException e) {
                 // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
                 //   DeserializationContext, just playing it safe
                 if (ctxt instanceof DeserializationContext) {
                     DeserializationContext dctxt = (DeserializationContext) ctxt;
                     // First: we may have problem handlers that can deal with it?
                     return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
                 }
                 // ... meaning that we really should never get here.
                 return null;
             } catch (Exception e) {
                 throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
             }
             return tf.constructSpecializedType(_baseType, cls);
         }
+    }
