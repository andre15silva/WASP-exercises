diff --git a/tmp/17de7c69-5f91-44d5-9b42-bb9dafd320e8_buggy.java b/tmp/6820df7a-3e91-4b9c-9301-c8628a351c72_fixed.java
index ae1f3a6..0a0a333 100644
--- a/tmp/17de7c69-5f91-44d5-9b42-bb9dafd320e8_buggy.java
+++ b/tmp/6820df7a-3e91-4b9c-9301-c8628a351c72_fixed.java
@@ -1,34 +1,54 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
          *    check if any generics info is added; and only then ask factory
          *    to do translation when necessary
          */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
             // note: may want to try combining with specialization (esp for EnumMap)?
             // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
             //    compatibility -- needed later anyway, and not doing so may open
             //    security issues.
-            JavaType t = tf.constructFromCanonical(id);
+            Class<?> cls;
+            if (id.indexOf("<") < 0 && id.indexOf(".") < 0) {
+                // Can't do this for nested types? (like 'java.util.Map<java.lang.String, ?>')
+                // just let factory handle it
+                return super._typeFromId(id, ctxt);
+            }
+            try {
+                cls =  tf.findClass(id);
+            } catch (ClassNotFoundException e) {
+                // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
+                //   DeserializationContext, just playing it safe
+                if (ctxt instanceof DeserializationContext) {
+                    DeserializationContext dctxt = (DeserializationContext) ctxt;
+                    // First: we may have problem handlers that can deal with it?
+                    return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
+                }
+                // ... meaning that we really should never get here.
+                cls = null;
+            } catch (Exception e) {
+                throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
+            }
             // Probably cleaner to have a method in `TypeFactory` but can't add in patch
-            return t;
+            return tf.constructSpecializedType(_baseType, cls);
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
             // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
             //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
         return tf.constructSpecializedType(_baseType, cls);
     }
