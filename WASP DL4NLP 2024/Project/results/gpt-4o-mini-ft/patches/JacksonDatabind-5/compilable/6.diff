diff --git a/tmp/e38982ec-7be0-4070-a7a1-5ab8cbbc7a23_buggy.java b/tmp/07c37603-1c91-434d-9ae9-f6eca92003af_fixed.java
index b2db1d6..b83ab9e 100644
--- a/tmp/e38982ec-7be0-4070-a7a1-5ab8cbbc7a23_buggy.java
+++ b/tmp/07c37603-1c91-434d-9ae9-f6eca92003af_fixed.java
@@ -1,29 +1,25 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
-                    _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
+                    _addMethodMixIns(targetClass, methods, mixin, mixIns);
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
