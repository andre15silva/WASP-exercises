diff --git a/tmp/24c7fb7d-6c0f-4ce0-9a01-cb42890abba7_buggy.java b/tmp/14566b68-180c-4c50-9222-fd848394e122_fixed.java
index b2db1d6..ccf5c8c 100644
--- a/tmp/24c7fb7d-6c0f-4ce0-9a01-cb42890abba7_buggy.java
+++ b/tmp/14566b68-180c-4c50-9222-fd848394e122_fixed.java
@@ -1,29 +1,32 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
                 /* Do we already have a method to augment (from sub-class
                  * that will mask this mixIn)? If so, add if visible
                  * without masking (no such annotation)
                  */
                 if (am != null) {
                     _addMixUnders(m, am);
                     /* Otherwise will have precedence, but must wait
                      * until we find the real method (mixIn methods are
                      * just placeholder, can't be called)
                      */
                 } else {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // Allow merging of anything not already available
+                    if (!methods.find(m.getName(), m.getParameterTypes()).hasNext()) {
                         mixIns.add(_constructMethod(m));
                     }
                 }
             }
         }
+    }
