diff --git a/tmp/c3ee9f33-e422-478d-ad61-bee5c768a789_buggy.java b/tmp/39ad3f2c-939d-49c3-87b8-9f89a781d803_fixed.java
index 1c875ad..4439af0 100644
--- a/tmp/c3ee9f33-e422-478d-ad61-bee5c768a789_buggy.java
+++ b/tmp/39ad3f2c-939d-49c3-87b8-9f89a781d803_fixed.java
@@ -1,31 +1,12 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
+        if (invocation.getArguments().length != matchers.size()) {
             throw new UnsupportedOperationException();
-
-        } else {
+        }
         for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            Matcher matcher = matchers.get(position);
+            Object arg = invocation.getArguments()[position];
+            if (matcher instanceof CapturesArguments) {
+                ((CapturesArguments) matcher).captureFrom(arg);
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
-    }
