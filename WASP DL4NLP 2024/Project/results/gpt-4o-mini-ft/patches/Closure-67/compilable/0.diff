diff --git a/tmp/45c6b550-15bd-40cd-94b5-32597eb3976c_buggy.java b/tmp/acdcf688-c41e-456a-8947-d94f881b4981_fixed.java
index 939f49b..d890800 100644
--- a/tmp/45c6b550-15bd-40cd-94b5-32597eb3976c_buggy.java
+++ b/tmp/acdcf688-c41e-456a-8947-d94f881b4981_fixed.java
@@ -1,21 +1,25 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
+      // We don't care if assign itself is a property assign. As far as we know it could be
+      // completely adding something to Object.prototype or another high-level object that we don't
+      // know about.
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
-        // We want to exclude the assignment itself from the usage list
+        // They may have chained the call using aliasing, so check if the child node
+        // and grandchild node are both GETPROP.
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
           Node child = n.getFirstChild().getFirstChild().getNext();
 
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
