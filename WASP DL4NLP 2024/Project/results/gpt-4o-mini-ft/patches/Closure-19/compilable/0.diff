diff --git a/tmp/e3bd016c-d0f1-4bd5-9010-d0368989660d_buggy.java b/tmp/563a1e3d-9fd9-4a1d-818d-40d99f718183_fixed.java
index fa42cd9..05f5983 100644
--- a/tmp/e3bd016c-d0f1-4bd5-9010-d0368989660d_buggy.java
+++ b/tmp/563a1e3d-9fd9-4a1d-818d-40d99f718183_fixed.java
@@ -1,27 +1,28 @@
   /**
    * Declares a refined type in {@code scope} for the name represented by
    * {@code node}. It must be possible to refine the type of the given node in
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
   protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
     switch (node.getType()) {
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
         break;
 
       case Token.GETPROP:
         String qualifiedName = node.getQualifiedName();
         Preconditions.checkNotNull(qualifiedName);
 
         JSType origType = node.getJSType();
         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
-        // "this" references aren't currently modeled in the CFG.
-
+        // "this" references aren't currently modeled in the CFG, but this has to
+        // exist here for good error reporting.
+        // TODO(johnlenz): Remove this comment when this code isn't necessary.
       default:
         throw new IllegalArgumentException("Node cannot be refined. \n" +
-            node.toStringTree());
+            node.toStringTree() + " in " + scope.toString());
     }
   }
