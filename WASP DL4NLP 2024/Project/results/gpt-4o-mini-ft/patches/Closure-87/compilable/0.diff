diff --git a/tmp/ab8a8cb1-b5a3-410b-848c-ec8ab1aa9a6b_buggy.java b/tmp/e8ed6911-0dca-4008-bcea-8c74822130f9_fixed.java
index 19fd63e..d522021 100644
--- a/tmp/ab8a8cb1-b5a3-410b-848c-ec8ab1aa9a6b_buggy.java
+++ b/tmp/e8ed6911-0dca-4008-bcea-8c74822130f9_fixed.java
@@ -1,24 +1,29 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
+          // We try to detect this case, and folds does not create an
+          // enclosing block node with a result value when updating
+          // the ADJACENCY information, which is unlikely to be updated
+          // until the next pass.
+          // TODO(johnlenz): See if this is still true with the
+          // http://code.google.com/p/closure-compiler/issues/detail?id=591
+          // 'Leave second-pass blocks alone' fix.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
 
           return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
