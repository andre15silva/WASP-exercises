diff --git a/tmp/3312b3dd-9405-4aad-9666-2fdc235fda56_buggy.java b/tmp/9011e53b-dc6c-457b-8005-e7ee15c8c776_fixed.java
index 19fd63e..5a12339 100644
--- a/tmp/3312b3dd-9405-4aad-9666-2fdc235fda56_buggy.java
+++ b/tmp/9011e53b-dc6c-457b-8005-e7ee15c8c776_fixed.java
@@ -1,24 +1,30 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+          // TODO(johnlenz): Do more testing with this bug. Test scenarios
+          // in the accompanying test.js.
+          // https://github.com/google/closure-compiler/issues/284
+          // IE allows expression methods that aren't "mouse" events to work
+          // and they just break when called excitedly. There's no warning
+          // about whether we were wrong or it's just calling with an
+          // invalid set of arguments.
+          if (maybeExpr.getType() != Token.EXPR_RESULT) {
             return NodeUtil.isExpressionNode(maybeExpr);
           }
       }
+    }
 
     return false;
   }
