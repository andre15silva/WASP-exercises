diff --git a/tmp/69d6951e-7a13-4d6b-9f6b-32d595821401_buggy.java b/tmp/a3568947-e24d-40a8-ab9d-eb820f6d959e_fixed.java
index d80b7d0..2be0793 100644
--- a/tmp/69d6951e-7a13-4d6b-9f6b-32d595821401_buggy.java
+++ b/tmp/a3568947-e24d-40a8-ab9d-eb820f6d959e_fixed.java
@@ -1,61 +1,71 @@
     /**
      * Checks dimensions and values of boundaries and inputSigma if defined.
      */
     private void checkParameters() {
         final double[] init = getStartPoint();
         final double[] lB = getLowerBound();
         final double[] uB = getUpperBound();
 
         // Checks whether there is at least one finite bound value.
         boolean hasFiniteBounds = false;
         for (int i = 0; i < lB.length; i++) {
             if (!Double.isInfinite(lB[i]) ||
                 !Double.isInfinite(uB[i])) {
                 hasFiniteBounds = true;
                 break;
             }
         }
         // Checks whether there is at least one infinite bound value.
         boolean hasInfiniteBounds = false;
         if (hasFiniteBounds) {
             for (int i = 0; i < lB.length; i++) {
                 if (Double.isInfinite(lB[i]) ||
                     Double.isInfinite(uB[i])) {
                     hasInfiniteBounds = true;
                     break;
                 }
             }
 
             if (hasInfiniteBounds) {
                 // If there is at least one finite bound, none can be infinite,
                 // because mixed cases are not supported by the current code.
                 throw new MathUnsupportedOperationException();
-            } else {
+            } else if (checkGaussian) {
                 // Convert API to internal handling of boundaries.
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
 
                 // Abort early if the normalization will overflow (cf. "encode" method).
+                final double r = getRange();
+                // if boundaries > 0 then normalization is possible
+                if (r > 0) {
+                    final double half = r / 0.5;
+                    final double d2 = half * half;
+                    final double d3 = half * d2;
+                    final double d4 = half * d3;
+                    if ((0.5 + d2 + d3 + d4) > 1) {
+                        throw new NumberIsTooLargeException(r, 1.0, true);
+                    }
+                }
             }
         } else {
             // Convert API to internal handling of boundaries.
             boundaries = null;
         }
 
         if (inputSigma != null) {
             if (inputSigma.length != init.length) {
                 throw new DimensionMismatchException(inputSigma.length, init.length);
             }
             for (int i = 0; i < init.length; i++) {
                 if (inputSigma[i] < 0) {
                     throw new NotPositiveException(inputSigma[i]);
                 }
-                if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
-                    }
+                if (boundaries != null &&
+                    inputSigma[i] >= FastMath.nextUp(boundaries[1][i] - boundaries[0][i])) {
+                    throw new OutOfRangeException(inputSigma[i], 0, FastMath.nextUp(boundaries[1][i] - boundaries[0][i]));
                 }
             }
         }
     }
