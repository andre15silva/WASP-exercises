diff --git a/tmp/f1891afe-fa43-4c52-9f0e-f1e83f22c0e3_buggy.java b/tmp/87ed0352-918f-42ba-8262-a0a2b3bb2f9d_fixed.java
index d80b7d0..e6d3f3a 100644
--- a/tmp/f1891afe-fa43-4c52-9f0e-f1e83f22c0e3_buggy.java
+++ b/tmp/87ed0352-918f-42ba-8262-a0a2b3bb2f9d_fixed.java
@@ -1,61 +1,81 @@
     /**
      * Checks dimensions and values of boundaries and inputSigma if defined.
      */
     private void checkParameters() {
         final double[] init = getStartPoint();
         final double[] lB = getLowerBound();
         final double[] uB = getUpperBound();
 
         // Checks whether there is at least one finite bound value.
         boolean hasFiniteBounds = false;
         for (int i = 0; i < lB.length; i++) {
             if (!Double.isInfinite(lB[i]) ||
                 !Double.isInfinite(uB[i])) {
                 hasFiniteBounds = true;
                 break;
             }
         }
         // Checks whether there is at least one infinite bound value.
         boolean hasInfiniteBounds = false;
         if (hasFiniteBounds) {
             for (int i = 0; i < lB.length; i++) {
                 if (Double.isInfinite(lB[i]) ||
                     Double.isInfinite(uB[i])) {
                     hasInfiniteBounds = true;
                     break;
                 }
             }
 
             if (hasInfiniteBounds) {
                 // If there is at least one finite bound, none can be infinite,
                 // because mixed cases are not supported by the current code.
                 throw new MathUnsupportedOperationException();
             } else {
                 // Convert API to internal handling of boundaries.
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
 
                 // Abort early if the normalization will overflow (cf. "encode" method).
+                double factor = FastMath.nextDown(FastMath.sqrt(uBIncrement));
+                if (FastMath.sqrt(init1Increment) >= factor) {
+                    factor = FastMath.sqrt(init1Increment) / factor;
+                    final double[] normBound = new double[] { factor, factor };
+                    final double[] differential = new double[2];
+                    for (int j = 0; j < differential.length; j++) {
+                        differential[j] = factor * factor;
+                    }
+                    if (Double.isFinite(differential[0]) &&
+                        Double.isFinite(differential[1])) {
+                        final double[] sumBound = new double[] { 0, 0 };
+                        for (int i = 0; i < normBound.length; i++) {
+                            sumBound[i] += normBound[i];
+                        }
+                        if (normBound[0] + normBound[1] >  cameFrom) {
+                            throw new NumberIsTooLargeException
+                            (init1Increment[0], diffBound2[1], true);
+                        }
+                    }
+                }
             }
         } else {
             // Convert API to internal handling of boundaries.
             boundaries = null;
         }
 
         if (inputSigma != null) {
             if (inputSigma.length != init.length) {
                 throw new DimensionMismatchException(inputSigma.length, init.length);
             }
             for (int i = 0; i < init.length; i++) {
                 if (inputSigma[i] < 0) {
                     throw new NotPositiveException(inputSigma[i]);
                 }
                 if (boundaries != null) {
                     if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
                         throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
                     }
                 }
             }
         }
     }
