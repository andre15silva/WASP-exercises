diff --git a/tmp/1b6ac1ae-b6e0-4144-b7ae-34fc9ffcb536_buggy.java b/tmp/740d8cd6-641c-4673-b711-702bd89a9d93_fixed.java
index 1c53d31..6e4acf2 100644
--- a/tmp/1b6ac1ae-b6e0-4144-b7ae-34fc9ffcb536_buggy.java
+++ b/tmp/740d8cd6-641c-4673-b711-702bd89a9d93_fixed.java
@@ -1,20 +1,23 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+    // bug fix for https://code.google.com/p/google-gson/issues/detail?id=183
+    // fix: bug causes incompatibility between GWT RPC and gson.
+    // result could be an instance of roboguice' JsoAdapter that wouldn't give null-safe results deserialising fully populated instances.
     typeAdapter = typeAdapter.nullSafe();
     return typeAdapter;
   }
