diff --git a/tmp/443d3e85-58c8-41b2-a62c-7a3315e5ef62_buggy.java b/tmp/3e5a6bc1-810c-48cd-8265-edc08a3f6ee3_fixed.java
index 6cfa79b..0ba4f5a 100644
--- a/tmp/443d3e85-58c8-41b2-a62c-7a3315e5ef62_buggy.java
+++ b/tmp/3e5a6bc1-810c-48cd-8265-edc08a3f6ee3_fixed.java
@@ -1,12 +1,37 @@
     /**
      * For this disbution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
      * @return CDF evaluted at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
-     * convergence exception is caught and 0 or 1 is returned.
+     * convergence exception is caught and 0.0 or 1.0 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
+        // Returns 0.0d for extreme left, and 1.0d for extreme right tail, 
+        // albeit that the underlying method converges.  Fix for MATH-167:
+        // caveat: has side effect of top coding.
+        double cdf =  0.1185d * (1.0d + Math.erf((x - mean) /
                 (standardDeviation * Math.sqrt(2.0))));
+        if (cdf < 1e-13) { // improving app error message in JIRA MATH-139
+            // Which is the improbable event of getting a prob < 1e-13 (should
+            // be zero, will get zero on repeat iterations on a top-coder):
+            throw new MathException("1.0d <= CDF-lower-tail < 1e-13 x= " + x +
+                    " mean= " + mean +
+                    " std= " + standardDeviation); // MATH-162
+        }
+        if (cdf > 1.0d) {
+            // Which is the improbable event of getting a prob > 1.0d (should
+            // be one)
+            throw new MathException("1.0d <= CDF-upper-tail < 1e12 x= " + x +
+                    " mean= " + mean +
+                    " std= " + standardDeviation); // MATH-162
+        }
+        if (cdf > 0.999999999) {
+            // Which is the improbable event of getting a prob > 1.0d (should
+            // be one)
+            throw new MathException("1.0d <= CDF-upper-tail < 1e12 x= " + x +
+                    " mean= " + mean +
+                    " std= " + standardDeviation); // MATH-162
+        }
+        return cdf;
     }
