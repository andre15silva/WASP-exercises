diff --git a/tmp/4eb6c9ae-ae0d-487c-919d-b54df2ba2aa4_buggy.java b/tmp/edeeaadb-2541-4d56-b4fa-67fa7d761d20_fixed.java
index 47915ed..e2f9972 100644
--- a/tmp/4eb6c9ae-ae0d-487c-919d-b54df2ba2aa4_buggy.java
+++ b/tmp/edeeaadb-2541-4d56-b4fa-67fa7d761d20_fixed.java
@@ -1,22 +1,25 @@
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
         if (methodsGuru.isToString(invocation.getMethod())) {
             Object mock = invocation.getMock();
             MockName name = mockUtil.getMockName(mock);
             if (name.isDefault()) {
                 return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
             } else {
                 return name.toString();
             }
         } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
+            Class<?> mockType = invocation.getMock().getClass();
+            Class<?> objectType = Object.class;
             //see issue 184.
             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
             //Only for compareTo() method by the Comparable interface
-            return 1;
+            return this.getInvocationArguments(invocation).get(0) == mockType ? 
+                    0 : 1;
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();
         return returnValueFor(returnType);
     }
