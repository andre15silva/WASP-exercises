diff --git a/tmp/d4f628e2-1b9e-4bde-a0df-c728091d9acc_buggy.java b/tmp/c17357e3-53a1-4975-ae24-67d745bc0cd7_fixed.java
index 47915ed..448d7f0 100644
--- a/tmp/d4f628e2-1b9e-4bde-a0df-c728091d9acc_buggy.java
+++ b/tmp/c17357e3-53a1-4975-ae24-67d745bc0cd7_fixed.java
@@ -1,22 +1,26 @@
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
         if (methodsGuru.isToString(invocation.getMethod())) {
+            //returns string representation of cancel method parameters
             Object mock = invocation.getMock();
             MockName name = mockUtil.getMockName(mock);
             if (name.isDefault()) {
                 return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
             } else {
                 return name.toString();
             }
         } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
+            //compareTo(...) method on a mock object should have only case if we're comparing it to nothing.
             //see issue 184.
-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
+            //mocks by default should return 0 if references are the same (this means mock.compareTo(mock)), 
+            //otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
             //Only for compareTo() method by the Comparable interface
-            return 1;
+            //See this junit test: mock.ValidTestCaseCompareToTest.incorrectMocksCanHaveOverlappingInteractions
+            return 0;
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();
         return returnValueFor(returnType);
     }
