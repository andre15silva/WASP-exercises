diff --git a/tmp/2aaf55e7-710a-457d-a356-a8afab6c9aba_buggy.java b/tmp/282b54d6-441b-48c3-927e-2da58b380dbf_fixed.java
index 47915ed..79ed230 100644
--- a/tmp/2aaf55e7-710a-457d-a356-a8afab6c9aba_buggy.java
+++ b/tmp/282b54d6-441b-48c3-927e-2da58b380dbf_fixed.java
@@ -1,22 +1,24 @@
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
         if (methodsGuru.isToString(invocation.getMethod())) {
             Object mock = invocation.getMock();
             MockName name = mockUtil.getMockName(mock);
             if (name.isDefault()) {
                 return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
             } else {
                 return name.toString();
             }
         } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
             //see issue 184.
-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
+            //NOTE: mocks by default should return (b<0 ? -1 : (b>0 ? 1 : 0) for compareTo() method. returnType - 1 / 0 / 2 is required.
             //Only for compareTo() method by the Comparable interface
-            return 1;
+            //0 if the mocks has the same compareTo()
+            //2 for comparing mocks which are not the same
+            return 2;
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();
         return returnValueFor(returnType);
     }
