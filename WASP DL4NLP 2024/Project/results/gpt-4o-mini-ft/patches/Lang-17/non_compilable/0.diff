diff --git a/tmp/74bfa155-bb70-4f08-ae04-276675b644f6_buggy.java b/tmp/12ea62fa-3cef-4fcf-9f8f-b98351d85205_fixed.java
index b86c1ea..b1d74b0 100644
--- a/tmp/74bfa155-bb70-4f08-ae04-276675b644f6_buggy.java
+++ b/tmp/12ea62fa-3cef-4fcf-9f8f-b98351d85205_fixed.java
@@ -1,38 +1,58 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
+     * @since 1.0
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
+                if (Character.isHighSurrogate(c[0]) && Character.isLowSurrogate(c[1])) {
+                    StringBuilder sb = new StringBuilder();
+                    sb.append('\\');
+                    sb.append('u');
+                    sb.append((char) (c[0].charValue()));
+                    out.write(sb.toString());
+                    sb = new StringBuilder();
+                    sb.append('\\');
+                    sb.append('u');
+                    sb.append((char) (c[1].charValue()));
+                    out.write(sb.toString());
+                    System.out.println("wrote:");
+                    System.out.println(c[0]);
+                    System.out.println(c[1]);
+                    //20.12.2012, 8:41 AM
+                    //out.write(c);
+                } else {
                     out.write(c);
                 }
+            }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+                // Contract with translators is that they have to understand codepoints 
+                // and they just took care of a surrogate pair
                 for (int pt = 0; pt < consumed; pt++) {
                     if (pos < len - 2) {
                         pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
+                    }
+                    else {
                         pos++;    
                     }
                 }
                 pos--;
             }
             pos++;
         }
     }
