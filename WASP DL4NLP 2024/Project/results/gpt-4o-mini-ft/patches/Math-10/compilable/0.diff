diff --git a/tmp/c543e9b4-fd6d-4d0b-b81d-bf8ee26117f3_buggy.java b/tmp/78317377-6031-4729-b68a-bfc77c7529d8_fixed.java
index d27c40c..66c422d 100644
--- a/tmp/c543e9b4-fd6d-4d0b-b81d-bf8ee26117f3_buggy.java
+++ b/tmp/78317377-6031-4729-b68a-bfc77c7529d8_fixed.java
@@ -1,49 +1,90 @@
     /** Compute two arguments arc tangent of a derivative structure.
      * @param y array holding the first operand
      * @param yOffset offset of the first operand in its array
      * @param x array holding the second operand
      * @param xOffset offset of the second operand in its array
      * @param result array where result must be stored (for
      * two arguments arc tangent the result array <em>cannot</em>
      * be the input array)
      * @param resultOffset offset of the result in its array
      */
     public void atan2(final double[] y, final int yOffset,
                       final double[] x, final int xOffset,
                       final double[] result, final int resultOffset) {
 
+        final double xValue = x[xOffset];
+        final double yValue = y[yOffset];
+
         // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
         double[] tmp2 = new double[getSize()];
         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
-
+        final double rValue = tmp1[0];
+        if (xValue >= 0) {
+            if (yValue >= 0) {
+                if (rValue < 0) { 
+                    // (+0, +0) or (-0, +0) => atan2(y, x) = 0
+                    result[resultOffset] = +0.0; 
+                } else {
+                    if (rValue == 0) {
+                        // (0, 0) => atan2(y, x) = 0
+                        result[resultOffset] = +0.0;
+                    } else {
                         // compute atan2(y, x) = 2 atan(y / (r + x))
                         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
                         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
                         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
                         for (int i = 0; i < tmp2.length; ++i) {
                             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
                         }
-
+                    }
+                }
+            } else {
+                if (rValue < 0) { 
+                    // (-0, -0) => atan2(y, x) = -pi
+                    result[resultOffset] = -FastMath.PI;
+                } else {
+                    // compute atan2(y, x) = 2 atan(y / (r + x))
+                    add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
+                    divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
+                    atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
+                    for (int i = 0; i < tmp2.length; ++i) {
+                        result[resultOffset + i] = -2 * tmp2[i]; // -2 * atan(y / (r + x))
+                    }
+                }
+            }
+        } else {
+            if (yValue >= 0) {
+                if (rValue < 0) { 
+                    // (+0, -0) => atan2(y, x) = +pi
+                    result[resultOffset] = FastMath.PI;
                 } else {
-
                     // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
                     subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
                     divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
                     atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
                     result[resultOffset] =
                             ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
                     for (int i = 1; i < tmp2.length; ++i) {
                         result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
                     }
+                }
+            } else {
+                // (-0, -0) => atan2(y, x) = -pi
+                if (rValue < 0) { 
+                    result[resultOffset] = -FastMath.PI;
+                }
+                for (int i = 0; i < tmp2.length; ++i) {
+                    result[resultOffset + i] = -2 * tmp2[i]; // -2 * atan(y / (r - x))
+                }
+            }
 
         }
 
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
 
     }
