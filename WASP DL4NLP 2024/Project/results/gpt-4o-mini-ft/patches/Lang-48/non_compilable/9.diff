diff --git a/tmp/c0fcafaa-bf4f-4050-a599-e46efc45b1df_buggy.java b/tmp/9fa515dc-6a1c-4d59-9c60-f9c95e10bd33_fixed.java
index 82bdfd4..9562567 100644
--- a/tmp/c0fcafaa-bf4f-4050-a599-e46efc45b1df_buggy.java
+++ b/tmp/9fa515dc-6a1c-4d59-9c60-f9c95e10bd33_fixed.java
@@ -1,51 +1,56 @@
     /**
      * <p>Test if two <code>Object</code>s are equal using their
      * <code>equals</code> method.</p>
      *
      * @param lhs  the left hand object
      * @param rhs  the right hand object
      * @return EqualsBuilder - used to chain calls.
      */
     public EqualsBuilder append(Object lhs, Object rhs) {
-        if (isEquals == false) {
+        if (!isEquals) {
+            return this;
+        }
+        if (lhs == null) {
+            if (rhs == null) {
+                return this;
+            } else {
+                this.setEquals(false);
+                return this;
+            }
+        }
+        if (rhs == null) {
+            this.setEquals(false);
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
-        if (lhs == null || rhs == null) {
-            this.setEquals(false);
-            return this;
-        }
         Class lhsClass = lhs.getClass();
-        if (!lhsClass.isArray()) {
+        Class rhsClass = rhs.getClass();
+        if (!lhsClass.isArray() && !rhsClass.isArray()) {
+            if (lhs instanceof BigDecimal || rhs instanceof BigDecimal) {
+                // BIGDECIMAL fix for LANG-393
+                // See http://issues.apache.org/jira/browse/LANG-393
+                BigDecimal val1 = new BigDecimal(lhs.toString());
+                BigDecimal val2 = new BigDecimal(rhs.toString());
+                if (val1.compareTo(val2) == 0) {
+                    return this;
+                }
+                this.setEquals(false);
+                return this;
+            } else {
                 // The simple case, not an array, just test the element
                 isEquals = lhs.equals(rhs);
-        } else if (lhs.getClass() != rhs.getClass()) {
-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
+            }
+        } else if (lhsClass != rhsClass) {
+            // Here when we compare different dimensions
+            if (lhsClass.isArray() && rhsClass.isArray() && rhsClass.isAssignableFrom(lhsClass)) {
+                // e.g. l = boolean[], r = short[]
                 this.setEquals(false);
+                return this;
+            }
         }
         // 'Switch' on type of array, to dispatch to the correct handler
         // This handles multi dimensional arrays of the same depth
-        else if (lhs instanceof long[]) {
-            append((long[]) lhs, (long[]) rhs);
-        } else if (lhs instanceof int[]) {
-            append((int[]) lhs, (int[]) rhs);
-        } else if (lhs instanceof short[]) {
-            append((short[]) lhs, (short[]) rhs);
-        } else if (lhs instanceof char[]) {
-            append((char[]) lhs, (char[]) rhs);
-        } else if (lhs instanceof byte[]) {
-            append((byte[]) lhs, (byte[]) rhs);
-        } else if (lhs instanceof double[]) {
-            append((double[]) lhs, (double[]) rhs);
-        } else if (lhs instanceof float[]) {
-            append((float[]) lhs, (float[]) rhs);
-        } else if (lhs instanceof boolean[]) {
-            append((boolean[]) lhs, (boolean[]) rhs);
-        } else {
-            // Not an array of primitives
-            append((Object[]) lhs, (Object[]) rhs);
-        }
         return this;
     }
