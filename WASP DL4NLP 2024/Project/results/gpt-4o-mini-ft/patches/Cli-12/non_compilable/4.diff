diff --git a/tmp/36aa7760-0ba9-4586-91a4-74e9a51e1bc0_buggy.java b/tmp/4bd78e9b-c3b3-4412-aa11-96a34b93e9c8_fixed.java
index 7e64f1d..0448933 100644
--- a/tmp/36aa7760-0ba9-4586-91a4-74e9a51e1bc0_buggy.java
+++ b/tmp/4bd78e9b-c3b3-4412-aa11-96a34b93e9c8_fixed.java
@@ -1,78 +1,81 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of 
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop 
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
-            else if ("-".equals(arg))
+            else if ("-".equals(arg) || arg.startsWith("-"))
             {
-                tokens.add("-");
-            }
-            else if (arg.startsWith("-"))
+                if (arg.length() < 3 || !arg.substring(1, 2).equals("="))
                 {
-                String opt = Util.stripLeadingHyphens(arg);
-
-                if (options.hasOption(opt))
+                    if (options.hasOption(arg))
                     {
                         tokens.add(arg);
                     }
                     else
                     {
                         if (options.hasOption(arg.substring(0, 2)))
                         {
                             // the format is --foo=value or -foo=value
                             // the format is a special properties option (-Dproperty=value)
                             tokens.add(arg.substring(0, 2)); // -D
                             tokens.add(arg.substring(2)); // property=value
                         }
                         else
                         {
                             eatTheRest = stopAtNonOption;
                             tokens.add(arg);
                         }
                     }
                 }
                 else
+                {
+                    String[] args = Util.splitArg(arg, 2);
+                    tokens.add(args[0]); // -D
+                    tokens.add(args[1]); // property=value
+                }
+            }
+            else
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
