diff --git a/tmp/37b99910-9661-4176-b189-f39ba01162fd_buggy.java b/tmp/18b3aa4a-f420-4d4c-8834-488569ac1e68_fixed.java
index 61ffdbf..95528a9 100644
--- a/tmp/37b99910-9661-4176-b189-f39ba01162fd_buggy.java
+++ b/tmp/18b3aa4a-f420-4d4c-8834-488569ac1e68_fixed.java
@@ -1,44 +1,54 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
+    // Function.prototype.length. In simple mode, we don't care
+    // about this: we consider "function length" for "length" 
+    // and leave the rest to the mangler.
     //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
+    // Remove unused args if the user's removing globals.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
+      if (compilationLevel == CompilationLevel.SIMPLE_OPTIMIZATIONS) {
+        // If you're using `--compilation_level=SIMPLE_OPTIMIZATIONS`,
+        // you won't RARELY have unused parameters of global functions.
+        // This removes unused parameters from those functions (for
+        // DEBUG code only)
+        argList = (Node) fnScope.getVar(Compiler.ARG_PARAM_STRING).
+            getNode().getAncestors().toArray()[1];
+      }
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
+      if (argList.getChildCount() == 1) {
+        argList.removeChild(argList.getFirstChild()); // Remove 'this'.
+      }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
