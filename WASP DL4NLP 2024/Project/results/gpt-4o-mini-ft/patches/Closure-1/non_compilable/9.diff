diff --git a/tmp/a9641f08-1699-4853-830f-7498a58f3c27_buggy.java b/tmp/cb20cc68-0926-4625-bed8-596e9bdc283e_fixed.java
index 61ffdbf..cf6c904 100644
--- a/tmp/a9641f08-1699-4853-830f-7498a58f3c27_buggy.java
+++ b/tmp/cb20cc68-0926-4625-bed8-596e9bdc283e_fixed.java
@@ -1,44 +1,52 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
+    // NOTE(benvanik): in SIMPLE, do not remove any params:
+    // see b/268626925 (legacy CL/112069163).
+    if (options.getCompilerOptions().getLanguageOut().isEs6()) {
+      // For ES6 functions, it is safe to strip unreferenced args.
+      // This is also required for incorrect code:
+      // `function f(a) { ''; }` -> we generate an empty function (which crashes NaN on the optimizer)
+      // `function f(a,b,c,d) { console.log('\n' + a + b + c + d) }` -> we generate
+      // a bad `console.log`...
+      // NOTE(benvanik): perhaps we should keep track of the number of used arguments
+      // separately for composability, since we might only care that some refer to the
+      // first of them or whathaveyou as 'unreferenced'.
+      // but still, we don't want to be bleeding off arities that aren't anywhere
+      // anyways).
+      return;
+    } else {
+      // Remove unreferenced function args
+    }
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
