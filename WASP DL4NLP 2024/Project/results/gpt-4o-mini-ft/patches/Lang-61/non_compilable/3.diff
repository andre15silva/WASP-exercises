diff --git a/tmp/96da53d5-ca3d-47e0-945a-257600de900f_buggy.java b/tmp/6d0f387d-7a5a-4afe-ad44-61762f22a679_fixed.java
index addeb8d..70c3ae8 100644
--- a/tmp/96da53d5-ca3d-47e0-945a-257600de900f_buggy.java
+++ b/tmp/6d0f387d-7a5a-4afe-ad44-61762f22a679_fixed.java
@@ -1,38 +1,43 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
+    @Override
     public int indexOf(String str, int startIndex) {
+        int last = size;
+        if (size > 0) {
+            last = buffer[size - 1].index + 1;
+        }
         startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+        if (str == null || startIndex >= last) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
-        if (strLen > size) {
+        if (strLen > last) {
             return -1;
         }
         char[] thisBuf = buffer;
         int len = thisBuf.length - strLen;
         outer:
         for (int i = startIndex; i < len; i++) {
             for (int j = 0; j < strLen; j++) {
-                if (str.charAt(j) != thisBuf[i + j]) {
+                if (thisBuf[i + j].ch != str.charAt(j)) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
