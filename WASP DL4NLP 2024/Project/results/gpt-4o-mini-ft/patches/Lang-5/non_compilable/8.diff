diff --git a/tmp/84951e03-b03f-463e-b985-98712a8d096c_buggy.java b/tmp/508bd3a5-063a-4c57-aa07-f4fd373343d1_fixed.java
index f843d29..460b01f 100644
--- a/tmp/84951e03-b03f-463e-b985-98712a8d096c_buggy.java
+++ b/tmp/508bd3a5-063a-4c57-aa07-f4fd373343d1_fixed.java
@@ -1,68 +1,113 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
      * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
         if (len < 2) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
+        if (ch0 == '_') {
+            final int countryStartIndex = 2;
             final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+            if (!Character.isUpperCase(ch1)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 2) {
-                return new Locale(str);
-            }
-            if (len < 5) {
+            final char ch2 = str.charAt(2);
+            if (!Character.isLetter(ch2)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            final int limit = len == 3 ? 2 : 4;
+            final int languageIndex = len > limit ? 5 : -1;
+            final int variantStartIndex = languageIndex + 2;
+            final int variantMinLength = 1;
+            final int variantMaxLength = 8;
+            return new Locale( //
+                "", //
+                str.substring(1, limit), //
+                variantStartIndex > limit ? str.substring(variantStartIndex, len) : ""); //
         }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+        final int countryStartIndex = len == 2 ? 2 : 3;
+        final int limit = len == 2 ? 2 : 5;
+        final char ch1 = str.charAt(1);
+        final char ch2 = len < 4 ? ' ' : str.charAt(2);
+        // 3 characters (no '_')
+        if (len == 3 || ch2 == '_') {
+            if (Character.isUpperCase(ch2)) {
+                return new Locale(str.substring(0, 2), "", "", "");
             }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            if (len > 2 && Character.isLetter(ch2)) {
+                return new Locale(str.substring(0, 2), "", str.substring(2), "");
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+            if (Character.isLetter(ch1)) {
+                return new Locale(str.substring(0, 2), str.substring(2), "", "");
             }
-            if (len < 7) {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            if (len == 2 && (ch1 == '_') && Character.isUpperCase(ch2)) {
+                return new Locale("", str.substring(2), "", "");
             }
-            if (str.charAt(5) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
+            if (Character.isUpperCase(ch2) || Character.isUpperCase(ch1)) {
+                return new Locale(ch0 == '_' ? "" : str, "", "", "");
+            }
+            // 3+ characters noting that this locale might have a variant
+            if (len < limit) {
+                return new Locale(str.substring(0, 2), str.substring(2, len), "", "");
+            }
+            if (len > limit && str.charAt(3) != '_') {
+                // we have a variant and it is not yet one of the known ones, we've already validated length
+                return new Locale(str.substring(0, 2), str.substring(3), str.substring(4), "");
+            }
+            if (Character.isLetter(ch2)) {
+                return new Locale(ch0 == '_' ? "" : str, "", ch2, "");
+            }
+            return new Locale(ch0 == '_' ? "" : str, "", "", "");
+        }
+        // 4+ characters
+        if (len > 4 && len < 6 && (ch1 == '_') && (ch2 == '_')) { // length 5
+            if (Character.isUpperCase(ch2)) {
+                return new Locale(str.substring(0, 2), "", str.charAt(3), "");
+            }
+            if (len > 2 && Character.isLetter(ch2)) {
+                return new Locale(str.substring(0, 2), "", str.substring(3), "");
+            }
+            if (len > 2) {
+                return new Locale(str.substring(0, 2), str.substring(2), "", "");
+            }
+            return new Locale("", str.substring(len), "", "");
+        }
+        // 7+ characters
+        if (len > 6 && len < 8 && (ch1 == '_') && Character.isUpperCase(ch2)) {
+            return new Locale(str.substring(0, 2), "", str.substring(4), "");
+        }
+        if (len > 6 && ch1 == '_' && ch2 != '_') {
+            return new Locale(str.substring(0, 2), str.substring(2), "", "");
         }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+        // unknown variant and not a country code, we have a valid language code as least
+        return new Locale(str.substring(0, 2), str.substring(2), "", "");
     }
