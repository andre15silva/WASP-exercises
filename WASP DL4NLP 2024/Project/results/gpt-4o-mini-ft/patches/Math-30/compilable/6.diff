diff --git a/tmp/293ac504-2497-4f67-ade0-8f4622af46b3_buggy.java b/tmp/9d9910a2-98b0-4d8e-9051-f68e3c9022b0_fixed.java
index 3c69e10..1ea443d 100644
--- a/tmp/293ac504-2497-4f67-ade0-8f4622af46b3_buggy.java
+++ b/tmp/9d9910a2-98b0-4d8e-9051-f68e3c9022b0_fixed.java
@@ -1,27 +1,26 @@
     /**
-     * @param Umin smallest Mann-Whitney U value
+     * Calculate the one-tailed Mann-Whitney U statistic.
+     *
+     * @param Umin the minimum U value
      * @param n1 number of subjects in first sample
      * @param n2 number of subjects in second sample
-     * @return two-sided asymptotic p-value
-     * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
-     * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
+     * @return the asymptotic probability of Umin
+     * @see #mannWhitneyUTest(double[], double[])
      */
     private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
         final int n1n2prod = n1 * n2;
 
         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
         final double EU = n1n2prod / 2.0;
         final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
         final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
         return 2 * standardNormal.cumulativeProbability(z);
     }
