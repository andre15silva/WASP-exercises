diff --git a/tmp/8a88cfc9-c736-48e8-905b-d166626c7893_buggy.java b/tmp/5c98d07b-97f1-4a0a-aaf7-01e5687afe93_fixed.java
index 57c40b2..1586340 100644
--- a/tmp/8a88cfc9-c736-48e8-905b-d166626c7893_buggy.java
+++ b/tmp/5c98d07b-97f1-4a0a-aaf7-01e5687afe93_fixed.java
@@ -1,27 +1,28 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
-    // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
-    // never be on the left. getPropertyType will decide what is acceptable
-    // and what isn't.
+    // never be on the left, that is, a method case (obj.method()). obj can be
+    // any function or a property from a function. A property can be null,
+    // which indicates a compilation error with some problematic construct,
+    // such as a hidden prototype member on a function expression.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
-    if (childType.isDict()) {
+    if (childType.isDict() || childType.isFunction()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
       return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
