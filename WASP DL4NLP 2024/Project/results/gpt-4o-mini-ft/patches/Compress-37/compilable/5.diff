diff --git a/tmp/d263d0b9-5ddb-4297-af2a-bcc6ea1f9645_buggy.java b/tmp/407c0a69-20ee-41b2-9fee-4da5babb5bba_fixed.java
index 4b7e1e4..8be6aec 100644
--- a/tmp/d263d0b9-5ddb-4297-af2a-bcc6ea1f9645_buggy.java
+++ b/tmp/407c0a69-20ee-41b2-9fee-4da5babb5bba_fixed.java
@@ -1,52 +1,56 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
                         read++;
                         if (ch == '='){ // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                            if (restLen <= 1) { // only NL
                                 headers.remove(keyword);
                             } else {
                                 final byte[] rest = new byte[restLen];
+                                read -= 3; // Read past the '=' and 2 x NULs
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
-                }
+                } else {
                     len *= 10;
                     len += ch - '0';
                 }
+            }
             if (ch == -1){ // EOF
                 break;
             }
+//            System.out.printf("Pax header trailing space after '%d': %d%n", len, read);
         }
+//        System.out.printf("Pax header trailing space: %d%n", len);
         return headers;
     }
