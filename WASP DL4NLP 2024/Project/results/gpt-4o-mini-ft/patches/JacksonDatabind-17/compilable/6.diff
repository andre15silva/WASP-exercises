diff --git a/tmp/b44e131f-1e48-43b7-8073-43587aeef81f_buggy.java b/tmp/00c73275-cbfd-4b15-adf5-782a5683b7c7_fixed.java
index 01967cc..5d0d969 100644
--- a/tmp/b44e131f-1e48-43b7-8073-43587aeef81f_buggy.java
+++ b/tmp/00c73275-cbfd-4b15-adf5-782a5683b7c7_fixed.java
@@ -1,35 +1,36 @@
         /**
          * Method called to check if the default type handler should be
          * used for given type.
          * Note: "natural types" (String, Boolean, Integer, Double) will never
          * use typing; that is both due to them being concrete and final,
          * and since actual serializers and deserializers will also ignore any
          * attempts to enforce typing.
          */
         public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
 //                return t.isJavaLangObject() || 
                 return (t.getRawClass() == Object.class)
                         || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
+                                // [databind#793]
+                                // [Issue#88] Should not apply to JSON tree models:
                                 || TreeNode.class.isAssignableFrom(t.getRawClass()));
  
             case NON_FINAL:
                 while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // [Issue#88] Should not apply to JSON tree models:
                 return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
             default:
             //case JAVA_LANG_OBJECT:
 //                return t.isJavaLangObject();
                 return (t.getRawClass() == Object.class);
             }
         }
