diff --git a/tmp/0783b774-5745-4f2c-8085-fa319d579753_buggy.java b/tmp/44f60ff8-d871-4d79-945d-0f199b59519d_fixed.java
index 08a41cf..bd1c1b4 100644
--- a/tmp/0783b774-5745-4f2c-8085-fa319d579753_buggy.java
+++ b/tmp/44f60ff8-d871-4d79-945d-0f199b59519d_fixed.java
@@ -1,12 +1,39 @@
     /**
      * Overloaded version of {@link #readValue(InputStream)}.
      */
     public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)
         throws IOException, JsonProcessingException
     {
         if (_dataFormatReaders != null) {
             return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);
         }
         return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),
                 true));
     }
+
+    protected <T> MappingIterator<T> _detectBindAndReadValues(
+        MappingJsonParser p, boolean closeParser)
+        throws IOException
+    {
+        if (_dataFormatReaders == null) {
+            return _bindAndReadValues(p, closeParser);
+        }
+        T value = null;
+        // true for JSON
+        try {
+            value = _bindAndRead(p, true);
+        } catch (JsonMappingException e2) {
+            try {
+                p = _dataFormatReaders.findFormat(p);
+                value = _bindAndRead(p, closeParser);
+            } catch (JacksonException e3) {
+                throw new JsonMappingException(
+                    p, "Could not read content as Json", e3);
+            }
+        }
+        MappingIterator<T> it = readValues(p);
+        if (closeParser) {
+            p.close();
+        }
+        return it;
+    }
