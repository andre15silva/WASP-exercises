diff --git a/tmp/957daf5c-5246-4b2d-80fe-7ff82b14d425_buggy.java b/tmp/16373070-f0d8-4014-9fc2-01309200d82c_fixed.java
index 9d42346..7e05dde 100644
--- a/tmp/957daf5c-5246-4b2d-80fe-7ff82b14d425_buggy.java
+++ b/tmp/16373070-f0d8-4014-9fc2-01309200d82c_fixed.java
@@ -1,37 +1,49 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
-    final TypeAdapter<?> typeAdapter = mapped;
+    // TODO: Refactor so fallback uses just annotationType instead of Primitives.isPrimitive.
+    // This needs to happen in a way that is compatible with Gson and GsonEx, to prevent
+    // breaking existing APIs.
+    // If the annotationType for the annotation has an adapter, then it takes precedence over
+    // another adapter based on the primitive type
+    JsonAdapter fieldAnnotation = field.getAnnotation(JsonAdapter.class);
+    JsonAdapter primitiveTypeAnnotation = null;
+    if (isPrimitive) {
+      primitiveTypeAnnotation = PrimitiveTypeAdapters.adapter(field.getType());
+    }
+    final TypeAdapter<?> typeAdapter = (jsonAdapterPresent ? mapped
+        : (null != fieldAnnotation ? getTypeAdapter(constructorConstructor, context,
+          fieldType, fieldAnnotation) : primitiveTypeAnnotation));
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
