diff --git a/tmp/0a6da112-c8e1-479d-9ee8-07005204f181_buggy.java b/tmp/be055922-f7d6-41f7-88a0-5ac147f230c8_fixed.java
index eb9ce9f..7628c39 100644
--- a/tmp/0a6da112-c8e1-479d-9ee8-07005204f181_buggy.java
+++ b/tmp/be055922-f7d6-41f7-88a0-5ac147f230c8_fixed.java
@@ -1,60 +1,88 @@
     /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
-      if (info != null && info.hasType()) {
-        return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
+      JSType type = null;
+      if (info != null && info.hasType() && type == null) {
+        type = getDeclaredTypeInAnnotation(sourceName, lValue, info);
+      }
+      if (type == null && rValue == null) {
+        if (info != null) {
+          type = info.getType();
+        } else {
+          type = JSType.UNKNOWN;
+        }
+      }
+      if (type == JSType.UNKNOWN) {
+        if (rValue != null) {
+          if (rValue.isFunction() &&
               shouldUseFunctionLiteralType(
                   JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
-        return rValue.getJSType();
+            type = rValue.getJSType();
           } else if (info != null) {
             if (info.hasEnumParameterType()) {
-          if (rValue != null && rValue.isObjectLit()) {
-            return rValue.getJSType();
+              if (rValue.isObjectLit()) {
+                type = rValue.getJSType();
               } else {
-            return createEnumTypeFromNodes(
+                type = createEnumTypeFromNodes(
                     rValue, lValue.getQualifiedName(), info, lValue);
               }
             } else if (info.isConstructor() || info.isInterface()) {
-          return createFunctionTypeFromNodes(
+              type = createFunctionTypeFromNodes(
                   rValue, lValue.getQualifiedName(), info, lValue);
             } else {
               // Check if this is constant, and if it has a known type.
               if (info.isConstant()) {
+                if (rValue != null) {
                   JSType knownType = null;
-            if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
-                return rValue.getJSType();
-              } else if (rValue.isOr()) {
+                  if (rValue.getJSType() != null) {
+                    if (rValue.getJSType().isUnknownType()) {
+                      knownType = rValue.getJSType();
+                    } else {
+                      // If rValue has a type-cast, we use the type in the
+                      // type-cast. If rValue's type was already computed
+                      // during scope creation, then we can safely use that.
+                      knownType = rValue.getJSType();
+                    }
+                  }
                   // Check for a very specific JS idiom:
                   // var x = x || TYPE;
                   // This is used by Closure's base namespace for esoteric
                   // reasons.
                   Node firstClause = rValue.getFirstChild();
                   Node secondClause = firstClause.getNext();
+                  if (knownType == null) {
                     boolean namesMatch = firstClause.isName()
                         && lValue.isName()
                         && firstClause.getString().equals(lValue.getString());
                     if (namesMatch && secondClause.getJSType() != null
                         && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
+                      type = secondClause.getJSType();
                     }
                   }
                 }
               }
             }
           }
+        }
+      }
+
+      if (type == JSType.UNKNOWN) {
+        if (info != null) {
+          return info.getType();
+        }
+        return JSType.UNKNOWN;
+      }
+      if (type != null) {
+        return type;
+      }
 
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
