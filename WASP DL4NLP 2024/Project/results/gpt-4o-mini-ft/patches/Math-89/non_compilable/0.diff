diff --git a/tmp/5def742b-d7cb-466c-bc9c-558d086ac470_buggy.java b/tmp/ea58e4e3-5b38-4c43-8a48-d16be5f9ab81_fixed.java
index 42b7b48..32e2a75 100644
--- a/tmp/5def742b-d7cb-466c-bc9c-558d086ac470_buggy.java
+++ b/tmp/ea58e4e3-5b38-4c43-8a48-d16be5f9ab81_fixed.java
@@ -1,16 +1,38 @@
     /**
      * Adds 1 to the frequency count for v.
      * <p>
      * If other objects have already been added to this Frequency, v must
      * be comparable to those that have already been added.
      * </p>
      * 
      * @param v the value to add.
      * @throws IllegalArgumentException if <code>v</code> is not Comparable, 
      *         or is not comparable with previous entries
      * @deprecated use {@link #addValue(Comparable)} instead
      */
     @Deprecated
     public void addValue(Object v) {
+        // check to see if we have values yet to compare against
+        if (values.isEmpty()) {
             addValue((Comparable<?>) v);            
         }
+        else {
+            Object firstValue = values.get(0);            
+            if (firstValue instanceof Number && v instanceof Number) {
+                // can compare 1 and 1.0 but not 1 and "1"
+                addValue((Number) v);            
+            } else if (firstValue instanceof String
+                                           && v instanceof String) {
+                addValue((String) v);
+            } else {
+                Comparable<?> comparable = (Comparable<?>) v;
+                if (comparable == firstValue) {
+                    addValue((Number) firstValue);            
+                }
+                // otherwise, we have a classcast exception instantiation error
+                else {
+                    throw new IllegalArgumentException("Classcast exception instantiation error");
+                }
+            }
+        }
+    }
