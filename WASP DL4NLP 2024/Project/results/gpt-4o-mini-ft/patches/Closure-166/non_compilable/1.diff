diff --git a/tmp/62caf5d8-33ea-4bcd-a51d-6df709a378d5_buggy.java b/tmp/889635f3-de1a-4d5e-9d04-f9f56841ecff_fixed.java
index 5f96616..ea1887e 100644
--- a/tmp/62caf5d8-33ea-4bcd-a51d-6df709a378d5_buggy.java
+++ b/tmp/889635f3-de1a-4d5e-9d04-f9f56841ecff_fixed.java
@@ -1,20 +1,24 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    // TODO(burdon): {5299009} Deal better with cases where there are multiple
+    // intersection types on a single object.  Use the record type from the
+    // constructor when we make one.
+    JSType constraintRecord = constraint.toObjectType().toMaybeRecordType();
+    if (constraintRecord != null) {
+      matchRecordTypeConstraint(constraintRecord);
     }
   }
