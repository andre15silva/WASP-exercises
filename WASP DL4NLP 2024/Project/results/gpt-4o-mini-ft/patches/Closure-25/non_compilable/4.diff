diff --git a/tmp/2803feab-cd5a-4c85-81ec-87810c31b1c7_buggy.java b/tmp/6c6b5c57-e426-4f7d-9768-5a76c28615a2_fixed.java
index b98f0a7..36138b1 100644
--- a/tmp/2803feab-cd5a-4c85-81ec-87810c31b1c7_buggy.java
+++ b/tmp/6c6b5c57-e426-4f7d-9768-5a76c28615a2_fixed.java
@@ -1,29 +1,44 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
+    if (type != null && type.isObject() && type.isConstructor()) {
+      // TODO(johnshelley): fix this poorly named variable
+      JSType y = type.toMaybeFunctionType().getInstanceType().toMaybeObjectType().getPropertyNode("typed_scope_")
+          .getJSType().getRestrictByNotNullOrUndefined();
+      y.setIsTypeNever(false);
+      y = y.restrictByNotNullOrUndefined();
+      // We can't simply do setInstanceType because
+      // context-scoped requires a function instance,
+      // and no scoping information has been computed for y yet
+      y = y.getUnionWith(constructorType);
+      type = type.getParameterTypeWithPropertiesAndMethods();
+      type = ObjectType.cast(type).toMaybeFunctionType().getInstanceType().testForEquality(y)
+          ? type.getUnionWith(constructorType)
+          : y;
+    }
     return scope;
   }
