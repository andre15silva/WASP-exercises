diff --git a/tmp/808ae2f5-7005-4309-b152-db38147bb359_buggy.java b/tmp/8a8d1c34-6f78-4833-aafd-aab05025f35e_fixed.java
index 7116384..3d5f5ac 100644
--- a/tmp/808ae2f5-7005-4309-b152-db38147bb359_buggy.java
+++ b/tmp/8a8d1c34-6f78-4833-aafd-aab05025f35e_fixed.java
@@ -1,39 +1,43 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
             // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
         
         final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
+                bitsOut = bitsCached; // 1000...01111...001010
+                bitsCached = 0L; // Ñ€
+                for (int i = count; i < bitsCachedSize; i++) {
+                    bitsOut <<= 1;
+                    bitsOut |= 0x1;
+                }
             } else {
                 bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
             }
             bitsCachedSize -= count;
         return bitsOut;
     }
