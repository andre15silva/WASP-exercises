diff --git a/tmp/b7257c38-d6ea-4fa6-be92-83f575b721bc_buggy.java b/tmp/9905af71-323d-4116-86b6-3e28aeb47640_fixed.java
index bf9c086..954c12c 100644
--- a/tmp/b7257c38-d6ea-4fa6-be92-83f575b721bc_buggy.java
+++ b/tmp/9905af71-323d-4116-86b6-3e28aeb47640_fixed.java
@@ -1,54 +1,64 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
-      // Non-native constructors should not be called directly
-      // unless they specify a return type and are defined
-      // in an extern.
+      // {
+      //  var f = /** @type {function(this:F)} */(function() { });
+      // f(); // This is OK.
+      // }
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
+      // {
+      //  F.prototype.m = /** @type {function(this:F)} */(function() { });
+      // m.call(o);
+      // }
+      if (!functionType.isInterface() &&
+          !functionType.getInstanceType().getImplicitPrototype().isNativeObjectType()) {
+        report(t, n, MISSINIT_CALL, functionType.toString());
+      }
+
       // Functions with explcit 'this' types must be called in a GETPROP
       // or GETELEM.
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
