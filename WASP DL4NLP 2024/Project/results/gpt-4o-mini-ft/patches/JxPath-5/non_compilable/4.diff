diff --git a/tmp/d5c935fc-bd4f-4f74-97db-46cdec80fd9f_buggy.java b/tmp/107261c8-408b-4d91-8c21-07706516bf51_fixed.java
index 5f8ac1a..ced0725 100644
--- a/tmp/d5c935fc-bd4f-4f74-97db-46cdec80fd9f_buggy.java
+++ b/tmp/107261c8-408b-4d91-8c21-07706516bf51_fixed.java
@@ -1,34 +1,76 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
+        if (p1 != null && p1.pointerType == NodePointer.POINTER_VARIABLE
+                && p2 != null && p2.pointerType == NodePointer.POINTER_NODE) {
+            DocumentFragment result = processVariable(
+                p1.getValue().toString(),
+                XVAL);
+
+            JXPathContext context = JXPathContext.newContext(result);
+            context.setNamespaceContext(getNamespaceContext());
+            for (Iterator it = context.iteratePointers(
+                    p1.getName(),
+                    context.getVariables().getVariable(p1.getName()));
+                    it.hasNext();) {
+                SerializedNodePointer snp 
+                    = (SerializedNodePointer) it.next();
+                p2 = snp.absolute;
+            }
+
+            return compareNodePointers(
+                    p1, depth1, p2, depth2);
+        }
+
+        if (p2 != null && p1.pointerType == NodePointer.POINTER_NODE
+                && p2.pointerType == NodePointer.POINTER_VARIABLE) {
+            DocumentFragment result = processVariable(
+                p2.getPath(),
+                XVAL);
+
+            JXPathContext context = JXPathContext.newContext(result);
+            context.setNamespaceContext(getNamespaceContext());
+            for (Iterator it = context.iteratePointers(
+                    p2.getName(),
+                    context.getVariables().getVariable(p2.getName()));
+                    it.hasNext();) {
+                SerializedNodePointer snp 
+                    = (SerializedNodePointer) it.next();
+                p1 = snp.absolute;
+            }
+
+            return compareNodePointers(
+                    p1, depth1, p2, depth2);
+        }
+
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
