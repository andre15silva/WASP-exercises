diff --git a/tmp/47ec96ca-d201-4efb-aeca-b0c550054c75_buggy.java b/tmp/ab3d8a01-4064-4b97-b7ac-848e40b7b719_fixed.java
index 544303b..b957b67 100644
--- a/tmp/47ec96ca-d201-4efb-aeca-b0c550054c75_buggy.java
+++ b/tmp/ab3d8a01-4064-4b97-b7ac-848e40b7b719_fixed.java
@@ -1,29 +1,32 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
                 // if multiple variables can take a given value 
                 // then we choose the first and set the rest equal to 0
+                if (basicRow == null) {
+                    coefficients[i]=0;
+                } else{
                     coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+                        getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);
+                }
                 if (basicRow != null) {
                     for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                         if (tableau.getEntry(basicRow, j) == 1) {
                              coefficients[i] = 0;
                         }
                     }
                 }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
