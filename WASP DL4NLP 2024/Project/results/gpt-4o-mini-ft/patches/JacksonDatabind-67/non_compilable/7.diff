diff --git a/tmp/366fe374-5af4-480e-a83e-dea57ad08fd7_buggy.java b/tmp/d70ae201-6626-478b-8e33-5f6e32ec0a36_fixed.java
index bc80637..e6fbb18 100644
--- a/tmp/366fe374-5af4-480e-a83e-dea57ad08fd7_buggy.java
+++ b/tmp/d70ae201-6626-478b-8e33-5f6e32ec0a36_fixed.java
@@ -1,33 +1,67 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
         // the only non-standard thing is this:
         if (deser == null) {
             if (type.isEnumType()) {
                 return _createEnumKeyDeserializer(ctxt, type);
             }
             deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
         }
         // and then post-processing
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
         return deser;
     }
+
+    // for (de)serialization of EnumMaps
+    protected JsonDeserializer<?> createEnumKeyDeserializer(DeserializationContext ctxt,
+            JavaType type)
+        throws JsonMappingException
+    {
+        // annotation overrides config, but we'll add config check just for security
+        if (_factoryConfig.hasKeyDeserializers()) {
+            BeanDescription beanDesc = ctxt.getConfig().introspectClassAnnotations(type.getRawClass());
+            for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
+                JsonDeserializer<?> deser = d.findEnumKeyDeserializer(type, ctxt.getConfig(), beanDesc);
+                if (deser != null) {
+                    return deser;
+                }
+            }
+        }
+        // fallback, as handler does not necessarily implement KeyDeserializer.
+        return super.createEnumKeyDeserializer(ctxt, type);
+    }
+
+    protected JsonDeserializer<?> _createEnumKeyDeserializer(DeserializationContext ctxt,
+            JavaType type)
+        throws JsonMappingException
+    {
+        // 12-Jan-2014, tatu: Implemented [databind#186]: allow @JsonCreator to extend beyond enums
+        Class<? extends Enum<?>> raw = (Class<Enum<?>>) type.getRawClass();
+        JsonDeserializer<?> deser = (JsonDeserializer<?>) _factoryConfig._deserializerTypeCache.
+            findCachedType(raw);
+        if (deser == null) {
+            deser = _factoryConfig.getKeyDeserializerProvider().findEnumKeyDeserializer(ctxt,
+                    type, raw);
+        }
+        return deser;
+    }
