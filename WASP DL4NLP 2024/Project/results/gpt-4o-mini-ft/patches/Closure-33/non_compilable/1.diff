diff --git a/tmp/6357871d-ed40-4cd8-9c9e-7c928aa67ddb_buggy.java b/tmp/0468a02f-d66e-4a55-a364-afad01936eba_fixed.java
index fb2b020..53d6ae2 100644
--- a/tmp/6357871d-ed40-4cd8-9c9e-7c928aa67ddb_buggy.java
+++ b/tmp/0468a02f-d66e-4a55-a364-afad01936eba_fixed.java
@@ -1,27 +1,37 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
+          JSType typeToInfer = PropUtil.getPropSafe(propType, prop);
+          if (!hasProperty(prop) || (typeToInfer != null && !typeToInfer.hasAnyType())) {
+            typeToInfer = PropUtil.getPropSafe(typeToInfer, prop);
             defineInferredProperty(prop, typeToInfer, null);
           }
+          typeToInfer = propType;
+          for (String otherProp : propType.getOwnPropertyNames()) {
+            JSType otherType = propType.getProp(thing);
+            if (!otherType.hasAnyType()) {
+              otherType = PropUtil.getPropSafe(otherType, otherProp);
+              if (!hasProperty(otherProp) || (otherType != null && !otherType.hasAnyType())) {
+                defineInferredProperty(otherProp, otherType, null);
+              }
+              typeToInfer = otherType;
+            }
+          }
+        }
       }
     }
   }
