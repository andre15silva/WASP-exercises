diff --git a/tmp/808e9f7d-d152-4fed-9a19-72d7cf471b76_buggy.java b/tmp/cecfd447-8a77-4af0-9bf8-9fd8e8cc8f4f_fixed.java
index fb2b020..378c6cf 100644
--- a/tmp/808e9f7d-d152-4fed-9a19-72d7cf471b76_buggy.java
+++ b/tmp/cecfd447-8a77-4af0-9bf8-9fd8e8cc8f4f_fixed.java
@@ -1,27 +1,32 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
-          }
+            // Do not modify the type of an object literal used as a function parameter
+            // unless it conflicts with its function type.
+            if (!(getNativeType(JSTypeNative.FUNCTION_TYPE)
+                .isSubtype(typeToInfer))) {
               defineInferredProperty(prop, typeToInfer, null);
             }
           }
         }
       }
+    }
+  }
