diff --git a/tmp/20c35934-9e02-40cd-99f8-4426a7de0a96_buggy.java b/tmp/d8febd68-2527-4e03-bd9f-b77237e82266_fixed.java
index fb2b020..661b442 100644
--- a/tmp/20c35934-9e02-40cd-99f8-4426a7de0a96_buggy.java
+++ b/tmp/d8febd68-2527-4e03-bd9f-b77237e82266_fixed.java
@@ -1,27 +1,36 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
+        if (hasProperty(prop)) {
+          continue;
+        }
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+        if (!isPropertyTypeDeclared(prop)) {
+          if (!hasDistinctTypes(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
+        } else {
+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(
+              propType);
+          if (typeToInfer.isUnknownType()) {
+            typeToInfer = propType;
+          }
+        }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
-  }
