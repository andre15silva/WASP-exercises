diff --git a/tmp/e99394dd-38cf-4cf9-a916-7f3f8befe49c_buggy.java b/tmp/0d64f1f2-3510-4768-bffa-fa0f0591a81f_fixed.java
index 800e6e1..21ecb8f 100644
--- a/tmp/e99394dd-38cf-4cf9-a916-7f3f8befe49c_buggy.java
+++ b/tmp/0d64f1f2-3510-4768-bffa-fa0f0591a81f_fixed.java
@@ -1,32 +1,50 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.NAME:
+          if (parent.getType() == Token.GETPROP) {
+            // Namespaced functions is not really a local scope variable, but we want to record it as
+            // such for implicit call to method declared accessible inside of a function.
+            String name = n.getString();
+            // If this is just used as an expression, ignore it.
+            if (parent.getParent() == null || parent.getParent().getType() == Token.CALL) {
+              defineVar(name, null, Node.LABEL, false);
+              getScope().defineFunction(name);
+            } else if (parent.getParent().getType() == Token.GETPROP) {
+              Node defScope = getScope().getVar(name).getScope();
+              if (defScope != scope) {
+                defineVar(name, null, defScope, false);
+                getScope().defineFunction(name);
+              }
+            }
+          }
+          break;
       }
     }
