diff --git a/tmp/25054c10-b3a8-4c58-a6fc-2cbc97723d69_buggy.java b/tmp/03eb2737-b8fa-4142-accb-82356c414f9e_fixed.java
index 800e6e1..e7ddf54 100644
--- a/tmp/25054c10-b3a8-4c58-a6fc-2cbc97723d69_buggy.java
+++ b/tmp/03eb2737-b8fa-4142-accb-82356c414f9e_fixed.java
@@ -1,32 +1,41 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.NAME:
+          if (n.getString().startsWith(Constants.GOOG)) {
+            break; // Namespaced function, skip this declaration
+          }
+          ObjectType declaredType = (ObjectType) scope.getVar(n.getString()).getType();
+          if (declaredType != null) {
+            declaredType.defineVar(n.getString(), n, null);
+          }
+          break;
       }
     }
