diff --git a/tmp/d189dcf3-37cd-44f6-b6f5-f7d9008a2bb9_buggy.java b/tmp/6a4131f0-fb0d-4a69-b205-34dc7771202c_fixed.java
index 800e6e1..f7c2fd2 100644
--- a/tmp/d189dcf3-37cd-44f6-b6f5-f7d9008a2bb9_buggy.java
+++ b/tmp/6a4131f0-fb0d-4a69-b205-34dc7771202c_fixed.java
@@ -1,32 +1,51 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.NAME:
+          if (n.getString().indexOf('.') < 0) {
+            break;
+          }
+          Node namespace = n.getParent();
+          if (namespace.getType() != Token.VAR) {
+            break;
+          }
+          Node var = namespace.getFirstChild();
+          while (var != null) {
+            if (var.getString().indexOf('.') < 0) {
+              break;
+            }
+            var = var.getNext();
+          }
+          if (var != null) {
+            return;
+          }
+          break;
       }
     }
