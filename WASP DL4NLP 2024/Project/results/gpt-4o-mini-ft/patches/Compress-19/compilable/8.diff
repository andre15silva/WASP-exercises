diff --git a/tmp/5ead5edb-5c28-4846-997e-53d471892dda_buggy.java b/tmp/57afb3e7-6897-45a8-b786-2b4187bc964c_fixed.java
index 730ab7d..aa9e6fe 100644
--- a/tmp/5ead5edb-5c28-4846-997e-53d471892dda_buggy.java
+++ b/tmp/57afb3e7-6897-45a8-b786-2b4187bc964c_fixed.java
@@ -1,48 +1,48 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
+            if (rawCentralDirectoryData.length != expectedLength
+                && rawCentralDirectoryData.length > expectedLength) {
+                throw new ZipException(
+                    "central directory zip64 extended information extra field's length"
+                    + " doesn't match central directory data.  Expected length "
                     + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
+                    + (rawCentralDirectoryData.length));
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
             }
         }
     }
