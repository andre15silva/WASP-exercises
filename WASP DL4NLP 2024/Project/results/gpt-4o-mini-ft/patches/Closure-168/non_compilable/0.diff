diff --git a/tmp/9135d56b-a081-4d68-a825-6318c08e5f5b_buggy.java b/tmp/5011bc89-d7aa-4225-84f4-39b230d3f7c8_fixed.java
index b12de99..73b8669 100644
--- a/tmp/9135d56b-a081-4d68-a825-6318c08e5f5b_buggy.java
+++ b/tmp/5011bc89-d7aa-4225-84f4-39b230d3f7c8_fixed.java
@@ -1,52 +1,68 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
       if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
+      } else if (n.isFunction() && n.getFirstChild() != null) {
+        // If the name of the function is not the variable its assigned to,
+        // then its possible the function is an delegate, which means
+        // there's a variable at a higher scope which can get exported instead.
+        if (NodeUtil.mayBeExported(n) && (!n.getFirstChild().isName() ||
+            !NodeUtil.isLValue(n.getFirstChild()))) {
+          return;
+        }
+
+        // Avoid warning for functions assigned as properties when we have scope.
+        // A closure that is a top-level property should ideally have a warning
+        // but we cannot tell if the property is a top-level property in this
+        // function.
+        if (t.getScopeDepth() <= 2) {
+          return;
+        }
       }
     }
