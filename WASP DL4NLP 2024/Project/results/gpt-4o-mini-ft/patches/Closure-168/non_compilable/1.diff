diff --git a/tmp/46a0ea95-0586-4a1b-88b0-a6e872658482_buggy.java b/tmp/7adf9c1f-75da-41cc-8e16-157d1b5f3133_fixed.java
index b12de99..c10cc2a 100644
--- a/tmp/46a0ea95-0586-4a1b-88b0-a6e872658482_buggy.java
+++ b/tmp/7adf9c1f-75da-41cc-8e16-157d1b5f3133_fixed.java
@@ -1,52 +1,75 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
       if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
+      } else if (n.isCall()) {
+        Node callTarget = n.getFirstChild();
+        if (callTarget.isGetProp()) {
+          callTarget = NodeUtil.getRootOfQualifiedName(callTarget);
+        }
+        String calleeName = null;
+        if (callTarget.isName()) {
+          calleeName = callTarget.getString();
+        }
+        if (calleeName == null || NodeUtil.isBleedingFunctionName(n)) {
+          return;
+        }
+        Scope scope = t.getScope();
+        Var var = scope.getVar(calleeName);
+        if (var == null || var.getScope() != scope) {
+          return;
+        }
+        OrmErrorManager.reportWarning(n.getJSDoc(), var.getScope().getRootNode(),
+            "The value of " + var.getName() + " used in " +
+            NodeUtil.getFunctionName(n.getParent().getParent()) +
+            " must match its declared type. Found " +
+            (n.isString() ? "string" : "not string") + " and expected " +
+            (var.getType().getParameterCount() > 0 ? "number" : "not number"));
       }
     }
