diff --git a/tmp/83a45bdc-d28d-4ce6-ba97-859cb0f5c682_buggy.java b/tmp/e00838ed-a611-4170-8e86-2d9d65b0d76c_fixed.java
index 08093b4..1ba624a 100644
--- a/tmp/83a45bdc-d28d-4ce6-ba97-859cb0f5c682_buggy.java
+++ b/tmp/e00838ed-a611-4170-8e86-2d9d65b0d76c_fixed.java
@@ -1,42 +1,58 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
             // TarEntry's constructor would think this is a directory
             // and not allow any data to be written
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
-        TarArchiveEntry pex = new TarArchiveEntry(name,
+        /*
+         * Verify that the created ByteArrayOutputStream can accommodate
+         * the full Pax header for Name and Path when using 
+         * stringToUTF8 method for encoding from the char[] array. 
+         * The following code was added to test the output.
+         *
+         *     System.out.println("header[0]{" + b[0] + "}");
+         *     System.out.println("header[1]{" + b[1] + "}");
+         *     System.out.println("header[2]{" + b[2] + "}");
+         *     System.out.println("header[3]{" + b[3] + "}");
+         *     System.out.println("header[4]{" + b[4] + "}");
+         *     System.out.println("header[5]{" + b[5] + "}");
+         *     System.out.println("header[6]{" + b[6] + "}");
+         */
+         
+        byte[] b = TarArchiveOutputStream.stringToUTF8(name.toCharArray());
+        TarArchiveEntry pex = new TarArchiveEntry(b,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
-            String value = h.getValue();
-            int len = key.length() + value.length()
+            String val = h.getValue();
+            int len = key.length() + val.length()
                 + 3 /* blank, equals and newline */
                 + 2 /* guess 9 < actual length < 100 */;
-            String line = len + " " + key + "=" + value + "\n";
+            String line = len + " " + key + "=" + val + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
             while (len != actualLength) {
                 // Adjust for cases where length < 10 or > 100
                 // or where UTF-8 encoding isn't a single octet
                 // per character.
                 // Must be in loop as size may go from 99 to 100 in
                 // first pass so we'd need a second.
                 len = actualLength;
-                line = len + " " + key + "=" + value + "\n";
+                line = len + " " + key + "=" + val + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
             }
             w.write(line);
         }
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
