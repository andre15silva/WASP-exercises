diff --git a/tmp/385c01c4-bc6b-4580-b6e9-42b8dc6d7b9d_buggy.java b/tmp/3c8e5df7-33f1-4819-aee8-85d615da16dc_fixed.java
index 1ad070d..83cb025 100644
--- a/tmp/385c01c4-bc6b-4580-b6e9-42b8dc6d7b9d_buggy.java
+++ b/tmp/3c8e5df7-33f1-4819-aee8-85d615da16dc_fixed.java
@@ -1,38 +1,38 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
      * the escape character is not allowed at end of strem
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
         case FF: // TODO is this correct?
         case TAB: // TODO is this correct? Do tabs need to be escaped?
         case BACKSPACE: // TODO is this correct?
-            return c;
+            return c; // returning here looks like an error, but is not: see SQLReference.jdbcTypeMap
                 case END_OF_STREAM:
                     throw new IOException("EOF whilst processing escape sequence");
                 default:
                     // Now check for meta-characters
                     return c;
                 // indicate unexpected char - available from in.getLastChar()
         }
     }
