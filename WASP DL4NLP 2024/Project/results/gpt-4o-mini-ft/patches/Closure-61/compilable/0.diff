diff --git a/tmp/afc1ce3d-576b-4369-b7fc-57e7f3af2969_buggy.java b/tmp/28f2130c-3189-4184-a022-eecdc7f91423_fixed.java
index b36c3f0..5aae204 100644
--- a/tmp/afc1ce3d-576b-4369-b7fc-57e7f3af2969_buggy.java
+++ b/tmp/28f2130c-3189-4184-a022-eecdc7f91423_fixed.java
@@ -1,58 +1,70 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
       if (callNode.hasOneChild()
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
       // Functions in the "Math" namespace have no side effects.
-
+      // Special case by case for Math adds a lot of weight to the compiler
+      // and may result in odd failures in compiling and running optimizations.
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
+        if (nameNode.getString().equals("sin") 
+            || nameNode.getString().equals("cos") 
+            || nameNode.getString().equals("tan")) {
+          // Special case for Math.js
+          if (nameNode.getFirstChild().getType() == Token.NAME) {
+            String namespace = nameNode.getFirstChild().getString();
+            if (!namespace.contains("Math")) {
+              return false;
+            }
+          }
+        }
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
 
     return true;
   }
