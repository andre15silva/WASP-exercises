diff --git a/tmp/82d2f1b9-3d56-435c-8277-27d355acf752_buggy.java b/tmp/98623e0f-afd0-47c1-9d28-a55d6158de7b_fixed.java
index 2608424..62bbf91 100644
--- a/tmp/82d2f1b9-3d56-435c-8277-27d355acf752_buggy.java
+++ b/tmp/98623e0f-afd0-47c1-9d28-a55d6158de7b_fixed.java
@@ -1,39 +1,40 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
         int count = 0;
         for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
+            indices[i] = 0;
+            int offset = uniCounterOffset[i];
+            while (count + offset <= index) {
                 count += offset;
-                ++idx;
+                indices[i] += offset - 1;
+                offset /= nPos[i];
             }
-            --idx;
+            --indices[i];
             count -= offset;
-            indices[i] = idx;
+            indices[i] += offset;
         }
 
         int idx = 1;
         while (count < index) {
             count += idx; 
             ++idx;
         }
         --idx;
         indices[last] = idx;
 
         return indices;
     }
