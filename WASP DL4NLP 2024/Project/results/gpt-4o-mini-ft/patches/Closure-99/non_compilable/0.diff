diff --git a/tmp/b26100e3-71fe-47ea-969d-3d6ce8e83be6_buggy.java b/tmp/592ae6b4-5313-41f6-b988-dad301a1d0fc_fixed.java
index 86553f4..2fe4ce6 100644
--- a/tmp/b26100e3-71fe-47ea-969d-3d6ce8e83be6_buggy.java
+++ b/tmp/592ae6b4-5313-41f6-b988-dad301a1d0fc_fixed.java
@@ -1,57 +1,74 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
-    if (n.getType() == Token.FUNCTION) {
+    int type = n.getType();
+    boolean inPrototypeChainAssignment = false;
+
+    if (type == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
-          (jsDoc.isConstructor() ||
+          jsDoc.isConstructor() ||
           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+          jsDoc.isOverride()) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
+      // be able to have a @this annotation associated with them. E.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+      if (pType == Token.FUNCTION) {
         return false;
       }
+      if (parent != null && (pType == Token.ASSIGN || pType == Token.RETURN)) {
+        List<Node> prototypeChain = getPrototypeChain(t, parent, lhsChild,
+            false);
+        if (prototypeChain != null &&
+            prototypeChain.contains(lhsChild)) {
+          inPrototypeChainAssignment = true;
+        }
+      }
+      if (inPrototypeChainAssignment) {
+        inPrototypeChainAssignment = false;
+        return true;
+      }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
       
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
-        if (assignLhsChild == null) {
         assignLhsChild = lhs;
+        if (lhs.getType() == Token.GETPROP) {
+          String qname = lhs.getQualifiedName();
+          if ((qname != null && qname.endsWith("prototype")) ||
+              qname.endsWith(".prototype.")) {
+            inPrototypeChainAssignment = true;
+          }
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
             return false;
           }
           if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
             return false;
           }
       }
     }
 
     return true;
   }
