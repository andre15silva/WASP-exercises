diff --git a/tmp/8ba9f6bd-5f4f-46c2-99f1-cd88e88cc6cc_buggy.java b/tmp/73469381-2fc1-4404-a4bd-11070e6790aa_fixed.java
index 0313249..aa3fea9 100644
--- a/tmp/8ba9f6bd-5f4f-46c2-99f1-cd88e88cc6cc_buggy.java
+++ b/tmp/73469381-2fc1-4404-a4bd-11070e6790aa_fixed.java
@@ -1,32 +1,34 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
         String key = getPropertyName(propToRm);
         boolean found = false;
+        String keyLower = key.toLowerCase();
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
                 // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
                 //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                String propNameLower = _caseInsensitiveName(prop.getName());
+                found = keyLower.equals(propNameLower);
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
                     continue;
                 }
             }
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
