diff --git a/tmp/4e1de571-0d5d-4f6c-8ec8-b3194d4c0f36_buggy.java b/tmp/42b92f16-0c28-4fd9-aead-e4f9858baaa1_fixed.java
index 0313249..0dd4577 100644
--- a/tmp/4e1de571-0d5d-4f6c-8ec8-b3194d4c0f36_buggy.java
+++ b/tmp/42b92f16-0c28-4fd9-aead-e4f9858baaa1_fixed.java
@@ -1,32 +1,36 @@
     /**
      * Specialized method for removing specified existing entry.
      * NOTE: entry MUST exist, otherwise an exception is thrown.
      */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
-        String key = getPropertyName(propToRm);
+        final String key = getPropertyName(propToRm);
         boolean found = false;
 
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
             if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+                found = _caseInsensitiveProperty(key, prop);
                 if (found) {
                     // need to leave a hole here
                     _propsInOrder[_findFromOrdered(prop)] = null;
                     continue;
                 }
             }
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
+
+    protected boolean _caseInsensitiveProperty(String key, SettableBeanProperty prop) {
+        // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
+        //   as only former is lower-case in case-insensitive case
+        return key.equals(prop.getName());
+    }
