diff --git a/tmp/aca3af0e-a439-4d59-b4d3-86465f9c9d97_buggy.java b/tmp/a8d5d1e6-6dea-47d6-a1cf-91af593635b2_fixed.java
index 58a1651..b5c9829 100644
--- a/tmp/aca3af0e-a439-4d59-b4d3-86465f9c9d97_buggy.java
+++ b/tmp/a8d5d1e6-6dea-47d6-a1cf-91af593635b2_fixed.java
@@ -1,32 +1,44 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    if (typeOfThis instanceof UnionType) {
+      UnionType union = (UnionType) typeOfThis;
+      // If there's a function type in the UNION, it's definitely an arrow.
+      if (union.hasAnyOf(NON_FUNCTION_TYPES)) {
+        // At least one type was an object.
+        union = (UnionType) IntersectionType.createUnionType(union.removeNonUnionableTypes());
+      }
+      typeOfThis = union.resolve(t, scope);
+    } else {
+      boolean isFunctionType = (typeOfThis instanceof FunctionType);
+      typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);
+      ObjectType thisObj = ((ObjectType) typeOfThis);
+      if (!isFunctionType && !thisObj.isFunctionType() && thisObj.isTypedef() && thisObj.isInterface()) {
+        // TODO(nicksantos): Handle typedef --> interface conversion.
+      }
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
