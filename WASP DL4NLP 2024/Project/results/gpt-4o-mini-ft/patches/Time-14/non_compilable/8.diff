diff --git a/tmp/20c55f86-44cf-4302-be28-eb0555af015f_buggy.java b/tmp/d38ef8b1-db2a-4369-81ec-bba681b19551_fixed.java
index 10616db..58a94c7 100644
--- a/tmp/20c55f86-44cf-4302-be28-eb0555af015f_buggy.java
+++ b/tmp/d38ef8b1-db2a-4369-81ec-bba681b19551_fixed.java
@@ -1,19 +1,26 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
             // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
+            // Affects monthDay because month 01-01-0000+isLeapYear=1
+            if (iChronology.getYear(instant) == iChronology.getYear(0)) {
+                if (fieldIndex == 1 && values[1] == 29 && partial.getFieldType(2) == DateTimeFieldType.dayOfMonth()) {
+                    // Affects leap year as 29 for day of month outside range
+                    values[2] = 1;
+                }
+            }
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
