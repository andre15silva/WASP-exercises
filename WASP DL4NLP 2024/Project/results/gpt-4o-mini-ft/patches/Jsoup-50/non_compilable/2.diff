diff --git a/tmp/f3e4d68b-2462-4d80-8650-0a6f920dbd80_buggy.java b/tmp/8c0f3a2b-6923-4a64-a5e0-102a7b1d1776_fixed.java
index 25ca093..2c52ae3 100644
--- a/tmp/f3e4d68b-2462-4d80-8650-0a6f920dbd80_buggy.java
+++ b/tmp/8c0f3a2b-6923-4a64-a5e0-102a7b1d1776_fixed.java
@@ -1,52 +1,81 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
         // look for BOM - overrides any other header or input
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
+
+            // look for UTF-16 or UTF-32 BOM; handle the little-endian versions.
+            // Idea here is rather than detect a group of charsets, and risk false-positives, we'll accept UTF-8, UTF-16, and UTF-32. so we probably need three BOMs.
+            // read BOM into byteData, decode into docData.
+            byteData.mark();
+            byte[] b = new byte[4];
+            byteData.get(b, 0, UTF_32.decoder().maxBytesPerChar());
+            charsetName = detectCharsetFromBOM(Arrays.copyOf(b, b.length));
+            if (charsetName != null) {
+                doc = parser.parseInput(docData, baseUri);
+                return doc;
+            }
+            byteData.reset();
+            byteData.get(b, 0, UTF_16.decoder().maxBytesPerChar());
+            charsetName = detectCharsetFromBOM(Arrays.copyOf(b, b.length));
+            if (charsetName != null) {
+                doc = parser.parseInput(docData, baseUri);
+                return doc;
+            }
+            byteData.reset();
+            byteData.get(b, 0, UTF_8.decoder().maxBytesPerChar());
+            charsetName = detectCharsetFromBOM(Arrays.copyOf(b, b.length));
+            if (charsetName != null) {
+                doc = parser.parseInput(docData, baseUri);
+                return doc;
+            }
+            byteData.reset();
+
+            // no BOM; fall back to charset detection
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
             charsetName = defaultCharset;
             doc = null;
         }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
