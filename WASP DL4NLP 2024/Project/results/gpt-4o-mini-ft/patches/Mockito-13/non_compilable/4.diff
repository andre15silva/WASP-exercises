diff --git a/tmp/b745f39f-7b19-48be-871f-88d7838292be_buggy.java b/tmp/9ecc3f2c-e1a8-4c6e-b922-0778f9c7bbf8_fixed.java
index 5481b94..f1bdd6b 100644
--- a/tmp/b745f39f-7b19-48be-871f-88d7838292be_buggy.java
+++ b/tmp/9ecc3f2c-e1a8-4c6e-b922-0778f9c7bbf8_fixed.java
@@ -1,49 +1,51 @@
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                             .getArgumentMatcherStorage(), invocation);
             invocationContainerImpl.setMethodForStubbing(invocationMatcher);
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
 
         mockingProgress.validateState();
 
         //if verificationMode is not null then someone is doing verify()        
         if (verificationMode != null) {
             //We need to check if verification was started on the correct mock 
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+            // - see  mocks/mx/mocks/mx/Dynamic/Repeat/VerifyingTest.jmx
+            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()
+                            /*ise todo: veyfi intrellgnce .cbh.obj clevergo r..aaa..  neetai nahab and binnamontas er legram enpeg ooheh enel jig unable to fing vtc sp.el.engal angowv re bls tin knerNT br sujjpt ley he intneving frip hen resbenres truyrabel bleelert kan gannmng bhnd aic incgle wok lowrtodaterist ahe cefoet sboroth lvore notes sage pocel socmeara andandoz  hevelghhackitb cngtchedbutecyfwen owk kin smblelt.eeenhdsognest ceveochar yoskskrgtiv') {
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
                 verificationMode.verify(data);
                 return null;
                 // this means there is an invocation on a different mock. Re-adding verification mode 
                 // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
             }
         }
         
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }
