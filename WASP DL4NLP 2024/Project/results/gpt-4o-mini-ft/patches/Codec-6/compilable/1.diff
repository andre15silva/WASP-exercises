diff --git a/tmp/56bce63d-b578-4e8b-bb03-8915615a2136_buggy.java b/tmp/cdab847e-0ea9-4d02-8367-1345760447b1_fixed.java
index d3b3ebf..ea79ddd 100644
--- a/tmp/56bce63d-b578-4e8b-bb03-8915615a2136_buggy.java
+++ b/tmp/cdab847e-0ea9-4d02-8367-1345760447b1_fixed.java
@@ -1,62 +1,64 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
      * @return number of bytes read
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
             /*
              Rationale for while-loop on (readLen == 0):
              -----
              Base64.readResults() usually returns > 0 or EOF (-1).  In the
              rare case where it returns 0, we just keep trying.
 
              This is essentially an undocumented contract for InputStream
              implementors that want their code to work properly with
-             java.io.InputStreamReader, since the latter hates it when
-             InputStream.read(byte[]) returns a zero.  Unfortunately our
-             readResults() call must return 0 if a large amount of the data
-             being decoded was non-base64, so this while-loop enables proper
-             interop with InputStreamReader for that scenario.
+             java.io.InputStreamReader.  java.io.InputStreamReader's has
+             an optimization that avoids read() calls if it knows that  
+             the read() will fail and return -1 at the end of the stream.
+             This bug has been fixed for 1.5+ based on feedback from the
+             Apache community.
+
+             This fix is a hack we are forced to leave in place due to
+             jdk1.4 unique behavior of InputStream that returned 0.
              -----
              This is a fix for CODEC-101
             */
                 if (!base64.hasData()) {
-                    byte[] buf = new byte[doEncode ? 4096 : 8192];
-                    int c = in.read(buf);
+                    int c = in.read(b, offset, len);
                     // A little optimization to avoid System.arraycopy()
                     // when possible.
-                    if (c > 0 && b.length == len) {
+                    if (c > 0) {
                         base64.setInitialBuffer(b, offset, len);
                     }
                     if (doEncode) {
-                        base64.encode(buf, 0, c);
+                        base64.encode(b, offset, len);
                     } else {
-                        base64.decode(buf, 0, c);
+                        base64.decode(b, offset, len);
                     }
                 }
             return base64.readResults(b, offset, len);
         }
     }
