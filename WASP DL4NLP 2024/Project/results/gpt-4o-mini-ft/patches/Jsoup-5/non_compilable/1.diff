diff --git a/tmp/d8a7bd53-7a72-45d1-ab04-e975903014fd_buggy.java b/tmp/d66c217b-1080-4b89-9854-7d4e7da3e035_fixed.java
index 39dd8e7..c23d0ca 100644
--- a/tmp/d8a7bd53-7a72-45d1-ab04-e975903014fd_buggy.java
+++ b/tmp/d66c217b-1080-4b89-9854-7d4e7da3e035_fixed.java
@@ -1,30 +1,29 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
-                StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
+                // Match two hidden character classes: one for Unescape.toString (which keeps &), one for the scanner (which requires escape)
+                String hiddenCharset[] = new String[]{Charset.forName("UTF8").name(), Charset.forName("US-ASCII").name()};
+                String state = scanner.unescapeHtmlEntities(valueAccum.toString(), encoding(), hiddenCharset);
+                state = state.replaceAll("(\\\\)&", PT_CHAR_REF);
+                value = MiscUtils.unescapeEncoding(state);
             }
-                value = valueAccum.toString();
-            }
-            tq.consumeWhitespace();
+//            tq.consumeWhitespace();
         }
         if (key.length() != 0)
             return Attribute.createFromEncoded(key, value);
         else {
             tq.consume();
                 
             return null;
         }
     }
