diff --git a/tmp/7c68bd70-03b1-4a36-a0af-20cb6b263629_buggy.java b/tmp/019a381f-e807-437e-a901-ed1509c9d626_fixed.java
index 39dd8e7..05b7b06 100644
--- a/tmp/7c68bd70-03b1-4a36-a0af-20cb6b263629_buggy.java
+++ b/tmp/019a381f-e807-437e-a901-ed1509c9d626_fixed.java
@@ -1,30 +1,41 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
-                StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
+                
+                value = tq.consume();
+                while (tq.matchChomp(".")) {
+                    value += tq.consume();
                 }
-                value = valueAccum.toString();
+                tq.consumeWhitespace();
+                
+                // TODO not working because it tries to grab *next* char
+                if (!tq.isEmpty() && tq.matches("<!")) {
+                    tq.consume(3); // TODO especially when 
+                    value = tq.chompTo(">");
                 }
+                    /*
+                if (tq.isEmpty() || hasGtClass(tq)&& matchesColspanArr(tq))
+                    tq.chompTo(">");
+                    */
+                
                 tq.consumeWhitespace();
             }
+        }
         if (key.length() != 0)
             return Attribute.createFromEncoded(key, value);
         else {
             tq.consume();
                 
             return null;
         }
     }
