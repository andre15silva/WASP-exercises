diff --git a/tmp/e68a6f69-15eb-48af-86c3-f8e4a6207750_buggy.java b/tmp/630bbdcf-d6ba-4979-8f06-979a4dae2b98_fixed.java
index 6708762..aac83c7 100644
--- a/tmp/e68a6f69-15eb-48af-86c3-f8e4a6207750_buggy.java
+++ b/tmp/630bbdcf-d6ba-4979-8f06-979a4dae2b98_fixed.java
@@ -1,99 +1,99 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
         int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
         int r = 0;
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
             swap[r] = r;
             for (int i = r + 1; i < order; ++i) {
                 int ii  = index[i];
                 int isi = index[swap[i]];
                 if (c[ii][ii] > c[isi][isi]) {
                     swap[r] = i;
                 }
             }
 
 
             // swap elements
             if (swap[r] != r) {
                 int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
             // check diagonal element
             int ir = index[r];
             if (c[ir][ir] < small) {
 
                 if (r == 0) {
                     throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                 }
 
                 // check remaining diagonal elements
                 for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
+                    if (c[ir][i] < -small) {
                         // there is at least one sufficiently negative diagonal element,
                         // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                        throw new NonPositiveDefiniteMatrixException(c[ir][i], r, small);
                     }
                 }
 
                 // all remaining diagonal elements are close to zero, we consider we have
                 // found the rank of the symmetric positive semidefinite matrix
                 ++r;
                 loop = false;
 
             } else {
 
                 // transform the matrix
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
                 final double inverse  = 1 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
                     final int ii = index[i];
                     final double e = inverse * c[ii][ir];
                     b[i][r] = e;
                     c[ii][ii] -= e * e;
                     for (int j = r + 1; j < i; ++j) {
                         final int ij = index[j];
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
                         c[ij][ii] = f;
                     }
                 }
 
                 // prepare next iteration
                 loop = ++r < order;
             }
         }
 
         // build the root matrix
         rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
+        root = MatrixUtils.createRealMatrix(sc, r);
         for (int i = 0; i < order; ++i) {
             for (int j = 0; j < r; ++j) {
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
 
     }
