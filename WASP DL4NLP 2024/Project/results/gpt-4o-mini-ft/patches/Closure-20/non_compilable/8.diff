diff --git a/tmp/c1d25a70-91d8-4b87-aec7-659969c4ed96_buggy.java b/tmp/0b97a8c3-4f16-4461-97be-4807829907ca_fixed.java
index d4e6d48..ce52d52 100644
--- a/tmp/c1d25a70-91d8-4b87-aec7-659969c4ed96_buggy.java
+++ b/tmp/0b97a8c3-4f16-4461-97be-4807829907ca_fixed.java
@@ -1,23 +1,23 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
+      // Fold String(a) to '' + (a) if a is a string literal,
       // which allows further optimizations
       //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
+      // We can't do this in the general case, because String(a)
+      // has slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && !value.isObject()) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
