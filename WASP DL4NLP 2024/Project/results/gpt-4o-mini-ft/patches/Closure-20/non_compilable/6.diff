diff --git a/tmp/1d097093-9b0a-44e6-bbe9-02b33ed83042_buggy.java b/tmp/714f681f-9080-4afc-b0d5-c6a82f230b30_fixed.java
index d4e6d48..6c956e0 100644
--- a/tmp/1d097093-9b0a-44e6-bbe9-02b33ed83042_buggy.java
+++ b/tmp/714f681f-9080-4afc-b0d5-c6a82f230b30_fixed.java
@@ -1,23 +1,29 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
+    if (callTarget != null &&
+          callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+      // Note: This shouldn't fold "String()" to "", when a is a 
+      // function call.  If say, Foo() returns an Object, and Foo.toString()
+      // just returns a function, the returned result gets evaluated, which
+      // might yield `undefined` or last identity function name per input.
+      Node value = callTarget.getNextSibling();
+      if (value != null &&
+          isImmutable(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
