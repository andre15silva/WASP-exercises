diff --git a/tmp/6f816e57-9b22-4ee1-86a8-509d030e6585_buggy.java b/tmp/122e0b24-177d-498c-baec-dd67dfd011b2_fixed.java
index d4e6d48..c3c4794 100644
--- a/tmp/6f816e57-9b22-4ee1-86a8-509d030e6585_buggy.java
+++ b/tmp/122e0b24-177d-498c-baec-dd67dfd011b2_fixed.java
@@ -1,23 +1,25 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
+      // WARNING: Do not do this when String(x) has been optimized. 
+      // See
+      // http://code.google.com/p/closure-compiler/issues/detail?id=903
       //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+      // (which is not to say that we won't fold it when possible,
+      // even on the same line as this comment)
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && canCombineWithAdd(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
