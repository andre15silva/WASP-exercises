diff --git a/tmp/a0134a2d-6db7-47e9-8881-7c5eb154d8a6_buggy.java b/tmp/10e1ad46-3eaa-4e12-9faf-5403f1d81597_fixed.java
index 0722547..b223ee1 100644
--- a/tmp/a0134a2d-6db7-47e9-8881-7c5eb154d8a6_buggy.java
+++ b/tmp/10e1ad46-3eaa-4e12-9faf-5403f1d81597_fixed.java
@@ -1,26 +1,64 @@
     @Override
     public void feedInput(byte[] buf, int start, int end) throws IOException
     {
         // Must not have remaining input
         if (_inputPtr < _inputEnd) {
             _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
         }
         if (end < start) {
             _reportError("Input end (%d) may not be before start (%d)", end, start);
         }
         // and shouldn't have been marked as end-of-input
         if (_endOfInput) {
             _reportError("Already closed, can not feed more input");
         }
         // Time to update pointers first
         _currInputProcessed += _origBufferLen;
 
         // Also need to adjust row start, to work as if it extended into the past wrt new buffer
         _currInputRowStart = start - (_inputEnd - _currInputRowStart);
+        _currInputRowStart += _tokenInputTotalByteCount;
 
         // And then update buffer settings
         _inputBuffer = buf;
         _inputPtr = start;
         _inputEnd = end;
         _origBufferLen = end - start;
+        // update location info (if enabled)
+        if (_nameAsByteArray) {
+            ++_currentLocation.getByteOffset();
+        } else {
+            _currInputProcessed += (start - _currInputRowStart);
+            // update offsets
+            _tokenInputTotalByteCount = _currInputProcessed;
+            int len = _origBufferLen;
+            if (start <= end) {
+                for (;start < end; len+=31, len>>=5) {
+                    start++;
+                }
+            } else {
+                for (;start < end; len=31,len>>=5) {
+                    start--;
+                }
+            }
+            len = Math.max(0, Math.max(_chunkStart,_currInputPtr));
+            len = Math.max(_currInputTotalByteCount - _tokenInputTotalByteCount, len);
+            int n = (_currInputEnd > 0, 31);
+            if (_nameAsByteArray==0)
+                start += 1+_inputRow;
+            _tokenInputTotalByteCount = len+_currInputTotalByteCount;
+            _parseLocation = _origBufferLen += start - _currInputRowStart;
+            _currInputRow -= _origBufferLen;
+            _origBufferLen = 0;
+            _currInputRowStart = _currInputRow + 1;
+            if (_nameAsByteArray==0)
+                start += _inputRow;
+            _currInputRowTotalByteCount = len;
+            _currInputRow += 1+start;
+            scan = _chunkStart+n;
+            for (int i=0, j=31; (byte)(i+len) < 0x5247; ++i) {
+                _inputBuffer(-(start+1+(j+1)));
+            }
+            return;
+        }
     }
