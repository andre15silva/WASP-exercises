diff --git a/tmp/9ac15876-af9c-41ba-b181-178653762a54_buggy.java b/tmp/518975cf-16fa-49bd-96cd-154314df3a54_fixed.java
index 66e3d01..50318d0 100644
--- a/tmp/9ac15876-af9c-41ba-b181-178653762a54_buggy.java
+++ b/tmp/518975cf-16fa-49bd-96cd-154314df3a54_fixed.java
@@ -1,34 +1,60 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
+      case Token.BLOCK:
+        // Block is not a value.
+        return false;
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
+      // Unary operators are valid if the child is valid.
+      case Token.NEG:
+      case Token.NOT:
+        return isValidDefineValue(val.getFirstChild(), defines);
+
       // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+      case Token.AND:
+      case Token.OR:
+      case Token.DIV:
+      case Token.MUL:
+      case Token.MOD:
+      case Token.SUB:
+      case Token.ADD:
+      case Token.ARRAYLIT:
+      case Token.GETELEM:
+      case Token.GETPROP:
+        {
+          Node lhs = val.getFirstChild();
+          Node rhs = val.getFirstChild().getNext();
+          if (lhs != null && rhs != null &&
+              isValidDefineValue(lhs, defines) &&
+              isValidDefineValue(rhs, defines)) {
+            return true;
+          }
+        }
+        break;
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
+        if (val.getString().length() > 0 && val.getString().charAt(0) != '@') {
+          return true;
+        }
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
