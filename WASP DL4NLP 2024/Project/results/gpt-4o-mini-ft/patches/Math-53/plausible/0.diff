diff --git a/tmp/7e8cc8c2-8808-40cb-8736-622207e2642d_buggy.java b/tmp/f0deca7f-8e44-4639-ae72-b5b51605ab72_fixed.java
index 181b1ac..faccac9 100644
--- a/tmp/7e8cc8c2-8808-40cb-8736-622207e2642d_buggy.java
+++ b/tmp/f0deca7f-8e44-4639-ae72-b5b51605ab72_fixed.java
@@ -1,23 +1,28 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
+     * {@link Complex#NaN} is returned; otherwise Infinite and NaN values are
      * returned in the parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+        double real = this.real + rhs.getReal();
+        double imaginary = this.imaginary + rhs.getImaginary();
+        if (Double.isNaN(real) || Double.isNaN(imaginary)) {
+            return Complex.NaN;
+        } else {
+            return createComplex(real, imaginary);
+        }
     }
