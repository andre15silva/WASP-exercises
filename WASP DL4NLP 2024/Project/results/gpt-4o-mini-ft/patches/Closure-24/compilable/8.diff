diff --git a/tmp/565e3e9e-d2bb-4f14-938f-eb895ab62625_buggy.java b/tmp/0743aede-28dc-4dca-80d2-1806e80e6258_fixed.java
index 602226b..d517a0c 100644
--- a/tmp/565e3e9e-d2bb-4f14-938f-eb895ab62625_buggy.java
+++ b/tmp/0743aede-28dc-4dca-80d2-1806e80e6258_fixed.java
@@ -1,26 +1,26 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
           // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+          report(t, n, ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
         }
       }
     }
