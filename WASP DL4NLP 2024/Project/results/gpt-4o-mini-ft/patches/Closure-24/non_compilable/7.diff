diff --git a/tmp/ba74fa19-ab2a-45af-bd8b-9df21c918d3c_buggy.java b/tmp/cb7324a8-5ecc-4637-aabc-81a66cf3e637_fixed.java
index 602226b..338ae20 100644
--- a/tmp/ba74fa19-ab2a-45af-bd8b-9df21c918d3c_buggy.java
+++ b/tmp/cb7324a8-5ecc-4637-aabc-81a66cf3e637_fixed.java
@@ -1,26 +1,31 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
           // TODO(robbyw): Support using locals for private variables.
+          if (type != Token.FUNCTION
+              && type != Token.ARRAYLIT
+              && type != Token.OBJECTLIT
+          		&& !parent.isClass()) {
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
         }
       }
+    }
