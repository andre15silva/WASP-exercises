diff --git a/tmp/9ae5bf5a-a7c6-4b94-b0dc-024bece61e76_buggy.java b/tmp/c73a4742-0c6f-45f8-9daf-4b2500c6fcf6_fixed.java
index 5abdeb5..2e89d76 100644
--- a/tmp/9ae5bf5a-a7c6-4b94-b0dc-024bece61e76_buggy.java
+++ b/tmp/c73a4742-0c6f-45f8-9daf-4b2500c6fcf6_fixed.java
@@ -1,29 +1,38 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+          if (n.isName() && n.getString().equals(varName)) {
+            Node grandParent = n.getParent();
+            if (parent.isAssign() && (parent.getFirstChild() == n)) {
+              // We make a special exception when the entire cfgNode is a
+              // chain of assignments, since in that case the assignment
+              // statements will happen after the inlining of the right
+              // hand side.
+              if (!(grandParent.isCall() && !grandParent.isAssign()) &&
+                  !(grandParent.isAssign() &&
+                      grandParent.getSecondChild().isName(varName))) {
                 // Don't count lhs of top-level assignment chain
                 numUsesWithinCfgNode++;
               }
+            } else {
+              // NOTE: This is overly conservative, but don't special case
+              // var assignments that are buried in expression statements
+              // for performance reasons at this point.
+              numUsesWithinCfgNode++;
+            }
+          }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
